# Pixi is a package management tool for developers.
# Before running a task, pixi ensures that all listed dependencies are installed first.
#
# Run the tasks with `pixi run TASK`, e.g. `pixi run codegen`.
# Extra CLI argument after `pixi run TASK` are passed to the task cmd.
# Lists tasks with `pixi task list`
#
# Type `pixi shell` to enter the pixi environment.
#
# https://prefix.dev/docs/pixi/overview

[project]
name = "rerun"
authors = ["rerun.io <opensource@rerun.io>"]
channels = ["conda-forge"]
description = "Log images, point clouds, etc, and visualize them effortlessly"
homepage = "https://rerun.io"
license = "MIT OR Apache-2.0"
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]
readme = "README.md"
repository = "https://github.com/rerun-io/rerun"
version = "0.1.0"                                                              # TODO(emilk): sync version with `Cargo.toml` with help from `crates.py`

# We could use Ninja on Windows as well, but this makes the compiler setup needlessly complicated.
# Also, it's more likely that users are also going to use Visual Studio/MSBuild directly.
[target.win-64.tasks]
cpp-prepare = "cmake -G 'Visual Studio 17 2022' -B build -S . -DCMAKE_BUILD_TYPE=Debug"
cpp-test = { cmd = "export RERUN_STRICT=1 && ./build/rerun_cpp/tests/Debug/rerun_sdk_tests.exe", depends_on = [
  "cpp-build-tests",
] }

[target.linux-64.tasks]
cpp-prepare = "cmake -G 'Ninja' -B build -S . -DCMAKE_BUILD_TYPE=Debug"
cpp-test = { cmd = "export RERUN_STRICT=1 && ./build/rerun_cpp/tests/rerun_sdk_tests", depends_on = [
  "cpp-build-tests",
] }

[target.osx-64.tasks]
cpp-prepare = "cmake -G 'Ninja' -B build -S . -DCMAKE_BUILD_TYPE=Debug"
cpp-test = { cmd = "export RERUN_STRICT=1 && ./build/rerun_cpp/tests/rerun_sdk_tests", depends_on = [
  "cpp-build-tests",
] }

[target.osx-arm64.tasks]
cpp-prepare = "cmake -G 'Ninja' -B build -S . -DCMAKE_BUILD_TYPE=Debug"
cpp-test = { cmd = "export RERUN_STRICT=1 && ./build/rerun_cpp/tests/rerun_sdk_tests", depends_on = [
  "cpp-build-tests",
] }

[tasks]
# Note: extra CLI argument after `pixi run TASK` are passed to the task cmd.

# Run the codegen. Optionally pass `--profile` argument if you want.
codegen = "cargo run --package re_types_builder -- "

# Assorted linting tasks
fast-lint = "python scripts/fast_lint.py"
lint-codegen = "cargo run --package re_types_builder -- --check"
# TODO(jleibs): implement lint-cpp-all
lint-cpp-files = "clang-format --dry-run -Werror"
lint-rerun = "python scripts/lint.py"
lint-rs-files = "rustfmt --check"
lint-rs-all = "cargo fmt --check"
lint-py-fmt-check = "ruff format --check --config rerun_py/pyproject.toml"
lint-py-blackdoc = "blackdoc --check"
lint-py-mypy = "mypy --install-types --non-interactive --no-warn-unused-ignore"
lint-py-ruff = "ruff check --config rerun_py/pyproject.toml"
lint-taplo = "taplo fmt --check"
lint-typos = "typos"

py-build = "maturin develop --manifest-path rerun_py/Cargo.toml --extras=tests"
py-test = { cmd = "python -m pytest -vv rerun_py/tests/unit", depends_on = [
  "py-build",
] }

# All the cpp-* tasks can be configured with environment variables, e.g.:  RERUN_WERROR=ON  CXX=clang++
cpp-clean = "rm -rf build CMakeCache.txt CMakeFiles"
cpp-build-all = { depends_on = [
  "cpp-prepare",
  "cpp-build-tests",
  "cpp-build-examples",
  "cpp-build-doc-examples",
] }
cpp-build-tests = { cmd = "cmake --build build --config Debug --target rerun_sdk_tests", depends_on = [
  "cpp-prepare",
] }
cpp-build-examples = { cmd = "cmake --build build --config Debug --target examples", depends_on = [
  "cpp-prepare",
] }
cpp-build-doc-examples = { cmd = "cmake --build build --config Debug --target doc_examples", depends_on = [
  "cpp-prepare",
] }
cpp-test = { cmd = "export RERUN_STRICT=1 && ./build/rerun_cpp/tests/rerun_sdk_tests", depends_on = [
  "cpp-build-tests",
] }
cpp-build-and-test-all = { depends_on = ["cpp-build-all", "cpp-test"] }

[dependencies]
attrs = ">=23.1.0"
blackdoc = "0.3.8"
clang-tools = ">=15,<16"
cmake = "3.27.6"
flatbuffers = ">=23"
gitignore-parser = ">=0.1.9"
gitpython = ">=3.1.40"
just = ">=1.15.0"
maturin = ">=0.14,<0.15"
mypy = "1.4.1"
pip = ">=23"
pyarrow = "10.0.1"
pytest = ">=7"
python = ">=3.8,<3.12"
python-frontmatter = ">=1.0.0"
ruff = "0.1.2"
semver = ">=2.13,<2.14"
taplo = ">=0.8.1"
typing_extensions = ">4.5"
typos = ">=1.16.20"
wheel = ">=0.38,<0.39"

[target.linux-64.dependencies]
patchelf = ">=0.17"
clang = ">=15,<16"
c-compiler = "1.6.0.*"
cxx-compiler = "1.6.0.*"
ninja = "1.11.1"

[target.osx-64.dependencies]
clang = ">=15,<16"
c-compiler = "1.6.0.*"
cxx-compiler = "1.6.0.*"
ninja = "1.11.1"

[target.osx-arm64.dependencies]
clang = ">=15,<16"
c-compiler = "1.6.0.*"
cxx-compiler = "1.6.0.*"
ninja = "1.11.1"

[target.win-64.dependencies]
vs2022_win-64 = "19.37.32822"
