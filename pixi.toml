# Pixi is a package management tool for developers.
# Before running a task, pixi ensures that all listed dependencies are installed first.
#
# Run the tasks with `pixi run TASK`, e.g. `pixi run codegen`.
# Extra CLI argument after `pixi run TASK` are passed to the task cmd.
# Lists tasks with `pixi task list`
#
# Type `pixi shell` to enter the pixi environment.
#
# https://prefix.dev/docs/pixi/overview

[project]
name = "rerun"
authors = ["rerun.io <opensource@rerun.io>"]
channels = ["conda-forge"]
description = "Log images, point clouds, etc, and visualize them effortlessly"
homepage = "https://rerun.io"
license = "MIT OR Apache-2.0"
platforms = ["linux-64", "linux-aarch64", "osx-arm64", "osx-64", "win-64"]
readme = "README.md"
repository = "https://github.com/rerun-io/rerun"
version = "0.1.0"                                                              # TODO(emilk): sync version with `Cargo.toml` with help from `crates.py`

[environments]
cpp = ["cpp"]
taplo = ["taplo"]

[tasks]
# Note: extra CLI argument after `pixi run TASK` are passed to the task cmd.

# Run the codegen. Optionally pass `--profile` argument if you want.
codegen = "cargo run --package re_types_builder -- "

# Compile and run the rerun viewer.
#
# You can also give an argument for what to view (e.g. an .rrd file).
rerun = "cargo run --package rerun-cli --no-default-features --features native_viewer --"

# Compile and run the rerun viewer with --release.
#
# You can also give an argument for what to view (e.g. an .rrd file).
rerun-release = "cargo run --package rerun-cli --no-default-features --features native_viewer --release --"

# Compile and run the web-viewer via rerun-cli.
#
# You can also give an argument for what to view (e.g. an .rrd file).
#
# This installs the `wasm32-unknown-unknown` rust target if it's not already installed.
# (this looks heavy but takes typically below 0.1s!)
rerun-web = """
     rustup target add wasm32-unknown-unknown
  && cargo run -p re_build_web_viewer -- --debug
  && cargo run --package rerun-cli --no-default-features --features web_viewer -- --web-viewer
"""

# Compile and run the web-viewer in release mode via rerun-cli.
#
# You can also give an argument for what to view (e.g. an .rrd file).
#
# This installs the `wasm32-unknown-unknown` rust target if it's not already installed.
# (this looks heavy but takes typically below 0.1s!)
rerun-release-web = """
     rustup target add wasm32-unknown-unknown
  && cargo run -p re_build_web_viewer -- --release
  && cargo run --package rerun-cli --no-default-features --features web_viewer --release -- --web-viewer
"""

build-examples = "cargo run -q --locked -p re_build_examples --"

# Assorted linting tasks
fast-lint = "python scripts/fast_lint.py"
lint-codegen = "cargo run --package re_types_builder -- --check"
# TODO(jleibs): implement lint-cpp-all
lint-cpp-files = "clang-format --dry-run -Werror"
lint-rerun = "python scripts/lint.py"
lint-rs-files = "rustfmt --edition 2021 --check"
lint-rs-all = "cargo fmt --check"
lint-py-fmt-check = "ruff format --check --config rerun_py/pyproject.toml"
lint-py-blackdoc = "blackdoc --check"
lint-py-mypy = "mypy --install-types --non-interactive --no-warn-unused-ignore"
lint-py-ruff = "ruff format --check --config rerun_py/pyproject.toml"
lint-typos = "typos"

misc-fmt = "prettier --write '**/*.{yml,yaml,js,css,html}'"
misc-fmt-check = "prettier --check '**/*.{yml,yaml,js,css,html}'"
ruff-fmt = "ruff format --config rerun_py/pyproject.toml ."
ruff-fix = "ruff --fix --config rerun_py/pyproject.toml ."

py-build = "maturin develop --manifest-path rerun_py/Cargo.toml --extras=tests"

# Run the Python tests.
# Don't call this on CI - use `nox` to run tests on all supported Python versions instead.
py-test = { cmd = "python -m pytest -vv rerun_py/tests/unit", depends_on = [
  "py-build",
] }
py-plot-dashboard = { cmd = "python tests/python/plot_dashboard_stress/main.py", depends_on = [
  "py-build",
] }

rs-plot-dashboard = { cmd = "cargo r -p plot_dashboard_stress --release --" }

# Build the documentation search index.
# See `pixi run search-index --help` for more information.
search-index = "cargo run -p re_build_search_index --release --"

# Start a local meilisearch instance at `localhost:7700` with master key `test`.
# This should only be used for testing the search index locally.
# Files are stored in the `meilisearch` directory, so you can fully wipe it via `rm -rf meilisearch`.
meilisearch = "meilisearch --db-path=./meilisearch/data.ms --dump-dir=./meilisearch/dumps/ --snapshot-dir=./meilisearch/snapshots/ --env=development --no-analytics --experimental-reduce-indexing-memory-usage --master-key=test"

# TODO(ab): move everything back to the main tasks/dependencies once taplo supports linux-aarch64.
[feature.taplo]
platforms = ["linux-64", "osx-arm64", "osx-64", "win-64"]

[feature.taplo.tasks]
lint-taplo = "taplo fmt --check --diff"
toml-fmt = "taplo fmt"

[feature.cpp.tasks]
# All the cpp-* tasks can be configured with environment variables, e.g.: RERUN_WERROR=ON CXX=clang++
cpp-prepare-release = "cmake -G 'Ninja' -B build/release -S . -DCMAKE_BUILD_TYPE=Release"
cpp-prepare = "cmake -G 'Ninja' -B build/debug -S . -DCMAKE_BUILD_TYPE=Debug"
cpp-build-all = { cmd = "cmake --build build/debug --config Debug --target all", depends_on = [
  "cpp-prepare",
] }
cpp-clean = "rm -rf build CMakeCache.txt CMakeFiles"
cpp-build-tests = { cmd = "cmake --build build/debug --config Debug --target rerun_sdk_tests", depends_on = [
  "cpp-prepare",
] }
cpp-build-roundtrips = { cmd = "cmake --build build/debug --config Debug --target roundtrips", depends_on = [
  "cpp-prepare",
] }
cpp-build-examples = { cmd = "cmake --build build/debug --config Debug --target examples", depends_on = [
  "cpp-prepare",
] }
cpp-build-snippets = { cmd = "cmake --build build/debug --config Debug --target snippets", depends_on = [
  "cpp-prepare",
] }
cpp-build-log-benchmark = { cmd = "cmake --build build/release --config Release --target log_benchmark", depends_on = [
  "cpp-prepare-release",
] }
cpp-build-plot-dashboard-stress = { cmd = "cmake --build build/release --config Release --target plot_dashboard_stress", depends_on = [
  "cpp-prepare-release",
] }
cpp-test = { cmd = "export RERUN_STRICT=1 && ./build/debug/rerun_cpp/tests/rerun_sdk_tests", depends_on = [
  "cpp-build-tests",
] }
cpp-log-benchmark = { cmd = "export RERUN_STRICT=1 && ./build/release/tests/cpp/log_benchmark/log_benchmark", depends_on = [
  "cpp-build-log-benchmark",
] }
cpp-plot-dashboard = { cmd = "export RERUN_STRICT=1 && ./build/release/tests/cpp/plot_dashboard_stress/plot_dashboard_stress", depends_on = [
  "cpp-build-plot-dashboard-stress",
] }
cpp-build-and-test-all = { depends_on = ["cpp-build-all", "cpp-test"] }
cpp-docs = { cmd = "doxygen docs/Doxyfile && echo '***************\nSuccess!\nOpen ./rerun_cpp/docs/html/index.html in your browser.'", cwd = "rerun_cpp" }

[feature.cpp.target.win-64.tasks]
cpp-prepare-msvc = "cmake -G 'Visual Studio 17 2022' -B build-msvc -S ."


[dependencies]
# IMPORTANT: do not add any dependencies here that may break CI. All dependencies should be available on all supported
# platforms (including linux-aarch64), or added conditionally.
#
# Hints:
# - To check a given package, go to https://prefix.dev/channels/conda-forge/packages/XXXX. It should support Windows,
#   x86_64 and aarch64 macOS architectures, and x86_64 and aarch64 Linux architectures.
# - Some pure Python packages may wrongly be tagged as platform-specific. In this case, use `[pypi-dependencies]`
#   instead (e.g. `nox`).
# - If a package is only used for a very specific CI job on a specific target, include it under that target (e.g.
#   `meilisearch`).
# - Last resort, use a feature to conditionally include a dependency (e.g. `taplo`).

attrs = ">=23.1.0"
blackdoc = "0.3.8"
clang-tools = "16.0.6"       # clang-format
cmake = "3.27.6"
flatbuffers = ">=23"
gitignore-parser = ">=0.1.9"
gitpython = ">=3.1.40"
just = ">=1.15.0"
maturin = "1.4.0"
mypy = "1.8.0"
numpy = ">=1.23,<2"
pip = ">=23"
pyarrow = "14.0.2"
pytest = ">=7"
python = "=3.11"             # We use the latest Python version here, so we get the latest mypy etc, EXCEPT 3.12 is too new for some of our examples. We run our CI tests on ALL supported versions though.
ruff = "0.2.2"
semver = ">=2.13,<2.14"
typing_extensions = ">4.5"
typos = ">=1.16.20"
wheel = ">=0.38,<0.39"
ninja = "1.11.1"
# Make sure to use a version that is compatible with
# the theme we're using, see https://github.com/jothepro/doxygen-awesome-css/blob/v2.2.1/README.md
doxygen = "1.9.7.*"
binaryen = "117.*"   # for `wasm-opt`
prettier = "2.8.8.*"
tomlkit = "0.12.3.*"

[pypi-dependencies]
nox = ">=2024.3.2" # the conda-forge package is (wrongly) tagged as platform-specific

[target.linux-64.dependencies]
patchelf = ">=0.17"
meilisearch = "1.5.1.*" # not available for linux-aarch64

[feature.taplo.dependencies]
taplo = "=0.8.1" # not (yet?) available for linux-aarch64

[feature.cpp.target.linux-64.dependencies]
clang = "16.0.6"
ninja = "1.11.1"
c-compiler = "1.6.0.*"
cxx-compiler = "1.6.0.*"

[feature.cpp.target.osx-64.dependencies]
clang = "16.0.6"
ninja = "1.11.1"
c-compiler = "1.6.0.*"
cxx-compiler = "1.6.0.*"

[feature.cpp.target.osx-arm64.dependencies]
clang = "16.0.6"
ninja = "1.11.1"
c-compiler = "1.6.0.*"
cxx-compiler = "1.6.0.*"

[feature.cpp.target.win-64.dependencies]
vs2022_win-64 = "19.37.32822"
