namespace fbs.attributes;

/// Mandatory attribute that applies to all kinds of objects: structs, enums, unions and even the
/// fields within.
///
/// This defines a stable order between objects of the same kind, e.g. the order in which fields of a
/// struct should be laid out when generating code.
/// This is always required since flatbuffers works entirely with unordered maps internally, which
/// would result in flaky code generation.
///
/// In unions, this effectively defines the arrow tag of each variant, since the tag depends on the
/// fields's order in the datatype!
///
/// NOTE: We do not use flatbuffers' builtin `id` attribute as it only works on `table`s, whereas we
/// need a stable order for all kinds of things.
attribute "order";

/// This attribute enables _semantic_ transparency.
///
/// * When applied to a table's field that is itself a table, this removes the extra table
///   layer during the semantic pass, leaving just the inner field's type in its stead.
///
/// * When applied to a table object, this indicates that the object is only ever used as a
///   field type, and thus should not generate any standalone code for itself.
///
/// Since all of this is done during the semantic pass, none of the other passes will ever know
/// that the extra layer ever existed in the first place.
///
/// This allows to bypass all of Flatbuffers artificial limitations (have to wrap scalars in a
/// table when defining a union, cannot put arrays (as opposed to vectors) into tables, etc) that
/// do not apply in our case.
attribute "transparent";
