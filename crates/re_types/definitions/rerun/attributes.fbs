namespace rerun.attributes;

/// Marks a component as required, which is likely to impact the generated code in
/// backend-specific ways.
///
/// Only applies to the fields of an archetype.
attribute "attr.rerun.component_required";

/// Marks a component as recommended, which is likely to impact the generated code in
/// backend-specific ways.
///
/// Only applies to the fields of an archetype.
attribute "attr.rerun.component_recommended";

/// Marks a component as optional, which is likely to impact the generated code in
/// backend-specific ways.
///
/// Only applies to the fields of an archetype.
attribute "attr.rerun.component_optional";

/// Override the type of a field.
///
/// The only permitted value is "float16", which can only be used to override the type of a ushort.
///
/// For lists this will apply to the inner element.
attribute "attr.rerun.override_type";

/// Set the scope of the type
///
/// This is used for example to scope blueprint types.
attribute "attr.rerun.scope";

/// Marks something as deprecated followed by a (mandatory!) migration note.
///
/// If specified on an object (struct/enum/union), it becomes deprecated such
/// that using the object should emit a warning in all target languages.
/// Furthermore, documentation will mention that the object is deprecated and display
/// the specified migration note.
///
/// TODO(andreas): This is not yet supported on fields.
attribute "attr.rerun.deprecated";
