include "arrow/attributes.fbs";
include "fbs/attributes.fbs";

include "./rotation3d.fbs";
include "./scale3d.fbs";
include "./vec3d.fbs";

namespace rerun.datatypes;

// ---

/// Representation of an affine transform via separate translation, rotation & scale.
table TranslationRotationScale3D (
  "attr.rust.derive": "Copy, PartialEq"
) {
  /// 3D translation vector, applied last.
  //
  // NOTE: Nullable rather than defaulting to an identity-like value because we want to be able
  // to differentiate between no value vs. default value in the backend.
  translation: rerun.datatypes.Vec3D (nullable, order: 100);

  /// 3D rotation, applied second.
  //
  // NOTE: Nullable rather than defaulting to an identity-like value because we want to be able
  // to differentiate between no value vs. default value in the backend.
  rotation: rerun.datatypes.Rotation3D (nullable, order: 200);

  /// 3D scale, applied first.
  //
  // NOTE: Nullable rather than defaulting to an identity-like value because we want to be able
  // to differentiate between no value vs. default value in the backend.
  scale: rerun.datatypes.Scale3D (nullable, order: 300);

  // TODO(#2641): make this field non-nullable when default values are supported
  /// If true, this transform is from the parent space to the space where the transform was logged.
  ///
  /// If false (default), the transform maps from this space to its parent,
  /// i.e. the translation is the position in the parent space.
  from_parent: bool = false (order: 400);
}
