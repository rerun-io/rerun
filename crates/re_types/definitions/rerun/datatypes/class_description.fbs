include "arrow/attributes.fbs";
include "fbs/attributes.fbs";

include "rerun/datatypes.fbs";

namespace rerun.datatypes;

// ---

/// The description of a semantic Class.
///
/// If an entity is annotated with a corresponding `ClassId`, Rerun will use
/// the attached `AnnotationInfo` to derive labels and colors.
///
/// Keypoints within an annotation class can similarly be annotated with a
/// `KeypointId` in which case we should defer to the label and color for the
/// `AnnotationInfo` specifically associated with the Keypoint.
///
/// Keypoints within the class can also be decorated with skeletal edges.
/// Keypoint-connections are pairs of `KeypointId`s. If an edge is
/// defined, and both keypoints exist within the instance of the class, then the
/// keypoints should be connected with an edge. The edge should be labeled and
/// colored as described by the class's `AnnotationInfo`.
///
/// \py Note that a `ClassDescription` can be directly logged using `rerun.log`.
/// \py This is equivalent to logging a `rerun.AnnotationContext` containing
/// \py a single `ClassDescription`.
table ClassDescription (
  "attr.python.aliases": "datatypes.AnnotationInfoLike",
  "attr.rust.derive": "Default, Eq, PartialEq"
) {
  /// The `AnnotationInfo` for the class.
  info: rerun.datatypes.AnnotationInfo (order: 100);

  /// The `AnnotationInfo` for all of the keypoints.
  // TODO(jleibs) this could be nullable rather than forcing an empty list
  // don't null for now so we match the legacy schema
  keypoint_annotations: [rerun.datatypes.AnnotationInfo] (order: 200);

  /// The connections between keypoints.
  // TODO(jleibs) this could be nullable rather than forcing an empty list
  // don't null for now so we match the legacy schema
  keypoint_connections: [rerun.datatypes.KeypointPair] (order: 300);
}
