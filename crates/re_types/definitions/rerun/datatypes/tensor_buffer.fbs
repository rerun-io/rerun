include "arrow/attributes.fbs";
include "fbs/attributes.fbs";

namespace rerun.datatypes;

// ---

table U8Buffer (order: 100, transparent) {
  data: [ubyte] (order: 100);
}

table U16Buffer(order: 100, transparent) {
  data: [ushort] (order: 100);
}

table U32Buffer(order: 100, transparent) {
  data: [uint] (order: 100);
}

table U64Buffer(order: 100, transparent) {
  data: [ulong] (order: 100);
}

table I8Buffer(order: 100, transparent) {
  data: [byte] (order: 100);
}

table I16Buffer(order: 100, transparent) {
  data: [short] (order: 100);
}

table I32Buffer(order: 100, transparent) {
  data: [int] (order: 100);
}

table I64Buffer(order: 100, transparent) {
  data: [long] (order: 100);
}

table F16Buffer(order: 100, transparent) {
  data: [ushort] (order: 100, "attr.rerun.override_type": "float16");
}

table F32Buffer(order: 100, transparent) {
  data: [float] (order: 100);
}

table F64Buffer(order: 100, transparent) {
  data: [double] (order: 100);
}

table JPEGBuffer(order: 100, transparent) {
  data: [ubyte] (order: 100);
}


/// The underlying storage for a `Tensor`.
///
/// Tensor elements are stored in a contiguous buffer of a single type.
union TensorBuffer (
  order: 100,
  "attr.rust.derive_only": "Clone, PartialEq"
) {
  U8: U8Buffer (transparent, order:100),
  U16: U16Buffer (transparent, order:200),
  U32: U32Buffer (transparent, order:300),
  U64: U64Buffer (transparent, order:400),
  I8: I8Buffer (transparent, order:500),
  I16: I16Buffer (transparent, order:600),
  I32: I32Buffer (transparent, order:700),
  I64: I64Buffer (transparent, order:800),
  F16: F16Buffer (transparent, order:900),
  F32: F32Buffer (transparent, order:1000),
  F64: F64Buffer (transparent, order:1200),
  JPEG: JPEGBuffer (transparent, order:1300),
}
