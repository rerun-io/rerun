include "arrow/attributes.fbs";
include "fbs/attributes.fbs";
include "python/attributes.fbs";
include "rust/attributes.fbs";

namespace rerun.datatypes;

// ---

/// A 4x4 Matrix.
///
/// Matrices in Rerun are stored as flat list of coefficients in column-major order:
/// ```text
///            column 0         column 1         column 2         column 3
///        --------------------------------------------------------------------
/// row 0 | flat_columns[0]  flat_columns[4]  flat_columns[8]  flat_columns[12]
/// row 1 | flat_columns[1]  flat_columns[5]  flat_columns[9]  flat_columns[13]
/// row 2 | flat_columns[2]  flat_columns[6]  flat_columns[10] flat_columns[14]
/// row 3 | flat_columns[3]  flat_columns[7]  flat_columns[11] flat_columns[15]
/// ```
///
/// \py However, construction is done from a list of rows, which follows NumPy's convention:
/// \py ```python
/// \py np.testing.assert_array_equal(
/// \py     rr.datatypes.Mat4x4([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).flat_columns,
/// \py     np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16], dtype=np.float32),
/// \py )
/// \py np.testing.assert_array_equal(
/// \py     rr.datatypes.Mat4x4([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]).flat_columns,
/// \py     np.array([1, 5, 9, 13, 2, 6, 10, 14, 3, 7, 11, 15, 4, 8, 12, 16], dtype=np.float32),
/// \py )
/// \py ```
/// \py If you want to construct a matrix from a list of columns instead, use the named `columns` parameter:
/// \py ```python
/// \py np.testing.assert_array_equal(
/// \py     rr.datatypes.Mat4x4(columns=[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]).flat_columns,
/// \py     np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype=np.float32),
/// \py )
/// \py np.testing.assert_array_equal(
/// \py     rr.datatypes.Mat4x4(columns=[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]).flat_columns,
/// \py     np.array([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16], dtype=np.float32),
/// \py )
/// \py ```
struct Mat4x4 (
  "attr.arrow.transparent",
  "attr.python.aliases": "npt.ArrayLike",
  "attr.rust.derive": "Copy, PartialEq, PartialOrd",
  "attr.rust.tuple_struct"
) {
  /// Flat list of matrix coefficients in column-major order.
  flat_columns: [float32: 16] (order: 100);
}
