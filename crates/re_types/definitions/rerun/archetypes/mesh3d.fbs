include "fbs/attributes.fbs";

include "rerun/datatypes.fbs";
include "rerun/components.fbs";

namespace rerun.archetypes;

// ---

/// A 3D triangle mesh as specified by its per-mesh and per-vertex properties.
///
/// \py Example
/// \py -------
/// \py
/// \py Simple:
/// \py ```python
/// \py \include:../../../../../docs/code-examples/mesh3d_indexed.py
/// \py ```
/// \py
/// \py Partial updates:
/// \py ```python
/// \py \include:../../../../../docs/code-examples/mesh3d_partial_updates.py
/// \py ```
///
/// \rs ## Example
/// \rs
/// \rs Simple:
/// \rs ```ignore
/// \rs \include:../../../../../docs/code-examples/mesh3d_indexed.rs
/// \rs ```
/// \rs
/// \rs Partial updates:
/// \rs ```ignore
/// \rs \include:../../../../../docs/code-examples/mesh3d_partial_updates.rs
/// \rs ```
///
/// \cpp ## Example
/// \cpp
/// \cpp Simple:
/// \cpp ```
/// \cpp \include:../../../../../docs/code-examples/mesh3d_indexed.cpp
/// \cpp ```
table Mesh3D (
  "attr.rust.derive": "PartialEq",
  order: 100
) {
  // --- Required ---

  /// The positions of each vertex.
  ///
  /// If no `indices` are specified, then each triplet of positions is interpreted as a triangle.
  vertex_positions: [rerun.components.Position3D] ("attr.rerun.component_required", order: 1000);

  // --- Recommended ---

  /// Optional properties for the mesh as a whole (including indexed drawing).
  //
  // NOTE: We cannot have triangle indices here as that would break our instance key rules (either 0, 1 or N).
  mesh_properties: rerun.components.MeshProperties ("attr.rerun.component_recommended", nullable, order: 2000);

  /// An optional normal for each vertex.
  ///
  /// If specified, this must have as many elements as `vertex_positions`.
  vertex_normals: [rerun.components.Vector3D] ("attr.rerun.component_optional", nullable, order: 3000);

  // --- Optional ---

  /// An optional color for each vertex.
  vertex_colors: [rerun.components.Color] ("attr.rerun.component_optional", nullable, order: 3100);

  /// Optional material properties for the mesh as a whole.
  mesh_material: rerun.components.Material ("attr.rerun.component_optional", nullable, order: 3200);

  /// Optional class Ids for the vertices.
  ///
  /// The class ID provides colors and labels if not specified explicitly.
  class_ids: [rerun.components.ClassId] ("attr.rerun.component_optional", nullable, order: 3300);

  /// Unique identifiers for each individual vertex in the batch.
  instance_keys: [rerun.components.InstanceKey] ("attr.rerun.component_optional", nullable, order: 3400);
}
