include "fbs/attributes.fbs";

include "rerun/datatypes.fbs";
include "rerun/components.fbs";

namespace rerun.archetypes;

// ---

/// A 3D triangle mesh as specified by its per-mesh and per-vertex properties.
///
/// \py See also [`Asset3D`][rerun.archetypes.Asset3D].
/// \rs See also [`Asset3D`][crate::archetypes::Asset3D].
///
/// \example mesh3d_indexed title="Simple indexed 3D mesh" image="https://static.rerun.io/mesh3d_simple/e1e5fd97265daf0d0bc7b782d862f19086fd6975/1200w.png"
/// \example mesh3d_partial_updates !api title="3D mesh with partial updates" image="https://static.rerun.io/mesh3d_partial_updates/a11e4accb0257dcd9531867b7e1d6fd5e3bee5c3/1200w.png"
table Mesh3D (
  "attr.rust.derive": "PartialEq"
) {
  // --- Required ---

  /// The positions of each vertex.
  ///
  /// If no `indices` are specified, then each triplet of positions is interpreted as a triangle.
  vertex_positions: [rerun.components.Position3D] ("attr.rerun.component_required", order: 1000);

  // --- Recommended ---

  /// Optional properties for the mesh as a whole (including indexed drawing).
  //
  // NOTE: We cannot have triangle indices here as that would break our instance key rules (either 0, 1 or N).
  mesh_properties: rerun.components.MeshProperties ("attr.rerun.component_recommended", nullable, order: 2000);

  /// An optional normal for each vertex.
  ///
  /// If specified, this must have as many elements as `vertex_positions`.
  vertex_normals: [rerun.components.Vector3D] ("attr.rerun.component_recommended", nullable, order: 2100);

  // --- Optional ---

  /// An optional color for each vertex.
  vertex_colors: [rerun.components.Color] ("attr.rerun.component_optional", nullable, order: 3100);

  /// An optional uv texture coordinate for each vertex.
  vertex_texcoords: [rerun.components.Texcoord2D] ("attr.rerun.component_optional", nullable, order: 3200);

  /// Optional material properties for the mesh as a whole.
  mesh_material: rerun.components.Material ("attr.rerun.component_optional", nullable, order: 3300);

  /// Optional albedo texture.
  ///
  /// Used with `vertex_texcoords` on `Mesh3D`.
  /// Currently supports only sRGB(A) textures, ignoring alpha.
  /// (meaning that the tensor must have 3 or 4 channels and use the `u8` format)
  albedo_texture: rerun.components.TensorData ("attr.rerun.component_optional", nullable, order: 3400);

  /// Optional class Ids for the vertices.
  ///
  /// The class ID provides colors and labels if not specified explicitly.
  class_ids: [rerun.components.ClassId] ("attr.rerun.component_optional", nullable, order: 3500);
}
