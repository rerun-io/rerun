include "fbs/attributes.fbs";

include "rerun/datatypes.fbs";
include "rerun/components.fbs";

namespace rerun.archetypes;


/// The `AnnotationContext` provides additional information on how to display entities.
///
/// Entities can use `ClassId`s and `KeypointId`s to provide annotations, and
/// the labels and colors will be looked up in the appropriate
/// `AnnotationContext`. We use the *first* annotation context we find in the
/// path-hierarchy when searching up through the ancestors of a given entity
/// path.
///
/// \py Example
/// \py -------
/// \py
/// \py ```python
/// \py \include:../../../../../docs/code-examples/annotation_context_rects_v2.py
/// \py ```
///
/// \rs ## Example
/// \rs
/// \rs ```ignore
/// \rs \include:../../../../../docs/code-examples/annotation_context_rects.rs
/// \rs ```
///
/// \cpp ## Example
/// \cpp
/// \cpp ```
//  \cpp TODO(#2786): implement Rect2D cpp example and link it here instead.
/// \cpp \include:../../../../../docs/code-examples/annotation_context_arrows_v2.cpp
/// \cpp ```
table AnnotationContext (
  "attr.rust.derive": "Eq, PartialEq",
  order: 100
) {
  context: rerun.components.AnnotationContext ("attr.rerun.component_required", required, order: 1000);
}
