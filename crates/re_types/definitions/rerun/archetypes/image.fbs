include "fbs/attributes.fbs";

include "rerun/datatypes.fbs";
include "rerun/components.fbs";

namespace rerun.archetypes;


/// A monochrome or color image.
///
/// The order of dimensions in the underlying `TensorData` follows the typical
/// row-major, interleaved-pixel image format. Additionally, Rerun orders the
/// `TensorDimension`s within the shape description from outer-most to inner-most.
///
/// As such, the shape of the `TensorData` must be mappable to:
/// - A `HxW` tensor, treated as a grayscale image.
/// - A `HxWx3` tensor, treated as an RGB image.
/// - A `HxWx4` tensor, treated as an RGBA image.
///
/// Leading and trailing unit-dimensions are ignored, so that
/// `1x480x640x3x1` is treated as a `480x640x3` RGB image.
///
/// Rerun also supports compressed image encoded as JPEG, N12, and YUY2.
/// Using these formats can save a lot of bandwidth and memory.
/// \py To compress an image, use [`rerun.Image.compress`][].
/// \py To pass in an already encoded image, use  [`rerun.ImageEncoded`][].
/// \rs See [`crate::components::TensorData`] for more.
/// \cpp See [`rerun::datatypes::TensorBuffer`] for more.
///
/// \cpp Since the underlying `rerun::datatypes::TensorData` uses `rerun::Collection` internally,
/// \cpp data can be passed in without a copy from raw pointers or by reference from `std::vector`/`std::array`/c-arrays.
/// \cpp If needed, this "borrow-behavior" can be extended by defining your own `rerun::CollectionAdapter`.
///
/// \example archetypes/image_simple image="https://static.rerun.io/image_simple/06ba7f8582acc1ffb42a7fd0006fad7816f3e4e4/1200w.png"
table Image (
  "attr.rust.derive": "PartialEq",
  "attr.cpp.no_field_ctors",
  "attr.docs.category": "Image & tensor",
  "attr.docs.view_types": "Spatial2DView, Spatial3DView: if logged under a projection"
) {
  // --- Required ---

  /// The image data. Should always be a rank-2 or rank-3 tensor.
  data: rerun.components.TensorData ("attr.rerun.component_required", order: 1000);

  // --- Optional ---

  /// Opacity of the image, useful for layering several images.
  ///
  /// Defaults to 1.0 (fully opaque).
  opacity: rerun.components.Opacity ("attr.rerun.component_optional", nullable, order: 3000);

  /// An optional floating point value that specifies the 2D drawing order.
  ///
  /// Objects with higher values are drawn on top of those with lower values.
  draw_order: rerun.components.DrawOrder ("attr.rerun.component_optional", nullable, order: 3100);
}
