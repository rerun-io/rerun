use crate::{components, view_coordinates::ViewDir};

use super::ViewCoordinates;

macro_rules! define_coordinates {
    ($name:ident => ($x:ident, $y:ident, $z:ident) ) => {
        pub const $name: Self = Self {
            coordinates: components::ViewCoordinates::new(ViewDir::$x, ViewDir::$y, ViewDir::$z),
        };
    };
}

impl ViewCoordinates {
    // <BEGIN_GENERATED:definitions>
    // This section is generated by running `scripts/generate_view_coordinate_defs.py --rust`
    define_coordinates!(ULF => (Up, Left, Forward));
    define_coordinates!(UFL => (Up, Forward, Left));
    define_coordinates!(LUF => (Left, Up, Forward));
    define_coordinates!(LFU => (Left, Forward, Up));
    define_coordinates!(FUL => (Forward, Up, Left));
    define_coordinates!(FLU => (Forward, Left, Up));
    define_coordinates!(ULB => (Up, Left, Back));
    define_coordinates!(UBL => (Up, Back, Left));
    define_coordinates!(LUB => (Left, Up, Back));
    define_coordinates!(LBU => (Left, Back, Up));
    define_coordinates!(BUL => (Back, Up, Left));
    define_coordinates!(BLU => (Back, Left, Up));
    define_coordinates!(URF => (Up, Right, Forward));
    define_coordinates!(UFR => (Up, Forward, Right));
    define_coordinates!(RUF => (Right, Up, Forward));
    define_coordinates!(RFU => (Right, Forward, Up));
    define_coordinates!(FUR => (Forward, Up, Right));
    define_coordinates!(FRU => (Forward, Right, Up));
    define_coordinates!(URB => (Up, Right, Back));
    define_coordinates!(UBR => (Up, Back, Right));
    define_coordinates!(RUB => (Right, Up, Back));
    define_coordinates!(RBU => (Right, Back, Up));
    define_coordinates!(BUR => (Back, Up, Right));
    define_coordinates!(BRU => (Back, Right, Up));
    define_coordinates!(DLF => (Down, Left, Forward));
    define_coordinates!(DFL => (Down, Forward, Left));
    define_coordinates!(LDF => (Left, Down, Forward));
    define_coordinates!(LFD => (Left, Forward, Down));
    define_coordinates!(FDL => (Forward, Down, Left));
    define_coordinates!(FLD => (Forward, Left, Down));
    define_coordinates!(DLB => (Down, Left, Back));
    define_coordinates!(DBL => (Down, Back, Left));
    define_coordinates!(LDB => (Left, Down, Back));
    define_coordinates!(LBD => (Left, Back, Down));
    define_coordinates!(BDL => (Back, Down, Left));
    define_coordinates!(BLD => (Back, Left, Down));
    define_coordinates!(DRF => (Down, Right, Forward));
    define_coordinates!(DFR => (Down, Forward, Right));
    define_coordinates!(RDF => (Right, Down, Forward));
    define_coordinates!(RFD => (Right, Forward, Down));
    define_coordinates!(FDR => (Forward, Down, Right));
    define_coordinates!(FRD => (Forward, Right, Down));
    define_coordinates!(DRB => (Down, Right, Back));
    define_coordinates!(DBR => (Down, Back, Right));
    define_coordinates!(RDB => (Right, Down, Back));
    define_coordinates!(RBD => (Right, Back, Down));
    define_coordinates!(BDR => (Back, Down, Right));
    define_coordinates!(BRD => (Back, Right, Down));
    define_coordinates!(RIGHT_HAND_X_UP => (Up, Right, Forward));
    define_coordinates!(RIGHT_HAND_X_DOWN => (Down, Right, Back));
    define_coordinates!(RIGHT_HAND_Y_UP => (Right, Up, Back));
    define_coordinates!(RIGHT_HAND_Y_DOWN => (Right, Down, Forward));
    define_coordinates!(RIGHT_HAND_Z_UP => (Right, Forward, Up));
    define_coordinates!(RIGHT_HAND_Z_DOWN => (Right, Back, Down));
    define_coordinates!(LEFT_HAND_X_UP => (Up, Right, Back));
    define_coordinates!(LEFT_HAND_X_DOWN => (Down, Right, Forward));
    define_coordinates!(LEFT_HAND_Y_UP => (Right, Up, Forward));
    define_coordinates!(LEFT_HAND_Y_DOWN => (Right, Down, Back));
    define_coordinates!(LEFT_HAND_Z_UP => (Right, Back, Up));
    define_coordinates!(LEFT_HAND_Z_DOWN => (Right, Forward, Down));
    // <END_GENERATED:definitions>
}
