// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer1 {
    pub fuzz1001: crate::components::AffixFuzzer1,
    pub fuzz1002: crate::components::AffixFuzzer2,
    pub fuzz1003: crate::components::AffixFuzzer3,
    pub fuzz1004: crate::components::AffixFuzzer4,
    pub fuzz1005: crate::components::AffixFuzzer5,
    pub fuzz1006: crate::components::AffixFuzzer6,
    pub fuzz1007: crate::components::AffixFuzzer7,
    pub fuzz1008: crate::components::AffixFuzzer8,
    pub fuzz1009: crate::components::AffixFuzzer9,
    pub fuzz1010: crate::components::AffixFuzzer10,
    pub fuzz1011: crate::components::AffixFuzzer11,
    pub fuzz1012: crate::components::AffixFuzzer12,
    pub fuzz1013: crate::components::AffixFuzzer13,
    pub fuzz1101: Vec<crate::components::AffixFuzzer1>,
    pub fuzz1102: Vec<crate::components::AffixFuzzer2>,
    pub fuzz1103: Vec<crate::components::AffixFuzzer3>,
    pub fuzz1104: Vec<crate::components::AffixFuzzer4>,
    pub fuzz1105: Vec<crate::components::AffixFuzzer5>,
    pub fuzz1106: Vec<crate::components::AffixFuzzer6>,
    pub fuzz1107: Vec<crate::components::AffixFuzzer7>,
    pub fuzz1108: Vec<crate::components::AffixFuzzer8>,
    pub fuzz1109: Vec<crate::components::AffixFuzzer9>,
    pub fuzz1110: Vec<crate::components::AffixFuzzer10>,
    pub fuzz1111: Vec<crate::components::AffixFuzzer11>,
    pub fuzz1112: Vec<crate::components::AffixFuzzer12>,
    pub fuzz1113: Vec<crate::components::AffixFuzzer13>,
    pub fuzz2001: crate::components::AffixFuzzer1,
    pub fuzz2002: crate::components::AffixFuzzer2,
    pub fuzz2003: crate::components::AffixFuzzer3,
    pub fuzz2004: crate::components::AffixFuzzer4,
    pub fuzz2005: crate::components::AffixFuzzer5,
    pub fuzz2006: crate::components::AffixFuzzer6,
    pub fuzz2007: crate::components::AffixFuzzer7,
    pub fuzz2008: crate::components::AffixFuzzer8,
    pub fuzz2009: crate::components::AffixFuzzer9,
    pub fuzz2010: crate::components::AffixFuzzer10,
    pub fuzz2011: crate::components::AffixFuzzer11,
    pub fuzz2012: crate::components::AffixFuzzer12,
    pub fuzz2013: crate::components::AffixFuzzer13,
    pub fuzz2101: Vec<crate::components::AffixFuzzer1>,
    pub fuzz2102: Vec<crate::components::AffixFuzzer2>,
    pub fuzz2103: Vec<crate::components::AffixFuzzer3>,
    pub fuzz2104: Vec<crate::components::AffixFuzzer4>,
    pub fuzz2105: Vec<crate::components::AffixFuzzer5>,
    pub fuzz2106: Vec<crate::components::AffixFuzzer6>,
    pub fuzz2107: Vec<crate::components::AffixFuzzer7>,
    pub fuzz2108: Vec<crate::components::AffixFuzzer8>,
    pub fuzz2109: Vec<crate::components::AffixFuzzer9>,
    pub fuzz2110: Vec<crate::components::AffixFuzzer10>,
    pub fuzz2111: Vec<crate::components::AffixFuzzer11>,
    pub fuzz2112: Vec<crate::components::AffixFuzzer12>,
    pub fuzz2113: Vec<crate::components::AffixFuzzer13>,
}

impl AffixFuzzer1 {
    pub const REQUIRED_COMPONENTS: [crate::ComponentName; 26usize] = [
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
    ];

    pub const RECOMMENDED_COMPONENTS: [crate::ComponentName; 0usize] = [];

    pub const OPTIONAL_COMPONENTS: [crate::ComponentName; 26usize] = [
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
    ];

    pub const ALL_COMPONENTS: [crate::ComponentName; 52usize] = [
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12"),
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13"),
    ];
}

impl crate::Archetype for AffixFuzzer1 {
    #[inline]
    fn name() -> crate::ArchetypeName {
        crate::ArchetypeName::Borrowed("rerun.testing.archetypes.AffixFuzzer1")
    }

    #[inline]
    fn required_components() -> Vec<crate::ComponentName> {
        Self::REQUIRED_COMPONENTS.to_vec()
    }

    #[inline]
    fn recommended_components() -> Vec<crate::ComponentName> {
        Self::RECOMMENDED_COMPONENTS.to_vec()
    }

    #[inline]
    fn optional_components() -> Vec<crate::ComponentName> {
        Self::OPTIONAL_COMPONENTS.to_vec()
    }

    #[inline]
    fn try_to_arrow(
        &self,
    ) -> crate::SerializationResult<
        Vec<(::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>)>,
    > {
        use crate::Component as _;
        Ok([
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer1>::try_to_arrow([&self.fuzz1001], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer1".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer1".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1001", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer2>::try_to_arrow([&self.fuzz1002], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer2".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer2".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1002", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer3>::try_to_arrow([&self.fuzz1003], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer3".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer3".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1003", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer4>::try_to_arrow([&self.fuzz1004], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer4".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer4".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1004", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer5>::try_to_arrow([&self.fuzz1005], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer5".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer5".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1005", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer6>::try_to_arrow([&self.fuzz1006], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer6".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer6".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1006", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer7>::try_to_arrow([&self.fuzz1007], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer7".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1007", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer8>::try_to_arrow([&self.fuzz1008], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer8".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer8".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1008", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer9>::try_to_arrow([&self.fuzz1009], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer9".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer9".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1009", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer10>::try_to_arrow([&self.fuzz1010], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer10".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer10".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1010", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer11>::try_to_arrow([&self.fuzz1011], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer11".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1011", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer12>::try_to_arrow([&self.fuzz1012], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer12".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1012", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer13>::try_to_arrow([&self.fuzz1013], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer13".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1013", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer1>::try_to_arrow(self.fuzz1101.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer1".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer1".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1101", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer2>::try_to_arrow(self.fuzz1102.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer2".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer2".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1102", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer3>::try_to_arrow(self.fuzz1103.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer3".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer3".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1103", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer4>::try_to_arrow(self.fuzz1104.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer4".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer4".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1104", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer5>::try_to_arrow(self.fuzz1105.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer5".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer5".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1105", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer6>::try_to_arrow(self.fuzz1106.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer6".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer6".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1106", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer7>::try_to_arrow(self.fuzz1107.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer7".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1107", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer8>::try_to_arrow(self.fuzz1108.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer8".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer8".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1108", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer9>::try_to_arrow(self.fuzz1109.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer9".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer9".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1109", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer10>::try_to_arrow(
                        self.fuzz1110.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer10".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer10".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1110", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer11>::try_to_arrow(
                        self.fuzz1111.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer11".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1111", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer12>::try_to_arrow(
                        self.fuzz1112.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer12".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1112", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer13>::try_to_arrow(
                        self.fuzz1113.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer13".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1113", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer1>::try_to_arrow([&self.fuzz2001], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer1".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer1".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2001", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer2>::try_to_arrow([&self.fuzz2002], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer2".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer2".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2002", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer3>::try_to_arrow([&self.fuzz2003], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer3".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer3".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2003", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer4>::try_to_arrow([&self.fuzz2004], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer4".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer4".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2004", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer5>::try_to_arrow([&self.fuzz2005], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer5".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer5".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2005", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer6>::try_to_arrow([&self.fuzz2006], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer6".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer6".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2006", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer7>::try_to_arrow([&self.fuzz2007], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer7".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2007", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer8>::try_to_arrow([&self.fuzz2008], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer8".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer8".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2008", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer9>::try_to_arrow([&self.fuzz2009], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer9".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer9".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2009", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer10>::try_to_arrow([&self.fuzz2010], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer10".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer10".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2010", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer11>::try_to_arrow([&self.fuzz2011], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer11".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2011", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer12>::try_to_arrow([&self.fuzz2012], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer12".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2012", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer13>::try_to_arrow([&self.fuzz2013], None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer13".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2013", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer1>::try_to_arrow(self.fuzz2101.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer1".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer1".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2101", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer2>::try_to_arrow(self.fuzz2102.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer2".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer2".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2102", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer3>::try_to_arrow(self.fuzz2103.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer3".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer3".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2103", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer4>::try_to_arrow(self.fuzz2104.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer4".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer4".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2104", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer5>::try_to_arrow(self.fuzz2105.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer5".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer5".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2105", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer6>::try_to_arrow(self.fuzz2106.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer6".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer6".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2106", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer7>::try_to_arrow(self.fuzz2107.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer7".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2107", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer8>::try_to_arrow(self.fuzz2108.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer8".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer8".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2108", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array =
                        <crate::components::AffixFuzzer9>::try_to_arrow(self.fuzz2109.iter(), None);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer9".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer9".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2109", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer10>::try_to_arrow(
                        self.fuzz2110.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer10".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer10".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2110", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer11>::try_to_arrow(
                        self.fuzz2111.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer11".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2111", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer12>::try_to_arrow(
                        self.fuzz2112.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer12".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2112", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
            {
                Some({
                    let array = <crate::components::AffixFuzzer13>::try_to_arrow(
                        self.fuzz2113.iter(),
                        None,
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer13".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz2113", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()?
            },
        ]
        .into_iter()
        .flatten()
        .collect())
    }

    #[inline]
    fn try_from_arrow(
        data: impl IntoIterator<Item = (::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>)>,
    ) -> crate::DeserializationResult<Self> {
        use crate::Component as _;
        let arrays_by_name: ::std::collections::HashMap<_, _> = data
            .into_iter()
            .map(|(field, array)| (field.name, array))
            .collect();
        let fuzz1001 = {
            let array = arrays_by_name.get("fuzz1001").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer1>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1002 = {
            let array = arrays_by_name.get("fuzz1002").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer2>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1003 = {
            let array = arrays_by_name.get("fuzz1003").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer3>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1004 = {
            let array = arrays_by_name.get("fuzz1004").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer4>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1005 = {
            let array = arrays_by_name.get("fuzz1005").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer5>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1006 = {
            let array = arrays_by_name.get("fuzz1006").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer6>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1007 = {
            let array = arrays_by_name.get("fuzz1007").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer7>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1008 = {
            let array = arrays_by_name.get("fuzz1008").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer8>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1009 = {
            let array = arrays_by_name.get("fuzz1009").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer9>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1010 = {
            let array = arrays_by_name.get("fuzz1010").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer10>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1011 = {
            let array = arrays_by_name.get("fuzz1011").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer11>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1012 = {
            let array = arrays_by_name.get("fuzz1012").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer12>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1013 = {
            let array = arrays_by_name.get("fuzz1013").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer13>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz1101 = {
            let array = arrays_by_name.get("fuzz1101").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer1>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1102 = {
            let array = arrays_by_name.get("fuzz1102").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer2>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1103 = {
            let array = arrays_by_name.get("fuzz1103").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer3>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1104 = {
            let array = arrays_by_name.get("fuzz1104").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer4>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1105 = {
            let array = arrays_by_name.get("fuzz1105").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer5>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1106 = {
            let array = arrays_by_name.get("fuzz1106").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer6>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1107 = {
            let array = arrays_by_name.get("fuzz1107").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer7>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1108 = {
            let array = arrays_by_name.get("fuzz1108").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer8>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1109 = {
            let array = arrays_by_name.get("fuzz1109").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer9>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1110 = {
            let array = arrays_by_name.get("fuzz1110").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer10>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1111 = {
            let array = arrays_by_name.get("fuzz1111").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer11>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1112 = {
            let array = arrays_by_name.get("fuzz1112").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer12>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz1113 = {
            let array = arrays_by_name.get("fuzz1113").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer13>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2001 = {
            let array = arrays_by_name.get("fuzz2001").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer1>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2002 = {
            let array = arrays_by_name.get("fuzz2002").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer2>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2003 = {
            let array = arrays_by_name.get("fuzz2003").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer3>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2004 = {
            let array = arrays_by_name.get("fuzz2004").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer4>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2005 = {
            let array = arrays_by_name.get("fuzz2005").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer5>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2006 = {
            let array = arrays_by_name.get("fuzz2006").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer6>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2007 = {
            let array = arrays_by_name.get("fuzz2007").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer7>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2008 = {
            let array = arrays_by_name.get("fuzz2008").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer8>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2009 = {
            let array = arrays_by_name.get("fuzz2009").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer9>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2010 = {
            let array = arrays_by_name.get("fuzz2010").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer10>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2011 = {
            let array = arrays_by_name.get("fuzz2011").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer11>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2012 = {
            let array = arrays_by_name.get("fuzz2012").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer12>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2013 = {
            let array = arrays_by_name.get("fuzz2013").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer13>::try_from_arrow_opt(&**array)?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                })?
        };
        let fuzz2101 = {
            let array = arrays_by_name.get("fuzz2101").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer1>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2102 = {
            let array = arrays_by_name.get("fuzz2102").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer2>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2103 = {
            let array = arrays_by_name.get("fuzz2103").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer3>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2104 = {
            let array = arrays_by_name.get("fuzz2104").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer4>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2105 = {
            let array = arrays_by_name.get("fuzz2105").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer5>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2106 = {
            let array = arrays_by_name.get("fuzz2106").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer6>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2107 = {
            let array = arrays_by_name.get("fuzz2107").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer7>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2108 = {
            let array = arrays_by_name.get("fuzz2108").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer8>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2109 = {
            let array = arrays_by_name.get("fuzz2109").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer9>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2110 = {
            let array = arrays_by_name.get("fuzz2110").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer10>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2111 = {
            let array = arrays_by_name.get("fuzz2111").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer11>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2112 = {
            let array = arrays_by_name.get("fuzz2112").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer12>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        let fuzz2113 = {
            let array = arrays_by_name.get("fuzz2113").ok_or_else(|| {
                crate::DeserializationError::MissingData {
                    datatype: ::arrow2::datatypes::DataType::Null,
                }
            })?;
            <crate::components::AffixFuzzer13>::try_from_arrow_opt(&**array)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: ::arrow2::datatypes::DataType::Null,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?
        };
        Ok(Self {
            fuzz1001,
            fuzz1002,
            fuzz1003,
            fuzz1004,
            fuzz1005,
            fuzz1006,
            fuzz1007,
            fuzz1008,
            fuzz1009,
            fuzz1010,
            fuzz1011,
            fuzz1012,
            fuzz1013,
            fuzz1101,
            fuzz1102,
            fuzz1103,
            fuzz1104,
            fuzz1105,
            fuzz1106,
            fuzz1107,
            fuzz1108,
            fuzz1109,
            fuzz1110,
            fuzz1111,
            fuzz1112,
            fuzz1113,
            fuzz2001,
            fuzz2002,
            fuzz2003,
            fuzz2004,
            fuzz2005,
            fuzz2006,
            fuzz2007,
            fuzz2008,
            fuzz2009,
            fuzz2010,
            fuzz2011,
            fuzz2012,
            fuzz2013,
            fuzz2101,
            fuzz2102,
            fuzz2103,
            fuzz2104,
            fuzz2105,
            fuzz2106,
            fuzz2107,
            fuzz2108,
            fuzz2109,
            fuzz2110,
            fuzz2111,
            fuzz2112,
            fuzz2113,
        })
    }
}

impl AffixFuzzer1 {
    pub fn new(
        fuzz1001: impl Into<crate::components::AffixFuzzer1>,
        fuzz1002: impl Into<crate::components::AffixFuzzer2>,
        fuzz1003: impl Into<crate::components::AffixFuzzer3>,
        fuzz1004: impl Into<crate::components::AffixFuzzer4>,
        fuzz1005: impl Into<crate::components::AffixFuzzer5>,
        fuzz1006: impl Into<crate::components::AffixFuzzer6>,
        fuzz1007: impl Into<crate::components::AffixFuzzer7>,
        fuzz1008: impl Into<crate::components::AffixFuzzer8>,
        fuzz1009: impl Into<crate::components::AffixFuzzer9>,
        fuzz1010: impl Into<crate::components::AffixFuzzer10>,
        fuzz1011: impl Into<crate::components::AffixFuzzer11>,
        fuzz1012: impl Into<crate::components::AffixFuzzer12>,
        fuzz1013: impl Into<crate::components::AffixFuzzer13>,
        fuzz1101: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer1>>,
        fuzz1102: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer2>>,
        fuzz1103: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer3>>,
        fuzz1104: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer4>>,
        fuzz1105: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer5>>,
        fuzz1106: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer6>>,
        fuzz1107: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer7>>,
        fuzz1108: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer8>>,
        fuzz1109: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer9>>,
        fuzz1110: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer10>>,
        fuzz1111: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer11>>,
        fuzz1112: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer12>>,
        fuzz1113: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer13>>,
        fuzz2001: impl Into<crate::components::AffixFuzzer1>,
        fuzz2002: impl Into<crate::components::AffixFuzzer2>,
        fuzz2003: impl Into<crate::components::AffixFuzzer3>,
        fuzz2004: impl Into<crate::components::AffixFuzzer4>,
        fuzz2005: impl Into<crate::components::AffixFuzzer5>,
        fuzz2006: impl Into<crate::components::AffixFuzzer6>,
        fuzz2007: impl Into<crate::components::AffixFuzzer7>,
        fuzz2008: impl Into<crate::components::AffixFuzzer8>,
        fuzz2009: impl Into<crate::components::AffixFuzzer9>,
        fuzz2010: impl Into<crate::components::AffixFuzzer10>,
        fuzz2011: impl Into<crate::components::AffixFuzzer11>,
        fuzz2012: impl Into<crate::components::AffixFuzzer12>,
        fuzz2013: impl Into<crate::components::AffixFuzzer13>,
        fuzz2101: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer1>>,
        fuzz2102: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer2>>,
        fuzz2103: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer3>>,
        fuzz2104: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer4>>,
        fuzz2105: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer5>>,
        fuzz2106: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer6>>,
        fuzz2107: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer7>>,
        fuzz2108: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer8>>,
        fuzz2109: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer9>>,
        fuzz2110: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer10>>,
        fuzz2111: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer11>>,
        fuzz2112: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer12>>,
        fuzz2113: impl IntoIterator<Item = impl Into<crate::components::AffixFuzzer13>>,
    ) -> Self {
        Self {
            fuzz1001: fuzz1001.into(),
            fuzz1002: fuzz1002.into(),
            fuzz1003: fuzz1003.into(),
            fuzz1004: fuzz1004.into(),
            fuzz1005: fuzz1005.into(),
            fuzz1006: fuzz1006.into(),
            fuzz1007: fuzz1007.into(),
            fuzz1008: fuzz1008.into(),
            fuzz1009: fuzz1009.into(),
            fuzz1010: fuzz1010.into(),
            fuzz1011: fuzz1011.into(),
            fuzz1012: fuzz1012.into(),
            fuzz1013: fuzz1013.into(),
            fuzz1101: fuzz1101.into_iter().map(Into::into).collect(),
            fuzz1102: fuzz1102.into_iter().map(Into::into).collect(),
            fuzz1103: fuzz1103.into_iter().map(Into::into).collect(),
            fuzz1104: fuzz1104.into_iter().map(Into::into).collect(),
            fuzz1105: fuzz1105.into_iter().map(Into::into).collect(),
            fuzz1106: fuzz1106.into_iter().map(Into::into).collect(),
            fuzz1107: fuzz1107.into_iter().map(Into::into).collect(),
            fuzz1108: fuzz1108.into_iter().map(Into::into).collect(),
            fuzz1109: fuzz1109.into_iter().map(Into::into).collect(),
            fuzz1110: fuzz1110.into_iter().map(Into::into).collect(),
            fuzz1111: fuzz1111.into_iter().map(Into::into).collect(),
            fuzz1112: fuzz1112.into_iter().map(Into::into).collect(),
            fuzz1113: fuzz1113.into_iter().map(Into::into).collect(),
            fuzz2001: fuzz2001.into(),
            fuzz2002: fuzz2002.into(),
            fuzz2003: fuzz2003.into(),
            fuzz2004: fuzz2004.into(),
            fuzz2005: fuzz2005.into(),
            fuzz2006: fuzz2006.into(),
            fuzz2007: fuzz2007.into(),
            fuzz2008: fuzz2008.into(),
            fuzz2009: fuzz2009.into(),
            fuzz2010: fuzz2010.into(),
            fuzz2011: fuzz2011.into(),
            fuzz2012: fuzz2012.into(),
            fuzz2013: fuzz2013.into(),
            fuzz2101: fuzz2101.into_iter().map(Into::into).collect(),
            fuzz2102: fuzz2102.into_iter().map(Into::into).collect(),
            fuzz2103: fuzz2103.into_iter().map(Into::into).collect(),
            fuzz2104: fuzz2104.into_iter().map(Into::into).collect(),
            fuzz2105: fuzz2105.into_iter().map(Into::into).collect(),
            fuzz2106: fuzz2106.into_iter().map(Into::into).collect(),
            fuzz2107: fuzz2107.into_iter().map(Into::into).collect(),
            fuzz2108: fuzz2108.into_iter().map(Into::into).collect(),
            fuzz2109: fuzz2109.into_iter().map(Into::into).collect(),
            fuzz2110: fuzz2110.into_iter().map(Into::into).collect(),
            fuzz2111: fuzz2111.into_iter().map(Into::into).collect(),
            fuzz2112: fuzz2112.into_iter().map(Into::into).collect(),
            fuzz2113: fuzz2113.into_iter().map(Into::into).collect(),
        }
    }
}
