// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

/// Specifies that the entity path at which this is logged is disconnected from its parent.
///
/// This is useful for specifying that a subgraph is independent of the rest of the scene.
///
/// If a transform or pinhole is logged on the same path, this archetype's components
/// will be ignored.
///
/// ## Example
///
/// ```ignore
/// //! Disconnect two spaces.
///
/// use rerun::{
///    archetypes::{DisconnectedSpace, Points3D},
///    MsgSender, RecordingStreamBuilder,
/// };
///
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///    let (rec_stream, storage) = RecordingStreamBuilder::new("disconnect_space").memory()?;
///
///    // These two points can be projected into the same space..
///    MsgSender::from_archetype("world/room1/point", &Points3D::new([(0.0, 0.0, 0.0)]))?
///        .send(&rec_stream)?;
///    MsgSender::from_archetype("world/room2/point", &Points3D::new([(1.0, 1.0, 1.0)]))?
///        .send(&rec_stream)?;
///
///    // ..but this one lives in a completely separate space!
///    MsgSender::from_archetype("world/wormhole", &DisconnectedSpace::new(true))?
///        .send(&rec_stream)?;
///    MsgSender::from_archetype("world/wormhole/point", &Points3D::new([(2.0, 2.0, 2.0)]))?
///        .send(&rec_stream)?;
///
///    rerun::native_viewer::show(storage.take())?;
///
///    Ok(())
/// }
/// ```
#[derive(Clone, Debug, Copy, PartialEq, Eq)]
pub struct DisconnectedSpace {
    pub disconnected_space: crate::components::DisconnectedSpace,
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.disconnected_space".into()]);
static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);
static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);
static ALL_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.disconnected_space".into()]);

impl DisconnectedSpace {
    pub const NUM_COMPONENTS: usize = 1usize;
}

impl crate::Archetype for DisconnectedSpace {
    #[inline]
    fn name() -> crate::ArchetypeName {
        crate::ArchetypeName::Borrowed("rerun.archetypes.DisconnectedSpace")
    }

    #[inline]
    fn required_components() -> &'static [crate::ComponentName] {
        REQUIRED_COMPONENTS.as_slice()
    }

    #[inline]
    fn recommended_components() -> &'static [crate::ComponentName] {
        RECOMMENDED_COMPONENTS.as_slice()
    }

    #[inline]
    fn optional_components() -> &'static [crate::ComponentName] {
        OPTIONAL_COMPONENTS.as_slice()
    }

    #[inline]
    fn all_components() -> &'static [crate::ComponentName] {
        ALL_COMPONENTS.as_slice()
    }

    #[inline]
    fn try_to_arrow(
        &self,
    ) -> crate::SerializationResult<
        Vec<(::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>)>,
    > {
        use crate::Loggable as _;
        Ok([{
            Some({
                let array = <crate::components::DisconnectedSpace>::try_to_arrow(
                    [&self.disconnected_space],
                    None,
                );
                array.map(|array| {
                    let datatype = ::arrow2::datatypes::DataType::Extension(
                        "rerun.components.DisconnectedSpace".into(),
                        Box::new(array.data_type().clone()),
                        Some("rerun.disconnected_space".into()),
                    );
                    (
                        ::arrow2::datatypes::Field::new("disconnected_space", datatype, false),
                        array,
                    )
                })
            })
            .transpose()
            .map_err(|err| crate::SerializationError::Context {
                location: "rerun.archetypes.DisconnectedSpace#disconnected_space".into(),
                source: Box::new(err),
            })?
        }]
        .into_iter()
        .flatten()
        .collect())
    }

    #[inline]
    fn try_from_arrow(
        data: impl IntoIterator<Item = (::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>)>,
    ) -> crate::DeserializationResult<Self> {
        use crate::Loggable as _;
        let arrays_by_name: ::std::collections::HashMap<_, _> = data
            .into_iter()
            .map(|(field, array)| (field.name, array))
            .collect();
        let disconnected_space = {
            let array = arrays_by_name
                .get("disconnected_space")
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.archetypes.DisconnectedSpace#disconnected_space".into(),
                    source: Box::new(err),
                })?;
            <crate::components::DisconnectedSpace>::try_from_arrow_opt(&**array)
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.archetypes.DisconnectedSpace#disconnected_space".into(),
                    source: Box::new(err),
                })?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(|| crate::DeserializationError::MissingData {
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.archetypes.DisconnectedSpace#disconnected_space".into(),
                    source: Box::new(err),
                })?
        };
        Ok(Self { disconnected_space })
    }
}

impl DisconnectedSpace {
    pub fn new(disconnected_space: impl Into<crate::components::DisconnectedSpace>) -> Self {
        Self {
            disconnected_space: disconnected_space.into(),
        }
    }
}
