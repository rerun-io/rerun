// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/re_types/definitions/rerun/blueprint/space_view_component.fbs".

#![allow(trivial_numeric_casts)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Blueprint**: A view of a space.
///
/// Unstable. Used for the ongoing blueprint experimentations.
#[derive(Clone)]
pub struct SpaceViewComponent {
    /// The name of the view.
    pub display_name: ::re_types_core::ArrowString,

    /// The class of the view.
    pub class_identifier: ::re_types_core::ArrowString,

    /// The "anchor point" of this space view.
    ///
    /// The transform at this path forms the reference point for all scene->world transforms in this space view.
    /// I.e. the position of this entity path in space forms the origin of the coordinate system in this space view.
    /// Furthermore, this is the primary indicator for heuristics on what entities we show in this space view.
    pub space_origin: crate::datatypes::EntityPath,

    /// True if the user is expected to add entities themselves. False otherwise.
    pub entities_determined_by_user: bool,

    /// `BlueprintId`s of the `DataQuery`s that make up this `SpaceView`.
    ///
    /// It determines which entities are part of the spaceview.
    pub contents: Vec<crate::datatypes::Uuid>,
}

::re_types_core::macros::impl_into_cow!(SpaceViewComponent);

impl ::re_types_core::Loggable for SpaceViewComponent {
    type Name = ::re_types_core::ComponentName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.blueprint.SpaceViewComponent".into()
    }

    #[allow(clippy::wildcard_imports)]
    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        use arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "display_name".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "class_identifier".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "space_origin".to_owned(),
                data_type: <crate::datatypes::EntityPath>::arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "entities_determined_by_user".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "contents".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: <crate::datatypes::Uuid>::arrow_datatype(),
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
        ])
    }

    #[allow(clippy::wildcard_imports)]
    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                <crate::blueprint::SpaceViewComponent>::arrow_datatype(),
                vec![
                    {
                        let (somes, display_name): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self { display_name, .. } = &**datum;
                                    display_name.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let display_name_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: arrow2::buffer::Buffer<u8> = display_name
                                .iter()
                                .flatten()
                                .flat_map(|s| s.0.clone())
                                .collect();
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                display_name.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.0.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    DataType::Utf8,
                                    offsets,
                                    inner_data,
                                    display_name_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, class_identifier): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        class_identifier, ..
                                    } = &**datum;
                                    class_identifier.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let class_identifier_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: arrow2::buffer::Buffer<u8> = class_identifier
                                .iter()
                                .flatten()
                                .flat_map(|s| s.0.clone())
                                .collect();
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                class_identifier.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.0.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    DataType::Utf8,
                                    offsets,
                                    inner_data,
                                    class_identifier_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, space_origin): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self { space_origin, .. } = &**datum;
                                    space_origin.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let space_origin_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: arrow2::buffer::Buffer<u8> = space_origin
                                .iter()
                                .flatten()
                                .flat_map(|datum| {
                                    let crate::datatypes::EntityPath(data0) = datum;
                                    data0.0.clone()
                                })
                                .collect();
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                space_origin.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| {
                                            let crate::datatypes::EntityPath(data0) = datum;
                                            data0.0.len()
                                        })
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();

                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    DataType::Utf8,
                                    offsets,
                                    inner_data,
                                    space_origin_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, entities_determined_by_user): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        entities_determined_by_user,
                                        ..
                                    } = &**datum;
                                    entities_determined_by_user.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let entities_determined_by_user_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        BooleanArray::new(
                            DataType::Boolean,
                            entities_determined_by_user
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            entities_determined_by_user_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, contents): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self { contents, .. } = &**datum;
                                    contents.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let contents_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let contents_inner_data: Vec<_> = contents
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let contents_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                contents.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(Box::new(Field {
                                    name: "item".to_owned(),
                                    data_type: <crate::datatypes::Uuid>::arrow_datatype(),
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                {
                                    _ = contents_inner_bitmap;
                                    crate::datatypes::Uuid::to_arrow_opt(contents_inner_data)?
                                },
                                contents_bitmap,
                            )
                            .boxed()
                        }
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(clippy::wildcard_imports)]
    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    DeserializationError::datatype_mismatch(
                        DataType::Struct(vec![
                            Field {
                                name: "display_name".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            },
                            Field {
                                name: "class_identifier".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            },
                            Field {
                                name: "space_origin".to_owned(),
                                data_type: <crate::datatypes::EntityPath>::arrow_datatype(),
                                is_nullable: false,
                                metadata: [].into(),
                            },
                            Field {
                                name: "entities_determined_by_user".to_owned(),
                                data_type: DataType::Boolean,
                                is_nullable: false,
                                metadata: [].into(),
                            },
                            Field {
                                name: "contents".to_owned(),
                                data_type: DataType::List(Box::new(Field {
                                    name: "item".to_owned(),
                                    data_type: <crate::datatypes::Uuid>::arrow_datatype(),
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                is_nullable: false,
                                metadata: [].into(),
                            },
                        ]),
                        arrow_data.data_type().clone(),
                    )
                })
                .with_context("rerun.blueprint.SpaceViewComponent")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let display_name = {
                    if !arrays_by_name.contains_key("display_name") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "display_name",
                        ))
                        .with_context("rerun.blueprint.SpaceViewComponent");
                    }
                    let arrow_data = &**arrays_by_name["display_name"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::Utf8,
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.blueprint.SpaceViewComponent#display_name")?;
                        let arrow_data_buf = arrow_data.values();
                        let offsets = arrow_data.offsets();
                        arrow2::bitmap::utils::ZipValidity::new_with_validity(
                            offsets.iter().zip(offsets.lengths()),
                            arrow_data.validity(),
                        )
                        .map(|elem| {
                            elem.map(|(start, len)| {
                                let start = *start as usize;
                                let end = start + len;
                                if end as usize > arrow_data_buf.len() {
                                    return Err(DeserializationError::offset_slice_oob(
                                        (start, end),
                                        arrow_data_buf.len(),
                                    ));
                                }

                                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                let data =
                                    unsafe { arrow_data_buf.clone().sliced_unchecked(start, len) };
                                Ok(data)
                            })
                            .transpose()
                        })
                        .map(|res_or_opt| {
                            res_or_opt.map(|res_or_opt| {
                                res_or_opt.map(|v| ::re_types_core::ArrowString(v))
                            })
                        })
                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                        .with_context("rerun.blueprint.SpaceViewComponent#display_name")?
                        .into_iter()
                    }
                };
                let class_identifier = {
                    if !arrays_by_name.contains_key("class_identifier") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "class_identifier",
                        ))
                        .with_context("rerun.blueprint.SpaceViewComponent");
                    }
                    let arrow_data = &**arrays_by_name["class_identifier"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::Utf8,
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.blueprint.SpaceViewComponent#class_identifier")?;
                        let arrow_data_buf = arrow_data.values();
                        let offsets = arrow_data.offsets();
                        arrow2::bitmap::utils::ZipValidity::new_with_validity(
                            offsets.iter().zip(offsets.lengths()),
                            arrow_data.validity(),
                        )
                        .map(|elem| {
                            elem.map(|(start, len)| {
                                let start = *start as usize;
                                let end = start + len;
                                if end as usize > arrow_data_buf.len() {
                                    return Err(DeserializationError::offset_slice_oob(
                                        (start, end),
                                        arrow_data_buf.len(),
                                    ));
                                }

                                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                let data =
                                    unsafe { arrow_data_buf.clone().sliced_unchecked(start, len) };
                                Ok(data)
                            })
                            .transpose()
                        })
                        .map(|res_or_opt| {
                            res_or_opt.map(|res_or_opt| {
                                res_or_opt.map(|v| ::re_types_core::ArrowString(v))
                            })
                        })
                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                        .with_context("rerun.blueprint.SpaceViewComponent#class_identifier")?
                        .into_iter()
                    }
                };
                let space_origin = {
                    if !arrays_by_name.contains_key("space_origin") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "space_origin",
                        ))
                        .with_context("rerun.blueprint.SpaceViewComponent");
                    }
                    let arrow_data = &**arrays_by_name["space_origin"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::Utf8,
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.blueprint.SpaceViewComponent#space_origin")?;
                        let arrow_data_buf = arrow_data.values();
                        let offsets = arrow_data.offsets();
                        arrow2::bitmap::utils::ZipValidity::new_with_validity(
                            offsets.iter().zip(offsets.lengths()),
                            arrow_data.validity(),
                        )
                        .map(|elem| {
                            elem.map(|(start, len)| {
                                let start = *start as usize;
                                let end = start + len;
                                if end as usize > arrow_data_buf.len() {
                                    return Err(DeserializationError::offset_slice_oob(
                                        (start, end),
                                        arrow_data_buf.len(),
                                    ));
                                }

                                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                let data =
                                    unsafe { arrow_data_buf.clone().sliced_unchecked(start, len) };
                                Ok(data)
                            })
                            .transpose()
                        })
                        .map(|res_or_opt| {
                            res_or_opt.map(|res_or_opt| {
                                res_or_opt.map(|v| {
                                    crate::datatypes::EntityPath(::re_types_core::ArrowString(v))
                                })
                            })
                        })
                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                        .with_context("rerun.blueprint.SpaceViewComponent#space_origin")?
                        .into_iter()
                    }
                };
                let entities_determined_by_user = {
                    if !arrays_by_name.contains_key("entities_determined_by_user") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "entities_determined_by_user",
                        ))
                        .with_context("rerun.blueprint.SpaceViewComponent");
                    }
                    let arrow_data = &**arrays_by_name["entities_determined_by_user"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<BooleanArray>()
                        .ok_or_else(|| {
                            DeserializationError::datatype_mismatch(
                                DataType::Boolean,
                                arrow_data.data_type().clone(),
                            )
                        })
                        .with_context(
                            "rerun.blueprint.SpaceViewComponent#entities_determined_by_user",
                        )?
                        .into_iter()
                };
                let contents = {
                    if !arrays_by_name.contains_key("contents") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "contents",
                        ))
                        .with_context("rerun.blueprint.SpaceViewComponent");
                    }
                    let arrow_data = &**arrays_by_name["contents"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: <crate::datatypes::Uuid>::arrow_datatype(),
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.blueprint.SpaceViewComponent#contents")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                crate::datatypes::Uuid::from_arrow_opt(arrow_data_inner)
                                    .with_context("rerun.blueprint.SpaceViewComponent#contents")?
                                    .into_iter()
                                    .collect::<Vec<_>>()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner.get_unchecked(start as usize..end as usize)
                                    };
                                    let data = data
                                        .iter()
                                        .cloned()
                                        .map(Option::unwrap_or_default)
                                        .collect();
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                        ::itertools::izip!(
                            display_name, class_identifier, space_origin,
                            entities_determined_by_user, contents
                        ),
                        arrow_data.validity(),
                    )
                    .map(|opt| {
                        opt
                            .map(|
                                (
                                    display_name,
                                    class_identifier,
                                    space_origin,
                                    entities_determined_by_user,
                                    contents,
                                )|
                            Ok(Self {
                                display_name: display_name
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.SpaceViewComponent#display_name",
                                    )?,
                                class_identifier: class_identifier
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.SpaceViewComponent#class_identifier",
                                    )?,
                                space_origin: space_origin
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.SpaceViewComponent#space_origin",
                                    )?,
                                entities_determined_by_user: entities_determined_by_user
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.SpaceViewComponent#entities_determined_by_user",
                                    )?,
                                contents: contents
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.SpaceViewComponent#contents",
                                    )?,
                            }))
                            .transpose()
                    })
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.blueprint.SpaceViewComponent")?
            }
        })
    }
}
