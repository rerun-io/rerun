// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/re_types/definitions/rerun/blueprint/archetypes/tensor_slice_selection.fbs".

#![allow(trivial_numeric_casts)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Determines which slice of a tensor is shown.
#[derive(Clone, Debug, Default, Hash)]
pub struct TensorSliceSelection {
    /// Which dimension to map to width.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    pub width: Option<crate::components::TensorWidthDimension>,

    /// Which dimension to map to height.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    pub height: Option<crate::components::TensorHeightDimension>,

    /// Selected indices for all other dimensions.
    ///
    /// TODO: describe fallbacks & fillins.
    pub indices: Vec<crate::components::TensorDimensionIndexSelection>,

    /// Any dimension that listed here, will show a slider in the view.
    ///
    /// Edits to the sliders will directly manipulate dimensions on the `indices` list.
    /// TODO: describe fallbacks & fillins.
    pub slider: Vec<crate::blueprint::components::TensorDimensionIndexSlider>,
}

impl ::re_types_core::SizeBytes for TensorSliceSelection {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.width.heap_size_bytes()
            + self.height.heap_size_bytes()
            + self.indices.heap_size_bytes()
            + self.slider.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Option<crate::components::TensorWidthDimension>>::is_pod()
            && <Option<crate::components::TensorHeightDimension>>::is_pod()
            && <Vec<crate::components::TensorDimensionIndexSelection>>::is_pod()
            && <Vec<crate::blueprint::components::TensorDimensionIndexSlider>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| {
        ["rerun.blueprint.components.TensorSliceSelectionIndicator".into()]
    });

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 4usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.TensorWidthDimension".into(),
            "rerun.components.TensorHeightDimension".into(),
            "rerun.components.TensorDimensionIndexSelection".into(),
            "rerun.blueprint.components.TensorDimensionIndexSlider".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 5usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.TensorSliceSelectionIndicator".into(),
            "rerun.components.TensorWidthDimension".into(),
            "rerun.components.TensorHeightDimension".into(),
            "rerun.components.TensorDimensionIndexSelection".into(),
            "rerun.blueprint.components.TensorDimensionIndexSlider".into(),
        ]
    });

static FIELD_INFOS: once_cell::sync::Lazy<[::re_types_core::ArchetypeFieldInfo; 4usize]> =
    once_cell::sync::Lazy::new(|| {
        [
        ::re_types_core::ArchetypeFieldInfo {
            display_name: "Width",
            documentation: "Which dimension to map to width.\n\nIf not specified, the height will be determined automatically based on the name and index of the dimension.",
            component_name: "rerun.components.TensorWidthDimension".into(),
        },
        ::re_types_core::ArchetypeFieldInfo {
            display_name: "Height",
            documentation: "Which dimension to map to height.\n\nIf not specified, the height will be determined automatically based on the name and index of the dimension.",
            component_name: "rerun.components.TensorHeightDimension".into(),
        },
        ::re_types_core::ArchetypeFieldInfo {
            display_name: "Indices",
            documentation: "Selected indices for all other dimensions.\n\nTODO: describe fallbacks & fillins.",
            component_name: "rerun.components.TensorDimensionIndexSelection".into(),
        },
        ::re_types_core::ArchetypeFieldInfo {
            display_name: "Slider",
            documentation: "Any dimension that listed here, will show a slider in the view.\n\nEdits to the sliders will directly manipulate dimensions on the `indices` list.\nTODO: describe fallbacks & fillins.",
            component_name: "rerun.blueprint.components.TensorDimensionIndexSlider"
                .into(),
        },
    ]
    });

impl TensorSliceSelection {
    /// The total number of components in the archetype: 0 required, 1 recommended, 4 optional
    pub const NUM_COMPONENTS: usize = 5usize;
}

/// Indicator component for the [`TensorSliceSelection`] [`::re_types_core::Archetype`]
pub type TensorSliceSelectionIndicator =
    ::re_types_core::GenericIndicatorComponent<TensorSliceSelection>;

impl ::re_types_core::Archetype for TensorSliceSelection {
    type Indicator = TensorSliceSelectionIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.TensorSliceSelection".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Tensor slice selection"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: TensorSliceSelectionIndicator = TensorSliceSelectionIndicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn field_infos() -> Option<::std::borrow::Cow<'static, [::re_types_core::ArchetypeFieldInfo]>> {
        Some(FIELD_INFOS.as_slice().into())
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let width = if let Some(array) = arrays_by_name.get("rerun.components.TensorWidthDimension")
        {
            <crate::components::TensorWidthDimension>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#width")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let height =
            if let Some(array) = arrays_by_name.get("rerun.components.TensorHeightDimension") {
                <crate::components::TensorHeightDimension>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.TensorSliceSelection#height")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        let indices = {
            let array = arrays_by_name
                .get("rerun.components.TensorDimensionIndexSelection")
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#indices")?;
            <crate::components::TensorDimensionIndexSelection>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#indices")?
                .into_iter()
                .map(|v| v.ok_or_else(DeserializationError::missing_data))
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#indices")?
        };
        let slider = {
            let array = arrays_by_name
                .get("rerun.blueprint.components.TensorDimensionIndexSlider")
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#slider")?;
            <crate::blueprint::components::TensorDimensionIndexSlider>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#slider")?
                .into_iter()
                .map(|v| v.ok_or_else(DeserializationError::missing_data))
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.blueprint.archetypes.TensorSliceSelection#slider")?
        };
        Ok(Self {
            width,
            height,
            indices,
            slider,
        })
    }
}

impl ::re_types_core::AsComponents for TensorSliceSelection {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.width
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.height
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            Some((&self.indices as &dyn ComponentBatch).into()),
            Some((&self.slider as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl TensorSliceSelection {
    /// Create a new `TensorSliceSelection`.
    #[inline]
    pub fn new(
        indices: impl IntoIterator<Item = impl Into<crate::components::TensorDimensionIndexSelection>>,
        slider: impl IntoIterator<
            Item = impl Into<crate::blueprint::components::TensorDimensionIndexSlider>,
        >,
    ) -> Self {
        Self {
            indices: indices.into_iter().map(Into::into).collect(),
            slider: slider.into_iter().map(Into::into).collect(),
            width: None,
            height: None,
        }
    }

    /// Which dimension to map to width.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    #[inline]
    pub fn with_width(mut self, width: impl Into<crate::components::TensorWidthDimension>) -> Self {
        self.width = Some(width.into());
        self
    }

    /// Which dimension to map to height.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    #[inline]
    pub fn with_height(
        mut self,
        height: impl Into<crate::components::TensorHeightDimension>,
    ) -> Self {
        self.height = Some(height.into());
        self
    }
}
