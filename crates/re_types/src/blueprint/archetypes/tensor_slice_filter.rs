// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/re_types/definitions/rerun/blueprint/archetypes/tensor_slice_filter.fbs".

#![allow(trivial_numeric_casts)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Configures how a selected tensor slice is shown on screen.
#[derive(Clone, Debug, Default)]
pub struct TensorSliceFilter {
    /// How the image is scaled to fit the view.
    pub scaling: Option<crate::components::ImageScalingMode>,

    /// Filter used when zooming in on the tensor.
    pub mag_filter: Option<crate::components::MagnificationFilter>,
}

impl ::re_types_core::SizeBytes for TensorSliceFilter {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.scaling.heap_size_bytes() + self.mag_filter.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Option<crate::components::ImageScalingMode>>::is_pod()
            && <Option<crate::components::MagnificationFilter>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.blueprint.components.TensorSliceFilterIndicator".into()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.ImageScalingMode".into(),
            "rerun.components.MagnificationFilter".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 3usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.TensorSliceFilterIndicator".into(),
            "rerun.components.ImageScalingMode".into(),
            "rerun.components.MagnificationFilter".into(),
        ]
    });

static FIELD_INFOS: once_cell::sync::Lazy<[::re_types_core::ArchetypeFieldInfo; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            ::re_types_core::ArchetypeFieldInfo {
                display_name: "Scaling",
                documentation: "How the image is scaled to fit the view.",
                component_name: "rerun.components.ImageScalingMode".into(),
            },
            ::re_types_core::ArchetypeFieldInfo {
                display_name: "Mag filter",
                documentation: "Filter used when zooming in on the tensor.",
                component_name: "rerun.components.MagnificationFilter".into(),
            },
        ]
    });

impl TensorSliceFilter {
    /// The total number of components in the archetype: 0 required, 1 recommended, 2 optional
    pub const NUM_COMPONENTS: usize = 3usize;
}

/// Indicator component for the [`TensorSliceFilter`] [`::re_types_core::Archetype`]
pub type TensorSliceFilterIndicator = ::re_types_core::GenericIndicatorComponent<TensorSliceFilter>;

impl ::re_types_core::Archetype for TensorSliceFilter {
    type Indicator = TensorSliceFilterIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.TensorSliceFilter".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Tensor slice filter"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: TensorSliceFilterIndicator = TensorSliceFilterIndicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn field_infos() -> Option<::std::borrow::Cow<'static, [::re_types_core::ArchetypeFieldInfo]>> {
        Some(FIELD_INFOS.as_slice().into())
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let scaling = if let Some(array) = arrays_by_name.get("rerun.components.ImageScalingMode") {
            <crate::components::ImageScalingMode>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.TensorSliceFilter#scaling")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let mag_filter =
            if let Some(array) = arrays_by_name.get("rerun.components.MagnificationFilter") {
                <crate::components::MagnificationFilter>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.TensorSliceFilter#mag_filter")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        Ok(Self {
            scaling,
            mag_filter,
        })
    }
}

impl ::re_types_core::AsComponents for TensorSliceFilter {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.scaling
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.mag_filter
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl TensorSliceFilter {
    /// Create a new `TensorSliceFilter`.
    #[inline]
    pub fn new() -> Self {
        Self {
            scaling: None,
            mag_filter: None,
        }
    }

    /// How the image is scaled to fit the view.
    #[inline]
    pub fn with_scaling(mut self, scaling: impl Into<crate::components::ImageScalingMode>) -> Self {
        self.scaling = Some(scaling.into());
        self
    }

    /// Filter used when zooming in on the tensor.
    #[inline]
    pub fn with_mag_filter(
        mut self,
        mag_filter: impl Into<crate::components::MagnificationFilter>,
    ) -> Self {
        self.mag_filter = Some(mag_filter.into());
        self
    }
}
