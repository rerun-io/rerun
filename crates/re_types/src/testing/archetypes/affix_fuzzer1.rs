// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer1 {
    pub fuzz1001: crate::testing::components::AffixFuzzer1,
    pub fuzz1002: crate::testing::components::AffixFuzzer2,
    pub fuzz1003: crate::testing::components::AffixFuzzer3,
    pub fuzz1004: crate::testing::components::AffixFuzzer4,
    pub fuzz1005: crate::testing::components::AffixFuzzer5,
    pub fuzz1006: crate::testing::components::AffixFuzzer6,
    pub fuzz1007: crate::testing::components::AffixFuzzer7,
    pub fuzz1008: crate::testing::components::AffixFuzzer8,
    pub fuzz1009: crate::testing::components::AffixFuzzer9,
    pub fuzz1010: crate::testing::components::AffixFuzzer10,
    pub fuzz1011: crate::testing::components::AffixFuzzer11,
    pub fuzz1012: crate::testing::components::AffixFuzzer12,
    pub fuzz1013: crate::testing::components::AffixFuzzer13,
    pub fuzz1014: crate::testing::components::AffixFuzzer14,
    pub fuzz1015: crate::testing::components::AffixFuzzer15,
    pub fuzz1016: crate::testing::components::AffixFuzzer16,
    pub fuzz1017: crate::testing::components::AffixFuzzer17,
    pub fuzz1018: crate::testing::components::AffixFuzzer18,
    pub fuzz1019: crate::testing::components::AffixFuzzer19,
    pub fuzz1020: crate::testing::components::AffixFuzzer20,
    pub fuzz1101: Vec<crate::testing::components::AffixFuzzer1>,
    pub fuzz1102: Vec<crate::testing::components::AffixFuzzer2>,
    pub fuzz1103: Vec<crate::testing::components::AffixFuzzer3>,
    pub fuzz1104: Vec<crate::testing::components::AffixFuzzer4>,
    pub fuzz1105: Vec<crate::testing::components::AffixFuzzer5>,
    pub fuzz1106: Vec<crate::testing::components::AffixFuzzer6>,
    pub fuzz1107: Vec<crate::testing::components::AffixFuzzer7>,
    pub fuzz1108: Vec<crate::testing::components::AffixFuzzer8>,
    pub fuzz1109: Vec<crate::testing::components::AffixFuzzer9>,
    pub fuzz1110: Vec<crate::testing::components::AffixFuzzer10>,
    pub fuzz1111: Vec<crate::testing::components::AffixFuzzer11>,
    pub fuzz1112: Vec<crate::testing::components::AffixFuzzer12>,
    pub fuzz1113: Vec<crate::testing::components::AffixFuzzer13>,
    pub fuzz1114: Vec<crate::testing::components::AffixFuzzer14>,
    pub fuzz1115: Vec<crate::testing::components::AffixFuzzer15>,
    pub fuzz1116: Vec<crate::testing::components::AffixFuzzer16>,
    pub fuzz1117: Vec<crate::testing::components::AffixFuzzer17>,
    pub fuzz1118: Vec<crate::testing::components::AffixFuzzer18>,
    pub fuzz2001: Option<crate::testing::components::AffixFuzzer1>,
    pub fuzz2002: Option<crate::testing::components::AffixFuzzer2>,
    pub fuzz2003: Option<crate::testing::components::AffixFuzzer3>,
    pub fuzz2004: Option<crate::testing::components::AffixFuzzer4>,
    pub fuzz2005: Option<crate::testing::components::AffixFuzzer5>,
    pub fuzz2006: Option<crate::testing::components::AffixFuzzer6>,
    pub fuzz2007: Option<crate::testing::components::AffixFuzzer7>,
    pub fuzz2008: Option<crate::testing::components::AffixFuzzer8>,
    pub fuzz2009: Option<crate::testing::components::AffixFuzzer9>,
    pub fuzz2010: Option<crate::testing::components::AffixFuzzer10>,
    pub fuzz2011: Option<crate::testing::components::AffixFuzzer11>,
    pub fuzz2012: Option<crate::testing::components::AffixFuzzer12>,
    pub fuzz2013: Option<crate::testing::components::AffixFuzzer13>,
    pub fuzz2014: Option<crate::testing::components::AffixFuzzer14>,
    pub fuzz2015: Option<crate::testing::components::AffixFuzzer15>,
    pub fuzz2016: Option<crate::testing::components::AffixFuzzer16>,
    pub fuzz2017: Option<crate::testing::components::AffixFuzzer17>,
    pub fuzz2018: Option<crate::testing::components::AffixFuzzer18>,
    pub fuzz2101: Option<Vec<crate::testing::components::AffixFuzzer1>>,
    pub fuzz2102: Option<Vec<crate::testing::components::AffixFuzzer2>>,
    pub fuzz2103: Option<Vec<crate::testing::components::AffixFuzzer3>>,
    pub fuzz2104: Option<Vec<crate::testing::components::AffixFuzzer4>>,
    pub fuzz2105: Option<Vec<crate::testing::components::AffixFuzzer5>>,
    pub fuzz2106: Option<Vec<crate::testing::components::AffixFuzzer6>>,
    pub fuzz2107: Option<Vec<crate::testing::components::AffixFuzzer7>>,
    pub fuzz2108: Option<Vec<crate::testing::components::AffixFuzzer8>>,
    pub fuzz2109: Option<Vec<crate::testing::components::AffixFuzzer9>>,
    pub fuzz2110: Option<Vec<crate::testing::components::AffixFuzzer10>>,
    pub fuzz2111: Option<Vec<crate::testing::components::AffixFuzzer11>>,
    pub fuzz2112: Option<Vec<crate::testing::components::AffixFuzzer12>>,
    pub fuzz2113: Option<Vec<crate::testing::components::AffixFuzzer13>>,
    pub fuzz2114: Option<Vec<crate::testing::components::AffixFuzzer14>>,
    pub fuzz2115: Option<Vec<crate::testing::components::AffixFuzzer15>>,
    pub fuzz2116: Option<Vec<crate::testing::components::AffixFuzzer16>>,
    pub fuzz2117: Option<Vec<crate::testing::components::AffixFuzzer17>>,
    pub fuzz2118: Option<Vec<crate::testing::components::AffixFuzzer18>>,
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 20usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.testing.components.AffixFuzzer1".into(),
            "rerun.testing.components.AffixFuzzer10".into(),
            "rerun.testing.components.AffixFuzzer11".into(),
            "rerun.testing.components.AffixFuzzer12".into(),
            "rerun.testing.components.AffixFuzzer13".into(),
            "rerun.testing.components.AffixFuzzer14".into(),
            "rerun.testing.components.AffixFuzzer15".into(),
            "rerun.testing.components.AffixFuzzer16".into(),
            "rerun.testing.components.AffixFuzzer17".into(),
            "rerun.testing.components.AffixFuzzer18".into(),
            "rerun.testing.components.AffixFuzzer19".into(),
            "rerun.testing.components.AffixFuzzer2".into(),
            "rerun.testing.components.AffixFuzzer20".into(),
            "rerun.testing.components.AffixFuzzer3".into(),
            "rerun.testing.components.AffixFuzzer4".into(),
            "rerun.testing.components.AffixFuzzer5".into(),
            "rerun.testing.components.AffixFuzzer6".into(),
            "rerun.testing.components.AffixFuzzer7".into(),
            "rerun.testing.components.AffixFuzzer8".into(),
            "rerun.testing.components.AffixFuzzer9".into(),
        ]
    });

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.testing.components.AffixFuzzer1Indicator".into()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 19usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.instance_key".into(),
            "rerun.testing.components.AffixFuzzer1".into(),
            "rerun.testing.components.AffixFuzzer10".into(),
            "rerun.testing.components.AffixFuzzer11".into(),
            "rerun.testing.components.AffixFuzzer12".into(),
            "rerun.testing.components.AffixFuzzer13".into(),
            "rerun.testing.components.AffixFuzzer14".into(),
            "rerun.testing.components.AffixFuzzer15".into(),
            "rerun.testing.components.AffixFuzzer16".into(),
            "rerun.testing.components.AffixFuzzer17".into(),
            "rerun.testing.components.AffixFuzzer18".into(),
            "rerun.testing.components.AffixFuzzer2".into(),
            "rerun.testing.components.AffixFuzzer3".into(),
            "rerun.testing.components.AffixFuzzer4".into(),
            "rerun.testing.components.AffixFuzzer5".into(),
            "rerun.testing.components.AffixFuzzer6".into(),
            "rerun.testing.components.AffixFuzzer7".into(),
            "rerun.testing.components.AffixFuzzer8".into(),
            "rerun.testing.components.AffixFuzzer9".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[crate::ComponentName; 40usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.testing.components.AffixFuzzer1".into(),
            "rerun.testing.components.AffixFuzzer10".into(),
            "rerun.testing.components.AffixFuzzer11".into(),
            "rerun.testing.components.AffixFuzzer12".into(),
            "rerun.testing.components.AffixFuzzer13".into(),
            "rerun.testing.components.AffixFuzzer14".into(),
            "rerun.testing.components.AffixFuzzer15".into(),
            "rerun.testing.components.AffixFuzzer16".into(),
            "rerun.testing.components.AffixFuzzer17".into(),
            "rerun.testing.components.AffixFuzzer18".into(),
            "rerun.testing.components.AffixFuzzer19".into(),
            "rerun.testing.components.AffixFuzzer2".into(),
            "rerun.testing.components.AffixFuzzer20".into(),
            "rerun.testing.components.AffixFuzzer3".into(),
            "rerun.testing.components.AffixFuzzer4".into(),
            "rerun.testing.components.AffixFuzzer5".into(),
            "rerun.testing.components.AffixFuzzer6".into(),
            "rerun.testing.components.AffixFuzzer7".into(),
            "rerun.testing.components.AffixFuzzer8".into(),
            "rerun.testing.components.AffixFuzzer9".into(),
            "rerun.testing.components.AffixFuzzer1Indicator".into(),
            "rerun.instance_key".into(),
            "rerun.testing.components.AffixFuzzer1".into(),
            "rerun.testing.components.AffixFuzzer10".into(),
            "rerun.testing.components.AffixFuzzer11".into(),
            "rerun.testing.components.AffixFuzzer12".into(),
            "rerun.testing.components.AffixFuzzer13".into(),
            "rerun.testing.components.AffixFuzzer14".into(),
            "rerun.testing.components.AffixFuzzer15".into(),
            "rerun.testing.components.AffixFuzzer16".into(),
            "rerun.testing.components.AffixFuzzer17".into(),
            "rerun.testing.components.AffixFuzzer18".into(),
            "rerun.testing.components.AffixFuzzer2".into(),
            "rerun.testing.components.AffixFuzzer3".into(),
            "rerun.testing.components.AffixFuzzer4".into(),
            "rerun.testing.components.AffixFuzzer5".into(),
            "rerun.testing.components.AffixFuzzer6".into(),
            "rerun.testing.components.AffixFuzzer7".into(),
            "rerun.testing.components.AffixFuzzer8".into(),
            "rerun.testing.components.AffixFuzzer9".into(),
        ]
    });

impl AffixFuzzer1 {
    pub const NUM_COMPONENTS: usize = 40usize;
}

/// Indicator component for the [`AffixFuzzer1`] [`crate::Archetype`]
pub type AffixFuzzer1Indicator = crate::GenericIndicatorComponent<AffixFuzzer1>;

impl crate::Archetype for AffixFuzzer1 {
    type Indicator = AffixFuzzer1Indicator;

    #[inline]
    fn name() -> crate::ArchetypeName {
        "rerun.testing.archetypes.AffixFuzzer1".into()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [crate::ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [crate::ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [crate::ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [crate::ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn num_instances(&self) -> usize {
        1
    }

    fn as_component_batches(&self) -> Vec<crate::MaybeOwnedComponentBatch<'_>> {
        [
            Some(Self::Indicator::batch(self.num_instances() as _).into()),
            Some((&self.fuzz1001 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1002 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1003 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1004 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1005 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1006 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1007 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1008 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1009 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1010 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1011 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1012 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1013 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1014 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1015 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1016 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1017 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1018 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1019 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1020 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1101 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1102 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1103 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1104 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1105 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1106 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1107 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1108 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1109 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1110 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1111 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1112 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1113 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1114 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1115 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1116 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1117 as &dyn crate::ComponentBatch).into()),
            Some((&self.fuzz1118 as &dyn crate::ComponentBatch).into()),
            self.fuzz2001
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2002
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2003
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2004
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2005
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2006
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2007
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2008
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2009
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2010
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2011
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2012
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2013
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2014
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2015
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2016
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2017
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2018
                .as_ref()
                .map(|comp| (comp as &dyn crate::ComponentBatch).into()),
            self.fuzz2101
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2102
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2103
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2104
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2105
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2106
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2107
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2108
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2109
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2110
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2111
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2112
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2113
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2114
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2115
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2116
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2117
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
            self.fuzz2118
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn crate::ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }

    #[inline]
    fn try_to_arrow(
        &self,
    ) -> crate::SerializationResult<
        Vec<(::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>)>,
    > {
        use crate::{Loggable as _, ResultExt as _};
        Ok([
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer1>::try_to_arrow([&self.fuzz1001]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer1".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer1".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1001", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1001")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer2>::try_to_arrow([&self.fuzz1002]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer2".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer2".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1002", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1002")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer3>::try_to_arrow([&self.fuzz1003]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer3".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer3".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1003", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1003")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer4>::try_to_arrow([&self.fuzz1004]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer4".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer4".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1004", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1004")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer5>::try_to_arrow([&self.fuzz1005]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer5".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer5".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1005", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1005")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer6>::try_to_arrow([&self.fuzz1006]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer6".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer6".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1006", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1006")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer7>::try_to_arrow([&self.fuzz1007]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer7".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1007", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1007")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer8>::try_to_arrow([&self.fuzz1008]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer8".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer8".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1008", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1008")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer9>::try_to_arrow([&self.fuzz1009]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer9".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer9".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1009", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1009")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer10>::try_to_arrow([&self.fuzz1010]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer10".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer10".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1010", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1010")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer11>::try_to_arrow([&self.fuzz1011]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer11".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1011", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1011")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer12>::try_to_arrow([&self.fuzz1012]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer12".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1012", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1012")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer13>::try_to_arrow([&self.fuzz1013]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer13".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1013", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1013")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer14>::try_to_arrow([&self.fuzz1014]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer14".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer14".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1014", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1014")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer15>::try_to_arrow([&self.fuzz1015]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer15".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer15".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1015", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1015")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer16>::try_to_arrow([&self.fuzz1016]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer16".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer16".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1016", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1016")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer17>::try_to_arrow([&self.fuzz1017]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer17".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer17".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1017", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1017")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer18>::try_to_arrow([&self.fuzz1018]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer18".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer18".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1018", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1018")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer19>::try_to_arrow([&self.fuzz1019]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer19".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer19".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1019", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1019")?
            },
            {
                Some({
                    let array =
                        <crate::testing::components::AffixFuzzer20>::try_to_arrow([&self.fuzz1020]);
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer20".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer20".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1020", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1020")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer1>::try_to_arrow(
                        self.fuzz1101.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer1".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer1".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1101", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1101")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer2>::try_to_arrow(
                        self.fuzz1102.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer2".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer2".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1102", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1102")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer3>::try_to_arrow(
                        self.fuzz1103.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer3".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer3".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1103", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1103")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer4>::try_to_arrow(
                        self.fuzz1104.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer4".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer4".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1104", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1104")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer5>::try_to_arrow(
                        self.fuzz1105.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer5".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer5".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1105", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1105")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer6>::try_to_arrow(
                        self.fuzz1106.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer6".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer6".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1106", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1106")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer7>::try_to_arrow(
                        self.fuzz1107.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer7".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1107", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1107")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer8>::try_to_arrow(
                        self.fuzz1108.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer8".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer8".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1108", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1108")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer9>::try_to_arrow(
                        self.fuzz1109.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer9".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer9".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1109", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1109")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer10>::try_to_arrow(
                        self.fuzz1110.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer10".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer10".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1110", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1110")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer11>::try_to_arrow(
                        self.fuzz1111.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer11".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1111", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1111")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer12>::try_to_arrow(
                        self.fuzz1112.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer12".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1112", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1112")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer13>::try_to_arrow(
                        self.fuzz1113.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer13".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1113", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1113")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer14>::try_to_arrow(
                        self.fuzz1114.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer14".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer14".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1114", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1114")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer15>::try_to_arrow(
                        self.fuzz1115.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer15".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer15".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1115", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1115")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer16>::try_to_arrow(
                        self.fuzz1116.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer16".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer16".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1116", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1116")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer17>::try_to_arrow(
                        self.fuzz1117.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer17".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer17".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1117", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1117")?
            },
            {
                Some({
                    let array = <crate::testing::components::AffixFuzzer18>::try_to_arrow(
                        self.fuzz1118.iter(),
                    );
                    array.map(|array| {
                        let datatype = ::arrow2::datatypes::DataType::Extension(
                            "rerun.testing.components.AffixFuzzer18".into(),
                            Box::new(array.data_type().clone()),
                            Some("rerun.testing.components.AffixFuzzer18".into()),
                        );
                        (
                            ::arrow2::datatypes::Field::new("fuzz1118", datatype, false),
                            array,
                        )
                    })
                })
                .transpose()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1118")?
            },
            {
                self.fuzz2001
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer1>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer1".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer1".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2001", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2001")?
            },
            {
                self.fuzz2002
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer2>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer2".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer2".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2002", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2002")?
            },
            {
                self.fuzz2003
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer3>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer3".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer3".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2003", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2003")?
            },
            {
                self.fuzz2004
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer4>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer4".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer4".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2004", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2004")?
            },
            {
                self.fuzz2005
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer5>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer5".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer5".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2005", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2005")?
            },
            {
                self.fuzz2006
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer6>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer6".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer6".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2006", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2006")?
            },
            {
                self.fuzz2007
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer7>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer7".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer7".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2007", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2007")?
            },
            {
                self.fuzz2008
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer8>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer8".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer8".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2008", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2008")?
            },
            {
                self.fuzz2009
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer9>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer9".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer9".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2009", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2009")?
            },
            {
                self.fuzz2010
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer10>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer10".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer10".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2010", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2010")?
            },
            {
                self.fuzz2011
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer11>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer11".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer11".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2011", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2011")?
            },
            {
                self.fuzz2012
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer12>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer12".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer12".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2012", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2012")?
            },
            {
                self.fuzz2013
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer13>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer13".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer13".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2013", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2013")?
            },
            {
                self.fuzz2014
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer14>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer14".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer14".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2014", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2014")?
            },
            {
                self.fuzz2015
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer15>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer15".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer15".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2015", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2015")?
            },
            {
                self.fuzz2016
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer16>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer16".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer16".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2016", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2016")?
            },
            {
                self.fuzz2017
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer17>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer17".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer17".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2017", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2017")?
            },
            {
                self.fuzz2018
                    .as_ref()
                    .map(|single| {
                        let array =
                            <crate::testing::components::AffixFuzzer18>::try_to_arrow([single]);
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer18".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer18".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2018", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2018")?
            },
            {
                self.fuzz2101
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer1>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer1".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer1".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2101", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2101")?
            },
            {
                self.fuzz2102
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer2>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer2".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer2".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2102", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2102")?
            },
            {
                self.fuzz2103
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer3>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer3".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer3".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2103", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2103")?
            },
            {
                self.fuzz2104
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer4>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer4".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer4".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2104", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2104")?
            },
            {
                self.fuzz2105
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer5>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer5".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer5".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2105", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2105")?
            },
            {
                self.fuzz2106
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer6>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer6".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer6".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2106", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2106")?
            },
            {
                self.fuzz2107
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer7>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer7".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer7".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2107", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2107")?
            },
            {
                self.fuzz2108
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer8>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer8".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer8".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2108", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2108")?
            },
            {
                self.fuzz2109
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer9>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer9".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer9".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2109", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2109")?
            },
            {
                self.fuzz2110
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer10>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer10".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer10".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2110", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2110")?
            },
            {
                self.fuzz2111
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer11>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer11".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer11".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2111", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2111")?
            },
            {
                self.fuzz2112
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer12>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer12".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer12".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2112", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2112")?
            },
            {
                self.fuzz2113
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer13>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer13".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer13".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2113", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2113")?
            },
            {
                self.fuzz2114
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer14>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer14".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer14".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2114", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2114")?
            },
            {
                self.fuzz2115
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer15>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer15".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer15".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2115", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2115")?
            },
            {
                self.fuzz2116
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer16>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer16".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer16".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2116", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2116")?
            },
            {
                self.fuzz2117
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer17>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer17".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer17".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2117", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2117")?
            },
            {
                self.fuzz2118
                    .as_ref()
                    .map(|many| {
                        let array =
                            <crate::testing::components::AffixFuzzer18>::try_to_arrow(many.iter());
                        array.map(|array| {
                            let datatype = ::arrow2::datatypes::DataType::Extension(
                                "rerun.testing.components.AffixFuzzer18".into(),
                                Box::new(array.data_type().clone()),
                                Some("rerun.testing.components.AffixFuzzer18".into()),
                            );
                            (
                                ::arrow2::datatypes::Field::new("fuzz2118", datatype, false),
                                array,
                            )
                        })
                    })
                    .transpose()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2118")?
            },
        ]
        .into_iter()
        .flatten()
        .collect())
    }

    #[inline]
    fn try_from_arrow(
        arrow_data: impl IntoIterator<
            Item = (::arrow2::datatypes::Field, Box<dyn ::arrow2::array::Array>),
        >,
    ) -> crate::DeserializationResult<Self> {
        use crate::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(field, array)| (field.name, array))
            .collect();
        let fuzz1001 = {
            let array = arrays_by_name
                .get("fuzz1001")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1001")?;
            <crate::testing::components::AffixFuzzer1>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1001")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1001")?
        };
        let fuzz1002 = {
            let array = arrays_by_name
                .get("fuzz1002")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1002")?;
            <crate::testing::components::AffixFuzzer2>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1002")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1002")?
        };
        let fuzz1003 = {
            let array = arrays_by_name
                .get("fuzz1003")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1003")?;
            <crate::testing::components::AffixFuzzer3>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1003")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1003")?
        };
        let fuzz1004 = {
            let array = arrays_by_name
                .get("fuzz1004")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1004")?;
            <crate::testing::components::AffixFuzzer4>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1004")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1004")?
        };
        let fuzz1005 = {
            let array = arrays_by_name
                .get("fuzz1005")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1005")?;
            <crate::testing::components::AffixFuzzer5>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1005")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1005")?
        };
        let fuzz1006 = {
            let array = arrays_by_name
                .get("fuzz1006")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1006")?;
            <crate::testing::components::AffixFuzzer6>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1006")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1006")?
        };
        let fuzz1007 = {
            let array = arrays_by_name
                .get("fuzz1007")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1007")?;
            <crate::testing::components::AffixFuzzer7>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1007")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1007")?
        };
        let fuzz1008 = {
            let array = arrays_by_name
                .get("fuzz1008")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1008")?;
            <crate::testing::components::AffixFuzzer8>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1008")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1008")?
        };
        let fuzz1009 = {
            let array = arrays_by_name
                .get("fuzz1009")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1009")?;
            <crate::testing::components::AffixFuzzer9>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1009")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1009")?
        };
        let fuzz1010 = {
            let array = arrays_by_name
                .get("fuzz1010")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1010")?;
            <crate::testing::components::AffixFuzzer10>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1010")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1010")?
        };
        let fuzz1011 = {
            let array = arrays_by_name
                .get("fuzz1011")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1011")?;
            <crate::testing::components::AffixFuzzer11>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1011")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1011")?
        };
        let fuzz1012 = {
            let array = arrays_by_name
                .get("fuzz1012")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1012")?;
            <crate::testing::components::AffixFuzzer12>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1012")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1012")?
        };
        let fuzz1013 = {
            let array = arrays_by_name
                .get("fuzz1013")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1013")?;
            <crate::testing::components::AffixFuzzer13>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1013")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1013")?
        };
        let fuzz1014 = {
            let array = arrays_by_name
                .get("fuzz1014")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1014")?;
            <crate::testing::components::AffixFuzzer14>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1014")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1014")?
        };
        let fuzz1015 = {
            let array = arrays_by_name
                .get("fuzz1015")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1015")?;
            <crate::testing::components::AffixFuzzer15>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1015")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1015")?
        };
        let fuzz1016 = {
            let array = arrays_by_name
                .get("fuzz1016")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1016")?;
            <crate::testing::components::AffixFuzzer16>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1016")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1016")?
        };
        let fuzz1017 = {
            let array = arrays_by_name
                .get("fuzz1017")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1017")?;
            <crate::testing::components::AffixFuzzer17>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1017")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1017")?
        };
        let fuzz1018 = {
            let array = arrays_by_name
                .get("fuzz1018")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1018")?;
            <crate::testing::components::AffixFuzzer18>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1018")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1018")?
        };
        let fuzz1019 = {
            let array = arrays_by_name
                .get("fuzz1019")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1019")?;
            <crate::testing::components::AffixFuzzer19>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1019")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1019")?
        };
        let fuzz1020 = {
            let array = arrays_by_name
                .get("fuzz1020")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1020")?;
            <crate::testing::components::AffixFuzzer20>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1020")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1020")?
        };
        let fuzz1101 = {
            let array = arrays_by_name
                .get("fuzz1101")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1101")?;
            <crate::testing::components::AffixFuzzer1>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1101")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1101")?
        };
        let fuzz1102 = {
            let array = arrays_by_name
                .get("fuzz1102")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1102")?;
            <crate::testing::components::AffixFuzzer2>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1102")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1102")?
        };
        let fuzz1103 = {
            let array = arrays_by_name
                .get("fuzz1103")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1103")?;
            <crate::testing::components::AffixFuzzer3>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1103")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1103")?
        };
        let fuzz1104 = {
            let array = arrays_by_name
                .get("fuzz1104")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1104")?;
            <crate::testing::components::AffixFuzzer4>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1104")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1104")?
        };
        let fuzz1105 = {
            let array = arrays_by_name
                .get("fuzz1105")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1105")?;
            <crate::testing::components::AffixFuzzer5>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1105")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1105")?
        };
        let fuzz1106 = {
            let array = arrays_by_name
                .get("fuzz1106")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1106")?;
            <crate::testing::components::AffixFuzzer6>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1106")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1106")?
        };
        let fuzz1107 = {
            let array = arrays_by_name
                .get("fuzz1107")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1107")?;
            <crate::testing::components::AffixFuzzer7>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1107")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1107")?
        };
        let fuzz1108 = {
            let array = arrays_by_name
                .get("fuzz1108")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1108")?;
            <crate::testing::components::AffixFuzzer8>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1108")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1108")?
        };
        let fuzz1109 = {
            let array = arrays_by_name
                .get("fuzz1109")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1109")?;
            <crate::testing::components::AffixFuzzer9>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1109")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1109")?
        };
        let fuzz1110 = {
            let array = arrays_by_name
                .get("fuzz1110")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1110")?;
            <crate::testing::components::AffixFuzzer10>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1110")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1110")?
        };
        let fuzz1111 = {
            let array = arrays_by_name
                .get("fuzz1111")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1111")?;
            <crate::testing::components::AffixFuzzer11>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1111")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1111")?
        };
        let fuzz1112 = {
            let array = arrays_by_name
                .get("fuzz1112")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1112")?;
            <crate::testing::components::AffixFuzzer12>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1112")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1112")?
        };
        let fuzz1113 = {
            let array = arrays_by_name
                .get("fuzz1113")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1113")?;
            <crate::testing::components::AffixFuzzer13>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1113")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1113")?
        };
        let fuzz1114 = {
            let array = arrays_by_name
                .get("fuzz1114")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1114")?;
            <crate::testing::components::AffixFuzzer14>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1114")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1114")?
        };
        let fuzz1115 = {
            let array = arrays_by_name
                .get("fuzz1115")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1115")?;
            <crate::testing::components::AffixFuzzer15>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1115")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1115")?
        };
        let fuzz1116 = {
            let array = arrays_by_name
                .get("fuzz1116")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1116")?;
            <crate::testing::components::AffixFuzzer16>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1116")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1116")?
        };
        let fuzz1117 = {
            let array = arrays_by_name
                .get("fuzz1117")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1117")?;
            <crate::testing::components::AffixFuzzer17>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1117")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1117")?
        };
        let fuzz1118 = {
            let array = arrays_by_name
                .get("fuzz1118")
                .ok_or_else(crate::DeserializationError::missing_data)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1118")?;
            <crate::testing::components::AffixFuzzer18>::try_from_arrow_opt(&**array)
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1118")?
                .into_iter()
                .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                .collect::<crate::DeserializationResult<Vec<_>>>()
                .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz1118")?
        };
        let fuzz2001 = if let Some(array) = arrays_by_name.get("fuzz2001") {
            Some({
                <crate::testing::components::AffixFuzzer1>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2001")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2001")?
            })
        } else {
            None
        };
        let fuzz2002 = if let Some(array) = arrays_by_name.get("fuzz2002") {
            Some({
                <crate::testing::components::AffixFuzzer2>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2002")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2002")?
            })
        } else {
            None
        };
        let fuzz2003 = if let Some(array) = arrays_by_name.get("fuzz2003") {
            Some({
                <crate::testing::components::AffixFuzzer3>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2003")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2003")?
            })
        } else {
            None
        };
        let fuzz2004 = if let Some(array) = arrays_by_name.get("fuzz2004") {
            Some({
                <crate::testing::components::AffixFuzzer4>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2004")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2004")?
            })
        } else {
            None
        };
        let fuzz2005 = if let Some(array) = arrays_by_name.get("fuzz2005") {
            Some({
                <crate::testing::components::AffixFuzzer5>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2005")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2005")?
            })
        } else {
            None
        };
        let fuzz2006 = if let Some(array) = arrays_by_name.get("fuzz2006") {
            Some({
                <crate::testing::components::AffixFuzzer6>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2006")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2006")?
            })
        } else {
            None
        };
        let fuzz2007 = if let Some(array) = arrays_by_name.get("fuzz2007") {
            Some({
                <crate::testing::components::AffixFuzzer7>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2007")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2007")?
            })
        } else {
            None
        };
        let fuzz2008 = if let Some(array) = arrays_by_name.get("fuzz2008") {
            Some({
                <crate::testing::components::AffixFuzzer8>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2008")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2008")?
            })
        } else {
            None
        };
        let fuzz2009 = if let Some(array) = arrays_by_name.get("fuzz2009") {
            Some({
                <crate::testing::components::AffixFuzzer9>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2009")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2009")?
            })
        } else {
            None
        };
        let fuzz2010 = if let Some(array) = arrays_by_name.get("fuzz2010") {
            Some({
                <crate::testing::components::AffixFuzzer10>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2010")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2010")?
            })
        } else {
            None
        };
        let fuzz2011 = if let Some(array) = arrays_by_name.get("fuzz2011") {
            Some({
                <crate::testing::components::AffixFuzzer11>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2011")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2011")?
            })
        } else {
            None
        };
        let fuzz2012 = if let Some(array) = arrays_by_name.get("fuzz2012") {
            Some({
                <crate::testing::components::AffixFuzzer12>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2012")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2012")?
            })
        } else {
            None
        };
        let fuzz2013 = if let Some(array) = arrays_by_name.get("fuzz2013") {
            Some({
                <crate::testing::components::AffixFuzzer13>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2013")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2013")?
            })
        } else {
            None
        };
        let fuzz2014 = if let Some(array) = arrays_by_name.get("fuzz2014") {
            Some({
                <crate::testing::components::AffixFuzzer14>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2014")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2014")?
            })
        } else {
            None
        };
        let fuzz2015 = if let Some(array) = arrays_by_name.get("fuzz2015") {
            Some({
                <crate::testing::components::AffixFuzzer15>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2015")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2015")?
            })
        } else {
            None
        };
        let fuzz2016 = if let Some(array) = arrays_by_name.get("fuzz2016") {
            Some({
                <crate::testing::components::AffixFuzzer16>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2016")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2016")?
            })
        } else {
            None
        };
        let fuzz2017 = if let Some(array) = arrays_by_name.get("fuzz2017") {
            Some({
                <crate::testing::components::AffixFuzzer17>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2017")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2017")?
            })
        } else {
            None
        };
        let fuzz2018 = if let Some(array) = arrays_by_name.get("fuzz2018") {
            Some({
                <crate::testing::components::AffixFuzzer18>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2018")?
                    .into_iter()
                    .next()
                    .flatten()
                    .ok_or_else(crate::DeserializationError::missing_data)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2018")?
            })
        } else {
            None
        };
        let fuzz2101 = if let Some(array) = arrays_by_name.get("fuzz2101") {
            Some({
                <crate::testing::components::AffixFuzzer1>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2101")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2101")?
            })
        } else {
            None
        };
        let fuzz2102 = if let Some(array) = arrays_by_name.get("fuzz2102") {
            Some({
                <crate::testing::components::AffixFuzzer2>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2102")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2102")?
            })
        } else {
            None
        };
        let fuzz2103 = if let Some(array) = arrays_by_name.get("fuzz2103") {
            Some({
                <crate::testing::components::AffixFuzzer3>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2103")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2103")?
            })
        } else {
            None
        };
        let fuzz2104 = if let Some(array) = arrays_by_name.get("fuzz2104") {
            Some({
                <crate::testing::components::AffixFuzzer4>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2104")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2104")?
            })
        } else {
            None
        };
        let fuzz2105 = if let Some(array) = arrays_by_name.get("fuzz2105") {
            Some({
                <crate::testing::components::AffixFuzzer5>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2105")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2105")?
            })
        } else {
            None
        };
        let fuzz2106 = if let Some(array) = arrays_by_name.get("fuzz2106") {
            Some({
                <crate::testing::components::AffixFuzzer6>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2106")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2106")?
            })
        } else {
            None
        };
        let fuzz2107 = if let Some(array) = arrays_by_name.get("fuzz2107") {
            Some({
                <crate::testing::components::AffixFuzzer7>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2107")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2107")?
            })
        } else {
            None
        };
        let fuzz2108 = if let Some(array) = arrays_by_name.get("fuzz2108") {
            Some({
                <crate::testing::components::AffixFuzzer8>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2108")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2108")?
            })
        } else {
            None
        };
        let fuzz2109 = if let Some(array) = arrays_by_name.get("fuzz2109") {
            Some({
                <crate::testing::components::AffixFuzzer9>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2109")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2109")?
            })
        } else {
            None
        };
        let fuzz2110 = if let Some(array) = arrays_by_name.get("fuzz2110") {
            Some({
                <crate::testing::components::AffixFuzzer10>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2110")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2110")?
            })
        } else {
            None
        };
        let fuzz2111 = if let Some(array) = arrays_by_name.get("fuzz2111") {
            Some({
                <crate::testing::components::AffixFuzzer11>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2111")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2111")?
            })
        } else {
            None
        };
        let fuzz2112 = if let Some(array) = arrays_by_name.get("fuzz2112") {
            Some({
                <crate::testing::components::AffixFuzzer12>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2112")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2112")?
            })
        } else {
            None
        };
        let fuzz2113 = if let Some(array) = arrays_by_name.get("fuzz2113") {
            Some({
                <crate::testing::components::AffixFuzzer13>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2113")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2113")?
            })
        } else {
            None
        };
        let fuzz2114 = if let Some(array) = arrays_by_name.get("fuzz2114") {
            Some({
                <crate::testing::components::AffixFuzzer14>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2114")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2114")?
            })
        } else {
            None
        };
        let fuzz2115 = if let Some(array) = arrays_by_name.get("fuzz2115") {
            Some({
                <crate::testing::components::AffixFuzzer15>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2115")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2115")?
            })
        } else {
            None
        };
        let fuzz2116 = if let Some(array) = arrays_by_name.get("fuzz2116") {
            Some({
                <crate::testing::components::AffixFuzzer16>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2116")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2116")?
            })
        } else {
            None
        };
        let fuzz2117 = if let Some(array) = arrays_by_name.get("fuzz2117") {
            Some({
                <crate::testing::components::AffixFuzzer17>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2117")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2117")?
            })
        } else {
            None
        };
        let fuzz2118 = if let Some(array) = arrays_by_name.get("fuzz2118") {
            Some({
                <crate::testing::components::AffixFuzzer18>::try_from_arrow_opt(&**array)
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2118")?
                    .into_iter()
                    .map(|v| v.ok_or_else(crate::DeserializationError::missing_data))
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.archetypes.AffixFuzzer1#fuzz2118")?
            })
        } else {
            None
        };
        Ok(Self {
            fuzz1001,
            fuzz1002,
            fuzz1003,
            fuzz1004,
            fuzz1005,
            fuzz1006,
            fuzz1007,
            fuzz1008,
            fuzz1009,
            fuzz1010,
            fuzz1011,
            fuzz1012,
            fuzz1013,
            fuzz1014,
            fuzz1015,
            fuzz1016,
            fuzz1017,
            fuzz1018,
            fuzz1019,
            fuzz1020,
            fuzz1101,
            fuzz1102,
            fuzz1103,
            fuzz1104,
            fuzz1105,
            fuzz1106,
            fuzz1107,
            fuzz1108,
            fuzz1109,
            fuzz1110,
            fuzz1111,
            fuzz1112,
            fuzz1113,
            fuzz1114,
            fuzz1115,
            fuzz1116,
            fuzz1117,
            fuzz1118,
            fuzz2001,
            fuzz2002,
            fuzz2003,
            fuzz2004,
            fuzz2005,
            fuzz2006,
            fuzz2007,
            fuzz2008,
            fuzz2009,
            fuzz2010,
            fuzz2011,
            fuzz2012,
            fuzz2013,
            fuzz2014,
            fuzz2015,
            fuzz2016,
            fuzz2017,
            fuzz2018,
            fuzz2101,
            fuzz2102,
            fuzz2103,
            fuzz2104,
            fuzz2105,
            fuzz2106,
            fuzz2107,
            fuzz2108,
            fuzz2109,
            fuzz2110,
            fuzz2111,
            fuzz2112,
            fuzz2113,
            fuzz2114,
            fuzz2115,
            fuzz2116,
            fuzz2117,
            fuzz2118,
        })
    }
}

impl AffixFuzzer1 {
    pub fn new(
        fuzz1001: impl Into<crate::testing::components::AffixFuzzer1>,
        fuzz1002: impl Into<crate::testing::components::AffixFuzzer2>,
        fuzz1003: impl Into<crate::testing::components::AffixFuzzer3>,
        fuzz1004: impl Into<crate::testing::components::AffixFuzzer4>,
        fuzz1005: impl Into<crate::testing::components::AffixFuzzer5>,
        fuzz1006: impl Into<crate::testing::components::AffixFuzzer6>,
        fuzz1007: impl Into<crate::testing::components::AffixFuzzer7>,
        fuzz1008: impl Into<crate::testing::components::AffixFuzzer8>,
        fuzz1009: impl Into<crate::testing::components::AffixFuzzer9>,
        fuzz1010: impl Into<crate::testing::components::AffixFuzzer10>,
        fuzz1011: impl Into<crate::testing::components::AffixFuzzer11>,
        fuzz1012: impl Into<crate::testing::components::AffixFuzzer12>,
        fuzz1013: impl Into<crate::testing::components::AffixFuzzer13>,
        fuzz1014: impl Into<crate::testing::components::AffixFuzzer14>,
        fuzz1015: impl Into<crate::testing::components::AffixFuzzer15>,
        fuzz1016: impl Into<crate::testing::components::AffixFuzzer16>,
        fuzz1017: impl Into<crate::testing::components::AffixFuzzer17>,
        fuzz1018: impl Into<crate::testing::components::AffixFuzzer18>,
        fuzz1019: impl Into<crate::testing::components::AffixFuzzer19>,
        fuzz1020: impl Into<crate::testing::components::AffixFuzzer20>,
        fuzz1101: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer1>>,
        fuzz1102: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer2>>,
        fuzz1103: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer3>>,
        fuzz1104: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer4>>,
        fuzz1105: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer5>>,
        fuzz1106: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer6>>,
        fuzz1107: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer7>>,
        fuzz1108: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer8>>,
        fuzz1109: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer9>>,
        fuzz1110: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer10>>,
        fuzz1111: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer11>>,
        fuzz1112: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer12>>,
        fuzz1113: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer13>>,
        fuzz1114: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer14>>,
        fuzz1115: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer15>>,
        fuzz1116: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer16>>,
        fuzz1117: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer17>>,
        fuzz1118: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer18>>,
    ) -> Self {
        Self {
            fuzz1001: fuzz1001.into(),
            fuzz1002: fuzz1002.into(),
            fuzz1003: fuzz1003.into(),
            fuzz1004: fuzz1004.into(),
            fuzz1005: fuzz1005.into(),
            fuzz1006: fuzz1006.into(),
            fuzz1007: fuzz1007.into(),
            fuzz1008: fuzz1008.into(),
            fuzz1009: fuzz1009.into(),
            fuzz1010: fuzz1010.into(),
            fuzz1011: fuzz1011.into(),
            fuzz1012: fuzz1012.into(),
            fuzz1013: fuzz1013.into(),
            fuzz1014: fuzz1014.into(),
            fuzz1015: fuzz1015.into(),
            fuzz1016: fuzz1016.into(),
            fuzz1017: fuzz1017.into(),
            fuzz1018: fuzz1018.into(),
            fuzz1019: fuzz1019.into(),
            fuzz1020: fuzz1020.into(),
            fuzz1101: fuzz1101.into_iter().map(Into::into).collect(),
            fuzz1102: fuzz1102.into_iter().map(Into::into).collect(),
            fuzz1103: fuzz1103.into_iter().map(Into::into).collect(),
            fuzz1104: fuzz1104.into_iter().map(Into::into).collect(),
            fuzz1105: fuzz1105.into_iter().map(Into::into).collect(),
            fuzz1106: fuzz1106.into_iter().map(Into::into).collect(),
            fuzz1107: fuzz1107.into_iter().map(Into::into).collect(),
            fuzz1108: fuzz1108.into_iter().map(Into::into).collect(),
            fuzz1109: fuzz1109.into_iter().map(Into::into).collect(),
            fuzz1110: fuzz1110.into_iter().map(Into::into).collect(),
            fuzz1111: fuzz1111.into_iter().map(Into::into).collect(),
            fuzz1112: fuzz1112.into_iter().map(Into::into).collect(),
            fuzz1113: fuzz1113.into_iter().map(Into::into).collect(),
            fuzz1114: fuzz1114.into_iter().map(Into::into).collect(),
            fuzz1115: fuzz1115.into_iter().map(Into::into).collect(),
            fuzz1116: fuzz1116.into_iter().map(Into::into).collect(),
            fuzz1117: fuzz1117.into_iter().map(Into::into).collect(),
            fuzz1118: fuzz1118.into_iter().map(Into::into).collect(),
            fuzz2001: None,
            fuzz2002: None,
            fuzz2003: None,
            fuzz2004: None,
            fuzz2005: None,
            fuzz2006: None,
            fuzz2007: None,
            fuzz2008: None,
            fuzz2009: None,
            fuzz2010: None,
            fuzz2011: None,
            fuzz2012: None,
            fuzz2013: None,
            fuzz2014: None,
            fuzz2015: None,
            fuzz2016: None,
            fuzz2017: None,
            fuzz2018: None,
            fuzz2101: None,
            fuzz2102: None,
            fuzz2103: None,
            fuzz2104: None,
            fuzz2105: None,
            fuzz2106: None,
            fuzz2107: None,
            fuzz2108: None,
            fuzz2109: None,
            fuzz2110: None,
            fuzz2111: None,
            fuzz2112: None,
            fuzz2113: None,
            fuzz2114: None,
            fuzz2115: None,
            fuzz2116: None,
            fuzz2117: None,
            fuzz2118: None,
        }
    }

    pub fn with_fuzz2001(
        mut self,
        fuzz2001: impl Into<crate::testing::components::AffixFuzzer1>,
    ) -> Self {
        self.fuzz2001 = Some(fuzz2001.into());
        self
    }

    pub fn with_fuzz2002(
        mut self,
        fuzz2002: impl Into<crate::testing::components::AffixFuzzer2>,
    ) -> Self {
        self.fuzz2002 = Some(fuzz2002.into());
        self
    }

    pub fn with_fuzz2003(
        mut self,
        fuzz2003: impl Into<crate::testing::components::AffixFuzzer3>,
    ) -> Self {
        self.fuzz2003 = Some(fuzz2003.into());
        self
    }

    pub fn with_fuzz2004(
        mut self,
        fuzz2004: impl Into<crate::testing::components::AffixFuzzer4>,
    ) -> Self {
        self.fuzz2004 = Some(fuzz2004.into());
        self
    }

    pub fn with_fuzz2005(
        mut self,
        fuzz2005: impl Into<crate::testing::components::AffixFuzzer5>,
    ) -> Self {
        self.fuzz2005 = Some(fuzz2005.into());
        self
    }

    pub fn with_fuzz2006(
        mut self,
        fuzz2006: impl Into<crate::testing::components::AffixFuzzer6>,
    ) -> Self {
        self.fuzz2006 = Some(fuzz2006.into());
        self
    }

    pub fn with_fuzz2007(
        mut self,
        fuzz2007: impl Into<crate::testing::components::AffixFuzzer7>,
    ) -> Self {
        self.fuzz2007 = Some(fuzz2007.into());
        self
    }

    pub fn with_fuzz2008(
        mut self,
        fuzz2008: impl Into<crate::testing::components::AffixFuzzer8>,
    ) -> Self {
        self.fuzz2008 = Some(fuzz2008.into());
        self
    }

    pub fn with_fuzz2009(
        mut self,
        fuzz2009: impl Into<crate::testing::components::AffixFuzzer9>,
    ) -> Self {
        self.fuzz2009 = Some(fuzz2009.into());
        self
    }

    pub fn with_fuzz2010(
        mut self,
        fuzz2010: impl Into<crate::testing::components::AffixFuzzer10>,
    ) -> Self {
        self.fuzz2010 = Some(fuzz2010.into());
        self
    }

    pub fn with_fuzz2011(
        mut self,
        fuzz2011: impl Into<crate::testing::components::AffixFuzzer11>,
    ) -> Self {
        self.fuzz2011 = Some(fuzz2011.into());
        self
    }

    pub fn with_fuzz2012(
        mut self,
        fuzz2012: impl Into<crate::testing::components::AffixFuzzer12>,
    ) -> Self {
        self.fuzz2012 = Some(fuzz2012.into());
        self
    }

    pub fn with_fuzz2013(
        mut self,
        fuzz2013: impl Into<crate::testing::components::AffixFuzzer13>,
    ) -> Self {
        self.fuzz2013 = Some(fuzz2013.into());
        self
    }

    pub fn with_fuzz2014(
        mut self,
        fuzz2014: impl Into<crate::testing::components::AffixFuzzer14>,
    ) -> Self {
        self.fuzz2014 = Some(fuzz2014.into());
        self
    }

    pub fn with_fuzz2015(
        mut self,
        fuzz2015: impl Into<crate::testing::components::AffixFuzzer15>,
    ) -> Self {
        self.fuzz2015 = Some(fuzz2015.into());
        self
    }

    pub fn with_fuzz2016(
        mut self,
        fuzz2016: impl Into<crate::testing::components::AffixFuzzer16>,
    ) -> Self {
        self.fuzz2016 = Some(fuzz2016.into());
        self
    }

    pub fn with_fuzz2017(
        mut self,
        fuzz2017: impl Into<crate::testing::components::AffixFuzzer17>,
    ) -> Self {
        self.fuzz2017 = Some(fuzz2017.into());
        self
    }

    pub fn with_fuzz2018(
        mut self,
        fuzz2018: impl Into<crate::testing::components::AffixFuzzer18>,
    ) -> Self {
        self.fuzz2018 = Some(fuzz2018.into());
        self
    }

    pub fn with_fuzz2101(
        mut self,
        fuzz2101: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer1>>,
    ) -> Self {
        self.fuzz2101 = Some(fuzz2101.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2102(
        mut self,
        fuzz2102: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer2>>,
    ) -> Self {
        self.fuzz2102 = Some(fuzz2102.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2103(
        mut self,
        fuzz2103: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer3>>,
    ) -> Self {
        self.fuzz2103 = Some(fuzz2103.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2104(
        mut self,
        fuzz2104: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer4>>,
    ) -> Self {
        self.fuzz2104 = Some(fuzz2104.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2105(
        mut self,
        fuzz2105: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer5>>,
    ) -> Self {
        self.fuzz2105 = Some(fuzz2105.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2106(
        mut self,
        fuzz2106: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer6>>,
    ) -> Self {
        self.fuzz2106 = Some(fuzz2106.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2107(
        mut self,
        fuzz2107: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer7>>,
    ) -> Self {
        self.fuzz2107 = Some(fuzz2107.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2108(
        mut self,
        fuzz2108: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer8>>,
    ) -> Self {
        self.fuzz2108 = Some(fuzz2108.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2109(
        mut self,
        fuzz2109: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer9>>,
    ) -> Self {
        self.fuzz2109 = Some(fuzz2109.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2110(
        mut self,
        fuzz2110: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer10>>,
    ) -> Self {
        self.fuzz2110 = Some(fuzz2110.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2111(
        mut self,
        fuzz2111: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer11>>,
    ) -> Self {
        self.fuzz2111 = Some(fuzz2111.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2112(
        mut self,
        fuzz2112: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer12>>,
    ) -> Self {
        self.fuzz2112 = Some(fuzz2112.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2113(
        mut self,
        fuzz2113: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer13>>,
    ) -> Self {
        self.fuzz2113 = Some(fuzz2113.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2114(
        mut self,
        fuzz2114: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer14>>,
    ) -> Self {
        self.fuzz2114 = Some(fuzz2114.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2115(
        mut self,
        fuzz2115: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer15>>,
    ) -> Self {
        self.fuzz2115 = Some(fuzz2115.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2116(
        mut self,
        fuzz2116: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer16>>,
    ) -> Self {
        self.fuzz2116 = Some(fuzz2116.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2117(
        mut self,
        fuzz2117: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer17>>,
    ) -> Self {
        self.fuzz2117 = Some(fuzz2117.into_iter().map(Into::into).collect());
        self
    }

    pub fn with_fuzz2118(
        mut self,
        fuzz2118: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer18>>,
    ) -> Self {
        self.fuzz2118 = Some(fuzz2118.into_iter().map(Into::into).collect());
        self
    }
}
