// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/re_types/definitions/rerun/testing/datatypes/fuzzy.fbs".

#![allow(trivial_numeric_casts)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

#[derive(Clone, Debug, Default, PartialEq)]
pub struct AffixFuzzer1 {
    pub single_float_optional: Option<f32>,
    pub single_string_required: ::re_types_core::ArrowString,
    pub single_string_optional: Option<::re_types_core::ArrowString>,
    pub many_floats_optional: Option<::re_types_core::ArrowBuffer<f32>>,
    pub many_strings_required: Vec<::re_types_core::ArrowString>,
    pub many_strings_optional: Option<Vec<::re_types_core::ArrowString>>,
    pub flattened_scalar: f32,
    pub almost_flattened_scalar: crate::testing::datatypes::FlattenedScalar,
    pub from_parent: Option<bool>,
}

impl ::re_types_core::SizeBytes for AffixFuzzer1 {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.single_float_optional.heap_size_bytes()
            + self.single_string_required.heap_size_bytes()
            + self.single_string_optional.heap_size_bytes()
            + self.many_floats_optional.heap_size_bytes()
            + self.many_strings_required.heap_size_bytes()
            + self.many_strings_optional.heap_size_bytes()
            + self.flattened_scalar.heap_size_bytes()
            + self.almost_flattened_scalar.heap_size_bytes()
            + self.from_parent.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Option<f32>>::is_pod()
            && <::re_types_core::ArrowString>::is_pod()
            && <Option<::re_types_core::ArrowString>>::is_pod()
            && <Option<::re_types_core::ArrowBuffer<f32>>>::is_pod()
            && <Vec<::re_types_core::ArrowString>>::is_pod()
            && <Option<Vec<::re_types_core::ArrowString>>>::is_pod()
            && <f32>::is_pod()
            && <crate::testing::datatypes::FlattenedScalar>::is_pod()
            && <Option<bool>>::is_pod()
    }
}

::re_types_core::macros::impl_into_cow!(AffixFuzzer1);

impl ::re_types_core::Loggable for AffixFuzzer1 {
    type Name = ::re_types_core::DatatypeName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.testing.datatypes.AffixFuzzer1".into()
    }

    #[allow(clippy::wildcard_imports)]
    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        use arrow2::datatypes::*;
        DataType::Struct(std::sync::Arc::new(vec![
            Field::new("single_float_optional", DataType::Float32, true),
            Field::new("single_string_required", DataType::Utf8, false),
            Field::new("single_string_optional", DataType::Utf8, true),
            Field::new(
                "many_floats_optional",
                DataType::List(std::sync::Arc::new(Field::new(
                    "item",
                    DataType::Float32,
                    false,
                ))),
                true,
            ),
            Field::new(
                "many_strings_required",
                DataType::List(std::sync::Arc::new(Field::new(
                    "item",
                    DataType::Utf8,
                    false,
                ))),
                false,
            ),
            Field::new(
                "many_strings_optional",
                DataType::List(std::sync::Arc::new(Field::new(
                    "item",
                    DataType::Utf8,
                    false,
                ))),
                true,
            ),
            Field::new("flattened_scalar", DataType::Float32, false),
            Field::new(
                "almost_flattened_scalar",
                <crate::testing::datatypes::FlattenedScalar>::arrow_datatype(),
                false,
            ),
            Field::new("from_parent", DataType::Boolean, true),
        ]))
    }

    #[allow(clippy::wildcard_imports)]
    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                <crate::testing::datatypes::AffixFuzzer1>::arrow_datatype(),
                vec![
                    {
                        let (somes, single_float_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            single_float_optional,
                                            ..
                                        } = &**datum;
                                        single_float_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_float_optional_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            DataType::Float32,
                            single_float_optional
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            single_float_optional_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, single_string_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        single_string_required,
                                        ..
                                    } = &**datum;
                                    single_string_required.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_string_required_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: arrow2::buffer::Buffer<u8> = single_string_required
                                .iter()
                                .flatten()
                                .flat_map(|s| s.0.clone())
                                .collect();
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                single_string_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.0.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    DataType::Utf8,
                                    offsets,
                                    inner_data,
                                    single_string_required_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, single_string_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            single_string_optional,
                                            ..
                                        } = &**datum;
                                        single_string_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_string_optional_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: arrow2::buffer::Buffer<u8> = single_string_optional
                                .iter()
                                .flatten()
                                .flat_map(|s| s.0.clone())
                                .collect();
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                single_string_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.0.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    DataType::Utf8,
                                    offsets,
                                    inner_data,
                                    single_string_optional_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_floats_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            many_floats_optional,
                                            ..
                                        } = &**datum;
                                        many_floats_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_floats_optional_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_floats_optional_inner_data: Buffer<_> = many_floats_optional
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let many_floats_optional_inner_bitmap: Option<arrow2::bitmap::Bitmap> =
                                None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_floats_optional.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Float32,
                                    false,
                                ))),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Float32,
                                    many_floats_optional_inner_data,
                                    many_floats_optional_inner_bitmap,
                                )
                                .boxed(),
                                many_floats_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_strings_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        many_strings_required,
                                        ..
                                    } = &**datum;
                                    many_strings_required.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_strings_required_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_strings_required_inner_data: Vec<_> = many_strings_required
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_strings_required_inner_bitmap: Option<arrow2::bitmap::Bitmap> =
                                None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_strings_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Utf8,
                                    false,
                                ))),
                                offsets,
                                {
                                    let inner_data: arrow2::buffer::Buffer<u8> =
                                        many_strings_required_inner_data
                                            .iter()
                                            .flatten()
                                            .flat_map(|s| s.0.clone())
                                            .collect();
                                    let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                        many_strings_required_inner_data.iter().map(|opt| {
                                            opt.as_ref()
                                                .map(|datum| datum.0.len())
                                                .unwrap_or_default()
                                        }),
                                    )
                                    .unwrap()
                                    .into();
                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe {
                                        Utf8Array::<i32>::new_unchecked(
                                            DataType::Utf8,
                                            offsets,
                                            inner_data,
                                            many_strings_required_inner_bitmap,
                                        )
                                    }
                                    .boxed()
                                },
                                many_strings_required_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_strings_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            many_strings_optional,
                                            ..
                                        } = &**datum;
                                        many_strings_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_strings_optional_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_strings_optional_inner_data: Vec<_> = many_strings_optional
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_strings_optional_inner_bitmap: Option<arrow2::bitmap::Bitmap> =
                                None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_strings_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Utf8,
                                    false,
                                ))),
                                offsets,
                                {
                                    let inner_data: arrow2::buffer::Buffer<u8> =
                                        many_strings_optional_inner_data
                                            .iter()
                                            .flatten()
                                            .flat_map(|s| s.0.clone())
                                            .collect();
                                    let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                        many_strings_optional_inner_data.iter().map(|opt| {
                                            opt.as_ref()
                                                .map(|datum| datum.0.len())
                                                .unwrap_or_default()
                                        }),
                                    )
                                    .unwrap()
                                    .into();
                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe {
                                        Utf8Array::<i32>::new_unchecked(
                                            DataType::Utf8,
                                            offsets,
                                            inner_data,
                                            many_strings_optional_inner_bitmap,
                                        )
                                    }
                                    .boxed()
                                },
                                many_strings_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, flattened_scalar): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        flattened_scalar, ..
                                    } = &**datum;
                                    flattened_scalar.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let flattened_scalar_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            DataType::Float32,
                            flattened_scalar
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            flattened_scalar_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, almost_flattened_scalar): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        almost_flattened_scalar,
                                        ..
                                    } = &**datum;
                                    almost_flattened_scalar.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let almost_flattened_scalar_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            _ = almost_flattened_scalar_bitmap;
                            crate::testing::datatypes::FlattenedScalar::to_arrow_opt(
                                almost_flattened_scalar,
                            )?
                        }
                    },
                    {
                        let (somes, from_parent): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self { from_parent, .. } = &**datum;
                                        from_parent.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let from_parent_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        BooleanArray::new(
                            DataType::Boolean,
                            from_parent
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            from_parent_bitmap,
                        )
                        .boxed()
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(clippy::wildcard_imports)]
    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.testing.datatypes.AffixFuzzer1")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let single_float_optional = {
                    if !arrays_by_name.contains_key("single_float_optional") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "single_float_optional",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["single_float_optional"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float32Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float32;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.testing.datatypes.AffixFuzzer1#single_float_optional")?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                let single_string_required = {
                    if !arrays_by_name.contains_key("single_string_required") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "single_string_required",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["single_string_required"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::Utf8;
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.testing.datatypes.AffixFuzzer1#single_string_required",
                            )?;
                        let arrow_data_buf = arrow_data.values();
                        let offsets = arrow_data.offsets();
                        arrow2::bitmap::utils::ZipValidity::new_with_validity(
                            offsets.iter().zip(offsets.lengths()),
                            arrow_data.validity(),
                        )
                        .map(|elem| {
                            elem.map(|(start, len)| {
                                let start = *start as usize;
                                let end = start + len;
                                if end as usize > arrow_data_buf.len() {
                                    return Err(DeserializationError::offset_slice_oob(
                                        (start, end),
                                        arrow_data_buf.len(),
                                    ));
                                }

                                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                let data =
                                    unsafe { arrow_data_buf.clone().sliced_unchecked(start, len) };
                                Ok(data)
                            })
                            .transpose()
                        })
                        .map(|res_or_opt| {
                            res_or_opt.map(|res_or_opt| {
                                res_or_opt.map(|v| ::re_types_core::ArrowString(v))
                            })
                        })
                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                        .with_context(
                            "rerun.testing.datatypes.AffixFuzzer1#single_string_required",
                        )?
                        .into_iter()
                    }
                };
                let single_string_optional = {
                    if !arrays_by_name.contains_key("single_string_optional") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "single_string_optional",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["single_string_optional"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::Utf8;
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.testing.datatypes.AffixFuzzer1#single_string_optional",
                            )?;
                        let arrow_data_buf = arrow_data.values();
                        let offsets = arrow_data.offsets();
                        arrow2::bitmap::utils::ZipValidity::new_with_validity(
                            offsets.iter().zip(offsets.lengths()),
                            arrow_data.validity(),
                        )
                        .map(|elem| {
                            elem.map(|(start, len)| {
                                let start = *start as usize;
                                let end = start + len;
                                if end as usize > arrow_data_buf.len() {
                                    return Err(DeserializationError::offset_slice_oob(
                                        (start, end),
                                        arrow_data_buf.len(),
                                    ));
                                }

                                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                let data =
                                    unsafe { arrow_data_buf.clone().sliced_unchecked(start, len) };
                                Ok(data)
                            })
                            .transpose()
                        })
                        .map(|res_or_opt| {
                            res_or_opt.map(|res_or_opt| {
                                res_or_opt.map(|v| ::re_types_core::ArrowString(v))
                            })
                        })
                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                        .with_context(
                            "rerun.testing.datatypes.AffixFuzzer1#single_string_optional",
                        )?
                        .into_iter()
                    }
                };
                let many_floats_optional = {
                    if !arrays_by_name.contains_key("many_floats_optional") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "many_floats_optional",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["many_floats_optional"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Float32,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.testing.datatypes.AffixFuzzer1#many_floats_optional",
                            )?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float32Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Float32;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context(
                                        "rerun.testing.datatypes.AffixFuzzer1#many_floats_optional",
                                    )?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                };
                let many_strings_required = {
                    if !arrays_by_name.contains_key("many_strings_required") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "many_strings_required",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["many_strings_required"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Utf8,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.testing.datatypes.AffixFuzzer1#many_strings_required",
                            )?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                {
                                    let arrow_data_inner = arrow_data_inner
                                        .as_any()
                                        .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                                        .ok_or_else(|| {
                                            let expected = DataType::Utf8;
                                            let actual = arrow_data_inner.data_type().clone();
                                            DeserializationError::datatype_mismatch(expected, actual)
                                        })
                                        .with_context(
                                            "rerun.testing.datatypes.AffixFuzzer1#many_strings_required",
                                        )?;
                                    let arrow_data_inner_buf = arrow_data_inner.values();
                                    let offsets = arrow_data_inner.offsets();
                                    arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                            offsets.iter().zip(offsets.lengths()),
                                            arrow_data_inner.validity(),
                                        )
                                        .map(|elem| {
                                            elem
                                                .map(|(start, len)| {
                                                    let start = *start as usize;
                                                    let end = start + len;
                                                    if end as usize > arrow_data_inner_buf.len() {
                                                        return Err(
                                                            DeserializationError::offset_slice_oob(
                                                                (start, end),
                                                                arrow_data_inner_buf.len(),
                                                            ),
                                                        );
                                                    }

                                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                                    let data = unsafe {
                                                        arrow_data_inner_buf.clone().sliced_unchecked(start, len)
                                                    };
                                                    Ok(data)
                                                })
                                                .transpose()
                                        })
                                        .map(|res_or_opt| {
                                            res_or_opt
                                                .map(|res_or_opt| {
                                                    res_or_opt.map(|v| ::re_types_core::ArrowString(v))
                                                })
                                        })
                                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                                        .with_context(
                                            "rerun.testing.datatypes.AffixFuzzer1#many_strings_required",
                                        )?
                                        .into_iter()
                                }
                                    .collect::<Vec<_>>()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                    offsets.iter().zip(offsets.lengths()),
                                    arrow_data.validity(),
                                )
                                .map(|elem| {
                                    elem
                                        .map(|(start, len)| {
                                            let start = *start as usize;
                                            let end = start + len;
                                            if end as usize > arrow_data_inner.len() {
                                                return Err(
                                                    DeserializationError::offset_slice_oob(
                                                        (start, end),
                                                        arrow_data_inner.len(),
                                                    ),
                                                );
                                            }

                                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                            let data = unsafe {
                                                arrow_data_inner.get_unchecked(start as usize..end as usize)
                                            };
                                            let data = data
                                                .iter()
                                                .cloned()
                                                .map(Option::unwrap_or_default)
                                                .collect();
                                            Ok(data)
                                        })
                                        .transpose()
                                })
                                .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                            .into_iter()
                    }
                };
                let many_strings_optional = {
                    if !arrays_by_name.contains_key("many_strings_optional") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "many_strings_optional",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["many_strings_optional"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Utf8,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.testing.datatypes.AffixFuzzer1#many_strings_optional",
                            )?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                {
                                    let arrow_data_inner = arrow_data_inner
                                        .as_any()
                                        .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                                        .ok_or_else(|| {
                                            let expected = DataType::Utf8;
                                            let actual = arrow_data_inner.data_type().clone();
                                            DeserializationError::datatype_mismatch(expected, actual)
                                        })
                                        .with_context(
                                            "rerun.testing.datatypes.AffixFuzzer1#many_strings_optional",
                                        )?;
                                    let arrow_data_inner_buf = arrow_data_inner.values();
                                    let offsets = arrow_data_inner.offsets();
                                    arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                            offsets.iter().zip(offsets.lengths()),
                                            arrow_data_inner.validity(),
                                        )
                                        .map(|elem| {
                                            elem
                                                .map(|(start, len)| {
                                                    let start = *start as usize;
                                                    let end = start + len;
                                                    if end as usize > arrow_data_inner_buf.len() {
                                                        return Err(
                                                            DeserializationError::offset_slice_oob(
                                                                (start, end),
                                                                arrow_data_inner_buf.len(),
                                                            ),
                                                        );
                                                    }

                                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                                    let data = unsafe {
                                                        arrow_data_inner_buf.clone().sliced_unchecked(start, len)
                                                    };
                                                    Ok(data)
                                                })
                                                .transpose()
                                        })
                                        .map(|res_or_opt| {
                                            res_or_opt
                                                .map(|res_or_opt| {
                                                    res_or_opt.map(|v| ::re_types_core::ArrowString(v))
                                                })
                                        })
                                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                                        .with_context(
                                            "rerun.testing.datatypes.AffixFuzzer1#many_strings_optional",
                                        )?
                                        .into_iter()
                                }
                                    .collect::<Vec<_>>()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                    offsets.iter().zip(offsets.lengths()),
                                    arrow_data.validity(),
                                )
                                .map(|elem| {
                                    elem
                                        .map(|(start, len)| {
                                            let start = *start as usize;
                                            let end = start + len;
                                            if end as usize > arrow_data_inner.len() {
                                                return Err(
                                                    DeserializationError::offset_slice_oob(
                                                        (start, end),
                                                        arrow_data_inner.len(),
                                                    ),
                                                );
                                            }

                                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                            let data = unsafe {
                                                arrow_data_inner.get_unchecked(start as usize..end as usize)
                                            };
                                            let data = data
                                                .iter()
                                                .cloned()
                                                .map(Option::unwrap_or_default)
                                                .collect();
                                            Ok(data)
                                        })
                                        .transpose()
                                })
                                .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                            .into_iter()
                    }
                };
                let flattened_scalar = {
                    if !arrays_by_name.contains_key("flattened_scalar") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "flattened_scalar",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["flattened_scalar"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float32Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float32;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.testing.datatypes.AffixFuzzer1#flattened_scalar")?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                let almost_flattened_scalar = {
                    if !arrays_by_name.contains_key("almost_flattened_scalar") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "almost_flattened_scalar",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["almost_flattened_scalar"];
                    crate::testing::datatypes::FlattenedScalar::from_arrow_opt(arrow_data)
                        .with_context(
                            "rerun.testing.datatypes.AffixFuzzer1#almost_flattened_scalar",
                        )?
                        .into_iter()
                };
                let from_parent = {
                    if !arrays_by_name.contains_key("from_parent") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "from_parent",
                        ))
                        .with_context("rerun.testing.datatypes.AffixFuzzer1");
                    }
                    let arrow_data = &**arrays_by_name["from_parent"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<BooleanArray>()
                        .ok_or_else(|| {
                            let expected = DataType::Boolean;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.testing.datatypes.AffixFuzzer1#from_parent")?
                        .into_iter()
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                        ::itertools::izip!(
                            single_float_optional, single_string_required,
                            single_string_optional, many_floats_optional,
                            many_strings_required, many_strings_optional,
                            flattened_scalar, almost_flattened_scalar, from_parent
                        ),
                        arrow_data.validity(),
                    )
                    .map(|opt| {
                        opt
                            .map(|
                                (
                                    single_float_optional,
                                    single_string_required,
                                    single_string_optional,
                                    many_floats_optional,
                                    many_strings_required,
                                    many_strings_optional,
                                    flattened_scalar,
                                    almost_flattened_scalar,
                                    from_parent,
                                )|
                            Ok(Self {
                                single_float_optional,
                                single_string_required: single_string_required
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.testing.datatypes.AffixFuzzer1#single_string_required",
                                    )?,
                                single_string_optional,
                                many_floats_optional,
                                many_strings_required: many_strings_required
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.testing.datatypes.AffixFuzzer1#many_strings_required",
                                    )?,
                                many_strings_optional,
                                flattened_scalar: flattened_scalar
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.testing.datatypes.AffixFuzzer1#flattened_scalar",
                                    )?,
                                almost_flattened_scalar: almost_flattened_scalar
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.testing.datatypes.AffixFuzzer1#almost_flattened_scalar",
                                    )?,
                                from_parent,
                            }))
                            .transpose()
                    })
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.testing.datatypes.AffixFuzzer1")?
            }
        })
    }
}
