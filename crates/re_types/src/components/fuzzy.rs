// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::unnecessary_cast)]

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer1 {
    pub single_required: crate::datatypes::AffixFuzzer1,
}

impl crate::Component for AffixFuzzer1 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer1".to_owned(),
            Box::new(DataType::Extension(
                "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                Box::new(DataType::Struct(vec![
                    Field {
                        name: "single_float_optional".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_required".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_optional".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_floats_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_required".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: false,
                            metadata: [].into(),
                        })),
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                ])),
                None,
            )),
            None,
        )
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer2(pub crate::datatypes::AffixFuzzer1);

impl crate::Component for AffixFuzzer2 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer2".to_owned(),
            Box::new(DataType::Extension(
                "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                Box::new(DataType::Struct(vec![
                    Field {
                        name: "single_float_optional".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_required".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_optional".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_floats_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_required".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: false,
                            metadata: [].into(),
                        })),
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                ])),
                None,
            )),
            None,
        )
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer3 {
    pub single_required: crate::datatypes::AffixFuzzer1,
}

impl crate::Component for AffixFuzzer3 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer3".to_owned(),
            Box::new(DataType::Struct(vec![Field {
                name: "single_required".to_owned(),
                data_type: DataType::Extension(
                    "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                    Box::new(DataType::Struct(vec![
                        Field {
                            name: "single_float_optional".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: true,
                            metadata: [].into(),
                        },
                        Field {
                            name: "single_string_required".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: false,
                            metadata: [].into(),
                        },
                        Field {
                            name: "single_string_optional".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: true,
                            metadata: [].into(),
                        },
                        Field {
                            name: "many_floats_optional".to_owned(),
                            data_type: DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Float32,
                                is_nullable: true,
                                metadata: [].into(),
                            })),
                            is_nullable: true,
                            metadata: [].into(),
                        },
                        Field {
                            name: "many_strings_required".to_owned(),
                            data_type: DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            })),
                            is_nullable: false,
                            metadata: [].into(),
                        },
                        Field {
                            name: "many_strings_optional".to_owned(),
                            data_type: DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: true,
                                metadata: [].into(),
                            })),
                            is_nullable: true,
                            metadata: [].into(),
                        },
                    ])),
                    None,
                ),
                is_nullable: false,
                metadata: [].into(),
            }])),
            None,
        )
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer4 {
    pub single_optional: Option<crate::datatypes::AffixFuzzer1>,
}

impl crate::Component for AffixFuzzer4 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer4".to_owned(),
            Box::new(DataType::Extension(
                "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                Box::new(DataType::Struct(vec![
                    Field {
                        name: "single_float_optional".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_required".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_optional".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_floats_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_required".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: false,
                            metadata: [].into(),
                        })),
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                ])),
                None,
            )),
            None,
        )
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer5(pub Option<crate::datatypes::AffixFuzzer1>);

impl crate::Component for AffixFuzzer5 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer5".to_owned(),
            Box::new(DataType::Extension(
                "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                Box::new(DataType::Struct(vec![
                    Field {
                        name: "single_float_optional".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_required".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "single_string_optional".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_floats_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_required".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: false,
                            metadata: [].into(),
                        })),
                        is_nullable: false,
                        metadata: [].into(),
                    },
                    Field {
                        name: "many_strings_optional".to_owned(),
                        data_type: DataType::List(Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: true,
                            metadata: [].into(),
                        })),
                        is_nullable: true,
                        metadata: [].into(),
                    },
                ])),
                None,
            )),
            None,
        )
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer6 {
    pub single_optional: Option<crate::datatypes::AffixFuzzer1>,
}

impl crate::Component for AffixFuzzer6 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer6".to_owned(),
            Box::new(DataType::Struct(vec![Field {
                name: "single_optional".to_owned(),
                data_type: DataType::Extension(
                    "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                    Box::new(DataType::Struct(vec![
                        Field {
                            name: "single_float_optional".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: true,
                            metadata: [].into(),
                        },
                        Field {
                            name: "single_string_required".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: false,
                            metadata: [].into(),
                        },
                        Field {
                            name: "single_string_optional".to_owned(),
                            data_type: DataType::Utf8,
                            is_nullable: true,
                            metadata: [].into(),
                        },
                        Field {
                            name: "many_floats_optional".to_owned(),
                            data_type: DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Float32,
                                is_nullable: true,
                                metadata: [].into(),
                            })),
                            is_nullable: true,
                            metadata: [].into(),
                        },
                        Field {
                            name: "many_strings_required".to_owned(),
                            data_type: DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            })),
                            is_nullable: false,
                            metadata: [].into(),
                        },
                        Field {
                            name: "many_strings_optional".to_owned(),
                            data_type: DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: true,
                                metadata: [].into(),
                            })),
                            is_nullable: true,
                            metadata: [].into(),
                        },
                    ])),
                    None,
                ),
                is_nullable: true,
                metadata: [].into(),
            }])),
            None,
        )
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer7 {
    pub many_optional: Option<Vec<crate::datatypes::AffixFuzzer1>>,
    pub single_float_optional: Option<f32>,
    pub single_string_required: String,
    pub single_string_optional: Option<String>,
    pub many_floats_optional: Option<Vec<f32>>,
    pub many_strings_required: Vec<String>,
    pub many_strings_optional: Option<Vec<String>>,
}

impl crate::Component for AffixFuzzer7 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Extension(
            "rerun.testing.components.AffixFuzzer7".to_owned(),
            Box::new(DataType::Struct(vec![
                Field {
                    name: "many_optional".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Extension(
                            "rerun.testing.datatypes.AffixFuzzer1".to_owned(),
                            Box::new(DataType::Struct(vec![
                                Field {
                                    name: "single_float_optional".to_owned(),
                                    data_type: DataType::Float32,
                                    is_nullable: true,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "single_string_required".to_owned(),
                                    data_type: DataType::Utf8,
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "single_string_optional".to_owned(),
                                    data_type: DataType::Utf8,
                                    is_nullable: true,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "many_floats_optional".to_owned(),
                                    data_type: DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float32,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: true,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "many_strings_required".to_owned(),
                                    data_type: DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "many_strings_optional".to_owned(),
                                    data_type: DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: true,
                                    metadata: [].into(),
                                },
                            ])),
                            None,
                        ),
                        is_nullable: true,
                        metadata: [].into(),
                    })),
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "single_float_optional".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "single_string_required".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "single_string_optional".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "many_floats_optional".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: true,
                        metadata: [].into(),
                    })),
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "many_strings_required".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "many_strings_optional".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: true,
                        metadata: [].into(),
                    })),
                    is_nullable: true,
                    metadata: [].into(),
                },
            ])),
            None,
        )
    }
}
