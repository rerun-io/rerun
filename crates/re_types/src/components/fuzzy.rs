// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer1 {
    pub single_required: crate::datatypes::AffixFuzzer1,
}

impl<'a> From<AffixFuzzer1> for ::std::borrow::Cow<'a, AffixFuzzer1> {
    #[inline]
    fn from(value: AffixFuzzer1) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer1> for ::std::borrow::Cow<'a, AffixFuzzer1> {
    #[inline]
    fn from(value: &'a AffixFuzzer1) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer1 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer1")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_required): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self { single_required } = datum.into_owned();
                        single_required
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = single_required_bitmap;
                _ = extension_wrapper;
                crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                    single_required,
                    Some("rerun.testing.components.AffixFuzzer1"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
            .into_iter()
            .map(|v| {
                v.ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: data.data_type().clone(),
                })
            })
            .map(|res| res.map(|single_required| Some(Self { single_required })))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer2(pub crate::datatypes::AffixFuzzer1);

impl<'a> From<AffixFuzzer2> for ::std::borrow::Cow<'a, AffixFuzzer2> {
    #[inline]
    fn from(value: AffixFuzzer2) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer2> for ::std::borrow::Cow<'a, AffixFuzzer2> {
    #[inline]
    fn from(value: &'a AffixFuzzer2) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer2 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer2")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self(data0) = datum.into_owned();
                        data0
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer2"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
            .into_iter()
            .map(|v| {
                v.ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: data.data_type().clone(),
                })
            })
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer3 {
    pub single_required: crate::datatypes::AffixFuzzer1,
}

impl<'a> From<AffixFuzzer3> for ::std::borrow::Cow<'a, AffixFuzzer3> {
    #[inline]
    fn from(value: AffixFuzzer3) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer3> for ::std::borrow::Cow<'a, AffixFuzzer3> {
    #[inline]
    fn from(value: &'a AffixFuzzer3) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer3 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer3")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_required): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self { single_required } = datum.into_owned();
                        single_required
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = single_required_bitmap;
                _ = extension_wrapper;
                crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                    single_required,
                    Some("rerun.testing.components.AffixFuzzer3"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
            .into_iter()
            .map(|v| {
                v.ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: data.data_type().clone(),
                })
            })
            .map(|res| res.map(|single_required| Some(Self { single_required })))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer4 {
    pub single_optional: Option<crate::datatypes::AffixFuzzer1>,
}

impl<'a> From<AffixFuzzer4> for ::std::borrow::Cow<'a, AffixFuzzer4> {
    #[inline]
    fn from(value: AffixFuzzer4) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer4> for ::std::borrow::Cow<'a, AffixFuzzer4> {
    #[inline]
    fn from(value: &'a AffixFuzzer4) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer4 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer4")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self { single_optional } = datum.into_owned();
                            single_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = single_optional_bitmap;
                _ = extension_wrapper;
                crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                    single_optional,
                    Some("rerun.testing.components.AffixFuzzer4"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
            .into_iter()
            .map(Ok)
            .map(|res| res.map(|single_optional| Some(Self { single_optional })))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer5(pub Option<crate::datatypes::AffixFuzzer1>);

impl<'a> From<AffixFuzzer5> for ::std::borrow::Cow<'a, AffixFuzzer5> {
    #[inline]
    fn from(value: AffixFuzzer5) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer5> for ::std::borrow::Cow<'a, AffixFuzzer5> {
    #[inline]
    fn from(value: &'a AffixFuzzer5) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer5 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer5")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = data0_bitmap;
                _ = extension_wrapper;
                crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                    data0,
                    Some("rerun.testing.components.AffixFuzzer5"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
            .into_iter()
            .map(Ok)
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer6 {
    pub single_optional: Option<crate::datatypes::AffixFuzzer1>,
}

impl<'a> From<AffixFuzzer6> for ::std::borrow::Cow<'a, AffixFuzzer6> {
    #[inline]
    fn from(value: AffixFuzzer6) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer6> for ::std::borrow::Cow<'a, AffixFuzzer6> {
    #[inline]
    fn from(value: &'a AffixFuzzer6) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer6 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer6")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self { single_optional } = datum.into_owned();
                            single_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                _ = single_optional_bitmap;
                _ = extension_wrapper;
                crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                    single_optional,
                    Some("rerun.testing.components.AffixFuzzer6"),
                )?
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
            .into_iter()
            .map(Ok)
            .map(|res| res.map(|single_optional| Some(Self { single_optional })))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer7 {
    pub many_optional: Option<Vec<crate::datatypes::AffixFuzzer1>>,
}

impl<'a> From<AffixFuzzer7> for ::std::borrow::Cow<'a, AffixFuzzer7> {
    #[inline]
    fn from(value: AffixFuzzer7) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer7> for ::std::borrow::Cow<'a, AffixFuzzer7> {
    #[inline]
    fn from(value: &'a AffixFuzzer7) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer7 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer7")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Struct(vec![
                Field {
                    name: "single_float_optional".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "single_string_required".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "single_string_optional".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "many_floats_optional".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: true,
                        metadata: [].into(),
                    })),
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "many_strings_required".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "many_strings_optional".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Utf8,
                        is_nullable: true,
                        metadata: [].into(),
                    })),
                    is_nullable: true,
                    metadata: [].into(),
                },
            ]),
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, many_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self { many_optional } = datum.into_owned();
                            many_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let many_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let many_optional_inner_data: Vec<_> = many_optional
                    .iter()
                    .flatten()
                    .flatten()
                    .map(ToOwned::to_owned)
                    .map(Some)
                    .collect();
                let many_optional_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                    let any_nones = many_optional_inner_data.iter().any(|v| v.is_none());
                    any_nones.then(|| {
                        many_optional_inner_data
                            .iter()
                            .map(|v| v.is_some())
                            .collect()
                    })
                };
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    many_optional
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer7".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Struct(vec![
                                    Field {
                                        name: "single_float_optional".to_owned(),
                                        data_type: DataType::Float32,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    },
                                    Field {
                                        name: "single_string_required".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    },
                                    Field {
                                        name: "single_string_optional".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    },
                                    Field {
                                        name: "many_floats_optional".to_owned(),
                                        data_type: DataType::List(Box::new(Field {
                                            name: "item".to_owned(),
                                            data_type: DataType::Float32,
                                            is_nullable: true,
                                            metadata: [].into(),
                                        })),
                                        is_nullable: true,
                                        metadata: [].into(),
                                    },
                                    Field {
                                        name: "many_strings_required".to_owned(),
                                        data_type: DataType::List(Box::new(Field {
                                            name: "item".to_owned(),
                                            data_type: DataType::Utf8,
                                            is_nullable: false,
                                            metadata: [].into(),
                                        })),
                                        is_nullable: false,
                                        metadata: [].into(),
                                    },
                                    Field {
                                        name: "many_strings_optional".to_owned(),
                                        data_type: DataType::List(Box::new(Field {
                                            name: "item".to_owned(),
                                            data_type: DataType::Utf8,
                                            is_nullable: true,
                                            metadata: [].into(),
                                        })),
                                        is_nullable: true,
                                        metadata: [].into(),
                                    },
                                ]),
                                is_nullable: true,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    {
                        _ = many_optional_inner_bitmap;
                        _ = extension_wrapper;
                        crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                            many_optional_inner_data,
                            Some("rerun.testing.components.AffixFuzzer7"),
                        )?
                    },
                    many_optional_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let datatype = data.data_type();
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            let bitmap = data.validity().cloned();
            let offsets = {
                let offsets = data.offsets();
                offsets.iter().copied().zip(offsets.iter().copied().skip(1))
            };
            let data = &**data.values();
            let data = crate::datatypes::AffixFuzzer1::try_from_arrow_opt(data)?
                .into_iter()
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: DataType::Struct(vec![
                            Field {
                                name: "single_float_optional".to_owned(),
                                data_type: DataType::Float32,
                                is_nullable: true,
                                metadata: [].into(),
                            },
                            Field {
                                name: "single_string_required".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            },
                            Field {
                                name: "single_string_optional".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: true,
                                metadata: [].into(),
                            },
                            Field {
                                name: "many_floats_optional".to_owned(),
                                data_type: DataType::List(Box::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Float32,
                                    is_nullable: true,
                                    metadata: [].into(),
                                })),
                                is_nullable: true,
                                metadata: [].into(),
                            },
                            Field {
                                name: "many_strings_required".to_owned(),
                                data_type: DataType::List(Box::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Utf8,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                is_nullable: false,
                                metadata: [].into(),
                            },
                            Field {
                                name: "many_strings_optional".to_owned(),
                                data_type: DataType::List(Box::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Utf8,
                                    is_nullable: true,
                                    metadata: [].into(),
                                })),
                                is_nullable: true,
                                metadata: [].into(),
                            },
                        ]),
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?;
            offsets
                .enumerate()
                .map(move |(i, (start, end))| {
                    bitmap
                        .as_ref()
                        .map_or(true, |bitmap| bitmap.get_bit(i))
                        .then(|| {
                            Ok(data
                                .get(start as usize..end as usize)
                                .ok_or_else(|| crate::DeserializationError::OffsetsMismatch {
                                    bounds: (start as usize, end as usize),
                                    len: data.len(),
                                    datatype: datatype.clone(),
                                })?
                                .to_vec())
                        })
                        .transpose()
                })
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                .into_iter()
        }
        .map(Ok)
        .map(|res| res.map(|many_optional| Some(Self { many_optional })))
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer8 {
    pub single_float_optional: Option<f32>,
}

impl<'a> From<AffixFuzzer8> for ::std::borrow::Cow<'a, AffixFuzzer8> {
    #[inline]
    fn from(value: AffixFuzzer8) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer8> for ::std::borrow::Cow<'a, AffixFuzzer8> {
    #[inline]
    fn from(value: &'a AffixFuzzer8) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer8 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer8")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Float32
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_float_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self {
                                single_float_optional,
                            } = datum.into_owned();
                            single_float_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_float_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            PrimitiveArray::new(
                {
                    _ = extension_wrapper;
                    DataType::Extension(
                        "rerun.testing.components.AffixFuzzer8".to_owned(),
                        Box::new(DataType::Float32),
                        None,
                    )
                    .to_logical_type()
                    .clone()
                },
                single_float_optional
                    .into_iter()
                    .map(|v| v.unwrap_or_default())
                    .collect(),
                single_float_optional_bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Float32Array>()
            .unwrap()
            .into_iter()
            .map(|v| v.copied())
            .map(Ok)
            .map(|res| {
                res.map(|single_float_optional| {
                    Some(Self {
                        single_float_optional,
                    })
                })
            })
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct AffixFuzzer9 {
    pub single_string_required: String,
}

impl<'a> From<AffixFuzzer9> for ::std::borrow::Cow<'a, AffixFuzzer9> {
    #[inline]
    fn from(value: AffixFuzzer9) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer9> for ::std::borrow::Cow<'a, AffixFuzzer9> {
    #[inline]
    fn from(value: &'a AffixFuzzer9) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer9 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer9")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Utf8
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_string_required): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self {
                            single_string_required,
                        } = datum.into_owned();
                        single_string_required
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_string_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                let inner_data: ::arrow2::buffer::Buffer<u8> = single_string_required
                    .iter()
                    .flatten()
                    .flat_map(|s| s.bytes())
                    .collect();
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    single_string_required
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                unsafe {
                    Utf8Array::<i32>::new_unchecked(
                        {
                            _ = extension_wrapper;
                            DataType::Extension(
                                "rerun.testing.components.AffixFuzzer9".to_owned(),
                                Box::new(DataType::Utf8),
                                None,
                            )
                            .to_logical_type()
                            .clone()
                        },
                        offsets,
                        inner_data,
                        single_string_required_bitmap,
                    )
                }
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Utf8Array<i32>>()
            .unwrap()
            .into_iter()
            .map(|v| v.map(ToOwned::to_owned))
            .map(|v| {
                v.ok_or_else(|| crate::DeserializationError::MissingData {
                    datatype: data.data_type().clone(),
                })
            })
            .map(|res| {
                res.map(|single_string_required| {
                    Some(Self {
                        single_string_required,
                    })
                })
            })
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct AffixFuzzer10 {
    pub single_string_optional: Option<String>,
}

impl<'a> From<AffixFuzzer10> for ::std::borrow::Cow<'a, AffixFuzzer10> {
    #[inline]
    fn from(value: AffixFuzzer10) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer10> for ::std::borrow::Cow<'a, AffixFuzzer10> {
    #[inline]
    fn from(value: &'a AffixFuzzer10) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer10 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer10")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Utf8
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, single_string_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self {
                                single_string_optional,
                            } = datum.into_owned();
                            single_string_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let single_string_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                let inner_data: ::arrow2::buffer::Buffer<u8> = single_string_optional
                    .iter()
                    .flatten()
                    .flat_map(|s| s.bytes())
                    .collect();
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    single_string_optional
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                unsafe {
                    Utf8Array::<i32>::new_unchecked(
                        {
                            _ = extension_wrapper;
                            DataType::Extension(
                                "rerun.testing.components.AffixFuzzer10".to_owned(),
                                Box::new(DataType::Utf8),
                                None,
                            )
                            .to_logical_type()
                            .clone()
                        },
                        offsets,
                        inner_data,
                        single_string_optional_bitmap,
                    )
                }
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Utf8Array<i32>>()
            .unwrap()
            .into_iter()
            .map(|v| v.map(ToOwned::to_owned))
            .map(Ok)
            .map(|res| {
                res.map(|single_string_optional| {
                    Some(Self {
                        single_string_optional,
                    })
                })
            })
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer11 {
    pub many_floats_optional: Option<Vec<f32>>,
}

impl<'a> From<AffixFuzzer11> for ::std::borrow::Cow<'a, AffixFuzzer11> {
    #[inline]
    fn from(value: AffixFuzzer11) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer11> for ::std::borrow::Cow<'a, AffixFuzzer11> {
    #[inline]
    fn from(value: &'a AffixFuzzer11) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer11 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer11")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Float32,
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, many_floats_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self {
                                many_floats_optional,
                            } = datum.into_owned();
                            many_floats_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let many_floats_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let many_floats_optional_inner_data: Vec<_> = many_floats_optional
                    .iter()
                    .flatten()
                    .flatten()
                    .map(ToOwned::to_owned)
                    .map(Some)
                    .collect();
                let many_floats_optional_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                    let any_nones = many_floats_optional_inner_data.iter().any(|v| v.is_none());
                    any_nones.then(|| {
                        many_floats_optional_inner_data
                            .iter()
                            .map(|v| v.is_some())
                            .collect()
                    })
                };
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    many_floats_optional
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer11".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Float32,
                                is_nullable: true,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    PrimitiveArray::new(
                        {
                            _ = extension_wrapper;
                            DataType::Extension(
                                "rerun.testing.components.AffixFuzzer11".to_owned(),
                                Box::new(DataType::Float32),
                                None,
                            )
                            .to_logical_type()
                            .clone()
                        },
                        many_floats_optional_inner_data
                            .into_iter()
                            .map(|v| v.unwrap_or_default())
                            .collect(),
                        many_floats_optional_inner_bitmap,
                    )
                    .boxed(),
                    many_floats_optional_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let datatype = data.data_type();
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            let bitmap = data.validity().cloned();
            let offsets = {
                let offsets = data.offsets();
                offsets.iter().copied().zip(offsets.iter().copied().skip(1))
            };
            let data = &**data.values();
            let data = data
                .as_any()
                .downcast_ref::<Float32Array>()
                .unwrap()
                .into_iter()
                .map(|v| v.copied())
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: DataType::Float32,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?;
            offsets
                .enumerate()
                .map(move |(i, (start, end))| {
                    bitmap
                        .as_ref()
                        .map_or(true, |bitmap| bitmap.get_bit(i))
                        .then(|| {
                            Ok(data
                                .get(start as usize..end as usize)
                                .ok_or_else(|| crate::DeserializationError::OffsetsMismatch {
                                    bounds: (start as usize, end as usize),
                                    len: data.len(),
                                    datatype: datatype.clone(),
                                })?
                                .to_vec())
                        })
                        .transpose()
                })
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                .into_iter()
        }
        .map(Ok)
        .map(|res| {
            res.map(|many_floats_optional| {
                Some(Self {
                    many_floats_optional,
                })
            })
        })
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct AffixFuzzer12 {
    pub many_strings_required: Vec<String>,
}

impl<'a> From<AffixFuzzer12> for ::std::borrow::Cow<'a, AffixFuzzer12> {
    #[inline]
    fn from(value: AffixFuzzer12) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer12> for ::std::borrow::Cow<'a, AffixFuzzer12> {
    #[inline]
    fn from(value: &'a AffixFuzzer12) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer12 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer12")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Utf8,
            is_nullable: false,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, many_strings_required): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| {
                        let Self {
                            many_strings_required,
                        } = datum.into_owned();
                        many_strings_required
                    });
                    (datum.is_some(), datum)
                })
                .unzip();
            let many_strings_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let many_strings_required_inner_data: Vec<_> = many_strings_required
                    .iter()
                    .flatten()
                    .flatten()
                    .map(ToOwned::to_owned)
                    .map(Some)
                    .collect();
                let many_strings_required_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                    let any_nones = many_strings_required_inner_data.iter().any(|v| v.is_none());
                    any_nones.then(|| {
                        many_strings_required_inner_data
                            .iter()
                            .map(|v| v.is_some())
                            .collect()
                    })
                };
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    many_strings_required
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer12".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: false,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    {
                        let inner_data: ::arrow2::buffer::Buffer<u8> =
                            many_strings_required_inner_data
                                .iter()
                                .flatten()
                                .flat_map(|s| s.bytes())
                                .collect();
                        let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                            many_strings_required_inner_data.iter().map(|opt| {
                                opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                            }),
                        )
                        .unwrap()
                        .into();
                        #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                        unsafe {
                            Utf8Array::<i32>::new_unchecked(
                                {
                                    _ = extension_wrapper;
                                    DataType::Extension(
                                        "rerun.testing.components.AffixFuzzer12".to_owned(),
                                        Box::new(DataType::Utf8),
                                        None,
                                    )
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                inner_data,
                                many_strings_required_inner_bitmap,
                            )
                        }
                        .boxed()
                    },
                    many_strings_required_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let datatype = data.data_type();
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            let bitmap = data.validity().cloned();
            let offsets = {
                let offsets = data.offsets();
                offsets.iter().copied().zip(offsets.iter().copied().skip(1))
            };
            let data = &**data.values();
            let data = data
                .as_any()
                .downcast_ref::<Utf8Array<i32>>()
                .unwrap()
                .into_iter()
                .map(|v| v.map(ToOwned::to_owned))
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: DataType::Utf8,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?;
            offsets
                .enumerate()
                .map(move |(i, (start, end))| {
                    bitmap
                        .as_ref()
                        .map_or(true, |bitmap| bitmap.get_bit(i))
                        .then(|| {
                            Ok(data
                                .get(start as usize..end as usize)
                                .ok_or_else(|| crate::DeserializationError::OffsetsMismatch {
                                    bounds: (start as usize, end as usize),
                                    len: data.len(),
                                    datatype: datatype.clone(),
                                })?
                                .to_vec())
                        })
                        .transpose()
                })
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                .into_iter()
        }
        .map(|v| {
            v.ok_or_else(|| crate::DeserializationError::MissingData {
                datatype: data.data_type().clone(),
            })
        })
        .map(|res| {
            res.map(|many_strings_required| {
                Some(Self {
                    many_strings_required,
                })
            })
        })
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct AffixFuzzer13 {
    pub many_strings_optional: Option<Vec<String>>,
}

impl<'a> From<AffixFuzzer13> for ::std::borrow::Cow<'a, AffixFuzzer13> {
    #[inline]
    fn from(value: AffixFuzzer13) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer13> for ::std::borrow::Cow<'a, AffixFuzzer13> {
    #[inline]
    fn from(value: &'a AffixFuzzer13) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Component for AffixFuzzer13 {
    #[inline]
    fn name() -> crate::ComponentName {
        crate::ComponentName::Borrowed("rerun.testing.components.AffixFuzzer13")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::List(Box::new(Field {
            name: "item".to_owned(),
            data_type: DataType::Utf8,
            is_nullable: true,
            metadata: [].into(),
        }))
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, many_strings_optional): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self {
                                many_strings_optional,
                            } = datum.into_owned();
                            many_strings_optional
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let many_strings_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                let many_strings_optional_inner_data: Vec<_> = many_strings_optional
                    .iter()
                    .flatten()
                    .flatten()
                    .map(ToOwned::to_owned)
                    .map(Some)
                    .collect();
                let many_strings_optional_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                    let any_nones = many_strings_optional_inner_data.iter().any(|v| v.is_none());
                    any_nones.then(|| {
                        many_strings_optional_inner_data
                            .iter()
                            .map(|v| v.is_some())
                            .collect()
                    })
                };
                let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                    many_strings_optional
                        .iter()
                        .map(|opt| opt.as_ref().map(|datum| datum.len()).unwrap_or_default()),
                )
                .unwrap()
                .into();
                ListArray::new(
                    {
                        _ = extension_wrapper;
                        DataType::Extension(
                            "rerun.testing.components.AffixFuzzer13".to_owned(),
                            Box::new(DataType::List(Box::new(Field {
                                name: "item".to_owned(),
                                data_type: DataType::Utf8,
                                is_nullable: true,
                                metadata: [].into(),
                            }))),
                            None,
                        )
                        .to_logical_type()
                        .clone()
                    },
                    offsets,
                    {
                        let inner_data: ::arrow2::buffer::Buffer<u8> =
                            many_strings_optional_inner_data
                                .iter()
                                .flatten()
                                .flat_map(|s| s.bytes())
                                .collect();
                        let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                            many_strings_optional_inner_data.iter().map(|opt| {
                                opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                            }),
                        )
                        .unwrap()
                        .into();
                        #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                        unsafe {
                            Utf8Array::<i32>::new_unchecked(
                                {
                                    _ = extension_wrapper;
                                    DataType::Extension(
                                        "rerun.testing.components.AffixFuzzer13".to_owned(),
                                        Box::new(DataType::Utf8),
                                        None,
                                    )
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                inner_data,
                                many_strings_optional_inner_bitmap,
                            )
                        }
                        .boxed()
                    },
                    many_strings_optional_bitmap,
                )
                .boxed()
            }
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let datatype = data.data_type();
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::ListArray<i32>>()
                .unwrap();
            let bitmap = data.validity().cloned();
            let offsets = {
                let offsets = data.offsets();
                offsets.iter().copied().zip(offsets.iter().copied().skip(1))
            };
            let data = &**data.values();
            let data = data
                .as_any()
                .downcast_ref::<Utf8Array<i32>>()
                .unwrap()
                .into_iter()
                .map(|v| v.map(ToOwned::to_owned))
                .map(|v| {
                    v.ok_or_else(|| crate::DeserializationError::MissingData {
                        datatype: DataType::Utf8,
                    })
                })
                .collect::<crate::DeserializationResult<Vec<_>>>()?;
            offsets
                .enumerate()
                .map(move |(i, (start, end))| {
                    bitmap
                        .as_ref()
                        .map_or(true, |bitmap| bitmap.get_bit(i))
                        .then(|| {
                            Ok(data
                                .get(start as usize..end as usize)
                                .ok_or_else(|| crate::DeserializationError::OffsetsMismatch {
                                    bounds: (start as usize, end as usize),
                                    len: data.len(),
                                    datatype: datatype.clone(),
                                })?
                                .to_vec())
                        })
                        .transpose()
                })
                .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                .into_iter()
        }
        .map(Ok)
        .map(|res| {
            res.map(|many_strings_optional| {
                Some(Self {
                    many_strings_optional,
                })
            })
        })
        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}
