// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer1 {
    pub single_float_optional: Option<f32>,
    pub single_string_required: String,
    pub single_string_optional: Option<String>,
    pub many_floats_optional: Option<Vec<f32>>,
    pub many_strings_required: Vec<String>,
    pub many_strings_optional: Option<Vec<String>>,
}

impl<'a> From<AffixFuzzer1> for ::std::borrow::Cow<'a, AffixFuzzer1> {
    #[inline]
    fn from(value: AffixFuzzer1) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer1> for ::std::borrow::Cow<'a, AffixFuzzer1> {
    #[inline]
    fn from(value: &'a AffixFuzzer1) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Datatype for AffixFuzzer1 {
    #[inline]
    fn name() -> crate::DatatypeName {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer1")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::AffixFuzzer1>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::AffixFuzzer1>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                vec![
                    {
                        let (somes, single_float_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            single_float_optional,
                                            ..
                                        } = &**datum;
                                        single_float_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_float_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            {
                                _ = extension_wrapper;
                                DataType::Float32.to_logical_type().clone()
                            },
                            single_float_optional
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            single_float_optional_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, single_string_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        single_string_required,
                                        ..
                                    } = &**datum;
                                    single_string_required.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_string_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: ::arrow2::buffer::Buffer<u8> = single_string_required
                                .iter()
                                .flatten()
                                .flat_map(|s| s.bytes())
                                .collect();
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                single_string_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Utf8.to_logical_type().clone()
                                    },
                                    offsets,
                                    inner_data,
                                    single_string_required_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, single_string_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            single_string_optional,
                                            ..
                                        } = &**datum;
                                        single_string_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_string_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: ::arrow2::buffer::Buffer<u8> = single_string_optional
                                .iter()
                                .flatten()
                                .flat_map(|s| s.bytes())
                                .collect();
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                single_string_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Utf8.to_logical_type().clone()
                                    },
                                    offsets,
                                    inner_data,
                                    single_string_optional_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_floats_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            many_floats_optional,
                                            ..
                                        } = &**datum;
                                        many_floats_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_floats_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_floats_optional_inner_data: Vec<_> = many_floats_optional
                                .iter()
                                .flatten()
                                .flatten()
                                .map(ToOwned::to_owned)
                                .map(Some)
                                .collect();
                            let many_floats_optional_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = {
                                let any_nones =
                                    many_floats_optional_inner_data.iter().any(|v| v.is_none());
                                any_nones.then(|| {
                                    many_floats_optional_inner_data
                                        .iter()
                                        .map(|v| v.is_some())
                                        .collect()
                                })
                            };
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_floats_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float32,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                PrimitiveArray::new(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Float32.to_logical_type().clone()
                                    },
                                    many_floats_optional_inner_data
                                        .into_iter()
                                        .map(|v| v.unwrap_or_default())
                                        .collect(),
                                    many_floats_optional_inner_bitmap,
                                )
                                .boxed(),
                                many_floats_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_strings_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        many_strings_required,
                                        ..
                                    } = &**datum;
                                    many_strings_required.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_strings_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_strings_required_inner_data: Vec<_> = many_strings_required
                                .iter()
                                .flatten()
                                .flatten()
                                .map(ToOwned::to_owned)
                                .map(Some)
                                .collect();
                            let many_strings_required_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = {
                                let any_nones =
                                    many_strings_required_inner_data.iter().any(|v| v.is_none());
                                any_nones.then(|| {
                                    many_strings_required_inner_data
                                        .iter()
                                        .map(|v| v.is_some())
                                        .collect()
                                })
                            };
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_strings_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    let inner_data: ::arrow2::buffer::Buffer<u8> =
                                        many_strings_required_inner_data
                                            .iter()
                                            .flatten()
                                            .flat_map(|s| s.bytes())
                                            .collect();
                                    let offsets =
                                        ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                            many_strings_required_inner_data.iter().map(|opt| {
                                                opt.as_ref()
                                                    .map(|datum| datum.len())
                                                    .unwrap_or_default()
                                            }),
                                        )
                                        .unwrap()
                                        .into();
                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe {
                                        Utf8Array::<i32>::new_unchecked(
                                            {
                                                _ = extension_wrapper;
                                                DataType::Utf8.to_logical_type().clone()
                                            },
                                            offsets,
                                            inner_data,
                                            many_strings_required_inner_bitmap,
                                        )
                                    }
                                    .boxed()
                                },
                                many_strings_required_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_strings_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            many_strings_optional,
                                            ..
                                        } = &**datum;
                                        many_strings_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_strings_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_strings_optional_inner_data: Vec<_> = many_strings_optional
                                .iter()
                                .flatten()
                                .flatten()
                                .map(ToOwned::to_owned)
                                .map(Some)
                                .collect();
                            let many_strings_optional_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = {
                                let any_nones =
                                    many_strings_optional_inner_data.iter().any(|v| v.is_none());
                                any_nones.then(|| {
                                    many_strings_optional_inner_data
                                        .iter()
                                        .map(|v| v.is_some())
                                        .collect()
                                })
                            };
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_strings_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    let inner_data: ::arrow2::buffer::Buffer<u8> =
                                        many_strings_optional_inner_data
                                            .iter()
                                            .flatten()
                                            .flat_map(|s| s.bytes())
                                            .collect();
                                    let offsets =
                                        ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                            many_strings_optional_inner_data.iter().map(|opt| {
                                                opt.as_ref()
                                                    .map(|datum| datum.len())
                                                    .unwrap_or_default()
                                            }),
                                        )
                                        .unwrap()
                                        .into();
                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe {
                                        Utf8Array::<i32>::new_unchecked(
                                            {
                                                _ = extension_wrapper;
                                                DataType::Utf8.to_logical_type().clone()
                                            },
                                            offsets,
                                            inner_data,
                                            many_strings_optional_inner_bitmap,
                                        )
                                    }
                                    .boxed()
                                },
                                many_strings_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::StructArray>()
                .ok_or_else(|| crate::DeserializationError::SchemaMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                })?;
            let (data_fields, data_arrays, data_bitmap) =
                (data.fields(), data.values(), data.validity());
            let is_valid = |i| data_bitmap.map_or(true, |bitmap| bitmap.get_bit(i));
            let arrays_by_name: ::std::collections::HashMap<_, _> = data_fields
                .iter()
                .map(|field| field.name.as_str())
                .zip(data_arrays)
                .collect();
            let single_float_optional = {
                let data = &**arrays_by_name["single_float_optional"];

                data.as_any()
                    .downcast_ref::<Float32Array>()
                    .unwrap()
                    .into_iter()
                    .map(|v| v.copied())
            };
            let single_string_required = {
                let data = &**arrays_by_name["single_string_required"];

                data.as_any()
                    .downcast_ref::<Utf8Array<i32>>()
                    .unwrap()
                    .into_iter()
                    .map(|v| v.map(ToOwned::to_owned))
            };
            let single_string_optional = {
                let data = &**arrays_by_name["single_string_optional"];

                data.as_any()
                    .downcast_ref::<Utf8Array<i32>>()
                    .unwrap()
                    .into_iter()
                    .map(|v| v.map(ToOwned::to_owned))
            };
            let many_floats_optional = {
                let data = &**arrays_by_name["many_floats_optional"];

                {
                    let datatype = data.data_type();
                    let data = data
                        .as_any()
                        .downcast_ref::<::arrow2::array::ListArray<i32>>()
                        .unwrap();
                    let bitmap = data.validity().cloned();
                    let offsets = {
                        let offsets = data.offsets();
                        offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                    };
                    let data = &**data.values();
                    let data = data
                        .as_any()
                        .downcast_ref::<Float32Array>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.copied())
                        .map(|v| {
                            v.ok_or_else(|| crate::DeserializationError::MissingData {
                                datatype: DataType::Float32,
                            })
                        })
                        .collect::<crate::DeserializationResult<Vec<_>>>()?;
                    offsets
                        .enumerate()
                        .map(move |(i, (start, end))| {
                            bitmap
                                .as_ref()
                                .map_or(true, |bitmap| bitmap.get_bit(i))
                                .then(|| {
                                    Ok(data
                                        .get(start as usize..end as usize)
                                        .ok_or_else(|| {
                                            crate::DeserializationError::OffsetsMismatch {
                                                bounds: (start as usize, end as usize),
                                                len: data.len(),
                                                datatype: datatype.clone(),
                                            }
                                        })?
                                        .to_vec())
                                })
                                .transpose()
                        })
                        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                        .into_iter()
                }
            };
            let many_strings_required = {
                let data = &**arrays_by_name["many_strings_required"];

                {
                    let datatype = data.data_type();
                    let data = data
                        .as_any()
                        .downcast_ref::<::arrow2::array::ListArray<i32>>()
                        .unwrap();
                    let bitmap = data.validity().cloned();
                    let offsets = {
                        let offsets = data.offsets();
                        offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                    };
                    let data = &**data.values();
                    let data = data
                        .as_any()
                        .downcast_ref::<Utf8Array<i32>>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.map(ToOwned::to_owned))
                        .map(|v| {
                            v.ok_or_else(|| crate::DeserializationError::MissingData {
                                datatype: DataType::Utf8,
                            })
                        })
                        .collect::<crate::DeserializationResult<Vec<_>>>()?;
                    offsets
                        .enumerate()
                        .map(move |(i, (start, end))| {
                            bitmap
                                .as_ref()
                                .map_or(true, |bitmap| bitmap.get_bit(i))
                                .then(|| {
                                    Ok(data
                                        .get(start as usize..end as usize)
                                        .ok_or_else(|| {
                                            crate::DeserializationError::OffsetsMismatch {
                                                bounds: (start as usize, end as usize),
                                                len: data.len(),
                                                datatype: datatype.clone(),
                                            }
                                        })?
                                        .to_vec())
                                })
                                .transpose()
                        })
                        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                        .into_iter()
                }
            };
            let many_strings_optional = {
                let data = &**arrays_by_name["many_strings_optional"];

                {
                    let datatype = data.data_type();
                    let data = data
                        .as_any()
                        .downcast_ref::<::arrow2::array::ListArray<i32>>()
                        .unwrap();
                    let bitmap = data.validity().cloned();
                    let offsets = {
                        let offsets = data.offsets();
                        offsets.iter().copied().zip(offsets.iter().copied().skip(1))
                    };
                    let data = &**data.values();
                    let data = data
                        .as_any()
                        .downcast_ref::<Utf8Array<i32>>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.map(ToOwned::to_owned))
                        .map(|v| {
                            v.ok_or_else(|| crate::DeserializationError::MissingData {
                                datatype: DataType::Utf8,
                            })
                        })
                        .collect::<crate::DeserializationResult<Vec<_>>>()?;
                    offsets
                        .enumerate()
                        .map(move |(i, (start, end))| {
                            bitmap
                                .as_ref()
                                .map_or(true, |bitmap| bitmap.get_bit(i))
                                .then(|| {
                                    Ok(data
                                        .get(start as usize..end as usize)
                                        .ok_or_else(|| {
                                            crate::DeserializationError::OffsetsMismatch {
                                                bounds: (start as usize, end as usize),
                                                len: data.len(),
                                                datatype: datatype.clone(),
                                            }
                                        })?
                                        .to_vec())
                                })
                                .transpose()
                        })
                        .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?
                        .into_iter()
                }
            };
            ::itertools::izip!(
                single_float_optional,
                single_string_required,
                single_string_optional,
                many_floats_optional,
                many_strings_required,
                many_strings_optional
            )
            .enumerate()
            .map(
                |(
                    i,
                    (
                        single_float_optional,
                        single_string_required,
                        single_string_optional,
                        many_floats_optional,
                        many_strings_required,
                        many_strings_optional,
                    ),
                )| {
                    is_valid(i)
                        .then(|| {
                            Ok(Self {
                                single_float_optional,
                                single_string_required: single_string_required.ok_or_else(
                                    || crate::DeserializationError::MissingData {
                                        datatype: data.data_type().clone(),
                                    },
                                )?,
                                single_string_optional,
                                many_floats_optional,
                                many_strings_required: many_strings_required.ok_or_else(|| {
                                    crate::DeserializationError::MissingData {
                                        datatype: data.data_type().clone(),
                                    }
                                })?,
                                many_strings_optional,
                            })
                        })
                        .transpose()
                },
            )
            .collect::<crate::DeserializationResult<Vec<_>>>()?
        })
    }
}

#[derive(Debug, Clone, PartialEq)]
pub struct AffixFuzzer2(pub Option<f32>);

impl<'a> From<AffixFuzzer2> for ::std::borrow::Cow<'a, AffixFuzzer2> {
    #[inline]
    fn from(value: AffixFuzzer2) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer2> for ::std::borrow::Cow<'a, AffixFuzzer2> {
    #[inline]
    fn from(value: &'a AffixFuzzer2) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Datatype for AffixFuzzer2 {
    #[inline]
    fn name() -> crate::DatatypeName {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer2")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Float32
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            PrimitiveArray::new(
                {
                    _ = extension_wrapper;
                    DataType::Extension(
                        "rerun.testing.datatypes.AffixFuzzer2".to_owned(),
                        Box::new(DataType::Float32),
                        None,
                    )
                    .to_logical_type()
                    .clone()
                },
                data0.into_iter().map(|v| v.unwrap_or_default()).collect(),
                data0_bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Component as _, Datatype as _};
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Float32Array>()
            .unwrap()
            .into_iter()
            .map(|v| v.copied())
            .map(Ok)
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()?)
    }
}
