// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

#[derive(Clone, Debug, PartialEq)]
pub struct FlattenedScalar {
    pub value: f32,
}

impl<'a> From<FlattenedScalar> for ::std::borrow::Cow<'a, FlattenedScalar> {
    #[inline]
    fn from(value: FlattenedScalar) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a FlattenedScalar> for ::std::borrow::Cow<'a, FlattenedScalar> {
    #[inline]
    fn from(value: &'a FlattenedScalar) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for FlattenedScalar {
    type Name = crate::DatatypeName;
    #[inline]
    fn name() -> Self::Name {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.FlattenedScalar")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![Field {
            name: "value".to_owned(),
            data_type: DataType::Float32,
            is_nullable: false,
            metadata: [].into(),
        }])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::FlattenedScalar>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::FlattenedScalar>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                vec![{
                    let (somes, value): (Vec<_>, Vec<_>) = data
                        .iter()
                        .map(|datum| {
                            let datum = datum.as_ref().map(|datum| {
                                let Self { value, .. } = &**datum;
                                value.clone()
                            });
                            (datum.is_some(), datum)
                        })
                        .unzip();
                    let value_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                        let any_nones = somes.iter().any(|some| !*some);
                        any_nones.then(|| somes.into())
                    };
                    PrimitiveArray::new(
                        {
                            _ = extension_wrapper;
                            DataType::Float32.to_logical_type().clone()
                        },
                        value.into_iter().map(|v| v.unwrap_or_default()).collect(),
                        value_bitmap,
                    )
                    .boxed()
                }],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::StructArray>()
                .ok_or_else(|| crate::DeserializationError::DatatypeMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.datatypes.FlattenedScalar".into(),
                    source: Box::new(err),
                })?;
            if data.is_empty() {
                Vec::new()
            } else {
                let (data_fields, data_arrays, data_bitmap) =
                    (data.fields(), data.values(), data.validity());
                let is_valid = |i| data_bitmap.map_or(true, |bitmap| bitmap.get_bit(i));
                let arrays_by_name: ::std::collections::HashMap<_, _> = data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(data_arrays)
                    .collect();
                let value = {
                    let data = &**arrays_by_name["value"];

                    data.as_any()
                        .downcast_ref::<Float32Array>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.copied())
                };
                ::itertools::izip!(value)
                    .enumerate()
                    .map(|(i, (value))| {
                        is_valid(i)
                            .then(|| {
                                Ok(Self {
                                    value: value
                                        .ok_or_else(|| crate::DeserializationError::MissingData {
                                            backtrace: ::backtrace::Backtrace::new_unresolved(),
                                        })
                                        .map_err(|err| crate::DeserializationError::Context {
                                            location:
                                                "rerun.testing.datatypes.FlattenedScalar#value"
                                                    .into(),
                                            source: Box::new(err),
                                        })?,
                                })
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.testing.datatypes.FlattenedScalar".into(),
                        source: Box::new(err),
                    })?
            }
        })
    }
}

impl crate::Datatype for FlattenedScalar {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer1 {
    pub single_float_optional: Option<f32>,
    pub single_string_required: String,
    pub single_string_optional: Option<String>,
    pub many_floats_optional: Option<Vec<f32>>,
    pub many_strings_required: Vec<String>,
    pub many_strings_optional: Option<Vec<String>>,
    pub flattened_scalar: f32,
    pub almost_flattened_scalar: crate::datatypes::FlattenedScalar,
    pub from_parent: Option<bool>,
}

impl<'a> From<AffixFuzzer1> for ::std::borrow::Cow<'a, AffixFuzzer1> {
    #[inline]
    fn from(value: AffixFuzzer1) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer1> for ::std::borrow::Cow<'a, AffixFuzzer1> {
    #[inline]
    fn from(value: &'a AffixFuzzer1) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for AffixFuzzer1 {
    type Name = crate::DatatypeName;
    #[inline]
    fn name() -> Self::Name {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer1")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "single_float_optional".to_owned(),
                data_type: DataType::Float32,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "single_string_required".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "single_string_optional".to_owned(),
                data_type: DataType::Utf8,
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_floats_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_required".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "many_strings_optional".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: DataType::Utf8,
                    is_nullable: true,
                    metadata: [].into(),
                })),
                is_nullable: true,
                metadata: [].into(),
            },
            Field {
                name: "flattened_scalar".to_owned(),
                data_type: DataType::Float32,
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "almost_flattened_scalar".to_owned(),
                data_type: <crate::datatypes::FlattenedScalar>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "from_parent".to_owned(),
                data_type: DataType::Boolean,
                is_nullable: true,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::AffixFuzzer1>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::AffixFuzzer1>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                vec![
                    {
                        let (somes, single_float_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            single_float_optional,
                                            ..
                                        } = &**datum;
                                        single_float_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_float_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            {
                                _ = extension_wrapper;
                                DataType::Float32.to_logical_type().clone()
                            },
                            single_float_optional
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            single_float_optional_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, single_string_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        single_string_required,
                                        ..
                                    } = &**datum;
                                    single_string_required.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_string_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: ::arrow2::buffer::Buffer<u8> = single_string_required
                                .iter()
                                .flatten()
                                .flat_map(|s| s.bytes())
                                .collect();
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                single_string_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Utf8.to_logical_type().clone()
                                    },
                                    offsets,
                                    inner_data,
                                    single_string_required_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, single_string_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            single_string_optional,
                                            ..
                                        } = &**datum;
                                        single_string_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_string_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let inner_data: ::arrow2::buffer::Buffer<u8> = single_string_optional
                                .iter()
                                .flatten()
                                .flat_map(|s| s.bytes())
                                .collect();
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                single_string_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            unsafe {
                                Utf8Array::<i32>::new_unchecked(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Utf8.to_logical_type().clone()
                                    },
                                    offsets,
                                    inner_data,
                                    single_string_optional_bitmap,
                                )
                            }
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_floats_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            many_floats_optional,
                                            ..
                                        } = &**datum;
                                        many_floats_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_floats_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_floats_optional_inner_data: Vec<_> = many_floats_optional
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_floats_optional_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_floats_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float32,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                PrimitiveArray::new(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Float32.to_logical_type().clone()
                                    },
                                    many_floats_optional_inner_data
                                        .into_iter()
                                        .map(|v| v.unwrap_or_default())
                                        .collect(),
                                    many_floats_optional_inner_bitmap,
                                )
                                .boxed(),
                                many_floats_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_strings_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        many_strings_required,
                                        ..
                                    } = &**datum;
                                    many_strings_required.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_strings_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_strings_required_inner_data: Vec<_> = many_strings_required
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_strings_required_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_strings_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    let inner_data: ::arrow2::buffer::Buffer<u8> =
                                        many_strings_required_inner_data
                                            .iter()
                                            .flatten()
                                            .flat_map(|s| s.bytes())
                                            .collect();
                                    let offsets =
                                        ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                            many_strings_required_inner_data.iter().map(|opt| {
                                                opt.as_ref()
                                                    .map(|datum| datum.len())
                                                    .unwrap_or_default()
                                            }),
                                        )
                                        .unwrap()
                                        .into();
                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe {
                                        Utf8Array::<i32>::new_unchecked(
                                            {
                                                _ = extension_wrapper;
                                                DataType::Utf8.to_logical_type().clone()
                                            },
                                            offsets,
                                            inner_data,
                                            many_strings_required_inner_bitmap,
                                        )
                                    }
                                    .boxed()
                                },
                                many_strings_required_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_strings_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self {
                                            many_strings_optional,
                                            ..
                                        } = &**datum;
                                        many_strings_optional.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_strings_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_strings_optional_inner_data: Vec<_> = many_strings_optional
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_strings_optional_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_strings_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Utf8,
                                        is_nullable: true,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    let inner_data: ::arrow2::buffer::Buffer<u8> =
                                        many_strings_optional_inner_data
                                            .iter()
                                            .flatten()
                                            .flat_map(|s| s.bytes())
                                            .collect();
                                    let offsets =
                                        ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                            many_strings_optional_inner_data.iter().map(|opt| {
                                                opt.as_ref()
                                                    .map(|datum| datum.len())
                                                    .unwrap_or_default()
                                            }),
                                        )
                                        .unwrap()
                                        .into();
                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe {
                                        Utf8Array::<i32>::new_unchecked(
                                            {
                                                _ = extension_wrapper;
                                                DataType::Utf8.to_logical_type().clone()
                                            },
                                            offsets,
                                            inner_data,
                                            many_strings_optional_inner_bitmap,
                                        )
                                    }
                                    .boxed()
                                },
                                many_strings_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, flattened_scalar): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        flattened_scalar, ..
                                    } = &**datum;
                                    flattened_scalar.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let flattened_scalar_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            {
                                _ = extension_wrapper;
                                DataType::Float32.to_logical_type().clone()
                            },
                            flattened_scalar
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            flattened_scalar_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, almost_flattened_scalar): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        almost_flattened_scalar,
                                        ..
                                    } = &**datum;
                                    almost_flattened_scalar.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let almost_flattened_scalar_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            _ = almost_flattened_scalar_bitmap;
                            _ = extension_wrapper;
                            crate::datatypes::FlattenedScalar::try_to_arrow_opt(
                                almost_flattened_scalar,
                                None::<&str>,
                            )?
                        }
                    },
                    {
                        let (somes, from_parent): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum
                                    .as_ref()
                                    .map(|datum| {
                                        let Self { from_parent, .. } = &**datum;
                                        from_parent.clone()
                                    })
                                    .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let from_parent_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        BooleanArray::new(
                            {
                                _ = extension_wrapper;
                                DataType::Boolean.to_logical_type().clone()
                            },
                            from_parent
                                .into_iter()
                                .map(|v| v.unwrap_or_default())
                                .collect(),
                            from_parent_bitmap,
                        )
                        .boxed()
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::StructArray>()
                .ok_or_else(|| crate::DeserializationError::DatatypeMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.datatypes.AffixFuzzer1".into(),
                    source: Box::new(err),
                })?;
            if data.is_empty() {
                Vec::new()
            } else {
                let (data_fields, data_arrays, data_bitmap) =
                    (data.fields(), data.values(), data.validity());
                let is_valid = |i| data_bitmap.map_or(true, |bitmap| bitmap.get_bit(i));
                let arrays_by_name: ::std::collections::HashMap<_, _> = data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(data_arrays)
                    .collect();
                let single_float_optional = {
                    let data = &**arrays_by_name["single_float_optional"];

                    data.as_any()
                        .downcast_ref::<Float32Array>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.copied())
                };
                let single_string_required = {
                    let data = &**arrays_by_name["single_string_required"];

                    data.as_any()
                        .downcast_ref::<Utf8Array<i32>>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.map(ToOwned::to_owned))
                };
                let single_string_optional = {
                    let data = &**arrays_by_name["single_string_optional"];

                    data.as_any()
                        .downcast_ref::<Utf8Array<i32>>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.map(ToOwned::to_owned))
                };
                let many_floats_optional = {
                    let data = &**arrays_by_name["many_floats_optional"];

                    {
                        let data = data
                            .as_any()
                            .downcast_ref::<::arrow2::array::ListArray<i32>>()
                            .unwrap();
                        if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter ()
                    }
                };
                let many_strings_required = {
                    let data = &**arrays_by_name["many_strings_required"];

                    {
                        let data = data
                            .as_any()
                            .downcast_ref::<::arrow2::array::ListArray<i32>>()
                            .unwrap();
                        if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Utf8Array < i32 >> () . unwrap () . into_iter () . map (| v | v . map (ToOwned :: to_owned)) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter ()
                    }
                };
                let many_strings_optional = {
                    let data = &**arrays_by_name["many_strings_optional"];

                    {
                        let data = data
                            .as_any()
                            .downcast_ref::<::arrow2::array::ListArray<i32>>()
                            .unwrap();
                        if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Utf8Array < i32 >> () . unwrap () . into_iter () . map (| v | v . map (ToOwned :: to_owned)) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter ()
                    }
                };
                let flattened_scalar = {
                    let data = &**arrays_by_name["flattened_scalar"];

                    data.as_any()
                        .downcast_ref::<Float32Array>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.copied())
                };
                let almost_flattened_scalar = {
                    let data = &**arrays_by_name["almost_flattened_scalar"];

                    crate::datatypes::FlattenedScalar::try_from_arrow_opt(data)
                        .map_err(|err| crate::DeserializationError::Context {
                            location:
                                "rerun.testing.datatypes.AffixFuzzer1#almost_flattened_scalar"
                                    .into(),
                            source: Box::new(err),
                        })?
                        .into_iter()
                };
                let from_parent = {
                    let data = &**arrays_by_name["from_parent"];

                    data.as_any()
                        .downcast_ref::<BooleanArray>()
                        .unwrap()
                        .into_iter()
                };
                :: itertools :: izip ! (single_float_optional , single_string_required , single_string_optional , many_floats_optional , many_strings_required , many_strings_optional , flattened_scalar , almost_flattened_scalar , from_parent) . enumerate () . map (| (i , (single_float_optional , single_string_required , single_string_optional , many_floats_optional , many_strings_required , many_strings_optional , flattened_scalar , almost_flattened_scalar , from_parent)) | is_valid (i) . then (|| Ok (Self { single_float_optional , single_string_required : single_string_required . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer1#single_string_required" . into () , source : Box :: new (err) , }

) ? , single_string_optional , many_floats_optional , many_strings_required : many_strings_required . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer1#many_strings_required" . into () , source : Box :: new (err) , }

) ? , many_strings_optional , flattened_scalar : flattened_scalar . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer1#flattened_scalar" . into () , source : Box :: new (err) , }

) ? , almost_flattened_scalar : almost_flattened_scalar . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer1#almost_flattened_scalar" . into () , source : Box :: new (err) , }

) ? , from_parent , }

)) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer1" . into () , source : Box :: new (err) , }

) ?
            }
        })
    }
}

impl crate::Datatype for AffixFuzzer1 {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer2(pub Option<f32>);

impl<'a> From<AffixFuzzer2> for ::std::borrow::Cow<'a, AffixFuzzer2> {
    #[inline]
    fn from(value: AffixFuzzer2) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer2> for ::std::borrow::Cow<'a, AffixFuzzer2> {
    #[inline]
    fn from(value: &'a AffixFuzzer2) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for AffixFuzzer2 {
    type Name = crate::DatatypeName;
    #[inline]
    fn name() -> Self::Name {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer2")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Float32
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum
                        .map(|datum| {
                            let Self(data0) = datum.into_owned();
                            data0
                        })
                        .flatten();
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            PrimitiveArray::new(
                {
                    _ = extension_wrapper;
                    DataType::Extension(
                        "rerun.testing.datatypes.AffixFuzzer2".to_owned(),
                        Box::new(DataType::Float32),
                        None,
                    )
                    .to_logical_type()
                    .clone()
                },
                data0.into_iter().map(|v| v.unwrap_or_default()).collect(),
                data0_bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok(data
            .as_any()
            .downcast_ref::<Float32Array>()
            .unwrap()
            .into_iter()
            .map(|v| v.copied())
            .map(Ok)
            .map(|res| res.map(|v| Some(Self(v))))
            .collect::<crate::DeserializationResult<Vec<Option<_>>>>()
            .map_err(|err| crate::DeserializationError::Context {
                location: "rerun.testing.datatypes.AffixFuzzer2#single_float_optional".into(),
                source: Box::new(err),
            })?)
    }
}

impl crate::Datatype for AffixFuzzer2 {}

#[derive(Clone, Debug, PartialEq)]
pub enum AffixFuzzer3 {
    Degrees(f32),
    Radians(Option<f32>),
    Craziness(Vec<crate::datatypes::AffixFuzzer1>),
    FixedSizeShenanigans([f32; 3usize]),
}

impl<'a> From<AffixFuzzer3> for ::std::borrow::Cow<'a, AffixFuzzer3> {
    #[inline]
    fn from(value: AffixFuzzer3) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer3> for ::std::borrow::Cow<'a, AffixFuzzer3> {
    #[inline]
    fn from(value: &'a AffixFuzzer3) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for AffixFuzzer3 {
    type Name = crate::DatatypeName;
    #[inline]
    fn name() -> Self::Name {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer3")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Union(
            vec![
                Field {
                    name: "_null_markers".to_owned(),
                    data_type: DataType::Null,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "degrees".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "radians".to_owned(),
                    data_type: DataType::Float32,
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "craziness".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: <crate::datatypes::AffixFuzzer1>::to_arrow_datatype(),
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "fixed_size_shenanigans".to_owned(),
                    data_type: DataType::FixedSizeList(
                        Box::new(Field {
                            name: "item".to_owned(),
                            data_type: DataType::Float32,
                            is_nullable: false,
                            metadata: [].into(),
                        }),
                        3usize,
                    ),
                    is_nullable: false,
                    metadata: [].into(),
                },
            ],
            Some(vec![0i32, 1i32, 2i32, 3i32, 4i32]),
            UnionMode::Dense,
        )
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data: Vec<_> = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    datum
                })
                .collect();
            UnionArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::AffixFuzzer3>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::AffixFuzzer3>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                data.iter()
                    .map(|a| match a.as_deref() {
                        None => 0,
                        Some(AffixFuzzer3::Degrees(_)) => 1i8,
                        Some(AffixFuzzer3::Radians(_)) => 2i8,
                        Some(AffixFuzzer3::Craziness(_)) => 3i8,
                        Some(AffixFuzzer3::FixedSizeShenanigans(_)) => 4i8,
                    })
                    .collect(),
                vec![
                    NullArray::new(DataType::Null, data.iter().filter(|v| v.is_none()).count())
                        .boxed(),
                    {
                        let (somes, degrees): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(datum.as_deref(), Some(AffixFuzzer3::Degrees(_)))
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer3::Degrees(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let degrees_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            {
                                _ = extension_wrapper;
                                DataType::Float32.to_logical_type().clone()
                            },
                            degrees.into_iter().map(|v| v.unwrap_or_default()).collect(),
                            degrees_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, radians): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(datum.as_deref(), Some(AffixFuzzer3::Radians(_)))
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer3::Radians(v)) => Some(v.clone()),
                                    _ => None,
                                }
                                .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let radians_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        PrimitiveArray::new(
                            {
                                _ = extension_wrapper;
                                DataType::Float32.to_logical_type().clone()
                            },
                            radians.into_iter().map(|v| v.unwrap_or_default()).collect(),
                            radians_bitmap,
                        )
                        .boxed()
                    },
                    {
                        let (somes, craziness): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(datum.as_deref(), Some(AffixFuzzer3::Craziness(_)))
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer3::Craziness(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let craziness_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let craziness_inner_data: Vec<_> = craziness
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let craziness_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                craziness.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type:
                                            <crate::datatypes::AffixFuzzer1>::to_arrow_datatype(),
                                        is_nullable: false,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    _ = craziness_inner_bitmap;
                                    _ = extension_wrapper;
                                    crate::datatypes::AffixFuzzer1::try_to_arrow_opt(
                                        craziness_inner_data,
                                        None::<&str>,
                                    )?
                                },
                                craziness_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, fixed_size_shenanigans): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(
                                    datum.as_deref(),
                                    Some(AffixFuzzer3::FixedSizeShenanigans(_))
                                )
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer3::FixedSizeShenanigans(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let fixed_size_shenanigans_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let fixed_size_shenanigans_inner_data: Vec<_> = fixed_size_shenanigans
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let fixed_size_shenanigans_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = None;
                            FixedSizeListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::FixedSizeList(
                                        Box::new(Field {
                                            name: "item".to_owned(),
                                            data_type: DataType::Float32,
                                            is_nullable: false,
                                            metadata: [].into(),
                                        }),
                                        3usize,
                                    )
                                    .to_logical_type()
                                    .clone()
                                },
                                PrimitiveArray::new(
                                    {
                                        _ = extension_wrapper;
                                        DataType::Float32.to_logical_type().clone()
                                    },
                                    fixed_size_shenanigans_inner_data
                                        .into_iter()
                                        .map(|v| v.unwrap_or_default())
                                        .collect(),
                                    fixed_size_shenanigans_inner_bitmap,
                                )
                                .boxed(),
                                fixed_size_shenanigans_bitmap,
                            )
                            .boxed()
                        }
                    },
                ],
                Some({
                    let mut degrees_offset = 0;
                    let mut radians_offset = 0;
                    let mut craziness_offset = 0;
                    let mut fixed_size_shenanigans_offset = 0;
                    let mut nulls_offset = 0;
                    data.iter()
                        .map(|v| match v.as_deref() {
                            None => {
                                let offset = nulls_offset;
                                nulls_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer3::Degrees(_)) => {
                                let offset = degrees_offset;
                                degrees_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer3::Radians(_)) => {
                                let offset = radians_offset;
                                radians_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer3::Craziness(_)) => {
                                let offset = craziness_offset;
                                craziness_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer3::FixedSizeShenanigans(_)) => {
                                let offset = fixed_size_shenanigans_offset;
                                fixed_size_shenanigans_offset += 1;
                                offset
                            }
                        })
                        .collect()
                }),
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::UnionArray>()
                .ok_or_else(|| crate::DeserializationError::DatatypeMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.datatypes.AffixFuzzer3".into(),
                    source: Box::new(err),
                })?;
            if data.is_empty() {
                Vec::new()
            } else {
                let (data_types, data_arrays, data_offsets) =
                    (data.types(), data.fields(), data.offsets().unwrap());
                let degrees = {
                    let data = &*data_arrays[1usize];

                    data.as_any()
                        .downcast_ref::<Float32Array>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.copied())
                        .collect::<Vec<_>>()
                };
                let radians = {
                    let data = &*data_arrays[2usize];

                    data.as_any()
                        .downcast_ref::<Float32Array>()
                        .unwrap()
                        .into_iter()
                        .map(|v| v.copied())
                        .collect::<Vec<_>>()
                };
                let craziness = {
                    let data = &*data_arrays[3usize];

                    { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: ListArray < i32 >> () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = crate :: datatypes :: AffixFuzzer1 :: try_from_arrow_opt (data) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer3#craziness" . into () , source : Box :: new (err) , }

) ? . into_iter () . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 . collect :: < Vec < _ >> ()
                };
                let fixed_size_shenanigans = {
                    let data = &*data_arrays[4usize];

                    { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: FixedSizeListArray > () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = (0 ..) . step_by (3usize) . zip ((3usize ..) . step_by (3usize) . take (data . len ())) ; let data = & * * data . values () ; let data = data . as_any () . downcast_ref :: < Float32Array > () . unwrap () . into_iter () . map (| v | v . copied ()) . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec () . try_into () . map_err (| _err | crate :: DeserializationError :: ArrayLengthMismatch { expected : 3usize , got : (end - start) as usize , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 . collect :: < Vec < _ >> ()
                };
                data_types . iter () . enumerate () . map (| (i , typ) | { let offset = data_offsets [i];

 if * typ == 0 { Ok (None) }

 else { Ok (Some (match typ { 1i8 => AffixFuzzer3 :: Degrees (degrees . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : degrees . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer3#degrees" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 2i8 => AffixFuzzer3 :: Radians (radians . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : radians . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer3#radians" . into () , source : Box :: new (err) , }

) ? . clone ()) , 3i8 => AffixFuzzer3 :: Craziness (craziness . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : craziness . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer3#craziness" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 4i8 => AffixFuzzer3 :: FixedSizeShenanigans (fixed_size_shenanigans . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : fixed_size_shenanigans . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer3#fixed_size_shenanigans" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , _ => unreachable ! () , }

)) }

 }

) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer3" . into () , source : Box :: new (err) , }

) ?
            }
        })
    }
}

impl crate::Datatype for AffixFuzzer3 {}

#[derive(Clone, Debug, PartialEq)]
pub enum AffixFuzzer4 {
    SingleRequired(crate::datatypes::AffixFuzzer3),
    ManyRequired(Vec<crate::datatypes::AffixFuzzer3>),
    ManyOptional(Option<Vec<crate::datatypes::AffixFuzzer3>>),
}

impl<'a> From<AffixFuzzer4> for ::std::borrow::Cow<'a, AffixFuzzer4> {
    #[inline]
    fn from(value: AffixFuzzer4) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer4> for ::std::borrow::Cow<'a, AffixFuzzer4> {
    #[inline]
    fn from(value: &'a AffixFuzzer4) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for AffixFuzzer4 {
    type Name = crate::DatatypeName;
    #[inline]
    fn name() -> Self::Name {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer4")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Union(
            vec![
                Field {
                    name: "_null_markers".to_owned(),
                    data_type: DataType::Null,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "single_required".to_owned(),
                    data_type: <crate::datatypes::AffixFuzzer3>::to_arrow_datatype(),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "many_required".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: <crate::datatypes::AffixFuzzer3>::to_arrow_datatype(),
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "many_optional".to_owned(),
                    data_type: DataType::List(Box::new(Field {
                        name: "item".to_owned(),
                        data_type: <crate::datatypes::AffixFuzzer3>::to_arrow_datatype(),
                        is_nullable: true,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
            ],
            Some(vec![0i32, 1i32, 2i32, 3i32]),
            UnionMode::Dense,
        )
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data: Vec<_> = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    datum
                })
                .collect();
            UnionArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::AffixFuzzer4>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::AffixFuzzer4>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                data.iter()
                    .map(|a| match a.as_deref() {
                        None => 0,
                        Some(AffixFuzzer4::SingleRequired(_)) => 1i8,
                        Some(AffixFuzzer4::ManyRequired(_)) => 2i8,
                        Some(AffixFuzzer4::ManyOptional(_)) => 3i8,
                    })
                    .collect(),
                vec![
                    NullArray::new(DataType::Null, data.iter().filter(|v| v.is_none()).count())
                        .boxed(),
                    {
                        let (somes, single_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(datum.as_deref(), Some(AffixFuzzer4::SingleRequired(_)))
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer4::SingleRequired(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let single_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            _ = single_required_bitmap;
                            _ = extension_wrapper;
                            crate::datatypes::AffixFuzzer3::try_to_arrow_opt(
                                single_required,
                                None::<&str>,
                            )?
                        }
                    },
                    {
                        let (somes, many_required): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(datum.as_deref(), Some(AffixFuzzer4::ManyRequired(_)))
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer4::ManyRequired(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_required_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_required_inner_data: Vec<_> = many_required
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_required_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_required.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type:
                                            <crate::datatypes::AffixFuzzer3>::to_arrow_datatype(),
                                        is_nullable: false,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    _ = many_required_inner_bitmap;
                                    _ = extension_wrapper;
                                    crate::datatypes::AffixFuzzer3::try_to_arrow_opt(
                                        many_required_inner_data,
                                        None::<&str>,
                                    )?
                                },
                                many_required_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, many_optional): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| {
                                matches!(datum.as_deref(), Some(AffixFuzzer4::ManyOptional(_)))
                            })
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(AffixFuzzer4::ManyOptional(v)) => Some(v.clone()),
                                    _ => None,
                                }
                                .flatten();
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let many_optional_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let many_optional_inner_data: Vec<_> = many_optional
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let many_optional_inner_bitmap: Option<::arrow2::bitmap::Bitmap> = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                many_optional.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type:
                                            <crate::datatypes::AffixFuzzer3>::to_arrow_datatype(),
                                        is_nullable: true,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    _ = many_optional_inner_bitmap;
                                    _ = extension_wrapper;
                                    crate::datatypes::AffixFuzzer3::try_to_arrow_opt(
                                        many_optional_inner_data,
                                        None::<&str>,
                                    )?
                                },
                                many_optional_bitmap,
                            )
                            .boxed()
                        }
                    },
                ],
                Some({
                    let mut single_required_offset = 0;
                    let mut many_required_offset = 0;
                    let mut many_optional_offset = 0;
                    let mut nulls_offset = 0;
                    data.iter()
                        .map(|v| match v.as_deref() {
                            None => {
                                let offset = nulls_offset;
                                nulls_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer4::SingleRequired(_)) => {
                                let offset = single_required_offset;
                                single_required_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer4::ManyRequired(_)) => {
                                let offset = many_required_offset;
                                many_required_offset += 1;
                                offset
                            }

                            Some(AffixFuzzer4::ManyOptional(_)) => {
                                let offset = many_optional_offset;
                                many_optional_offset += 1;
                                offset
                            }
                        })
                        .collect()
                }),
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::UnionArray>()
                .ok_or_else(|| crate::DeserializationError::DatatypeMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.datatypes.AffixFuzzer4".into(),
                    source: Box::new(err),
                })?;
            if data.is_empty() {
                Vec::new()
            } else {
                let (data_types, data_arrays, data_offsets) =
                    (data.types(), data.fields(), data.offsets().unwrap());
                let single_required = {
                    let data = &*data_arrays[1usize];

                    crate::datatypes::AffixFuzzer3::try_from_arrow_opt(data)
                        .map_err(|err| crate::DeserializationError::Context {
                            location: "rerun.testing.datatypes.AffixFuzzer4#single_required".into(),
                            source: Box::new(err),
                        })?
                        .into_iter()
                        .collect::<Vec<_>>()
                };
                let many_required = {
                    let data = &*data_arrays[2usize];

                    { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: ListArray < i32 >> () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = crate :: datatypes :: AffixFuzzer3 :: try_from_arrow_opt (data) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer4#many_required" . into () , source : Box :: new (err) , }

) ? . into_iter () . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 . collect :: < Vec < _ >> ()
                };
                let many_optional = {
                    let data = &*data_arrays[3usize];

                    { let data = data . as_any () . downcast_ref :: < :: arrow2 :: array :: ListArray < i32 >> () . unwrap () ; if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = crate :: datatypes :: AffixFuzzer3 :: try_from_arrow_opt (data) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer4#many_optional" . into () , source : Box :: new (err) , }

) ? . into_iter () . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter () }

 . collect :: < Vec < _ >> ()
                };
                data_types . iter () . enumerate () . map (| (i , typ) | { let offset = data_offsets [i];

 if * typ == 0 { Ok (None) }

 else { Ok (Some (match typ { 1i8 => AffixFuzzer4 :: SingleRequired (single_required . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : single_required . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer4#single_required" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 2i8 => AffixFuzzer4 :: ManyRequired (many_required . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : many_required . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer4#many_required" . into () , source : Box :: new (err) , }

) ? . clone () . unwrap ()) , 3i8 => AffixFuzzer4 :: ManyOptional (many_optional . get (offset as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (offset as usize , offset as usize) , len : many_optional . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer4#many_optional" . into () , source : Box :: new (err) , }

) ? . clone ()) , _ => unreachable ! () , }

)) }

 }

) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.testing.datatypes.AffixFuzzer4" . into () , source : Box :: new (err) , }

) ?
            }
        })
    }
}

impl crate::Datatype for AffixFuzzer4 {}

#[derive(Clone, Debug, PartialEq)]
pub struct AffixFuzzer5 {
    pub single_optional_union: Option<crate::datatypes::AffixFuzzer4>,
}

impl<'a> From<AffixFuzzer5> for ::std::borrow::Cow<'a, AffixFuzzer5> {
    #[inline]
    fn from(value: AffixFuzzer5) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a AffixFuzzer5> for ::std::borrow::Cow<'a, AffixFuzzer5> {
    #[inline]
    fn from(value: &'a AffixFuzzer5) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for AffixFuzzer5 {
    type Name = crate::DatatypeName;
    #[inline]
    fn name() -> Self::Name {
        crate::DatatypeName::Borrowed("rerun.testing.datatypes.AffixFuzzer5")
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![Field {
            name: "single_optional_union".to_owned(),
            data_type: <crate::datatypes::AffixFuzzer4>::to_arrow_datatype(),
            is_nullable: true,
            metadata: [].into(),
        }])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::AffixFuzzer5>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::AffixFuzzer5>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                vec![{
                    let (somes, single_optional_union): (Vec<_>, Vec<_>) = data
                        .iter()
                        .map(|datum| {
                            let datum = datum
                                .as_ref()
                                .map(|datum| {
                                    let Self {
                                        single_optional_union,
                                        ..
                                    } = &**datum;
                                    single_optional_union.clone()
                                })
                                .flatten();
                            (datum.is_some(), datum)
                        })
                        .unzip();
                    let single_optional_union_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                        let any_nones = somes.iter().any(|some| !*some);
                        any_nones.then(|| somes.into())
                    };
                    {
                        _ = single_optional_union_bitmap;
                        _ = extension_wrapper;
                        crate::datatypes::AffixFuzzer4::try_to_arrow_opt(
                            single_optional_union,
                            None::<&str>,
                        )?
                    }
                }],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::StructArray>()
                .ok_or_else(|| crate::DeserializationError::DatatypeMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.testing.datatypes.AffixFuzzer5".into(),
                    source: Box::new(err),
                })?;
            if data.is_empty() {
                Vec::new()
            } else {
                let (data_fields, data_arrays, data_bitmap) =
                    (data.fields(), data.values(), data.validity());
                let is_valid = |i| data_bitmap.map_or(true, |bitmap| bitmap.get_bit(i));
                let arrays_by_name: ::std::collections::HashMap<_, _> = data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(data_arrays)
                    .collect();
                let single_optional_union = {
                    let data = &**arrays_by_name["single_optional_union"];

                    crate::datatypes::AffixFuzzer4::try_from_arrow_opt(data)
                        .map_err(|err| crate::DeserializationError::Context {
                            location: "rerun.testing.datatypes.AffixFuzzer5#single_optional_union"
                                .into(),
                            source: Box::new(err),
                        })?
                        .into_iter()
                };
                ::itertools::izip!(single_optional_union)
                    .enumerate()
                    .map(|(i, (single_optional_union))| {
                        is_valid(i)
                            .then(|| {
                                Ok(Self {
                                    single_optional_union,
                                })
                            })
                            .transpose()
                    })
                    .collect::<crate::DeserializationResult<Vec<_>>>()
                    .map_err(|err| crate::DeserializationError::Context {
                        location: "rerun.testing.datatypes.AffixFuzzer5".into(),
                        source: Box::new(err),
                    })?
            }
        })
    }
}

impl crate::Datatype for AffixFuzzer5 {}
