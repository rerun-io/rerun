// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/re_types/definitions/rerun/datatypes/tensor_buffer.fbs".

#![allow(trivial_numeric_casts)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: The underlying storage for a `Tensor`.
///
/// Tensor elements are stored in a contiguous buffer of a single type.
#[derive(Clone, PartialEq)]
pub enum TensorBuffer {
    U8(::re_types_core::ArrowBuffer<u8>),
    U16(::re_types_core::ArrowBuffer<u16>),
    U32(::re_types_core::ArrowBuffer<u32>),
    U64(::re_types_core::ArrowBuffer<u64>),
    I8(::re_types_core::ArrowBuffer<i8>),
    I16(::re_types_core::ArrowBuffer<i16>),
    I32(::re_types_core::ArrowBuffer<i32>),
    I64(::re_types_core::ArrowBuffer<i64>),
    F16(::re_types_core::ArrowBuffer<arrow2::types::f16>),
    F32(::re_types_core::ArrowBuffer<f32>),
    F64(::re_types_core::ArrowBuffer<f64>),
    Jpeg(::re_types_core::ArrowBuffer<u8>),
    Nv12(::re_types_core::ArrowBuffer<u8>),
}

impl ::re_types_core::SizeBytes for TensorBuffer {
    #[allow(clippy::match_same_arms)]
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        match self {
            Self::U8(v) => v.heap_size_bytes(),
            Self::U16(v) => v.heap_size_bytes(),
            Self::U32(v) => v.heap_size_bytes(),
            Self::U64(v) => v.heap_size_bytes(),
            Self::I8(v) => v.heap_size_bytes(),
            Self::I16(v) => v.heap_size_bytes(),
            Self::I32(v) => v.heap_size_bytes(),
            Self::I64(v) => v.heap_size_bytes(),
            Self::F16(v) => v.heap_size_bytes(),
            Self::F32(v) => v.heap_size_bytes(),
            Self::F64(v) => v.heap_size_bytes(),
            Self::Jpeg(v) => v.heap_size_bytes(),
            Self::Nv12(v) => v.heap_size_bytes(),
        }
    }

    #[inline]
    fn is_pod() -> bool {
        <::re_types_core::ArrowBuffer<u8>>::is_pod()
            && <::re_types_core::ArrowBuffer<u16>>::is_pod()
            && <::re_types_core::ArrowBuffer<u32>>::is_pod()
            && <::re_types_core::ArrowBuffer<u64>>::is_pod()
            && <::re_types_core::ArrowBuffer<i8>>::is_pod()
            && <::re_types_core::ArrowBuffer<i16>>::is_pod()
            && <::re_types_core::ArrowBuffer<i32>>::is_pod()
            && <::re_types_core::ArrowBuffer<i64>>::is_pod()
            && <::re_types_core::ArrowBuffer<arrow2::types::f16>>::is_pod()
            && <::re_types_core::ArrowBuffer<f32>>::is_pod()
            && <::re_types_core::ArrowBuffer<f64>>::is_pod()
            && <::re_types_core::ArrowBuffer<u8>>::is_pod()
            && <::re_types_core::ArrowBuffer<u8>>::is_pod()
    }
}

::re_types_core::macros::impl_into_cow!(TensorBuffer);

impl ::re_types_core::Loggable for TensorBuffer {
    type Name = ::re_types_core::DatatypeName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.datatypes.TensorBuffer".into()
    }

    #[allow(clippy::wildcard_imports)]
    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        use arrow2::datatypes::*;
        DataType::Union(
            std::sync::Arc::new(vec![
                Field {
                    name: "_null_markers".to_owned(),
                    data_type: DataType::Null,
                    is_nullable: true,
                    metadata: [].into(),
                },
                Field {
                    name: "U8".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::UInt8,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "U16".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::UInt16,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "U32".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::UInt32,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "U64".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::UInt64,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "I8".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Int8,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "I16".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Int16,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "I32".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Int32,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "I64".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Int64,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "F16".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Float16,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "F32".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Float32,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "F64".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::Float64,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "JPEG".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::UInt8,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
                Field {
                    name: "NV12".to_owned(),
                    data_type: DataType::List(std::sync::Arc::new(Field {
                        name: "item".to_owned(),
                        data_type: DataType::UInt8,
                        is_nullable: false,
                        metadata: [].into(),
                    })),
                    is_nullable: false,
                    metadata: [].into(),
                },
            ]),
            Some(std::sync::Arc::new(vec![
                0i32, 1i32, 2i32, 3i32, 4i32, 5i32, 6i32, 7i32, 8i32, 9i32, 10i32, 11i32, 12i32,
                13i32,
            ])),
            UnionMode::Dense,
        )
    }

    #[allow(clippy::wildcard_imports)]
    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            let data: Vec<_> = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    datum
                })
                .collect();
            UnionArray::new(
                <crate::datatypes::TensorBuffer>::arrow_datatype(),
                data.iter()
                    .map(|a| match a.as_deref() {
                        None => 0,
                        Some(TensorBuffer::U8(_)) => 1i8,
                        Some(TensorBuffer::U16(_)) => 2i8,
                        Some(TensorBuffer::U32(_)) => 3i8,
                        Some(TensorBuffer::U64(_)) => 4i8,
                        Some(TensorBuffer::I8(_)) => 5i8,
                        Some(TensorBuffer::I16(_)) => 6i8,
                        Some(TensorBuffer::I32(_)) => 7i8,
                        Some(TensorBuffer::I64(_)) => 8i8,
                        Some(TensorBuffer::F16(_)) => 9i8,
                        Some(TensorBuffer::F32(_)) => 10i8,
                        Some(TensorBuffer::F64(_)) => 11i8,
                        Some(TensorBuffer::Jpeg(_)) => 12i8,
                        Some(TensorBuffer::Nv12(_)) => 13i8,
                    })
                    .collect(),
                vec![
                    NullArray::new(DataType::Null, data.iter().filter(|v| v.is_none()).count())
                        .boxed(),
                    {
                        let (somes, u8): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::U8(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::U8(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let u8_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let u8_inner_data: Buffer<_> = u8
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let u8_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                u8.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::UInt8,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::UInt8,
                                    u8_inner_data,
                                    u8_inner_bitmap,
                                )
                                .boxed(),
                                u8_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, u16): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::U16(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::U16(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let u16_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let u16_inner_data: Buffer<_> = u16
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let u16_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                u16.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::UInt16,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::UInt16,
                                    u16_inner_data,
                                    u16_inner_bitmap,
                                )
                                .boxed(),
                                u16_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, u32): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::U32(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::U32(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let u32_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let u32_inner_data: Buffer<_> = u32
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let u32_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                u32.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::UInt32,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::UInt32,
                                    u32_inner_data,
                                    u32_inner_bitmap,
                                )
                                .boxed(),
                                u32_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, u64): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::U64(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::U64(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let u64_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let u64_inner_data: Buffer<_> = u64
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let u64_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                u64.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::UInt64,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::UInt64,
                                    u64_inner_data,
                                    u64_inner_bitmap,
                                )
                                .boxed(),
                                u64_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, i8): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::I8(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::I8(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let i8_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let i8_inner_data: Buffer<_> = i8
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let i8_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                i8.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Int8,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(DataType::Int8, i8_inner_data, i8_inner_bitmap)
                                    .boxed(),
                                i8_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, i16): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::I16(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::I16(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let i16_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let i16_inner_data: Buffer<_> = i16
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let i16_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                i16.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Int16,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Int16,
                                    i16_inner_data,
                                    i16_inner_bitmap,
                                )
                                .boxed(),
                                i16_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, i32): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::I32(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::I32(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let i32_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let i32_inner_data: Buffer<_> = i32
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let i32_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                i32.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Int32,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Int32,
                                    i32_inner_data,
                                    i32_inner_bitmap,
                                )
                                .boxed(),
                                i32_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, i64): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::I64(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::I64(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let i64_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let i64_inner_data: Buffer<_> = i64
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let i64_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                i64.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Int64,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Int64,
                                    i64_inner_data,
                                    i64_inner_bitmap,
                                )
                                .boxed(),
                                i64_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, f16): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::F16(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::F16(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let f16_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let f16_inner_data: Buffer<_> = f16
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let f16_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                f16.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Float16,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Float16,
                                    f16_inner_data,
                                    f16_inner_bitmap,
                                )
                                .boxed(),
                                f16_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, f32): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::F32(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::F32(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let f32_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let f32_inner_data: Buffer<_> = f32
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let f32_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                f32.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Float32,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Float32,
                                    f32_inner_data,
                                    f32_inner_bitmap,
                                )
                                .boxed(),
                                f32_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, f64): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::F64(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::F64(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let f64_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let f64_inner_data: Buffer<_> = f64
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let f64_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                f64.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::Float64,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::Float64,
                                    f64_inner_data,
                                    f64_inner_bitmap,
                                )
                                .boxed(),
                                f64_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, jpeg): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::Jpeg(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::Jpeg(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let jpeg_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let jpeg_inner_data: Buffer<_> = jpeg
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let jpeg_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                jpeg.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::UInt8,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::UInt8,
                                    jpeg_inner_data,
                                    jpeg_inner_bitmap,
                                )
                                .boxed(),
                                jpeg_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, nv12): (Vec<_>, Vec<_>) = data
                            .iter()
                            .filter(|datum| matches!(datum.as_deref(), Some(TensorBuffer::Nv12(_))))
                            .map(|datum| {
                                let datum = match datum.as_deref() {
                                    Some(TensorBuffer::Nv12(v)) => Some(v.clone()),
                                    _ => None,
                                };
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let nv12_bitmap: Option<arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let nv12_inner_data: Buffer<_> = nv12
                                .iter()
                                .flatten()
                                .map(|b| b.as_slice())
                                .collect::<Vec<_>>()
                                .concat()
                                .into();
                            let nv12_inner_bitmap: Option<arrow2::bitmap::Bitmap> = None;
                            let offsets = arrow2::offset::Offsets::<i32>::try_from_lengths(
                                nv12.iter().map(|opt| {
                                    opt.as_ref()
                                        .map(|datum| datum.num_instances())
                                        .unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                DataType::List(std::sync::Arc::new(Field {
                                    name: "item".to_owned(),
                                    data_type: DataType::UInt8,
                                    is_nullable: false,
                                    metadata: [].into(),
                                })),
                                offsets,
                                PrimitiveArray::new(
                                    DataType::UInt8,
                                    nv12_inner_data,
                                    nv12_inner_bitmap,
                                )
                                .boxed(),
                                nv12_bitmap,
                            )
                            .boxed()
                        }
                    },
                ],
                Some({
                    let mut u8_offset = 0;
                    let mut u16_offset = 0;
                    let mut u32_offset = 0;
                    let mut u64_offset = 0;
                    let mut i8_offset = 0;
                    let mut i16_offset = 0;
                    let mut i32_offset = 0;
                    let mut i64_offset = 0;
                    let mut f16_offset = 0;
                    let mut f32_offset = 0;
                    let mut f64_offset = 0;
                    let mut jpeg_offset = 0;
                    let mut nv12_offset = 0;
                    let mut nulls_offset = 0;
                    data.iter()
                        .map(|v| match v.as_deref() {
                            None => {
                                let offset = nulls_offset;
                                nulls_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::U8(_)) => {
                                let offset = u8_offset;
                                u8_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::U16(_)) => {
                                let offset = u16_offset;
                                u16_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::U32(_)) => {
                                let offset = u32_offset;
                                u32_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::U64(_)) => {
                                let offset = u64_offset;
                                u64_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::I8(_)) => {
                                let offset = i8_offset;
                                i8_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::I16(_)) => {
                                let offset = i16_offset;
                                i16_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::I32(_)) => {
                                let offset = i32_offset;
                                i32_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::I64(_)) => {
                                let offset = i64_offset;
                                i64_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::F16(_)) => {
                                let offset = f16_offset;
                                f16_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::F32(_)) => {
                                let offset = f32_offset;
                                f32_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::F64(_)) => {
                                let offset = f64_offset;
                                f64_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::Jpeg(_)) => {
                                let offset = jpeg_offset;
                                jpeg_offset += 1;
                                offset
                            }
                            Some(TensorBuffer::Nv12(_)) => {
                                let offset = nv12_offset;
                                nv12_offset += 1;
                                offset
                            }
                        })
                        .collect()
                }),
            )
            .boxed()
        })
    }

    #[allow(clippy::wildcard_imports)]
    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::UnionArray>()
                .ok_or_else(|| {
                    DeserializationError::datatype_mismatch(
                        DataType::Union(
                            std::sync::Arc::new(vec![
                                Field {
                                    name: "_null_markers".to_owned(),
                                    data_type: DataType::Null,
                                    is_nullable: true,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "U8".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "U16".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt16,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "U32".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt32,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "U64".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt64,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "I8".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "I16".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int16,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "I32".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int32,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "I64".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int64,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "F16".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float16,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "F32".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float32,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "F64".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float64,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "JPEG".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                                Field {
                                    name: "NV12".to_owned(),
                                    data_type: DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    is_nullable: false,
                                    metadata: [].into(),
                                },
                            ]),
                            Some(std::sync::Arc::new(vec![
                                0i32, 1i32, 2i32, 3i32, 4i32, 5i32, 6i32, 7i32, 8i32, 9i32, 10i32,
                                11i32, 12i32, 13i32,
                            ])),
                            UnionMode::Dense,
                        ),
                        arrow_data.data_type().clone(),
                    )
                })
                .with_context("rerun.datatypes.TensorBuffer")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_types, arrow_data_arrays) =
                    (arrow_data.types(), arrow_data.fields());
                let arrow_data_offsets = arrow_data
                    .offsets()
                    .ok_or_else(|| {
                        DeserializationError::datatype_mismatch(
                            Self::arrow_datatype(),
                            arrow_data.data_type().clone(),
                        )
                    })
                    .with_context("rerun.datatypes.TensorBuffer")?;
                if arrow_data_types.len() != arrow_data_offsets.len() {
                    return Err(DeserializationError::offset_slice_oob(
                        (0, arrow_data_types.len()),
                        arrow_data_offsets.len(),
                    ))
                    .with_context("rerun.datatypes.TensorBuffer");
                }
                let u8 = {
                    if 1usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[1usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U8")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt8Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::UInt8,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U8")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let u16 = {
                    if 2usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[2usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt16,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U16")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt16Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::UInt16,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U16")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let u32 = {
                    if 3usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[3usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt32,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U32")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt32Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::UInt32,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U32")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let u64 = {
                    if 4usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[4usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt64,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U64")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt64Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::UInt64,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U64")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i8 = {
                    if 5usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[5usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I8")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int8Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Int8,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I8")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i16 = {
                    if 6usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[6usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int16,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I16")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int16Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Int16,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I16")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i32 = {
                    if 7usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[7usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int32,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I32")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int32Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Int32,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I32")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i64 = {
                    if 8usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[8usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Int64,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I64")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int64Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Int64,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I64")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let f16 = {
                    if 9usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[9usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float16,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#F16")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float16Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Float16,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#F16")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let f32 = {
                    if 10usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[10usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float32,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#F32")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float32Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Float32,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#F32")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let f64 = {
                    if 11usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[11usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::Float64,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#F64")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float64Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::Float64,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#F64")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let jpeg = {
                    if 12usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[12usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#JPEG")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt8Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::UInt8,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#JPEG")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let nv12 = {
                    if 13usize >= arrow_data_arrays.len() {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[13usize];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                DeserializationError::datatype_mismatch(
                                    DataType::List(std::sync::Arc::new(Field {
                                        name: "item".to_owned(),
                                        data_type: DataType::UInt8,
                                        is_nullable: false,
                                        metadata: [].into(),
                                    })),
                                    arrow_data.data_type().clone(),
                                )
                            })
                            .with_context("rerun.datatypes.TensorBuffer#NV12")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt8Array>()
                                    .ok_or_else(|| {
                                        DeserializationError::datatype_mismatch(
                                            DataType::UInt8,
                                            arrow_data_inner.data_type().clone(),
                                        )
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#NV12")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.iter().zip(offsets.lengths()),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, len)| {
                                    let start = *start as usize;
                                    let end = start + len;
                                    if end as usize > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start as usize, end - start as usize)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                arrow_data_types
                    .iter()
                    .enumerate()
                    .map(|(i, typ)| {
                        let offset = arrow_data_offsets[i];
                        if *typ == 0 {
                            Ok(None)
                        } else {
                            Ok(Some(match typ {
                                1i8 => TensorBuffer::U8({
                                    if offset as usize >= u8.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u8.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U8");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u8.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U8")?
                                }),
                                2i8 => TensorBuffer::U16({
                                    if offset as usize >= u16.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u16.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U16");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u16.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U16")?
                                }),
                                3i8 => TensorBuffer::U32({
                                    if offset as usize >= u32.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u32.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U32");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u32.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U32")?
                                }),
                                4i8 => TensorBuffer::U64({
                                    if offset as usize >= u64.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u64.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U64");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u64.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U64")?
                                }),
                                5i8 => TensorBuffer::I8({
                                    if offset as usize >= i8.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i8.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I8");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i8.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I8")?
                                }),
                                6i8 => TensorBuffer::I16({
                                    if offset as usize >= i16.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i16.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I16");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i16.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I16")?
                                }),
                                7i8 => TensorBuffer::I32({
                                    if offset as usize >= i32.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i32.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I32");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i32.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I32")?
                                }),
                                8i8 => TensorBuffer::I64({
                                    if offset as usize >= i64.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i64.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I64");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i64.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I64")?
                                }),
                                9i8 => TensorBuffer::F16({
                                    if offset as usize >= f16.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            f16.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#F16");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { f16.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#F16")?
                                }),
                                10i8 => TensorBuffer::F32({
                                    if offset as usize >= f32.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            f32.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#F32");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { f32.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#F32")?
                                }),
                                11i8 => TensorBuffer::F64({
                                    if offset as usize >= f64.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            f64.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#F64");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { f64.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#F64")?
                                }),
                                12i8 => TensorBuffer::Jpeg({
                                    if offset as usize >= jpeg.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            jpeg.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#JPEG");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { jpeg.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#JPEG")?
                                }),
                                13i8 => TensorBuffer::Nv12({
                                    if offset as usize >= nv12.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            nv12.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#NV12");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { nv12.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#NV12")?
                                }),
                                _ => {
                                    return Err(DeserializationError::missing_union_arm(
                                        Self::arrow_datatype(),
                                        "<invalid>",
                                        *typ as _,
                                    ))
                                    .with_context("rerun.datatypes.TensorBuffer");
                                }
                            }))
                        }
                    })
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.datatypes.TensorBuffer")?
            }
        })
    }
}
