// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

#![allow(trivial_numeric_casts)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::iter_on_single_items)]
#![allow(clippy::map_flatten)]
#![allow(clippy::match_wildcard_for_single_variants)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::unnecessary_cast)]

/// The description of a semantic Class.
///
/// If an entity is annotated with a corresponding `ClassId`, rerun will use
/// the attached `AnnotationInfo` to derive labels and colors.
///
/// Keypoints within an annotation class can similarly be annotated with a
/// `KeypointId` in which case we should defer to the label and color for the
/// `AnnotationInfo` specifically associated with the Keypoint.
///
/// Keypoints within the class can also be decorated with skeletal edges.
/// Keypoint-connections are pairs of `KeypointId`s. If an edge is
/// defined, and both keypoints exist within the instance of the class, then the
/// keypoints should be connected with an edge. The edge should be labeled and
/// colored as described by the class's `AnnotationInfo`.
#[derive(Clone, Debug, Default, Eq, PartialEq)]
pub struct ClassDescription {
    /// The `AnnotationInfo` for the class.
    pub info: crate::datatypes::AnnotationInfo,

    /// The `AnnotationInfo` for all of the keypoints.
    pub keypoint_annotations: Vec<crate::datatypes::AnnotationInfo>,

    /// The connections between keypoints.
    pub keypoint_connections: Vec<crate::datatypes::KeypointPair>,
}

impl<'a> From<ClassDescription> for ::std::borrow::Cow<'a, ClassDescription> {
    #[inline]
    fn from(value: ClassDescription) -> Self {
        std::borrow::Cow::Owned(value)
    }
}

impl<'a> From<&'a ClassDescription> for ::std::borrow::Cow<'a, ClassDescription> {
    #[inline]
    fn from(value: &'a ClassDescription) -> Self {
        std::borrow::Cow::Borrowed(value)
    }
}

impl crate::Loggable for ClassDescription {
    type Name = crate::DatatypeName;
    type Item<'a> = Option<Self>;
    type Iter<'a> = Box<dyn Iterator<Item = Self::Item<'a>> + 'a>;
    #[inline]
    fn name() -> Self::Name {
        "rerun.datatypes.ClassDescription".into()
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    #[inline]
    fn to_arrow_datatype() -> arrow2::datatypes::DataType {
        use ::arrow2::datatypes::*;
        DataType::Struct(vec![
            Field {
                name: "info".to_owned(),
                data_type: <crate::datatypes::AnnotationInfo>::to_arrow_datatype(),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "keypoint_annotations".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: <crate::datatypes::AnnotationInfo>::to_arrow_datatype(),
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
            Field {
                name: "keypoint_connections".to_owned(),
                data_type: DataType::List(Box::new(Field {
                    name: "item".to_owned(),
                    data_type: <crate::datatypes::KeypointPair>::to_arrow_datatype(),
                    is_nullable: false,
                    metadata: [].into(),
                })),
                is_nullable: false,
                metadata: [].into(),
            },
        ])
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
        extension_wrapper: Option<&str>,
    ) -> crate::SerializationResult<Box<dyn ::arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<::arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                (if let Some(ext) = extension_wrapper {
                    DataType::Extension(
                        ext.to_owned(),
                        Box::new(<crate::datatypes::ClassDescription>::to_arrow_datatype()),
                        None,
                    )
                } else {
                    <crate::datatypes::ClassDescription>::to_arrow_datatype()
                })
                .to_logical_type()
                .clone(),
                vec![
                    {
                        let (somes, info): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self { info, .. } = &**datum;
                                    info.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let info_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            _ = info_bitmap;
                            _ = extension_wrapper;
                            crate::datatypes::AnnotationInfo::try_to_arrow_opt(info, None::<&str>)?
                        }
                    },
                    {
                        let (somes, keypoint_annotations): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        keypoint_annotations,
                                        ..
                                    } = &**datum;
                                    keypoint_annotations.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let keypoint_annotations_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let keypoint_annotations_inner_data: Vec<_> = keypoint_annotations
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let keypoint_annotations_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                keypoint_annotations.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type:
                                            <crate::datatypes::AnnotationInfo>::to_arrow_datatype(),
                                        is_nullable: false,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    _ = keypoint_annotations_inner_bitmap;
                                    _ = extension_wrapper;
                                    crate::datatypes::AnnotationInfo::try_to_arrow_opt(
                                        keypoint_annotations_inner_data,
                                        None::<&str>,
                                    )?
                                },
                                keypoint_annotations_bitmap,
                            )
                            .boxed()
                        }
                    },
                    {
                        let (somes, keypoint_connections): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| {
                                    let Self {
                                        keypoint_connections,
                                        ..
                                    } = &**datum;
                                    keypoint_connections.clone()
                                });
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let keypoint_connections_bitmap: Option<::arrow2::bitmap::Bitmap> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            use arrow2::{buffer::Buffer, offset::OffsetsBuffer};
                            let keypoint_connections_inner_data: Vec<_> = keypoint_connections
                                .iter()
                                .flatten()
                                .flatten()
                                .cloned()
                                .map(Some)
                                .collect();
                            let keypoint_connections_inner_bitmap: Option<
                                ::arrow2::bitmap::Bitmap,
                            > = None;
                            let offsets = ::arrow2::offset::Offsets::<i32>::try_from_lengths(
                                keypoint_connections.iter().map(|opt| {
                                    opt.as_ref().map(|datum| datum.len()).unwrap_or_default()
                                }),
                            )
                            .unwrap()
                            .into();
                            ListArray::new(
                                {
                                    _ = extension_wrapper;
                                    DataType::List(Box::new(Field {
                                        name: "item".to_owned(),
                                        data_type:
                                            <crate::datatypes::KeypointPair>::to_arrow_datatype(),
                                        is_nullable: false,
                                        metadata: [].into(),
                                    }))
                                    .to_logical_type()
                                    .clone()
                                },
                                offsets,
                                {
                                    _ = keypoint_connections_inner_bitmap;
                                    _ = extension_wrapper;
                                    crate::datatypes::KeypointPair::try_to_arrow_opt(
                                        keypoint_connections_inner_data,
                                        None::<&str>,
                                    )?
                                },
                                keypoint_connections_bitmap,
                            )
                            .boxed()
                        }
                    },
                ],
                bitmap,
            )
            .boxed()
        })
    }

    #[allow(unused_imports, clippy::wildcard_imports)]
    fn try_from_arrow_opt(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::Loggable as _;
        use ::arrow2::{array::*, datatypes::*};
        Ok({
            let data = data
                .as_any()
                .downcast_ref::<::arrow2::array::StructArray>()
                .ok_or_else(|| crate::DeserializationError::DatatypeMismatch {
                    expected: data.data_type().clone(),
                    got: data.data_type().clone(),
                    backtrace: ::backtrace::Backtrace::new_unresolved(),
                })
                .map_err(|err| crate::DeserializationError::Context {
                    location: "rerun.datatypes.ClassDescription".into(),
                    source: Box::new(err),
                })?;
            if data.is_empty() {
                Vec::new()
            } else {
                let (data_fields, data_arrays, data_bitmap) =
                    (data.fields(), data.values(), data.validity());
                let is_valid = |i| data_bitmap.map_or(true, |bitmap| bitmap.get_bit(i));
                let arrays_by_name: ::std::collections::HashMap<_, _> = data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(data_arrays)
                    .collect();
                let info = {
                    let data = &**arrays_by_name["info"];

                    crate::datatypes::AnnotationInfo::try_from_arrow_opt(data)
                        .map_err(|err| crate::DeserializationError::Context {
                            location: "rerun.datatypes.ClassDescription#info".into(),
                            source: Box::new(err),
                        })?
                        .into_iter()
                };
                let keypoint_annotations = {
                    let data = &**arrays_by_name["keypoint_annotations"];

                    {
                        let data = data
                            .as_any()
                            .downcast_ref::<::arrow2::array::ListArray<i32>>()
                            .unwrap();
                        if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = crate :: datatypes :: AnnotationInfo :: try_from_arrow_opt (data) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.ClassDescription#keypoint_annotations" . into () , source : Box :: new (err) , }

) ? . into_iter () . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter ()
                    }
                };
                let keypoint_connections = {
                    let data = &**arrays_by_name["keypoint_connections"];

                    {
                        let data = data
                            .as_any()
                            .downcast_ref::<::arrow2::array::ListArray<i32>>()
                            .unwrap();
                        if data . is_empty () { Vec :: new () }

 else { let bitmap = data . validity () . cloned () ; let offsets = { let offsets = data . offsets () ; offsets . iter () . copied () . zip (offsets . iter () . copied () . skip (1)) }

 ; let data = & * * data . values () ; let data = crate :: datatypes :: KeypointPair :: try_from_arrow_opt (data) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.ClassDescription#keypoint_connections" . into () , source : Box :: new (err) , }

) ? . into_iter () . map (| v | v . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

)) . collect :: < crate :: DeserializationResult < Vec < _ >> > () ? ; offsets . enumerate () . map (move | (i , (start , end)) | bitmap . as_ref () . map_or (true , | bitmap | bitmap . get_bit (i)) . then (|| { Ok (data . get (start as usize .. end as usize) . ok_or (crate :: DeserializationError :: OffsetsMismatch { bounds : (start as usize , end as usize) , len : data . len () , backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) ? . to_vec ()) }

) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < Option < _ >> >> () ? }

 . into_iter ()
                    }
                };
                :: itertools :: izip ! (info , keypoint_annotations , keypoint_connections) . enumerate () . map (| (i , (info , keypoint_annotations , keypoint_connections)) | is_valid (i) . then (|| Ok (Self { info : info . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.ClassDescription#info" . into () , source : Box :: new (err) , }

) ? , keypoint_annotations : keypoint_annotations . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.ClassDescription#keypoint_annotations" . into () , source : Box :: new (err) , }

) ? , keypoint_connections : keypoint_connections . ok_or_else (|| crate :: DeserializationError :: MissingData { backtrace : :: backtrace :: Backtrace :: new_unresolved () , }

) . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.ClassDescription#keypoint_connections" . into () , source : Box :: new (err) , }

) ? , }

)) . transpose ()) . collect :: < crate :: DeserializationResult < Vec < _ >> > () . map_err (| err | crate :: DeserializationError :: Context { location : "rerun.datatypes.ClassDescription" . into () , source : Box :: new (err) , }

) ?
            }
        })
    }

    #[inline]
    fn try_iter_from_arrow(
        data: &dyn ::arrow2::array::Array,
    ) -> crate::DeserializationResult<Self::Iter<'_>>
    where
        Self: Sized,
    {
        Ok(Box::new(Self::try_from_arrow_opt(data)?.into_iter()))
    }

    #[inline]
    fn convert_item_to_self(item: Self::Item<'_>) -> Option<Self> {
        item
    }
}

impl crate::Datatype for ClassDescription {}
