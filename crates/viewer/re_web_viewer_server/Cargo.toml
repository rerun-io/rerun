[package]
name = "re_web_viewer_server"
authors.workspace = true
description = "Serves the Rerun web viewer (Wasm and HTML) over HTTP"
edition.workspace = true
homepage.workspace = true
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true
include = [
  "../../Cargo.lock",
  "../../LICENSE-APACHE",
  "../../LICENSE-MIT",
  "**/*.rs",
  "Cargo.toml",

  # Matches the files in src/lib.rs:
  "web_viewer/favicon.svg",
  "web_viewer/favicon.ico",
  "web_viewer/index.html",
  "web_viewer/re_viewer_bg.wasm",
  "web_viewer/re_viewer.js",
  "web_viewer/sw.js",
]

[lints]
workspace = true

[package.metadata.docs.rs]
all-features = true # Will also enable the `__disable_server` feature, meaning the docs will build even without a .wasm binary


[features]
## This crate embeds the web viewer `.wasm`, and so before building this crate you must build the `.wasm` using `pixi run rerun-build-web-release`.
##
## If for some reason you need to build this crate _without_ the `.wasm` being built, then you can do so in one of two ways:
## * Use `--features __disable_server` when building this crate (or `--all-features`).
## * Compile with the env-var `RERUN_DISABLE_WEB_VIEWER_SERVER=1`
##
## This will cause this crate to build despite the `.wasm` being missing, BUT it will panic at runtime!
## For instance: when rustdoc builds the docs for this crates, it uses `--all-features`, which means
## it can build the docs for this crate without having to build the web-viewer first.
## Similarly, our CI will enable `RERUN_DISABLE_WEB_VIEWER_SERVER=1` before building unit tests,
## because none of the unit tests actually rely on us serving the `.wasm` file.
__disable_server = []

## Enable anonymized telemetry using our analytics SDK.
analytics = ["dep:re_analytics"]

[dependencies]
re_log = { workspace = true, features = ["setup"] }

document-features.workspace = true
tiny_http.workspace = true
thiserror.workspace = true

# Optional dependencies:
re_analytics = { workspace = true, optional = true }

[build-dependencies]
re_build_tools.workspace = true
