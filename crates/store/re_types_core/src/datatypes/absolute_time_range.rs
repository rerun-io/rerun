// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/time_range.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use crate::SerializationResult;
use crate::try_serialize_field;
use crate::{ComponentBatch as _, SerializedComponentBatch};
use crate::{ComponentDescriptor, ComponentType};
use crate::{DeserializationError, DeserializationResult};

/// **Datatype**: Two [`datatypes::TimeInt`][crate::datatypes::TimeInt] describing a range of time.
#[derive(Clone, Debug, Copy, PartialEq, Eq, PartialOrd, Ord)]
pub struct AbsoluteTimeRange {
    /// Start of the range.
    pub min: crate::datatypes::TimeInt,

    /// End of the range (inclusive).
    pub max: crate::datatypes::TimeInt,
}

crate::macros::impl_into_cow!(AbsoluteTimeRange);

impl crate::Loggable for AbsoluteTimeRange {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        use arrow::datatypes::*;
        DataType::Struct(Fields::from(vec![
            Field::new("min", <crate::datatypes::TimeInt>::arrow_datatype(), false),
            Field::new("max", <crate::datatypes::TimeInt>::arrow_datatype(), false),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::manual_is_variant_and)]
        use crate::{Loggable as _, ResultExt as _, arrow_helpers::as_array_ref};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let fields = Fields::from(vec![
                Field::new("min", <crate::datatypes::TimeInt>::arrow_datatype(), false),
                Field::new("max", <crate::datatypes::TimeInt>::arrow_datatype(), false),
            ]);
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let validity: Option<arrow::buffer::NullBuffer> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            as_array_ref(StructArray::new(
                fields,
                vec![
                    {
                        let (somes, min): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.min.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let min_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Int64Type>::new(
                            ScalarBuffer::from(
                                min.into_iter()
                                    .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            min_validity,
                        ))
                    },
                    {
                        let (somes, max): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.max.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let max_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Int64Type>::new(
                            ScalarBuffer::from(
                                max.into_iter()
                                    .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            max_validity,
                        ))
                    },
                ],
                validity,
            ))
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use crate::{Loggable as _, ResultExt as _, arrow_zip_validity::ZipValidity};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.datatypes.AbsoluteTimeRange")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.columns());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name().as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let min = {
                    if !arrays_by_name.contains_key("min") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "min",
                        ))
                        .with_context("rerun.datatypes.AbsoluteTimeRange");
                    }
                    let arrow_data = &**arrays_by_name["min"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Int64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Int64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.AbsoluteTimeRange#min")?
                        .into_iter()
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::TimeInt))
                };
                let max = {
                    if !arrays_by_name.contains_key("max") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "max",
                        ))
                        .with_context("rerun.datatypes.AbsoluteTimeRange");
                    }
                    let arrow_data = &**arrays_by_name["max"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Int64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Int64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.AbsoluteTimeRange#max")?
                        .into_iter()
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::TimeInt))
                };
                ZipValidity::new_with_validity(::itertools::izip!(min, max), arrow_data.nulls())
                    .map(|opt| {
                        opt.map(|(min, max)| {
                            Ok(Self {
                                min: min
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context("rerun.datatypes.AbsoluteTimeRange#min")?,
                                max: max
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context("rerun.datatypes.AbsoluteTimeRange#max")?,
                            })
                        })
                        .transpose()
                    })
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.datatypes.AbsoluteTimeRange")?
            }
        })
    }
}

impl ::re_byte_size::SizeBytes for AbsoluteTimeRange {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.min.heap_size_bytes() + self.max.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::datatypes::TimeInt>::is_pod() && <crate::datatypes::TimeInt>::is_pod()
    }
}
