syntax = "proto3";

package rerun.remote_store.v0;

import "rerun/v0/common.proto";

service StorageNode {
    rpc ListRecordings(ListRecordingsRequest) returns (ListRecordingsResponse) {}
    rpc Query(QueryRequest) returns (stream QueryResponse) {}
    rpc GetRecordingMetadata(GetRecordingMetadataRequest) returns (GetRecordingMetadataResponse) {}
    // TODO(zehiko) - should this be singular recording registration? Currently we can have 1 rrd => many recordings
    rpc RegisterRecordings(RegisterRecordingsRequest) returns (RegisterRecordingsResponse) {}
}

// ---------------- RegisterRecording ------------------

message RegisterRecordingsRequest {
    // human readable description of the recording
    string description = 1;
    // information about recording's backing storage
    // TODO(zehiko) add separate info about the "source" recording
    ObjectStorage obj_storage = 2;
    // type of recording
    RecordingType typ = 3;
    // (optional) any additional metadata that should be associated with the recording
    // You can associate any arbtrirary number of columns with a specific recording
    RecordingMetadata metadata = 4;
}

// Recording metadata is single row arrow record batch
message RecordingMetadata {
    EncoderVersion encoder_version = 1;
    bytes payload = 2;
}

message ObjectStorage {
    string bucket_name = 1;
    string url = 2;
}

message RegisterRecordingsResponse {
    // Note / TODO(zehiko): this implies we read the record (for example go through entire .rrd file
    // chunk by chunk) and extract the metadata. So we might want to 1/ not do this i.e.
    // only do it as part of explicit GetMetadata request or 2/ do it if Request has "include_metadata=true"
    // or 3/ do it always
    repeated RecordingMetadata metadata = 2;
}

// Server can include details about the error as part of gRPC error (Status)
message RegistrationError {
    // error code
    ErrorCode code = 1;
    // url of the recording that failed to register
    string url = 2;
    // human readable details about the error
    string message = 3;
}

// ---------------- GetRecordingMetadata  -----------------

message GetRecordingMetadataRequest {
    RecordingId recording_id = 1;
}

message GetRecordingMetadataResponse {
    RecordingId id = 1;
    RecordingMetadata metadata = 2;
}

message TimeMetadata {
    Timeline timeline = 1;
    TimeRange time_range = 2;
}

// ---------------- Query -----------------

message QueryRequest {
    // unique identifier of the recording
    RecordingId recording_id = 1;
    // query to execute
    Query query = 3;
}

message QueryResponse {
    // TODO(zehiko) we need to expand this to become something like 'encoder options'
    // as we will need to specify additional options like compression, including schema
    // in payload, etc.
    EncoderVersion encoder_version = 1;
    // payload is raw bytes that the relevant codec can interpret
    bytes payload = 2;
}


enum EncoderVersion {
    V0 = 0;
}


// ----------------- ListRecordings -----------------

message ListRecordingsRequest {}

message ListRecordingsResponse {
    repeated RecordingInfo recordings = 1;
}

message RecordingInfo {
    RecordingId id = 1;
    string description = 2;
    string storage_url = 3;
    uint64 size_bytes = 4;
    RecordingType typ = 5;
}

enum RecordingType {
    RRD = 0;
}
