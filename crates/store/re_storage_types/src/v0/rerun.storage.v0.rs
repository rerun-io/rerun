// This file is @generated by prost-build.
/// unique recording identifier. At this point in time it is the same id as the ChunkStore's StoreId
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordingId {
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRecordingsRequest {
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub storage_url: ::prost::alloc::string::String,
    /// TODO should this be auto-discoverable?
    #[prost(enumeration = "RecordingType", tag = "3")]
    pub typ: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterRecordingsResponse {
    /// Note: this implies we read the record (for example go through entire .rrd file
    /// chunk by chunk) and extract the metadata. So we might want to 1/ not do this i.e.
    /// only do it as part of explicit GetMetadata request or 2/ do it if Request has "include_metadata=true"
    /// or 3/ do it always
    #[prost(message, repeated, tag = "2")]
    pub metadata: ::prost::alloc::vec::Vec<RecordingMetadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecordingMetadataRequest {
    #[prost(message, optional, tag = "1")]
    pub recording_id: ::core::option::Option<RecordingId>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetRecordingMetadataResponse {
    #[prost(message, optional, tag = "1")]
    pub metadata: ::core::option::Option<RecordingMetadata>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordingMetadata {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<RecordingId>,
    #[prost(message, optional, tag = "2")]
    pub schema: ::core::option::Option<Schema>,
    /// for now Timeline is a string (same as with the query definition)
    #[prost(map = "string, message", tag = "3")]
    pub timelines: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        TimeRange,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Schema {
    /// arrow IPC serialized schema
    #[prost(bytes = "vec", tag = "1")]
    pub arrow_schema: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRequest {
    /// unique identifier of the recording
    #[prost(message, optional, tag = "1")]
    pub recording_id: ::core::option::Option<RecordingId>,
    /// query to execute
    #[prost(message, optional, tag = "2")]
    pub query: ::core::option::Option<Query>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    /// database view defined by entity paths and components
    #[prost(message, optional, tag = "1")]
    pub view_contents: ::core::option::Option<ViewContents>,
    /// filtering index (just a string i.e. a name of the timeline for starters)
    #[prost(message, optional, tag = "2")]
    pub index: ::core::option::Option<IndexColumnSelector>,
    /// Optional specific range for the index selector
    #[prost(message, optional, tag = "3")]
    pub index_range: ::core::option::Option<FilteredIndexRange>,
    /// Optional specific values for the index selector
    #[prost(message, optional, tag = "4")]
    pub index_values: ::core::option::Option<FilteredIndexValues>,
    /// Optional sampled values for the index selector
    #[prost(message, optional, tag = "5")]
    pub sampled_index_values: ::core::option::Option<SampledIndexValues>,
    /// PoV (filtering) component
    #[prost(message, optional, tag = "6")]
    pub pov_component: ::core::option::Option<ComponentColumnDescriptor>,
    /// which columns to include in the response
    /// Note - added one more layer of indiraction to ensure the field is optional,
    /// same as in the query expression. We can't have both 'repeated' and 'optional' field labels.
    #[prost(message, optional, tag = "7")]
    pub column_selection: ::core::option::Option<ColumnSelection>,
    /// how are null values filled in the response
    #[prost(enumeration = "SparseFillStrategy", tag = "8")]
    pub sparse_fill_strategy: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryResponse {
    /// single record batch (encoding TBD - TODO).
    #[prost(bytes = "vec", tag = "1")]
    pub record_batch: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColumnSelection {
    #[prost(message, repeated, tag = "1")]
    pub columns: ::prost::alloc::vec::Vec<ColumnSelector>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ColumnSelector {
    #[prost(oneof = "column_selector::SelectorType", tags = "1, 2, 3")]
    pub selector_type: ::core::option::Option<column_selector::SelectorType>,
}
/// Nested message and enum types in `ColumnSelector`.
pub mod column_selector {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum SelectorType {
        #[prost(message, tag = "1")]
        ControlColumn(super::ControlColumnSelector),
        #[prost(message, tag = "2")]
        ComponentColumn(super::ComponentColumnSelector),
        #[prost(message, tag = "3")]
        TimeColumn(super::TimeColumnSelector),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexColumnSelector {
    /// this is for example "log_tick" and we will need to figure out a way to convert that
    /// to Timeline on the server side. For now we only support timeline related columns, in
    /// the future we might support other columns as well.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct FilteredIndexRange {
    #[prost(message, optional, tag = "1")]
    pub time_range: ::core::option::Option<TimeRange>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FilteredIndexValues {
    #[prost(message, repeated, tag = "1")]
    pub time_points: ::prost::alloc::vec::Vec<TimeInt>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SampledIndexValues {
    #[prost(message, repeated, tag = "1")]
    pub sample_points: ::prost::alloc::vec::Vec<TimeInt>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewContents {
    #[prost(message, repeated, tag = "1")]
    pub contents: ::prost::alloc::vec::Vec<ViewContentsPart>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ViewContentsPart {
    #[prost(message, optional, tag = "1")]
    pub path: ::core::option::Option<EntityPath>,
    #[prost(message, optional, tag = "2")]
    pub components: ::core::option::Option<ComponentsSet>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComponentsSet {
    /// component name needs to be a string as user can define their own component
    #[prost(string, repeated, tag = "1")]
    pub values: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimeRange {
    #[prost(int64, tag = "1")]
    pub start: i64,
    #[prost(int64, tag = "2")]
    pub end: i64,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct TimeInt {
    #[prost(int64, tag = "1")]
    pub time: i64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntityPath {
    #[prost(string, tag = "1")]
    pub path: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlColumnDescriptor {
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComponentColumnDescriptor {
    #[prost(message, optional, tag = "1")]
    pub entity_path: ::core::option::Option<EntityPath>,
    /// component name needs to be a string as user can define their own component
    #[prost(string, tag = "2")]
    pub component: ::prost::alloc::string::String,
    /// TODO - do we need join encoding?
    #[prost(bool, tag = "3")]
    pub resolve_latest_at: bool,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ControlColumnSelector {
    #[prost(string, tag = "1")]
    pub component: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TimeColumnSelector {
    #[prost(string, tag = "1")]
    pub timeline_name: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ComponentColumnSelector {
    #[prost(message, optional, tag = "1")]
    pub entity_path: ::core::option::Option<EntityPath>,
    /// component name needs to be a string as user can define their own component
    ///
    /// TODO do we need join encoding?
    #[prost(string, tag = "2")]
    pub component: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ListRecordingsRequest {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListRecordingsResponse {
    #[prost(message, repeated, tag = "1")]
    pub recordings: ::prost::alloc::vec::Vec<RecordingInfo>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RecordingInfo {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<RecordingId>,
    #[prost(string, tag = "2")]
    pub description: ::prost::alloc::string::String,
    #[prost(string, tag = "3")]
    pub storage_url: ::prost::alloc::string::String,
    #[prost(uint64, tag = "4")]
    pub size_bytes: u64,
    #[prost(enumeration = "RecordingType", tag = "5")]
    pub typ: i32,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SparseFillStrategy {
    None = 0,
    LatestAlGlobal = 1,
}
impl SparseFillStrategy {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::None => "NONE",
            Self::LatestAlGlobal => "LATEST_AL_GLOBAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "NONE" => Some(Self::None),
            "LATEST_AL_GLOBAL" => Some(Self::LatestAlGlobal),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RecordingType {
    Rrd = 0,
}
impl RecordingType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Rrd => "RRD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "RRD" => Some(Self::Rrd),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod storage_node_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    #[derive(Debug, Clone)]
    pub struct StorageNodeClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl StorageNodeClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> StorageNodeClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> StorageNodeClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            StorageNodeClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn list_recordings(
            &mut self,
            request: impl tonic::IntoRequest<super::ListRecordingsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRecordingsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.storage.v0.StorageNode/ListRecordings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rerun.storage.v0.StorageNode", "ListRecordings"),
                );
            self.inner.unary(req, path, codec).await
        }
        pub async fn query(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.storage.v0.StorageNode/Query",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("rerun.storage.v0.StorageNode", "Query"));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_recording_metadata(
            &mut self,
            request: impl tonic::IntoRequest<super::GetRecordingMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRecordingMetadataResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.storage.v0.StorageNode/GetRecordingMetadata",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new(
                        "rerun.storage.v0.StorageNode",
                        "GetRecordingMetadata",
                    ),
                );
            self.inner.unary(req, path, codec).await
        }
        /// TODO (zehiko) - should this be singular recording registration? Currently we can have 1 rrd => many recordings
        pub async fn register_recordings(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterRecordingsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterRecordingsResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.storage.v0.StorageNode/RegisterRecordings",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("rerun.storage.v0.StorageNode", "RegisterRecordings"),
                );
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod storage_node_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with StorageNodeServer.
    #[async_trait]
    pub trait StorageNode: std::marker::Send + std::marker::Sync + 'static {
        async fn list_recordings(
            &self,
            request: tonic::Request<super::ListRecordingsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::ListRecordingsResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the Query method.
        type QueryStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryResponse, tonic::Status>,
            >
            + std::marker::Send
            + 'static;
        async fn query(
            &self,
            request: tonic::Request<super::QueryRequest>,
        ) -> std::result::Result<tonic::Response<Self::QueryStream>, tonic::Status>;
        async fn get_recording_metadata(
            &self,
            request: tonic::Request<super::GetRecordingMetadataRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetRecordingMetadataResponse>,
            tonic::Status,
        >;
        /// TODO (zehiko) - should this be singular recording registration? Currently we can have 1 rrd => many recordings
        async fn register_recordings(
            &self,
            request: tonic::Request<super::RegisterRecordingsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterRecordingsResponse>,
            tonic::Status,
        >;
    }
    #[derive(Debug)]
    pub struct StorageNodeServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> StorageNodeServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for StorageNodeServer<T>
    where
        T: StorageNode,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rerun.storage.v0.StorageNode/ListRecordings" => {
                    #[allow(non_camel_case_types)]
                    struct ListRecordingsSvc<T: StorageNode>(pub Arc<T>);
                    impl<
                        T: StorageNode,
                    > tonic::server::UnaryService<super::ListRecordingsRequest>
                    for ListRecordingsSvc<T> {
                        type Response = super::ListRecordingsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListRecordingsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StorageNode>::list_recordings(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListRecordingsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.storage.v0.StorageNode/Query" => {
                    #[allow(non_camel_case_types)]
                    struct QuerySvc<T: StorageNode>(pub Arc<T>);
                    impl<
                        T: StorageNode,
                    > tonic::server::ServerStreamingService<super::QueryRequest>
                    for QuerySvc<T> {
                        type Response = super::QueryResponse;
                        type ResponseStream = T::QueryStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StorageNode>::query(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QuerySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.storage.v0.StorageNode/GetRecordingMetadata" => {
                    #[allow(non_camel_case_types)]
                    struct GetRecordingMetadataSvc<T: StorageNode>(pub Arc<T>);
                    impl<
                        T: StorageNode,
                    > tonic::server::UnaryService<super::GetRecordingMetadataRequest>
                    for GetRecordingMetadataSvc<T> {
                        type Response = super::GetRecordingMetadataResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetRecordingMetadataRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StorageNode>::get_recording_metadata(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetRecordingMetadataSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.storage.v0.StorageNode/RegisterRecordings" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterRecordingsSvc<T: StorageNode>(pub Arc<T>);
                    impl<
                        T: StorageNode,
                    > tonic::server::UnaryService<super::RegisterRecordingsRequest>
                    for RegisterRecordingsSvc<T> {
                        type Response = super::RegisterRecordingsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterRecordingsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as StorageNode>::register_recordings(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterRecordingsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for StorageNodeServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rerun.storage.v0.StorageNode";
    impl<T> tonic::server::NamedService for StorageNodeServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
