---
source: crates/store/re_data_loader/tests/test_mcap_loader.rs
expression: clean_chunks
input_file: crates/store/re_data_loader/tests/assets/rosbag2_2025_09_10-13_03_56_0.mcap
---
[
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /__properties,
        heap_size_bytes: 384,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.RecordingInfo",
                    ),
                    component: "RecordingInfo:start_time",
                    component_type: Some(
                        "rerun.components.Timestamp",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Int64>
                [
                  1757502237064933568,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /__properties,
        heap_size_bytes: 3448,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:message_count",
                    component_type: Some(
                        "rerun.components.Count",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt64>
                [
                  194,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:message_end_time",
                    component_type: Some(
                        "rerun.components.Timestamp",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Int64>
                [
                  1757502242544551691,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:metadata_count",
                    component_type: Some(
                        "rerun.components.Count",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt64>
                [
                  1,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:channel_message_counts",
                    component_type: Some(
                        "rerun.components.ChannelMessageCounts",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  ...8 elements...,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                  valid,
                ]
                [
                -- child 0: "channel_id" (UInt16)
                PrimitiveArray<UInt16>
                [
                  1,
                  4,
                  5,
                  6,
                  7,
                  8,
                  10,
                  11,
                  12,
                  13,
                  ...8 elements...,
                  23,
                  24,
                  25,
                  26,
                  27,
                  28,
                  29,
                  30,
                  31,
                  32,
                ]
                -- child 1: "message_count" (UInt64)
                PrimitiveArray<UInt64>
                [
                  117,
                  10,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  10,
                  ...8 elements...,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  1,
                  10,
                  1,
                  1,
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:channel_count",
                    component_type: Some(
                        "rerun.components.Count",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt64>
                [
                  28,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:chunk_count",
                    component_type: Some(
                        "rerun.components.Count",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt64>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:attachment_count",
                    component_type: Some(
                        "rerun.components.Count",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt64>
                [
                  0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:message_start_time",
                    component_type: Some(
                        "rerun.components.Timestamp",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Int64>
                [
                  1757502237064933568,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapStatistics",
                    ),
                    component: "McapStatistics:schema_count",
                    component_type: Some(
                        "rerun.components.Count",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt64>
                [
                  25,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /battery_state,
        heap_size_bytes: 1972,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547828858,
                        1757502238651514456,
                        1757502238758907649,
                        1757502238869460661,
                        1757502238977350422,
                        1757502239084821612,
                        1757502239191250501,
                        1757502239300491970,
                        1757502239406334503,
                        1757502239514348593,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 828 858),
                    max: TimeInt(1 757 502 239 514 348 593),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547828858,
                        1757502238651514456,
                        1757502238758907649,
                        1757502238869460661,
                        1757502238977350422,
                        1757502239084821612,
                        1757502239191250501,
                        1757502239300491970,
                        1757502239406334503,
                        1757502239514348593,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 828 858),
                    max: TimeInt(1 757 502 239 514 348 593),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...64 elements...,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /battery_state,
        heap_size_bytes: 9308,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547828858,
                        1757502238651514456,
                        1757502238758907649,
                        1757502238869460661,
                        1757502238977350422,
                        1757502239084821612,
                        1757502239191250501,
                        1757502239300491970,
                        1757502239406334503,
                        1757502239514348593,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 828 858),
                    max: TimeInt(1 757 502 239 514 348 593),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547828858,
                        1757502238651514456,
                        1757502238758907649,
                        1757502238869460661,
                        1757502238977350422,
                        1757502239084821612,
                        1757502239191250501,
                        1757502239300491970,
                        1757502239406334503,
                        1757502239514348593,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 828 858),
                    max: TimeInt(1 757 502 239 514 348 593),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  100.0,
                  12.0,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  92.0,
                  11.800000190734863,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  84.0,
                  11.600000381469727,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  76.0,
                  11.399999618530273,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  68.0,
                  11.199999809265137,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  60.0,
                  11.0,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  52.0,
                  10.800000190734863,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  44.0,
                  10.600000381469727,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  36.0,
                  10.399999618530273,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  28.0,
                  10.199999809265137,
                  1.5,
                  0.800000011920929,
                  0.0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /battery_state,
        heap_size_bytes: 408,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "percentage",
                  "voltage",
                  "current",
                  "charge",
                  "temperature",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /battery_state,
        heap_size_bytes: 6233,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/BatteryState",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  10,
                  35,
                  32,
                  67,
                  111,
                  110,
                  115,
                  116,
                  97,
                  110,
                  ...3365 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/battery_state",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  4,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  4,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /camera_info,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239618368223,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 618 368 223),
                    max: TimeInt(1 757 502 239 618 368 223),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239618368223,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 618 368 223),
                    max: TimeInt(1 757 502 239 618 368 223),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...348 elements...,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /camera_info,
        heap_size_bytes: 78672,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239618368223,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 618 368 223),
                    max: TimeInt(1 757 502 239 618 368 223),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239618368223,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 618 368 223),
                    max: TimeInt(1 757 502 239 618 368 223),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:binning_x",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:binning_y",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:d",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:roi",
                    component_type: None,
                }: ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "x_offset" (UInt32)
                PrimitiveArray<UInt32>
                [
                  0,
                ]
                -- child 1: "y_offset" (UInt32)
                PrimitiveArray<UInt32>
                [
                  0,
                ]
                -- child 2: "width" (UInt32)
                PrimitiveArray<UInt32>
                [
                  0,
                ]
                -- child 3: "height" (UInt32)
                PrimitiveArray<UInt32>
                [
                  0,
                ]
                -- child 4: "do_rectify" (Boolean)
                BooleanArray
                [
                  false,
                ]
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:frame_id",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "base_link",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:r",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:height",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  480,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:k",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  500.0,
                  0.0,
                  320.0,
                  0.0,
                  500.0,
                  240.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:width",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  640,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:distortion_model",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "plumb_bob",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CameraInfo",
                    ),
                    component: "sensor_msgs.msg.CameraInfo:p",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  500.0,
                  0.0,
                  320.0,
                  0.0,
                  0.0,
                  500.0,
                  240.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                  0.0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /camera_info,
        heap_size_bytes: 908,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239618368223,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 618 368 223),
                    max: TimeInt(1 757 502 239 618 368 223),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239618368223,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 618 368 223),
                    max: TimeInt(1 757 502 239 618 368 223),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Pinhole",
                    ),
                    component: "Pinhole:resolution",
                    component_type: Some(
                        "rerun.components.Resolution",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<2>
                [
                  PrimitiveArray<Float32>
                [
                  640.0,
                  480.0,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Pinhole",
                    ),
                    component: "Pinhole:image_from_camera",
                    component_type: Some(
                        "rerun.components.PinholeProjection",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<9>
                [
                  PrimitiveArray<Float32>
                [
                  500.0,
                  0.0,
                  0.0,
                  0.0,
                  500.0,
                  0.0,
                  320.0,
                  240.0,
                  1.0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /camera_info,
        heap_size_bytes: 10969,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/CameraInfo",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...8101 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/camera_info",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  6,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  6,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /channel_float32,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239619440981,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 619 440 981),
                    max: TimeInt(1 757 502 239 619 440 981),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239619440981,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 619 440 981),
                    max: TimeInt(1 757 502 239 619 440 981),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  10,
                  0,
                  0,
                  0,
                  105,
                  110,
                  ...24 elements...,
                  64,
                  64,
                  0,
                  0,
                  128,
                  64,
                  0,
                  0,
                  160,
                  64,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /channel_float32,
        heap_size_bytes: 3857,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/ChannelFloat32",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...989 elements...,
                  91,
                  93,
                  32,
                  118,
                  97,
                  108,
                  117,
                  101,
                  115,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/channel_float32",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  10,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  10,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /compressed_image,
        heap_size_bytes: 361744,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239655144340,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 655 144 340),
                    max: TimeInt(1 757 502 239 655 144 340),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239655144340,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 655 144 340),
                    max: TimeInt(1 757 502 239 655 144 340),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...361096 elements...,
                  110,
                  113,
                  228,
                  166,
                  151,
                  255,
                  217,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /compressed_image,
        heap_size_bytes: 361741,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239655144340,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 655 144 340),
                    max: TimeInt(1 757 502 239 655 144 340),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239655144340,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 655 144 340),
                    max: TimeInt(1 757 502 239 655 144 340),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.EncodedImage",
                    ),
                    component: "EncodedImage:blob",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  255,
                  216,
                  255,
                  224,
                  0,
                  16,
                  74,
                  70,
                  73,
                  70,
                  ...361049 elements...,
                  140,
                  97,
                  58,
                  110,
                  113,
                  228,
                  166,
                  151,
                  255,
                  217,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /compressed_image,
        heap_size_bytes: 5848,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239655144340,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 655 144 340),
                    max: TimeInt(1 757 502 239 655 144 340),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239655144340,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 655 144 340),
                    max: TimeInt(1 757 502 239 655 144 340),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.CompressedImage",
                    ),
                    component: "sensor_msgs.msg.CompressedImage:format",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "jpeg",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /compressed_image,
        heap_size_bytes: 4353,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/CompressedImage",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...1485 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/compressed_image",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  14,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  14,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /events/write_split,
        heap_size_bytes: 3014,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 1\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "rosbag2_interfaces/msg/WriteSplitEvent",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  101,
                  32,
                  102,
                  117,
                  108,
                  108,
                  ...146 elements...,
                  101,
                  110,
                  101,
                  100,
                  95,
                  102,
                  105,
                  108,
                  101,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/events/write_split",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  3,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  3,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /fluid_pressure,
        heap_size_bytes: 1972,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238546874846,
                        1757502238649141029,
                        1757502238756581721,
                        1757502238865928770,
                        1757502238974733086,
                        1757502239082599931,
                        1757502239188910740,
                        1757502239296495260,
                        1757502239404820632,
                        1757502239510960614,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 546 874 846),
                    max: TimeInt(1 757 502 239 510 960 614),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238546874846,
                        1757502238649141029,
                        1757502238756581721,
                        1757502238865928770,
                        1757502238974733086,
                        1757502239082599931,
                        1757502239188910740,
                        1757502239296495260,
                        1757502239404820632,
                        1757502239510960614,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 546 874 846),
                    max: TimeInt(1 757 502 239 510 960 614),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  248,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  248,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  248,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  249,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /fluid_pressure,
        heap_size_bytes: 9308,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238546874846,
                        1757502238649141029,
                        1757502238756581721,
                        1757502238865928770,
                        1757502238974733086,
                        1757502239082599931,
                        1757502239188910740,
                        1757502239296495260,
                        1757502239404820632,
                        1757502239510960614,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 546 874 846),
                    max: TimeInt(1 757 502 239 510 960 614),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238546874846,
                        1757502238649141029,
                        1757502238756581721,
                        1757502238865928770,
                        1757502238974733086,
                        1757502239082599931,
                        1757502239188910740,
                        1757502239296495260,
                        1757502239404820632,
                        1757502239510960614,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 546 874 846),
                    max: TimeInt(1 757 502 239 510 960 614),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  101325.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  101825.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  102325.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  102825.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  103325.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  103825.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  104325.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  104825.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  105325.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  105825.0,
                  0.1,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /fluid_pressure,
        heap_size_bytes: 396,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "fluid_pressure",
                  "variance",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /fluid_pressure,
        heap_size_bytes: 4155,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/FluidPressure",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  112,
                  ...1287 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/fluid_pressure",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  13,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  13,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /illuminance,
        heap_size_bytes: 1972,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547416246,
                        1757502238650259245,
                        1757502238757893555,
                        1757502238867998498,
                        1757502238975796511,
                        1757502239083765811,
                        1757502239190291947,
                        1757502239299477835,
                        1757502239405607608,
                        1757502239512464442,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 416 246),
                    max: TimeInt(1 757 502 239 512 464 442),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547416246,
                        1757502238650259245,
                        1757502238757893555,
                        1757502238867998498,
                        1757502238975796511,
                        1757502239083765811,
                        1757502239190291947,
                        1757502239299477835,
                        1757502239405607608,
                        1757502239512464442,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 416 246),
                    max: TimeInt(1 757 502 239 512 464 442),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  89,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  111,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  121,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  129,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  133,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  138,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  143,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  145,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  148,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  150,
                  64,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /illuminance,
        heap_size_bytes: 9308,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547416246,
                        1757502238650259245,
                        1757502238757893555,
                        1757502238867998498,
                        1757502238975796511,
                        1757502239083765811,
                        1757502239190291947,
                        1757502239299477835,
                        1757502239405607608,
                        1757502239512464442,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 416 246),
                    max: TimeInt(1 757 502 239 512 464 442),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238547416246,
                        1757502238650259245,
                        1757502238757893555,
                        1757502238867998498,
                        1757502238975796511,
                        1757502239083765811,
                        1757502239190291947,
                        1757502239299477835,
                        1757502239405607608,
                        1757502239512464442,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 547 416 246),
                    max: TimeInt(1 757 502 239 512 464 442),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  100.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  250.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  400.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  550.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  700.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  850.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  1000.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  1150.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  1300.0,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  1450.0,
                  0.1,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /illuminance,
        heap_size_bytes: 396,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "illuminance",
                  "variance",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /illuminance,
        heap_size_bytes: 4624,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/Illuminance",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  112,
                  ...1756 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/illuminance",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  22,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  22,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /image,
        heap_size_bytes: 922256,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709242049,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 242 049),
                    max: TimeInt(1 757 502 239 709 242 049),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709242049,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 242 049),
                    max: TimeInt(1 757 502 239 709 242 049),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...921636 elements...,
                  210,
                  39,
                  119,
                  150,
                  154,
                  60,
                  247,
                  38,
                  10,
                  107,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /image,
        heap_size_bytes: 945144,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709242049,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 242 049),
                    max: TimeInt(1 757 502 239 709 242 049),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709242049,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 242 049),
                    max: TimeInt(1 757 502 239 709 242 049),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Image",
                    ),
                    component: "width",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  640,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Image",
                    ),
                    component: "height",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  480,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Image",
                    ),
                    component: "encoding",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "rgb8",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Image",
                    ),
                    component: "Image:format",
                    component_type: Some(
                        "rerun.components.ImageFormat",
                    ),
                }: ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "width" (UInt32)
                PrimitiveArray<UInt32>
                [
                  640,
                ]
                -- child 1: "height" (UInt32)
                PrimitiveArray<UInt32>
                [
                  480,
                ]
                -- child 2: "pixel_format" (UInt8)
                PrimitiveArray<UInt8>
                [
                  null,
                ]
                -- child 3: "color_model" (UInt8)
                PrimitiveArray<UInt8>
                [
                  2,
                ]
                -- child 4: "channel_datatype" (UInt8)
                PrimitiveArray<UInt8>
                [
                  6,
                ]
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Image",
                    ),
                    component: "Image:buffer",
                    component_type: Some(
                        "rerun.components.ImageBuffer",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  219,
                  0,
                  4,
                  164,
                  42,
                  190,
                  78,
                  169,
                  115,
                  155,
                  ...921580 elements...,
                  210,
                  39,
                  119,
                  150,
                  154,
                  60,
                  247,
                  38,
                  10,
                  107,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Image",
                    ),
                    component: "is_bigendian",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Image",
                    ),
                    component: "step",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  1920,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /image,
        heap_size_bytes: 5065,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/Image",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...2197 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/image",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  24,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  24,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /imu,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709435585,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 435 585),
                    max: TimeInt(1 757 502 239 709 435 585),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709435585,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 435 585),
                    max: TimeInt(1 757 502 239 709 435 585),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...304 elements...,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /imu,
        heap_size_bytes: 42392,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709435585,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 435 585),
                    max: TimeInt(1 757 502 239 709 435 585),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709435585,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 435 585),
                    max: TimeInt(1 757 502 239 709 435 585),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.1,
                  0.2,
                  0.3,
                  0.0,
                  0.0,
                  9.81,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Imu",
                    ),
                    component: "sensor_msgs.msg.Imu:linear_acceleration_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Imu",
                    ),
                    component: "sensor_msgs.msg.Imu:orientation",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Imu",
                    ),
                    component: "sensor_msgs.msg.Imu:orientation_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.Imu",
                    ),
                    component: "sensor_msgs.msg.Imu:angular_velocity_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /imu,
        heap_size_bytes: 476,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "gyroscope/x",
                  "gyroscope/y",
                  "gyroscope/z",
                  "accelerometer/x",
                  "accelerometer/y",
                  "accelerometer/z",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /imu,
        heap_size_bytes: 5429,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/Imu",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  105,
                  115,
                  32,
                  ...2561 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/imu",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  17,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  17,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joint_state,
        heap_size_bytes: 5128,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  127,
                  39,
                  ...200 elements...,
                  243,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  91,
                  184,
                  ...200 elements...,
                  243,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  86,
                  113,
                  ...200 elements...,
                  244,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  5,
                  163,
                  ...200 elements...,
                  244,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  92,
                  42,
                  ...200 elements...,
                  245,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  115,
                  3,
                  ...200 elements...,
                  245,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  204,
                  128,
                  ...200 elements...,
                  246,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  188,
                  26,
                  ...200 elements...,
                  246,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  13,
                  194,
                  ...200 elements...,
                  247,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  5,
                  149,
                  ...200 elements...,
                  247,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  124,
                  60,
                  ...200 elements...,
                  247,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  110,
                  53,
                  ...200 elements...,
                  247,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  133,
                  197,
                  ...200 elements...,
                  247,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  202,
                  149,
                  ...200 elements...,
                  247,
                  63,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  224,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  18,
                  160,
                  ...200 elements...,
                  247,
                  63,
                  154,
                  153,
                  153,
                  153,
                  153,
                  153,
                  185,
                  63,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joint_state,
        heap_size_bytes: 4629,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/JointState",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  105,
                  115,
                  32,
                  ...1761 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/joint_state",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  19,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  19,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joint_state/effort,
        heap_size_bytes: 14824,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709764991,
                        1757502239812365915,
                        1757502239915370326,
                        1757502240018260741,
                        1757502240124987996,
                        1757502240231211891,
                        1757502240336888012,
                        1757502240440081084,
                        1757502240546423309,
                        1757502240652186885,
                        1757502240758463612,
                        1757502240861484398,
                        1757502240967296389,
                        1757502241073504202,
                        1757502241178429970,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 764 991),
                    max: TimeInt(1 757 502 241 178 429 970),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  2.0,
                  4.5,
                  1.2,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.024989584635339,
                  4.4968017063026196,
                  1.2359136621866758,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.049916708323414,
                  4.487227283375627,
                  1.2713107879281402,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  2.0747190662367996,
                  4.471337974852029,
                  1.305682269982527,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  2.0993346653975307,
                  4.4492354180824405,
                  1.3385337526624448,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.1237019796272616,
                  4.421060994002885,
                  1.3693927420185106,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.1477601033306697,
                  4.386994922779284,
                  1.397815401591442,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  2.171448903727726,
                  4.347255111013416,
                  1.4233929359912578,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  2.1947091711543254,
                  4.302095757884293,
                  1.4457574704902993,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.217482767055615,
                  4.251805729140895,
                  1.4645873420654842,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.2397127693021015,
                  4.196706709347166,
                  1.4796117257901678,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  2.2613436144653294,
                  4.13715114419858,
                  1.4906145300354796,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  2.2823212366975176,
                  4.073519986072457,
                  1.497437504457506,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.3025932028680196,
                  4.006220257232778,
                  1.49998251606899,
                  0.5,
                ],
                  PrimitiveArray<Float64>
                [
                  2.3221088436188455,
                  3.935682446276712,
                  1.4982129606594228,
                  0.1,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joint_state/position,
        heap_size_bytes: 14824,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709764991,
                        1757502239812365915,
                        1757502239915370326,
                        1757502240018260741,
                        1757502240124987996,
                        1757502240231211891,
                        1757502240336888012,
                        1757502240440081084,
                        1757502240546423309,
                        1757502240652186885,
                        1757502240758463612,
                        1757502240861484398,
                        1757502240967296389,
                        1757502241073504202,
                        1757502241178429970,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 764 991),
                    max: TimeInt(1 757 502 241 178 429 970),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  1.3,
                  -0.2,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.04991670832341408,
                  1.2966313233808127,
                  -0.12053226768197552,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.09933466539753061,
                  1.2866009467376818,
                  -0.04423266307653978,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.1477601033306698,
                  1.2701341307058032,
                  0.0258569893580142,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.19470917115432526,
                  1.2476006844729035,
                  0.08694243635980914,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.2397127693021015,
                  1.2195066606621463,
                  0.13658839392315864,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.28232123669751774,
                  1.1864829904811993,
                  0.17281563438689057,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.32210884361884556,
                  1.1492713143675182,
                  0.1941798919953841,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.3586780454497614,
                  1.108707326343002,
                  0.19982944121660207,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.3916634548137417,
                  1.0657020061279125,
                  0.18953905235127805,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.42073549240394825,
                  1.021221160500311,
                  0.1637189707302727,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4456036800307177,
                  0.9762637333579798,
                  0.12339856152783607,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4660195429836132,
                  0.9318393715920739,
                  0.07018527222046023,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4817790927085965,
                  0.8889457505946139,
                  0.006200548728585664,
                  0.1,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4927248649942301,
                  0.8485461686200427,
                  -0.06600473993763814,
                  0.0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joint_state/velocity,
        heap_size_bytes: 14824,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709939903,
                        1757502239812692572,
                        1757502239915889935,
                        1757502240018811849,
                        1757502240125485189,
                        1757502240231664419,
                        1757502240337847107,
                        1757502240440563819,
                        1757502240547845890,
                        1757502240652620830,
                        1757502240759446207,
                        1757502240862347913,
                        1757502240967778791,
                        1757502241073990020,
                        1757502241178900081,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 939 903),
                    max: TimeInt(1 757 502 241 178 900 081),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709764991,
                        1757502239812365915,
                        1757502239915370326,
                        1757502240018260741,
                        1757502240124987996,
                        1757502240231211891,
                        1757502240336888012,
                        1757502240440081084,
                        1757502240546423309,
                        1757502240652186885,
                        1757502240758463612,
                        1757502240861484398,
                        1757502240967296389,
                        1757502241073504202,
                        1757502241178429970,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 764 991),
                    max: TimeInt(1 757 502 241 178 429 970),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                  StringArray
                [
                  "shoulder_joint",
                  "elbow_joint",
                  "wrist_joint",
                  "gripper_joint",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.5,
                  -0.0,
                  0.8,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4975020826390129,
                  -0.06724715961311967,
                  0.7840532622729933,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4900332889206208,
                  -0.13298409299760283,
                  0.7368487952023082,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.477668244562803,
                  -0.19573449035005364,
                  0.6602684919277426,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.46053049700144255,
                  -0.254089113027766,
                  0.5573653674777324,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4387912809451864,
                  -0.30673744201050035,
                  0.4322418446945118,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.4126678074548391,
                  -0.35249710933236755,
                  0.2898862035813387,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.3824210936422442,
                  -0.3903404515173076,
                  0.13597371432019265,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.3483533546735827,
                  -0.41941758868525186,
                  -0.023359617841031053,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.3108049841353322,
                  -0.4390755110219966,
                  -0.1817616757544697,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.2701511529340699,
                  -0.44887274397182453,
                  -0.3329174692377139,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.22679806071278866,
                  -0.44858926280426353,
                  -0.4708008938042767,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.1811788772383367,
                  -0.4382314338951878,
                  -0.5899149724329966,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.13374941431229367,
                  -0.41803187175174117,
                  -0.6855110026951579,
                  0.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.08498357145012041,
                  -0.38844421499199316,
                  -0.7537778725349267,
                  0.0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joy,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241285370552,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 285 370 552),
                    max: TimeInt(1 757 502 241 285 370 552),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241285370552,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 285 370 552),
                    max: TimeInt(1 757 502 241 285 370 552),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...56 elements...,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joy,
        heap_size_bytes: 3899,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/Joy",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  82,
                  101,
                  112,
                  111,
                  114,
                  116,
                  115,
                  32,
                  ...1031 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/joy",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  15,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  15,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joy_feedback,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241286139528,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 286 139 528),
                    max: TimeInt(1 757 502 241 286 139 528),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241286139528,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 286 139 528),
                    max: TimeInt(1 757 502 241 286 139 528),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  205,
                  204,
                  76,
                  63,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joy_feedback,
        heap_size_bytes: 3260,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/JoyFeedback",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  68,
                  101,
                  99,
                  108,
                  97,
                  114,
                  101,
                  32,
                  ...392 elements...,
                  105,
                  110,
                  116,
                  101,
                  110,
                  115,
                  105,
                  116,
                  121,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/joy_feedback",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  16,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  16,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joy_feedback_array,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241286772592,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 286 772 592),
                    max: TimeInt(1 757 502 241 286 772 592),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241286772592,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 286 772 592),
                    max: TimeInt(1 757 502 241 286 772 592),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  1,
                  0,
                  ...4 elements...,
                  0,
                  63,
                  2,
                  1,
                  0,
                  0,
                  0,
                  0,
                  128,
                  63,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /joy_feedback_array,
        heap_size_bytes: 3454,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/JoyFeedbackArray",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...586 elements...,
                  105,
                  110,
                  116,
                  101,
                  110,
                  115,
                  105,
                  116,
                  121,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/joy_feedback_array",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  11,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  11,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /laser_echo,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241288308045,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 288 308 045),
                    max: TimeInt(1 757 502 241 288 308 045),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241288308045,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 288 308 045),
                    max: TimeInt(1 757 502 241 288 308 045),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  3,
                  0,
                  0,
                  0,
                  0,
                  0,
                  192,
                  63,
                  51,
                  51,
                  19,
                  64,
                  205,
                  204,
                  108,
                  64,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /laser_echo,
        heap_size_bytes: 3087,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/LaserEcho",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...219 elements...,
                  110,
                  99,
                  114,
                  101,
                  109,
                  101,
                  110,
                  116,
                  46,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/laser_echo",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  8,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  8,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /laser_scan,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241289497133,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 289 497 133),
                    max: TimeInt(1 757 502 241 289 497 133),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241289497133,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 289 497 133),
                    max: TimeInt(1 757 502 241 289 497 133),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...84 elements...,
                  22,
                  67,
                  0,
                  0,
                  52,
                  67,
                  0,
                  0,
                  92,
                  67,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /laser_scan,
        heap_size_bytes: 5223,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/LaserScan",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  115,
                  ...2355 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/laser_scan",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  21,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  21,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /magnetic_field,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241290662389,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 290 662 389),
                    max: TimeInt(1 757 502 241 290 662 389),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241290662389,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 290 662 389),
                    max: TimeInt(1 757 502 241 290 662 389),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...104 elements...,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /magnetic_field,
        heap_size_bytes: 9064,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241290662389,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 290 662 389),
                    max: TimeInt(1 757 502 241 290 662 389),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241290662389,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 290 662 389),
                    max: TimeInt(1 757 502 241 290 662 389),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.MagneticField",
                    ),
                    component: "magnetic_field_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                  0.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Arrows3D",
                    ),
                    component: "Arrows3D:vectors",
                    component_type: Some(
                        "rerun.components.Vector3D",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<3>
                [
                  PrimitiveArray<Float32>
                [
                  0.023,
                  -0.012,
                  0.048,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /magnetic_field,
        heap_size_bytes: 5173,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/MagneticField",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  77,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  109,
                  ...2305 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/magnetic_field",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  26,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  28,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /multi_dof_joint_state,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241292393377,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 292 393 377),
                    max: TimeInt(1 757 502 241 292 393 377),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241292393377,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 292 393 377),
                    max: TimeInt(1 757 502 241 292 393 377),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...208 elements...,
                  201,
                  63,
                  51,
                  51,
                  51,
                  51,
                  51,
                  51,
                  211,
                  63,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /multi_dof_joint_state,
        heap_size_bytes: 6102,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/MultiDOFJointState",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  82,
                  101,
                  112,
                  114,
                  101,
                  115,
                  101,
                  110,
                  ...3234 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/multi_dof_joint_state",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  5,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  5,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /multi_echo_laser_scan,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241293710337,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 293 710 337),
                    max: TimeInt(1 757 502 241 293 710 337),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241293710337,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 293 710 337),
                    max: TimeInt(1 757 502 241 293 710 337),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...100 elements...,
                  0,
                  0,
                  0,
                  0,
                  0,
                  64,
                  102,
                  102,
                  6,
                  64,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /multi_echo_laser_scan,
        heap_size_bytes: 5746,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/MultiEchoLaserScan",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  115,
                  ...2878 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/multi_echo_laser_scan",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  20,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  20,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/compass,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241409257279,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 409 257 279),
                    max: TimeInt(1 757 502 241 409 257 279),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241409257279,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 409 257 279),
                    max: TimeInt(1 757 502 241 409 257 279),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...116 elements...,
                  0,
                  0,
                  0,
                  0,
                  240,
                  63,
                  2,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/compass,
        heap_size_bytes: 22136,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241409257279,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 409 257 279),
                    max: TimeInt(1 757 502 241 409 257 279),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241409257279,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 409 257 279),
                    max: TimeInt(1 757 502 241 409 257 279),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "altitude",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  100.0814392301789,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance_type",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "service",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  4,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.GeoPoints",
                    ),
                    component: "GeoPoints:positions",
                    component_type: Some(
                        "rerun.components.LatLon",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<2>
                [
                  PrimitiveArray<Float64>
                [
                  52.35479940094243,
                  4.954558837558597,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "status",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Int8>
                [
                  0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/compass,
        heap_size_bytes: 6102,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/NavSatFix",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  78,
                  97,
                  118,
                  105,
                  103,
                  97,
                  116,
                  105,
                  ...3234 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/nav_sat_fix/compass",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  12,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  12,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/galileo,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241466497141,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 466 497 141),
                    max: TimeInt(1 757 502 241 466 497 141),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241466497141,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 466 497 141),
                    max: TimeInt(1 757 502 241 466 497 141),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...116 elements...,
                  0,
                  0,
                  0,
                  0,
                  240,
                  63,
                  2,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/galileo,
        heap_size_bytes: 22136,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241466497141,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 466 497 141),
                    max: TimeInt(1 757 502 241 466 497 141),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241466497141,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 466 497 141),
                    max: TimeInt(1 757 502 241 466 497 141),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "altitude",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  103.88819906587712,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance_type",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "service",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  8,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.GeoPoints",
                    ),
                    component: "GeoPoints:positions",
                    component_type: Some(
                        "rerun.components.LatLon",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<2>
                [
                  PrimitiveArray<Float64>
                [
                  52.35472718244604,
                  4.954480012927898,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "status",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Int8>
                [
                  0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/galileo,
        heap_size_bytes: 6102,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/NavSatFix",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  78,
                  97,
                  118,
                  105,
                  103,
                  97,
                  116,
                  105,
                  ...3234 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/nav_sat_fix/galileo",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  12,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  31,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/glonass,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241353042218,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 353 042 218),
                    max: TimeInt(1 757 502 241 353 042 218),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241353042218,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 353 042 218),
                    max: TimeInt(1 757 502 241 353 042 218),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...116 elements...,
                  0,
                  0,
                  0,
                  0,
                  240,
                  63,
                  2,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/glonass,
        heap_size_bytes: 22136,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241353042218,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 353 042 218),
                    max: TimeInt(1 757 502 241 353 042 218),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241353042218,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 353 042 218),
                    max: TimeInt(1 757 502 241 353 042 218),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "altitude",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  95.77957920126407,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance_type",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "service",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.GeoPoints",
                    ),
                    component: "GeoPoints:positions",
                    component_type: Some(
                        "rerun.components.LatLon",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<2>
                [
                  PrimitiveArray<Float64>
                [
                  52.35472263384737,
                  4.9545356478762335,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "status",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Int8>
                [
                  0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/glonass,
        heap_size_bytes: 6102,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/NavSatFix",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  78,
                  97,
                  118,
                  105,
                  103,
                  97,
                  116,
                  105,
                  ...3234 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/nav_sat_fix/glonass",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  12,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  27,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/gps,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241296694037,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 296 694 037),
                    max: TimeInt(1 757 502 241 296 694 037),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241296694037,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 296 694 037),
                    max: TimeInt(1 757 502 241 296 694 037),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...116 elements...,
                  0,
                  0,
                  0,
                  0,
                  240,
                  63,
                  2,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/gps,
        heap_size_bytes: 22136,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241296694037,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 296 694 037),
                    max: TimeInt(1 757 502 241 296 694 037),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241296694037,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 296 694 037),
                    max: TimeInt(1 757 502 241 296 694 037),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "altitude",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  104.11955221042457,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                  0.0,
                  0.0,
                  0.0,
                  1.0,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "position_covariance_type",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "service",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  1,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.GeoPoints",
                    ),
                    component: "GeoPoints:positions",
                    component_type: Some(
                        "rerun.components.LatLon",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<2>
                [
                  PrimitiveArray<Float64>
                [
                  52.3548062813776,
                  4.954574572154617,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.NavSatFix",
                    ),
                    component: "status",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<Int8>
                [
                  0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /nav_sat_fix/gps,
        heap_size_bytes: 6102,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/NavSatFix",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  78,
                  97,
                  118,
                  105,
                  103,
                  97,
                  116,
                  105,
                  ...3234 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/nav_sat_fix/gps",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  12,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  25,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /parameter_events,
        heap_size_bytes: 5396,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 1000\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "rcl_interfaces/msg/ParameterEvent",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...2528 elements...,
                  114,
                  97,
                  121,
                  95,
                  118,
                  97,
                  108,
                  117,
                  101,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/parameter_events",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  2,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  2,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_cloud,
        heap_size_bytes: 2640,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241524689057,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 524 689 057),
                    max: TimeInt(1 757 502 241 524 689 057),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241524689057,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 524 689 057),
                    max: TimeInt(1 757 502 241 524 689 057),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...1636 elements...,
                  67,
                  67,
                  0,
                  0,
                  69,
                  67,
                  0,
                  128,
                  70,
                  67,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_cloud,
        heap_size_bytes: 5866,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/PointCloud",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  35,
                  32,
                  84,
                  72,
                  73,
                  83,
                  32,
                  77,
                  69,
                  ...2998 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/point_cloud",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  29,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  32,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_cloud2,
        heap_size_bytes: 3984,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241528395360,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 528 395 360),
                    max: TimeInt(1 757 502 241 528 395 360),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241528395360,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 528 395 360),
                    max: TimeInt(1 757 502 241 528 395 360),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...3328 elements...,
                  0,
                  63,
                  0,
                  0,
                  72,
                  67,
                  1,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_cloud2,
        heap_size_bytes: 4760,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241528395360,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 528 395 360),
                    max: TimeInt(1 757 502 241 528 395 360),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241528395360,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 528 395 360),
                    max: TimeInt(1 757 502 241 528 395 360),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Points3D",
                    ),
                    component: "Points3D:positions",
                    component_type: Some(
                        "rerun.components.Position3D",
                    ),
                }: ListArray
                [
                  FixedSizeListArray<3>
                [
                  PrimitiveArray<Float32>
                [
                  -1.0,
                  0.0,
                  0.5,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.98994976,
                  0.06310563,
                  0.49775863,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.9798995,
                  0.12595971,
                  0.49105465,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.9698492,
                  0.18831167,
                  0.47994816,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.959799,
                  0.24991296,
                  0.46453872,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.94974875,
                  0.31051803,
                  0.44496447,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.9396985,
                  0.3698853,
                  0.42140093,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.9296482,
                  0.42777807,
                  0.39405936,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.919598,
                  0.4839656,
                  0.36318487,
                ],
                  PrimitiveArray<Float32>
                [
                  -0.90954775,
                  0.5382239,
                  0.32905427,
                ],
                  ...180 elements...,
                  PrimitiveArray<Float32>
                [
                  0.90954775,
                  -0.5382239,
                  0.32905427,
                ],
                  PrimitiveArray<Float32>
                [
                  0.919598,
                  -0.4839656,
                  0.36318487,
                ],
                  PrimitiveArray<Float32>
                [
                  0.9296482,
                  -0.42777807,
                  0.39405936,
                ],
                  PrimitiveArray<Float32>
                [
                  0.9396985,
                  -0.3698853,
                  0.42140093,
                ],
                  PrimitiveArray<Float32>
                [
                  0.94974875,
                  -0.31051803,
                  0.44496447,
                ],
                  PrimitiveArray<Float32>
                [
                  0.959799,
                  -0.24991296,
                  0.46453872,
                ],
                  PrimitiveArray<Float32>
                [
                  0.9698492,
                  -0.18831167,
                  0.47994816,
                ],
                  PrimitiveArray<Float32>
                [
                  0.9798995,
                  -0.12595971,
                  0.49105465,
                ],
                  PrimitiveArray<Float32>
                [
                  0.98994976,
                  -0.06310563,
                  0.49775863,
                ],
                  PrimitiveArray<Float32>
                [
                  1.0,
                  -4.8985874e-16,
                  0.5,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_cloud2,
        heap_size_bytes: 36376,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241528395360,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 528 395 360),
                    max: TimeInt(1 757 502 241 528 395 360),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241528395360,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 528 395 360),
                    max: TimeInt(1 757 502 241 528 395 360),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:is_bigendian",
                    component_type: None,
                }: ListArray
                [
                  BooleanArray
                [
                  false,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:point_step",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  16,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  0,
                  128,
                  191,
                  0,
                  0,
                  0,
                  0,
                  0,
                  0,
                  ...3180 elements...,
                  13,
                  166,
                  0,
                  0,
                  0,
                  63,
                  0,
                  0,
                  72,
                  67,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:height",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  1,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:width",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  200,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:is_dense",
                    component_type: None,
                }: ListArray
                [
                  BooleanArray
                [
                  true,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:fields",
                    component_type: None,
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                  valid,
                  valid,
                  valid,
                ]
                [
                -- child 0: "name" (Utf8)
                StringArray
                [
                  "x",
                  "y",
                  "z",
                  "intensity",
                ]
                -- child 1: "offset" (UInt32)
                PrimitiveArray<UInt32>
                [
                  0,
                  4,
                  8,
                  12,
                ]
                -- child 2: "datatype" (UInt8)
                PrimitiveArray<UInt8>
                [
                  7,
                  7,
                  7,
                  7,
                ]
                -- child 3: "count" (UInt32)
                PrimitiveArray<UInt32>
                [
                  1,
                  1,
                  1,
                  1,
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "sensor_msgs.msg.PointCloud2",
                    ),
                    component: "sensor_msgs.msg.PointCloud2:row_step",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  3200,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_cloud2,
        heap_size_bytes: 5272,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/PointCloud2",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...2404 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/point_cloud2",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  23,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  23,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_field,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241529715277,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 529 715 277),
                    max: TimeInt(1 757 502 241 529 715 277),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241529715277,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 529 715 277),
                    max: TimeInt(1 757 502 241 529 715 277),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  2,
                  0,
                  0,
                  0,
                  120,
                  0,
                  ...4 elements...,
                  0,
                  0,
                  7,
                  0,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /point_field,
        heap_size_bytes: 3333,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/PointField",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...465 elements...,
                  116,
                  104,
                  101,
                  32,
                  102,
                  105,
                  101,
                  108,
                  100,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/point_field",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  7,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  7,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /range,
        heap_size_bytes: 1972,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238548184597,
                        1757502238652947745,
                        1757502238759779372,
                        1757502238870418423,
                        1757502238978579676,
                        1757502239085686377,
                        1757502239192145682,
                        1757502239301509856,
                        1757502239408006201,
                        1757502239515941544,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 548 184 597),
                    max: TimeInt(1 757 502 239 515 941 544),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238548184597,
                        1757502238652947745,
                        1757502238759779372,
                        1757502238870418423,
                        1757502238978579676,
                        1757502239085686377,
                        1757502239192145682,
                        1757502239301509856,
                        1757502239408006201,
                        1757502239515941544,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 548 184 597),
                    max: TimeInt(1 757 502 239 515 941 544),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  0,
                  0,
                  0,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  205,
                  204,
                  76,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  205,
                  204,
                  140,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  51,
                  51,
                  179,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  154,
                  153,
                  217,
                  63,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  0,
                  0,
                  0,
                  64,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  51,
                  51,
                  19,
                  64,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  102,
                  102,
                  38,
                  64,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  154,
                  153,
                  57,
                  64,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  163,
                  60,
                  0,
                  0,
                  128,
                  64,
                  205,
                  204,
                  76,
                  64,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /range,
        heap_size_bytes: 9308,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238548184597,
                        1757502238652947745,
                        1757502238759779372,
                        1757502238870418423,
                        1757502238978579676,
                        1757502239085686377,
                        1757502239192145682,
                        1757502239301509856,
                        1757502239408006201,
                        1757502239515941544,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 548 184 597),
                    max: TimeInt(1 757 502 239 515 941 544),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238548184597,
                        1757502238652947745,
                        1757502238759779372,
                        1757502238870418423,
                        1757502238978579676,
                        1757502239085686377,
                        1757502239192145682,
                        1757502239301509856,
                        1757502239408006201,
                        1757502239515941544,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 548 184 597),
                    max: TimeInt(1 757 502 239 515 941 544),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                        1757502238482648699,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 238 482 648 699),
                    max: TimeInt(1 757 502 238 482 648 699),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.Scalars",
                    ),
                    component: "Scalars:scalars",
                    component_type: Some(
                        "rerun.components.Scalar",
                    ),
                }: ListArray
                [
                  PrimitiveArray<Float64>
                [
                  0.5,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  0.800000011920929,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  1.100000023841858,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  1.399999976158142,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  1.7000000476837158,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  2.0,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  2.299999952316284,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  2.5999999046325684,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  2.9000000953674316,
                  0.019999999552965164,
                  4.0,
                ],
                  PrimitiveArray<Float64>
                [
                  3.200000047683716,
                  0.019999999552965164,
                  4.0,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /range,
        heap_size_bytes: 400,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.SeriesLines",
                    ),
                    component: "SeriesLines:names",
                    component_type: Some(
                        "rerun.components.Name",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "range",
                  "min_range",
                  "max_range",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /range,
        heap_size_bytes: 5635,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/Range",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  114,
                  ...2767 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/range",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  28,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  30,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /region_of_interest,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241530257719,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 530 257 719),
                    max: TimeInt(1 757 502 241 530 257 719),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241530257719,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 530 257 719),
                    max: TimeInt(1 757 502 241 530 257 719),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  100,
                  0,
                  0,
                  0,
                  50,
                  0,
                  ...4 elements...,
                  0,
                  0,
                  44,
                  1,
                  0,
                  0,
                  1,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /region_of_interest,
        heap_size_bytes: 3720,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/RegionOfInterest",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  84,
                  104,
                  105,
                  115,
                  32,
                  109,
                  101,
                  115,
                  ...852 elements...,
                  111,
                  95,
                  114,
                  101,
                  99,
                  116,
                  105,
                  102,
                  121,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/region_of_interest",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  25,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  26,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /relative_humidity,
        heap_size_bytes: 4256,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/RelativeHumidity",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  114,
                  ...1388 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/relative_humidity",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  18,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  18,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /rosout,
        heap_size_bytes: 37324,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          ...60 elements...,
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502237064933568,
                        1757502237064944400,
                        1757502237064948609,
                        1757502237064952234,
                        1757502237064955442,
                        1757502237064958567,
                        1757502237064961608,
                        1757502237064965650,
                        1757502237491789422,
                        1757502237493676031,
                        1757502237495811256,
                        1757502237496731645,
                        1757502237497625201,
                        1757502237498550422,
                        1757502237499512934,
                        1757502237500580318,
                        1757502237501791156,
                        1757502237502690836,
                        1757502237503618433,
                        1757502237504590153,
                        1757502237505343921,
                        1757502237506375514,
                        1757502237507290445,
                        1757502237508196583,
                        1757502237509385880,
                        1757502237510438223,
                        1757502237511303946,
                        1757502237512628697,
                        1757502237513495212,
                        1757502237513947031,
                        1757502237514763090,
                        1757502237515166369,
                        1757502237516218503,
                        1757502237517052019,
                        1757502237518155402,
                        1757502237518571597,
                        1757502237519779268,
                        1757502238547401205,
                        1757502238547680738,
                        1757502238548135265,
                        1757502238548482046,
                        1757502238650216580,
                        1757502238651350086,
                        1757502238652798000,
                        1757502238654313995,
                        1757502238757795350,
                        1757502238758793361,
                        1757502238759736665,
                        1757502238760634804,
                        1757502238867921542,
                        1757502238869373914,
                        1757502238870359550,
                        1757502238871378852,
                        1757502238975679015,
                        1757502238977287132,
                        1757502238978498220,
                        1757502238979346902,
                        1757502239083657940,
                        1757502239084677908,
                        1757502239085651545,
                        1757502239086563975,
                        1757502239190232783,
                        1757502239191120797,
                        1757502239192099475,
                        1757502239192931283,
                        1757502239299222551,
                        1757502239300373724,
                        1757502239301389359,
                        1757502239302362538,
                        1757502239405554360,
                        1757502239406277963,
                        1757502239407851831,
                        1757502239408940797,
                        1757502239512172660,
                        1757502239514057894,
                        1757502239515832630,
                        1757502239516824017,
                        1757502239619404899,
                        1757502239620519615,
                        1757502239655350959,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 237 064 933 568),
                    max: TimeInt(1 757 502 239 655 350 959),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502237064933568,
                        1757502237064944400,
                        1757502237064948609,
                        1757502237064952234,
                        1757502237064955442,
                        1757502237064958567,
                        1757502237064961608,
                        1757502237064965650,
                        1757502237491789422,
                        1757502237493676031,
                        1757502237495811256,
                        1757502237496731645,
                        1757502237497625201,
                        1757502237498550422,
                        1757502237499512934,
                        1757502237500580318,
                        1757502237501791156,
                        1757502237502690836,
                        1757502237503618433,
                        1757502237504590153,
                        1757502237505343921,
                        1757502237506375514,
                        1757502237507290445,
                        1757502237508196583,
                        1757502237509385880,
                        1757502237510438223,
                        1757502237511303946,
                        1757502237512628697,
                        1757502237513495212,
                        1757502237513947031,
                        1757502237514763090,
                        1757502237515166369,
                        1757502237516218503,
                        1757502237517052019,
                        1757502237518155402,
                        1757502237518571597,
                        1757502237519779268,
                        1757502238547401205,
                        1757502238547680738,
                        1757502238548135265,
                        1757502238548482046,
                        1757502238650216580,
                        1757502238651350086,
                        1757502238652798000,
                        1757502238654313995,
                        1757502238757795350,
                        1757502238758793361,
                        1757502238759736665,
                        1757502238760634804,
                        1757502238867921542,
                        1757502238869373914,
                        1757502238870359550,
                        1757502238871378852,
                        1757502238975679015,
                        1757502238977287132,
                        1757502238978498220,
                        1757502238979346902,
                        1757502239083657940,
                        1757502239084677908,
                        1757502239085651545,
                        1757502239086563975,
                        1757502239190232783,
                        1757502239191120797,
                        1757502239192099475,
                        1757502239192931283,
                        1757502239299222551,
                        1757502239300373724,
                        1757502239301389359,
                        1757502239302362538,
                        1757502239405554360,
                        1757502239406277963,
                        1757502239407851831,
                        1757502239408940797,
                        1757502239512172660,
                        1757502239514057894,
                        1757502239515832630,
                        1757502239516824017,
                        1757502239619404899,
                        1757502239620519615,
                        1757502239655350959,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 237 064 933 568),
                    max: TimeInt(1 757 502 239 655 350 959),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  22,
                  137,
                  ...244 elements...,
                  101,
                  114,
                  0,
                  0,
                  0,
                  0,
                  106,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  145,
                  221,
                  ...260 elements...,
                  95,
                  109,
                  97,
                  105,
                  110,
                  0,
                  215,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  212,
                  66,
                  ...228 elements...,
                  99,
                  111,
                  114,
                  100,
                  0,
                  0,
                  195,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  67,
                  141,
                  ...244 elements...,
                  116,
                  111,
                  112,
                  105,
                  99,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  28,
                  91,
                  193,
                  104,
                  241,
                  43,
                  ...204 elements...,
                  114,
                  100,
                  105,
                  110,
                  103,
                  0,
                  186,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  114,
                  122,
                  ...252 elements...,
                  116,
                  111,
                  112,
                  105,
                  99,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  10,
                  13,
                  ...256 elements...,
                  116,
                  111,
                  112,
                  105,
                  99,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  52,
                  221,
                  ...220 elements...,
                  99,
                  111,
                  114,
                  100,
                  0,
                  0,
                  209,
                  0,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  135,
                  155,
                  ...252 elements...,
                  116,
                  111,
                  112,
                  105,
                  99,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  29,
                  91,
                  193,
                  104,
                  4,
                  132,
                  ...260 elements...,
                  116,
                  111,
                  112,
                  105,
                  99,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ...60 elements...,
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  66,
                  93,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  2,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  69,
                  29,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  2,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  255,
                  79,
                  ...176 elements...,
                  111,
                  110,
                  0,
                  0,
                  0,
                  0,
                  147,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  118,
                  86,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  2,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  25,
                  133,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  2,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  196,
                  114,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  2,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  141,
                  126,
                  ...176 elements...,
                  111,
                  110,
                  0,
                  0,
                  0,
                  0,
                  147,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  159,
                  214,
                  ...168 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  24,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  107,
                  52,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  24,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  31,
                  167,
                  ...172 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  24,
                  1,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /rosout,
        heap_size_bytes: 10656,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          ...17 elements...,
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709266799,
                        1757502239709782491,
                        1757502239710231769,
                        1757502239813040478,
                        1757502239917790168,
                        1757502240020588044,
                        1757502240126825898,
                        1757502240232467353,
                        1757502240340004624,
                        1757502240441414918,
                        1757502240549377468,
                        1757502240655202584,
                        1757502240761541892,
                        1757502240863518377,
                        1757502240968511852,
                        1757502241075065695,
                        1757502241180040504,
                        1757502241286094905,
                        1757502241286720010,
                        1757502241288255922,
                        1757502241289359596,
                        1757502241290469353,
                        1757502241291670650,
                        1757502241293444178,
                        1757502241294881926,
                        1757502241296496959,
                        1757502241297636383,
                        1757502241354148476,
                        1757502241410831230,
                        1757502241468095300,
                        1757502241525551739,
                        1757502241529656529,
                        1757502241530219053,
                        1757502241531377726,
                        1757502241533708196,
                        1757502241536258117,
                        1757502242544551691,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 266 799),
                    max: TimeInt(1 757 502 242 544 551 691),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709266799,
                        1757502239709782491,
                        1757502239710231769,
                        1757502239813040478,
                        1757502239917790168,
                        1757502240020588044,
                        1757502240126825898,
                        1757502240232467353,
                        1757502240340004624,
                        1757502240441414918,
                        1757502240549377468,
                        1757502240655202584,
                        1757502240761541892,
                        1757502240863518377,
                        1757502240968511852,
                        1757502241075065695,
                        1757502241180040504,
                        1757502241286094905,
                        1757502241286720010,
                        1757502241288255922,
                        1757502241289359596,
                        1757502241290469353,
                        1757502241291670650,
                        1757502241293444178,
                        1757502241294881926,
                        1757502241296496959,
                        1757502241297636383,
                        1757502241354148476,
                        1757502241410831230,
                        1757502241468095300,
                        1757502241525551739,
                        1757502241529656529,
                        1757502241530219053,
                        1757502241531377726,
                        1757502241533708196,
                        1757502241536258117,
                        1757502242544551691,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 266 799),
                    max: TimeInt(1 757 502 242 544 551 691),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  60,
                  1,
                  ...160 elements...,
                  101,
                  115,
                  0,
                  0,
                  0,
                  0,
                  24,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  138,
                  106,
                  ...152 elements...,
                  117,
                  95,
                  109,
                  115,
                  103,
                  0,
                  76,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  90,
                  132,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  116,
                  213,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  31,
                  91,
                  193,
                  104,
                  242,
                  121,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  79,
                  240,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  209,
                  15,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  245,
                  109,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  223,
                  214,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  32,
                  91,
                  193,
                  104,
                  12,
                  31,
                  ...224 elements...,
                  112,
                  115,
                  0,
                  0,
                  0,
                  0,
                  114,
                  1,
                  0,
                  0,
                ],
                ],
                  ...17 elements...,
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  145,
                  177,
                  ...244 elements...,
                  103,
                  115,
                  0,
                  0,
                  0,
                  0,
                  35,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  132,
                  253,
                  ...244 elements...,
                  103,
                  115,
                  0,
                  0,
                  0,
                  0,
                  35,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  212,
                  70,
                  ...244 elements...,
                  103,
                  115,
                  0,
                  0,
                  0,
                  0,
                  35,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  57,
                  240,
                  ...168 elements...,
                  100,
                  95,
                  109,
                  115,
                  103,
                  0,
                  66,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  42,
                  11,
                  ...172 elements...,
                  115,
                  103,
                  0,
                  0,
                  0,
                  0,
                  113,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  97,
                  98,
                  ...168 elements...,
                  100,
                  95,
                  109,
                  115,
                  103,
                  0,
                  123,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  117,
                  221,
                  ...180 elements...,
                  95,
                  109,
                  115,
                  103,
                  0,
                  0,
                  158,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  108,
                  126,
                  ...172 elements...,
                  95,
                  109,
                  115,
                  103,
                  0,
                  0,
                  185,
                  2,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  33,
                  91,
                  193,
                  104,
                  253,
                  244,
                  ...176 elements...,
                  105,
                  110,
                  0,
                  0,
                  0,
                  0,
                  55,
                  1,
                  0,
                  0,
                ],
                ],
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  34,
                  91,
                  193,
                  104,
                  120,
                  62,
                  ...172 elements...,
                  105,
                  110,
                  103,
                  0,
                  0,
                  0,
                  199,
                  0,
                  0,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /rosout,
        heap_size_bytes: 44072,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          ...60 elements...,
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502237064933568,
                        1757502237064944400,
                        1757502237064948609,
                        1757502237064952234,
                        1757502237064955442,
                        1757502237064958567,
                        1757502237064961608,
                        1757502237064965650,
                        1757502237491789422,
                        1757502237493676031,
                        1757502237495811256,
                        1757502237496731645,
                        1757502237497625201,
                        1757502237498550422,
                        1757502237499512934,
                        1757502237500580318,
                        1757502237501791156,
                        1757502237502690836,
                        1757502237503618433,
                        1757502237504590153,
                        1757502237505343921,
                        1757502237506375514,
                        1757502237507290445,
                        1757502237508196583,
                        1757502237509385880,
                        1757502237510438223,
                        1757502237511303946,
                        1757502237512628697,
                        1757502237513495212,
                        1757502237513947031,
                        1757502237514763090,
                        1757502237515166369,
                        1757502237516218503,
                        1757502237517052019,
                        1757502237518155402,
                        1757502237518571597,
                        1757502237519779268,
                        1757502238547401205,
                        1757502238547680738,
                        1757502238548135265,
                        1757502238548482046,
                        1757502238650216580,
                        1757502238651350086,
                        1757502238652798000,
                        1757502238654313995,
                        1757502238757795350,
                        1757502238758793361,
                        1757502238759736665,
                        1757502238760634804,
                        1757502238867921542,
                        1757502238869373914,
                        1757502238870359550,
                        1757502238871378852,
                        1757502238975679015,
                        1757502238977287132,
                        1757502238978498220,
                        1757502238979346902,
                        1757502239083657940,
                        1757502239084677908,
                        1757502239085651545,
                        1757502239086563975,
                        1757502239190232783,
                        1757502239191120797,
                        1757502239192099475,
                        1757502239192931283,
                        1757502239299222551,
                        1757502239300373724,
                        1757502239301389359,
                        1757502239302362538,
                        1757502239405554360,
                        1757502239406277963,
                        1757502239407851831,
                        1757502239408940797,
                        1757502239512172660,
                        1757502239514057894,
                        1757502239515832630,
                        1757502239516824017,
                        1757502239619404899,
                        1757502239620519615,
                        1757502239655350959,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 237 064 933 568),
                    max: TimeInt(1 757 502 239 655 350 959),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502237064933568,
                        1757502237064944400,
                        1757502237064948609,
                        1757502237064952234,
                        1757502237064955442,
                        1757502237064958567,
                        1757502237064961608,
                        1757502237064965650,
                        1757502237491789422,
                        1757502237493676031,
                        1757502237495811256,
                        1757502237496731645,
                        1757502237497625201,
                        1757502237498550422,
                        1757502237499512934,
                        1757502237500580318,
                        1757502237501791156,
                        1757502237502690836,
                        1757502237503618433,
                        1757502237504590153,
                        1757502237505343921,
                        1757502237506375514,
                        1757502237507290445,
                        1757502237508196583,
                        1757502237509385880,
                        1757502237510438223,
                        1757502237511303946,
                        1757502237512628697,
                        1757502237513495212,
                        1757502237513947031,
                        1757502237514763090,
                        1757502237515166369,
                        1757502237516218503,
                        1757502237517052019,
                        1757502237518155402,
                        1757502237518571597,
                        1757502237519779268,
                        1757502238547401205,
                        1757502238547680738,
                        1757502238548135265,
                        1757502238548482046,
                        1757502238650216580,
                        1757502238651350086,
                        1757502238652798000,
                        1757502238654313995,
                        1757502238757795350,
                        1757502238758793361,
                        1757502238759736665,
                        1757502238760634804,
                        1757502238867921542,
                        1757502238869373914,
                        1757502238870359550,
                        1757502238871378852,
                        1757502238975679015,
                        1757502238977287132,
                        1757502238978498220,
                        1757502238979346902,
                        1757502239083657940,
                        1757502239084677908,
                        1757502239085651545,
                        1757502239086563975,
                        1757502239190232783,
                        1757502239191120797,
                        1757502239192099475,
                        1757502239192931283,
                        1757502239299222551,
                        1757502239300373724,
                        1757502239301389359,
                        1757502239302362538,
                        1757502239405554360,
                        1757502239406277963,
                        1757502239407851831,
                        1757502239408940797,
                        1757502239512172660,
                        1757502239514057894,
                        1757502239515832630,
                        1757502239516824017,
                        1757502239619404899,
                        1757502239620519615,
                        1757502239655350959,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 237 064 933 568),
                    max: TimeInt(1 757 502 239 655 350 959),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502237049187094,
                        1757502237055238033,
                        1757502237055395028,
                        1757502237059411779,
                        1757502236879635441,
                        1757502237062683762,
                        1757502237064752906,
                        1757502237064806196,
                        1757502237491756423,
                        1757502237493650948,
                        1757502237495772091,
                        1757502237496718103,
                        1757502237497607618,
                        1757502237498533423,
                        1757502237499500310,
                        1757502237500566443,
                        1757502237501779906,
                        1757502237502674753,
                        1757502237503603392,
                        1757502237504567570,
                        1757502237505327797,
                        1757502237506357557,
                        1757502237507274820,
                        1757502237508183500,
                        1757502237509356589,
                        1757502237510419432,
                        1757502237511281238,
                        1757502237512396454,
                        1757502237513470296,
                        1757502237513912199,
                        1757502237514739632,
                        1757502237515143286,
                        1757502237516193795,
                        1757502237517029103,
                        1757502237518136736,
                        1757502237518551015,
                        1757502237519753519,
                        1757502238547261709,
                        1757502238547601615,
                        1757502238548055809,
                        1757502238548425548,
                        1757502238649985129,
                        1757502238651152551,
                        1757502238652476468,
                        1757502238653862384,
                        1757502238757528316,
                        1757502238758652407,
                        1757502238759529963,
                        1757502238760449185,
                        1757502238867450931,
                        1757502238869196169,
                        1757502238870149557,
                        1757502238871130943,
                        1757502238975529145,
                        1757502238977082222,
                        1757502238978300184,
                        1757502238979227614,
                        1757502239083421864,
                        1757502239084452999,
                        1757502239085513133,
                        1757502239086379647,
                        1757502239190023081,
                        1757502239191003592,
                        1757502239191934230,
                        1757502239192745830,
                        1757502239298693067,
                        1757502239300194938,
                        1757502239301207240,
                        1757502239302155669,
                        1757502239405427406,
                        1757502239406150466,
                        1757502239407510341,
                        1757502239408768511,
                        1757502239511858294,
                        1757502239513770777,
                        1757502239515535556,
                        1757502239516587149,
                        1757502239619239071,
                        1757502239620246123,
                        1757502239655271711,
                    ],
                ),
                is_sorted: false,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 236 879 635 441),
                    max: TimeInt(1 757 502 239 655 271 711),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rcl_interfaces.msg.Log",
                    ),
                    component: "function",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "Recorder",
                ],
                  StringArray
                [
                  "event_publisher_thread_main",
                ],
                  StringArray
                [
                  "record",
                ],
                  StringArray
                [
                  "subscribe_topic",
                ],
                  StringArray
                [
                  "setup_bag_recording",
                ],
                  StringArray
                [
                  "subscribe_topic",
                ],
                  StringArray
                [
                  "subscribe_topic",
                ],
                  StringArray
                [
                  "record",
                ],
                  StringArray
                [
                  "subscribe_topic",
                ],
                  StringArray
                [
                  "subscribe_topic",
                ],
                  ...60 elements...,
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_range_msg_with_variation",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_range_msg_with_variation",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_all_messages",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rcl_interfaces.msg.Log",
                    ),
                    component: "file",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  StringArray
                [
                  "/Users/runner/conda-bld/bld/rattler-build_ros-humble-rosbag2-transport_1753317871/work/ros-humble-rosbag2-transport/src/work/src/rosbag2_transport/recorder.cpp",
                ],
                  ...60 elements...,
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.TextLog",
                    ),
                    component: "TextLog:color",
                    component_type: Some(
                        "rerun.components.Color",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  ...60 elements...,
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.TextLog",
                    ),
                    component: "TextLog:level",
                    component_type: Some(
                        "rerun.components.TextLogLevel",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  ...60 elements...,
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rcl_interfaces.msg.Log",
                    ),
                    component: "line",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  106,
                ],
                  PrimitiveArray<UInt32>
                [
                  215,
                ],
                  PrimitiveArray<UInt32>
                [
                  195,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  186,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  209,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  ...60 elements...,
                  PrimitiveArray<UInt32>
                [
                  258,
                ],
                  PrimitiveArray<UInt32>
                [
                  258,
                ],
                  PrimitiveArray<UInt32>
                [
                  659,
                ],
                  PrimitiveArray<UInt32>
                [
                  258,
                ],
                  PrimitiveArray<UInt32>
                [
                  258,
                ],
                  PrimitiveArray<UInt32>
                [
                  258,
                ],
                  PrimitiveArray<UInt32>
                [
                  659,
                ],
                  PrimitiveArray<UInt32>
                [
                  280,
                ],
                  PrimitiveArray<UInt32>
                [
                  280,
                ],
                  PrimitiveArray<UInt32>
                [
                  280,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.TextLog",
                    ),
                    component: "TextLog:text",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "[rosbag2_recorder] Press SPACE for pausing/resuming",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Event publisher thread: Starting",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Listening for topics...",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Subscribed to topic '/rosout'",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Starting bag recording to: rosbags/rosbag2_2025_09_10-13_03_56",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Subscribed to topic '/parameter_events'",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Subscribed to topic '/events/write_split'",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Recording...",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Subscribed to topic '/battery_state'",
                ],
                  StringArray
                [
                  "[rosbag2_recorder] Subscribed to topic '/multi_dof_joint_state'",
                ],
                  ...60 elements...,
                  StringArray
                [
                  "[mcap_creator_node] Published Illuminance #9",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published BatteryState #9",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published Range #9",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published FluidPressure #10",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published Illuminance #10",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published BatteryState #10",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published Range #10",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published CameraInfo",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published ChannelFloat32",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published CompressedImage",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /rosout,
        heap_size_bytes: 26288,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          ...17 elements...,
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709266799,
                        1757502239709782491,
                        1757502239710231769,
                        1757502239813040478,
                        1757502239917790168,
                        1757502240020588044,
                        1757502240126825898,
                        1757502240232467353,
                        1757502240340004624,
                        1757502240441414918,
                        1757502240549377468,
                        1757502240655202584,
                        1757502240761541892,
                        1757502240863518377,
                        1757502240968511852,
                        1757502241075065695,
                        1757502241180040504,
                        1757502241286094905,
                        1757502241286720010,
                        1757502241288255922,
                        1757502241289359596,
                        1757502241290469353,
                        1757502241291670650,
                        1757502241293444178,
                        1757502241294881926,
                        1757502241296496959,
                        1757502241297636383,
                        1757502241354148476,
                        1757502241410831230,
                        1757502241468095300,
                        1757502241525551739,
                        1757502241529656529,
                        1757502241530219053,
                        1757502241531377726,
                        1757502241533708196,
                        1757502241536258117,
                        1757502242544551691,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 266 799),
                    max: TimeInt(1 757 502 242 544 551 691),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239709266799,
                        1757502239709782491,
                        1757502239710231769,
                        1757502239813040478,
                        1757502239917790168,
                        1757502240020588044,
                        1757502240126825898,
                        1757502240232467353,
                        1757502240340004624,
                        1757502240441414918,
                        1757502240549377468,
                        1757502240655202584,
                        1757502240761541892,
                        1757502240863518377,
                        1757502240968511852,
                        1757502241075065695,
                        1757502241180040504,
                        1757502241286094905,
                        1757502241286720010,
                        1757502241288255922,
                        1757502241289359596,
                        1757502241290469353,
                        1757502241291670650,
                        1757502241293444178,
                        1757502241294881926,
                        1757502241296496959,
                        1757502241297636383,
                        1757502241354148476,
                        1757502241410831230,
                        1757502241468095300,
                        1757502241525551739,
                        1757502241529656529,
                        1757502241530219053,
                        1757502241531377726,
                        1757502241533708196,
                        1757502241536258117,
                        1757502242544551691,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 709 266 799),
                    max: TimeInt(1 757 502 242 544 551 691),
                },
            },
            "timestamp": TimeColumn {
                timeline: Timeline {
                    name: "timestamp",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502239708182332,
                        1757502239709716618,
                        1757502239710181978,
                        1757502239812963188,
                        1757502239917535218,
                        1757502240020443215,
                        1757502240126422993,
                        1757502240232287733,
                        1757502240339793631,
                        1757502240441196300,
                        1757502240548878525,
                        1757502240654812887,
                        1757502240761195195,
                        1757502240863173971,
                        1757502240968384439,
                        1757502241074822453,
                        1757502241179906383,
                        1757502241285920077,
                        1757502241286594014,
                        1757502241288030220,
                        1757502241289144603,
                        1757502241290262776,
                        1757502241291499197,
                        1757502241293169104,
                        1757502241294646808,
                        1757502241296256550,
                        1757502241297475596,
                        1757502241353939857,
                        1757502241410582404,
                        1757502241467814100,
                        1757502241525332537,
                        1757502241529468202,
                        1757502241530145889,
                        1757502241531094901,
                        1757502241533364332,
                        1757502241536016125,
                        1757502242543964792,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 239 708 182 332),
                    max: TimeInt(1 757 502 242 543 964 792),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rcl_interfaces.msg.Log",
                    ),
                    component: "function",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "publish_all_messages",
                ],
                  StringArray
                [
                  "publish_imu_msg",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  StringArray
                [
                  "publish_joint_state_msgs_with_timestamps",
                ],
                  ...17 elements...,
                  StringArray
                [
                  "publish_nav_sat_fix_msgs",
                ],
                  StringArray
                [
                  "publish_nav_sat_fix_msgs",
                ],
                  StringArray
                [
                  "publish_nav_sat_fix_msgs",
                ],
                  StringArray
                [
                  "publish_point_cloud_msg",
                ],
                  StringArray
                [
                  "publish_point_cloud2_msg",
                ],
                  StringArray
                [
                  "publish_point_field_msg",
                ],
                  StringArray
                [
                  "publish_region_of_interest_msg",
                ],
                  StringArray
                [
                  "publish_time_reference_msg",
                ],
                  StringArray
                [
                  "main",
                ],
                  StringArray
                [
                  "cleanup_bag_recording",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rcl_interfaces.msg.Log",
                    ),
                    component: "file",
                    component_type: None,
                }: ListArray
                [
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  ...17 elements...,
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                  StringArray
                [
                  "/Users/gijsd/rerun-io/mcap-file-creator/build/mcap_creator/mcap_creator/runner.py",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.TextLog",
                    ),
                    component: "TextLog:color",
                    component_type: Some(
                        "rerun.components.Color",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  ...17 elements...,
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                  PrimitiveArray<UInt32>
                [
                  8454143,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.TextLog",
                    ),
                    component: "TextLog:level",
                    component_type: Some(
                        "rerun.components.TextLogLevel",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  ...17 elements...,
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                  StringArray
                [
                  "INFO",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rcl_interfaces.msg.Log",
                    ),
                    component: "line",
                    component_type: None,
                }: ListArray
                [
                  PrimitiveArray<UInt32>
                [
                  280,
                ],
                  PrimitiveArray<UInt32>
                [
                  332,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  PrimitiveArray<UInt32>
                [
                  370,
                ],
                  ...17 elements...,
                  PrimitiveArray<UInt32>
                [
                  547,
                ],
                  PrimitiveArray<UInt32>
                [
                  547,
                ],
                  PrimitiveArray<UInt32>
                [
                  547,
                ],
                  PrimitiveArray<UInt32>
                [
                  578,
                ],
                  PrimitiveArray<UInt32>
                [
                  625,
                ],
                  PrimitiveArray<UInt32>
                [
                  635,
                ],
                  PrimitiveArray<UInt32>
                [
                  670,
                ],
                  PrimitiveArray<UInt32>
                [
                  697,
                ],
                  PrimitiveArray<UInt32>
                [
                  311,
                ],
                  PrimitiveArray<UInt32>
                [
                  199,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.TextLog",
                    ),
                    component: "TextLog:text",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "[mcap_creator_node] Published Image",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published Imu",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #1 at timestamp 1757502239.709764991",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #2 at timestamp 1757502239.812365915",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #3 at timestamp 1757502239.915370326",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #4 at timestamp 1757502240.18260741",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #5 at timestamp 1757502240.124987996",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #6 at timestamp 1757502240.231211891",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #7 at timestamp 1757502240.336888012",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published JointState #8 at timestamp 1757502240.440081084",
                ],
                  ...17 elements...,
                  StringArray
                [
                  "[mcap_creator_node] Published NavSatFix for GLONASS at (52.354723, 4.954536, 95.8m) on topic /nav_sat_fix/glonass",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published NavSatFix for COMPASS at (52.354799, 4.954559, 100.1m) on topic /nav_sat_fix/compass",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published NavSatFix for GALILEO at (52.354727, 4.954480, 103.9m) on topic /nav_sat_fix/galileo",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published PointCloud",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published PointCloud2",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published PointField",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published RegionOfInterest",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published TimeReference",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Published messages for all sensor_msgs types",
                ],
                  StringArray
                [
                  "[mcap_creator_node] Stopping bag recording...",
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /rosout,
        heap_size_bytes: 4995,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 1000\n  reliability: 1\n  durability: 1\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 10\n    nsec: 0\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false\n- history: 1\n  depth: 1000\n  reliability: 1\n  durability: 1\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 10\n    nsec: 0\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "rcl_interfaces/msg/Log",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  35,
                  10,
                  35,
                  35,
                  32,
                  83,
                  101,
                  118,
                  101,
                  ...1871 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/rosout",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  1,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  1,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /temperature,
        heap_size_bytes: 3973,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/Temperature",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  83,
                  105,
                  110,
                  103,
                  108,
                  101,
                  32,
                  116,
                  ...1105 elements...,
                  50,
                  32,
                  110,
                  97,
                  110,
                  111,
                  115,
                  101,
                  99,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/temperature",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  9,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  9,
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /time_reference,
        heap_size_bytes: 1616,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {
            "log_time": TimeColumn {
                timeline: Timeline {
                    name: "log_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241531537929,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 531 537 929),
                    max: TimeInt(1 757 502 241 531 537 929),
                },
            },
            "publish_time": TimeColumn {
                timeline: Timeline {
                    name: "publish_time",
                    typ: TimestampNs,
                },
                times: ScalarBuffer(
                    [
                        1757502241531537929,
                    ],
                ),
                is_sorted: true,
                time_range: AbsoluteTimeRange {
                    min: TimeInt(1 757 502 241 531 537 929),
                    max: TimeInt(1 757 502 241 531 537 929),
                },
            },
        },
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapMessage",
                    ),
                    component: "McapMessage:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  0,
                  1,
                  0,
                  0,
                  30,
                  91,
                  193,
                  104,
                  123,
                  162,
                  ...24 elements...,
                  196,
                  28,
                  4,
                  0,
                  0,
                  0,
                  103,
                  112,
                  115,
                  0,
                ],
                ],
                ],
            },
        ),
    },
    Chunk {
        id: ChunkId(
            0000000000661EFDf2e3b19f7c045f15,
        ),
        entity_path: /time_reference,
        heap_size_bytes: 4012,
        is_sorted: true,
        row_ids: FixedSizeBinaryArray<16>
        [
          [
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
        ],
        ],
        timelines: {},
        components: ChunkComponents(
            {
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "ros2msg",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:metadata",
                    component_type: Some(
                        "rerun.components.KeyValuePairs",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  StructArray
                -- validity:
                [
                  valid,
                ]
                [
                -- child 0: "first" (Utf8)
                StringArray
                [
                  "offered_qos_profiles",
                ]
                -- child 1: "second" (Utf8)
                StringArray
                [
                  "- history: 1\n  depth: 10\n  reliability: 1\n  durability: 2\n  deadline:\n    sec: 9223372036\n    nsec: 854775807\n  lifespan:\n    sec: 9223372036\n    nsec: 854775807\n  liveliness: 1\n  liveliness_lease_duration:\n    sec: 9223372036\n    nsec: 854775807\n  avoid_ros_namespace_conventions: false",
                ]
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:name",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "sensor_msgs/msg/TimeReference",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:message_encoding",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "cdr",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:data",
                    component_type: Some(
                        "rerun.components.Blob",
                    ),
                }: ListArray
                [
                  ListArray
                [
                  PrimitiveArray<UInt8>
                [
                  35,
                  32,
                  77,
                  101,
                  97,
                  115,
                  117,
                  114,
                  101,
                  109,
                  ...1144 elements...,
                  32,
                  102,
                  114,
                  97,
                  109,
                  101,
                  95,
                  105,
                  100,
                  10,
                ],
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:topic",
                    component_type: Some(
                        "rerun.components.Text",
                    ),
                }: ListArray
                [
                  StringArray
                [
                  "/time_reference",
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapSchema",
                    ),
                    component: "McapSchema:id",
                    component_type: Some(
                        "rerun.components.SchemaId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  27,
                ],
                ],
                ComponentDescriptor {
                    archetype: Some(
                        "rerun.archetypes.McapChannel",
                    ),
                    component: "McapChannel:id",
                    component_type: Some(
                        "rerun.components.ChannelId",
                    ),
                }: ListArray
                [
                  PrimitiveArray<UInt16>
                [
                  29,
                ],
                ],
            },
        ),
    },
]
