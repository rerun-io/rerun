namespace docs.attributes;

/// Apply to a struct or table object to mark it as unreleased.
///
/// Any external links referencing this datatype will be given a speculative link marker.
/// Speculative links contain a `?speculative-link` query param. Any such links are ignored by linkinator,
/// and we check for their absence as the first step in our release process.
attribute "attr.docs.unreleased";

/// Must be set on all archetypes and components.
///
/// Must have one of the following values:
/// - `experimental`
/// - `unstable`
/// - `stable`
/// - `deprecated`
///
/// ### `experimental`
/// New API that is not yet fully supported, and may change significantly in future versions.
/// Implies everything that `unstable` implies.
///
/// ### `unstable`
/// Used for types that are likely to be removed or changed significantly,
/// and in a way that the data won't be backwards compatible.
///
/// ### `stable`
/// Used for types that are unlikely to be removed or changed significantly.
/// If they are changed, we will make sure that the old data can still be read.
///
/// ### `deprecated`
/// Marks something as deprecated followed by a (mandatory!) migration note.
///
/// If specified on an object (struct/enum/union), it becomes deprecated such
/// that using the object should emit a warning in all target languages.
/// Furthermore, documentation will mention that the object is deprecated and display
/// the specified migration note.
///
/// If set, you MUST also set `attr.docs.deprecated_since` and `attr.rerun.deprecated_notice` to a non-empty string.
attribute "attr.docs.state";

/// Rerun version string (e.g. `0.23.0`) when the object was first deprecated.
///
/// Must be set if `attr.docs.state` is set to `deprecated`.
attribute "attr.docs.deprecated_since";

/// Explain what to do instead.
///
/// Must be set if `attr.docs.state` is set to `deprecated`.
attribute "attr.docs.deprecated_notice";

/// Apply to an archetype to set its category used in the docs.
attribute "attr.docs.category";

/// Apply to an archetype to document which viewer support showing it.
///
/// This is expected to be a comma separated list of viewer types names.
/// If additional information about the circumstances under which a viewer supports the archetype is needed,
/// add it after a colon.
///
/// E.g.:
/// "attr.docs.view_types": "Spatial2DView, Spatial3DView: if logged under a projection"
attribute "attr.docs.view_types";
