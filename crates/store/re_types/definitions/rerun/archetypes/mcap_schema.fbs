namespace rerun.archetypes;


/// A schema definition that describes the structure of messages in an MCAP file.
///
/// Schemas define the data types and field structures used by messages in MCAP channels.
/// They provide the blueprint for interpreting message payloads, specifying field names,
/// types, and organization. Each schema is referenced by channels to indicate how their
/// messages should be decoded and understood.
///
/// See also [archetypes.McapChannel] for channels that reference these schemas,
/// [archetypes.McapMessage] for the messages that conform to these schemas, and the
/// [MCAP specification](https://mcap.dev/) for complete format details.
table McapSchema (
  "attr.docs.category": "Data",
  "attr.rerun.state": "unstable",
  "attr.rust.derive": "PartialEq",
  "attr.docs.unreleased"
) {
  // --- Required ---

  /// Unique identifier for this schema within the MCAP file.
  ///
  /// Schema IDs must be unique within a single MCAP file and are used by channels
  /// to reference the schema that defines their message structure.
  id: rerun.components.ChannelId ("attr.rerun.component_required", order: 1000);

  /// Human-readable name identifying this schema.
  ///
  /// Schema names typically describe the message type or data structure
  /// (e.g., `geometry_msgs/msg/Twist`, `sensor_msgs/msg/Image`, `MyCustomMessage`).
  name: rerun.components.Text ("attr.rerun.component_required", order: 2000);

  /// The schema definition format used to describe the message structure.
  ///
  /// Common schema encodings include:
  /// * `protobuf` - Protocol Buffers schema definition
  /// * `ros1msg` - ROS1 message definition format
  /// * `ros2msg` - ROS2 message definition format
  /// * `jsonschema` - JSON Schema specification
  /// * `flatbuffer` - FlatBuffers schema definition
  encoding: rerun.components.Text ("attr.rerun.component_required", order: 3000);

  /// The schema definition content as binary data.
  ///
  /// This contains the actual schema specification in the format indicated by the
  /// `encoding` field. For text-based schemas (like ROS message definitions or JSON Schema),
  /// this is typically UTF-8 encoded text. For binary schema formats, this contains
  /// the serialized schema data.
  data: rerun.components.Blob ("attr.rerun.component_required", order: 4000);
}
