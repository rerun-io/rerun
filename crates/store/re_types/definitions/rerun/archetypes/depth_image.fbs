namespace rerun.archetypes;


/// A depth image, i.e. as captured by a depth camera.
///
/// Each pixel corresponds to a depth value in units specified by [components.DepthMeter].
///
/// \cpp Since the underlying `rerun::datatypes::TensorData` uses `rerun::Collection` internally,
/// \cpp data can be passed in without a copy from raw pointers or by reference from `std::vector`/`std::array`/c-arrays.
/// \cpp If needed, this "borrow-behavior" can be extended by defining your own `rerun::CollectionAdapter`.
///
/// \example archetypes/depth_image_simple !api title="Simple example" image="https://static.rerun.io/depth_image_simple/9598554977873ace2577bddd79184ac120ceb0b0/1200w.png"
/// \example archetypes/depth_image_3d title="Depth to 3D example" image="https://static.rerun.io/depth_image_3d/924e9d4d6a39d63d4fdece82582855fdaa62d15e/1200w.png"
table DepthImage (
  "attr.rust.derive": "PartialEq",
  "attr.cpp.no_field_ctors",
  "attr.docs.category": "Image & tensor",
  "attr.docs.view_types": "Spatial2DView, Spatial3DView: if logged under a projection"
) {
  // --- Required ---

  /// The raw depth image data.
  data: rerun.components.Blob ("attr.rerun.component_required", order: 1000);

  /// The size of the image
  resolution: rerun.components.Resolution2D ("attr.rerun.component_required", order: 1500);

  /// The data type of the depth image data (U16, F32, â€¦).
  datatype: rerun.components.ChannelDatatype ("attr.rerun.component_required", order: 2000);

  // --- Optional ---

  /// An optional floating point value that specifies how long a meter is in the native depth units.
  ///
  /// For instance: with uint16, perhaps meter=1000 which would mean you have millimeter precision
  /// and a range of up to ~65 meters (2^16 / 1000).
  ///
  /// Note that the only effect on 2D views is the physical depth values shown when hovering the image.
  /// In 3D views on the other hand, this affects where the points of the point cloud are placed.
  meter: rerun.components.DepthMeter ("attr.rerun.component_optional", nullable, order: 3100);

  /// Colormap to use for rendering the depth image.
  ///
  /// If not set, the depth image will be rendered using the Turbo colormap.
  colormap: rerun.components.Colormap ("attr.rerun.component_optional", nullable, order: 3200);

  /// Scale the radii of the points in the point cloud generated from this image.
  ///
  /// A fill ratio of 1.0 (the default) means that each point is as big as to touch the center of its neighbor
  /// if it is at the same depth, leaving no gaps.
  /// A fill ratio of 0.5 means that each point touches the edge of its neighbor if it has the same depth.
  ///
  /// TODO(#6744): This applies only to 3D views!
  point_fill_ratio: rerun.components.FillRatio ("attr.rerun.component_optional", nullable, order: 3300);

  /// An optional floating point value that specifies the 2D drawing order, used only if the depth image is shown as a 2D image.
  ///
  /// Objects with higher values are drawn on top of those with lower values.
  draw_order: rerun.components.DrawOrder ("attr.rerun.component_optional", nullable, order: 3400);
}
