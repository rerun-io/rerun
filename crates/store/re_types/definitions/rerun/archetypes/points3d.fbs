namespace rerun.archetypes;

// ---

/// A 3D point cloud with positions and optional colors, radii, labels, etc.
///
/// \example archetypes/points3d_simple title="Simple 3D points" image="https://static.rerun.io/point3d_simple/32fb3e9b65bea8bd7ffff95ad839f2f8a157a933/1200w.png"
/// \example archetypes/points3d_random !api title="Randomly distributed 3D points with varying color and radius" image="https://static.rerun.io/point3d_random/7e94e1806d2c381943748abbb3bedb68d564de24/1200w.png"
/// \example archetypes/points3d_ui_radius !api title="Log points with radii given in UI points" image="https://static.rerun.io/point3d_ui_radius/e051a65b4317438bcaea8d0eee016ac9460b5336/1200w.png"
/// \example archetypes/points3d_row_updates title="Update a point cloud over time" image="https://static.rerun.io/points3d_row_updates/fba056871b1ec3fc6978ab605d9a63e44ef1f6de/1200w.png"
/// \example archetypes/points3d_column_updates title="Update a point cloud over time, in a single operation" image="https://static.rerun.io/points3d_row_updates/fba056871b1ec3fc6978ab605d9a63e44ef1f6de/1200w.png"
/// \example archetypes/points3d_partial_updates title="Update specific properties of a point cloud over time" image="https://static.rerun.io/points3d_partial_updates/d8bec9c3388d2bd0fe59dff01ab8cde0bdda135e/1200w.png"
table Points3D (
  "attr.rust.derive": "PartialEq",
  "attr.docs.category": "Spatial 3D",
  "attr.docs.view_types": "Spatial3DView, Spatial2DView: if logged above active projection"
) {
  // --- Required ---

  /// All the 3D positions at which the point cloud shows points.
  positions: [rerun.components.Position3D] ("attr.rerun.component_required", order: 1000);

  // --- Recommended ---

  /// Optional radii for the points, effectively turning them into circles.
  radii: [rerun.components.Radius] ("attr.rerun.component_recommended", nullable, order: 2000);

  /// Optional colors for the points.
  ///
  /// \py The colors are interpreted as RGB or RGBA in sRGB gamma-space,
  /// \py As either 0-1 floats or 0-255 integers, with separate alpha.
  colors: [rerun.components.Color] ("attr.rerun.component_recommended", nullable, order: 2100);

  // --- Optional ---

  /// Optional text labels for the points.
  ///
  /// If there's a single label present, it will be placed at the center of the entity.
  /// Otherwise, each instance will have its own label.
  labels: [rerun.components.Text] ("attr.rerun.component_optional", nullable, order: 3000);

  /// Optional choice of whether the text labels should be shown by default.
  show_labels: rerun.components.ShowLabels ("attr.rerun.component_optional", nullable, order: 3100);

  /// Optional class Ids for the points.
  ///
  /// The [components.ClassId] provides colors and labels if not specified explicitly.
  class_ids: [rerun.components.ClassId] ("attr.rerun.component_optional", nullable, order: 3200);

  /// Optional keypoint IDs for the points, identifying them within a class.
  ///
  /// If keypoint IDs are passed in but no [components.ClassId]s were specified, the [components.ClassId] will
  /// default to 0.
  /// This is useful to identify points within a single classification (which is identified
  /// with `class_id`).
  /// E.g. the classification might be 'Person' and the keypoints refer to joints on a
  /// detected skeleton.
  keypoint_ids: [rerun.components.KeypointId] ("attr.rerun.component_optional", nullable, order: 3300);
}
