namespace rerun.archetypes;


/// An image made up of integer [components.ClassId]s.
///
/// Each pixel corresponds to a [components.ClassId] that will be mapped to a color based on annotation context.
///
/// In the case of floating point images, the label will be looked up based on rounding to the nearest
/// integer value.
///
/// See also [archetypes.AnnotationContext] to associate each class with a color and a label.
///
/// \cpp Since the underlying `rerun::datatypes::TensorData` uses `rerun::Collection` internally,
/// \cpp data can be passed in without a copy from raw pointers or by reference from `std::vector`/`std::array`/c-arrays.
/// \cpp If needed, this "borrow-behavior" can be extended by defining your own `rerun::CollectionAdapter`.
///
/// \example archetypes/segmentation_image_simple title="Simple segmentation image" image="https://static.rerun.io/segmentation_image_simple/eb49e0b8cb870c75a69e2a47a2d202e5353115f6/1200w.png"
table SegmentationImage (
  "attr.rust.derive": "PartialEq",
  "attr.cpp.no_field_ctors",
  "attr.docs.category": "Image & tensor",
  "attr.docs.view_types": "Spatial2DView, Spatial3DView: if logged under a projection"
) {
  // --- Required ---

  /// The raw image data.
  data: rerun.components.Blob ("attr.rerun.component_required", order: 1000);

  /// The size of the image.
  resolution: rerun.components.Resolution2D ("attr.rerun.component_required", order: 1500);

  /// The data type of the segmentation image data (U16, U32, â€¦).
  datatype: rerun.components.ChannelDatatype ("attr.rerun.component_required", order: 2000);

  // --- Optional ---

  /// Opacity of the image, useful for layering the segmentation image on top of another image.
  ///
  /// Defaults to 0.5 if there's any other images in the scene, otherwise 1.0.
  opacity: rerun.components.Opacity ("attr.rerun.component_optional", nullable, order: 3000);

  /// An optional floating point value that specifies the 2D drawing order.
  ///
  /// Objects with higher values are drawn on top of those with lower values.
  draw_order: rerun.components.DrawOrder ("attr.rerun.component_optional", nullable, order: 3100);
}
