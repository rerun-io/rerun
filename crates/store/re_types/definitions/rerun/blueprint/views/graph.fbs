namespace rerun.blueprint.views;

/// A graph view to display time-variying, directed or undirected graph visualization.
///
/// \example views/graph title="Use a blueprint to create a graph view." image="https://static.rerun.io/graph_lattice/f9169da9c3f35b7260c9d74cd5be5fe710aec6a8/1200w.png"
table GraphView (
    "attr.rerun.view_identifier": "Graph",
    "attr.docs.unreleased"
) {
    /// Everything within these bounds is guaranteed to be visible.
    ///
    /// Somethings outside of these bounds may also be visible due to letterboxing.
    visual_bounds: rerun.blueprint.archetypes.VisualBounds2D (order: 1000);

    /// The parameters for the force layout simulation.
    force_layout_simulation: rerun.blueprint.archetypes.ForceLayoutSimulation (order: 2000);

    /// Adds a force that pull nodes towards an `x` position.
    force_position_x: rerun.blueprint.archetypes.ForcePositionX (order: 3000);

    /// Adds a force that pull nodes towards an `y` position.
    force_position_y: rerun.blueprint.archetypes.ForcePositionY (order: 3100);

    /// Adds a force that moves the center of mass of all nodes to a given position.
    force_center: rerun.blueprint.archetypes.ForcePositionX (order: 4000);

    /// Adds a force that resolves collisions between graph nodes.
    force_collide_radius: rerun.blueprint.archetypes.ForceCollideRadius (order: 5000);

    /// Adds a force that acts like an electric charge between nodes.
    force_many_body: rerun.blueprint.archetypes.ForceManyBody (order: 6000);

    /// Adds a force that acts like a spring between nodes.
    force_link: rerun.blueprint.archetypes.ForceLink (order: 7000);
}
