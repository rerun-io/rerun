namespace rerun.datatypes;

/// The innermost datatype of an image.
///
/// How individual color channel components are encoded.
enum ChannelDatatype: ubyte {
    /// Invalid value. Won't show up in generated types.
    Invalid = 0,

    // In theory these values are totally arbitrary. There's no great accepted
    // standard for these, but we'll try to keep them somewhat sanely organized.

    // Reserve 1-31 for integer types. This is very likely overkill, but it's
    // nice to have a bit of growing room, and rounding to the nearest power of
    // 2 keeps things clean.
    //
    // Additionally, we always use the low bit to indicate signedness. Conceptually
    // bool fits this pattern if you think of it as a pure sign. This lets us grow
    // across Uint and Int types without knowing how far up we're going to go.

    // Reserve 1 for bool.
    // Reserve 2-5 in case we want to encode U2 or U4 in the future.

    /// 8-bit unsigned integer.
    U8 = 6 (default),

    /// 8-bit signed integer.
    I8 = 7,

    /// 16-bit unsigned integer.
    U16 = 8,

    /// 16-bit signed integer.
    I16 = 9,

    /// 32-bit unsigned integer.
    U32 = 10,

    /// 32-bit signed integer.
    I32 = 11,

    /// 64-bit unsigned integer.
    U64 = 12,

    /// 64-bit signed integer.
    I64 = 13,

    // Reserve 14-31 for wider or non-power-of-2 integer types.

    // Reserve 32 for the possibility of F8.

    /// 16-bit IEEE-754 floating point, also known as `half`.
    F16 = 33,

    /// 32-bit IEEE-754 floating point, also known as `float` or `single`.
    F32 = 34,

    /// 64-bit IEEE-754 floating point, also known as `double`.
    F64 = 35,

    // Reservee at least 36-39 for future floating point types.
    // For exampole, IEEE-754 binary256.

    // This still leaves us plenty of room for encoding common fixed-point types,
    // most likely starting at 64, or other exotic encodings beyond that.
}
