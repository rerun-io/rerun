include "arrow/attributes.fbs";
include "fbs/attributes.fbs";

namespace rerun.datatypes;

// ---

table U8Buffer (order: 100, transparent) {
  data: [ubyte] (order: 100);
}

table U16Buffer(order: 100, transparent) {
  data: [ushort] (order: 100);
}

table U32Buffer(order: 100, transparent) {
  data: [uint] (order: 100);
}

table U64Buffer(order: 100, transparent) {
  data: [ulong] (order: 100);
}

table I8Buffer(order: 100, transparent) {
  data: [byte] (order: 100);
}

table I16Buffer(order: 100, transparent) {
  data: [short] (order: 100);
}

table I32Buffer(order: 100, transparent) {
  data: [int] (order: 100);
}

table I64Buffer(order: 100, transparent) {
  data: [long] (order: 100);
}

table F16Buffer(order: 100, transparent) {
  data: [ushort] (order: 100, "attr.rerun.override_type": "float16");
}

table F32Buffer(order: 100, transparent) {
  data: [float] (order: 100);
}

table F64Buffer(order: 100, transparent) {
  data: [double] (order: 100);
}

/// Raw bytes of a JPEG file.
table JPEGBuffer(order: 100, transparent) {
  data: [ubyte] (order: 100);
}

table NV12Buffer(order: 100, transparent) {
  data: [ubyte] (order: 100);
}

table YUY2Buffer(order: 100, transparent) {
  data: [ubyte] (order: 100);
}


/// The underlying storage for [archetypes.Tensor].
///
/// Tensor elements are stored in a contiguous buffer of a single type.
union TensorBuffer (
  "attr.rust.derive_only": "Clone, PartialEq"
) {
  /// 8bit unsigned integer.
  U8: U8Buffer (transparent),

  /// 16bit unsigned integer.
  U16: U16Buffer (transparent),

  /// 32bit unsigned integer.
  U32: U32Buffer (transparent),

  /// 64bit unsigned integer.
  U64: U64Buffer (transparent),

  /// 8bit signed integer.
  I8: I8Buffer (transparent),

  /// 16bit signed integer.
  I16: I16Buffer (transparent),

  /// 32bit signed integer.
  I32: I32Buffer (transparent),

  /// 64bit signed integer.
  I64: I64Buffer (transparent),

  /// 16bit IEEE-754 floating point, also known as `half`.
  F16: F16Buffer (transparent),

  /// 32bit IEEE-754 floating point, also known as `float` or `single`.
  F32: F32Buffer (transparent),

  /// 64bit IEEE-754 floating point, also known as `double`.
  F64: F64Buffer (transparent),

  /// Raw bytes of a JPEG file.
  JPEG: JPEGBuffer (transparent),

  /// NV12 is a YUV 4:2:0 chroma downsamples format with 8 bits per channel.
  ///
  /// First comes entire image in Y, followed by interleaved lines ordered as U0, V0, U1, V1, etc.
  NV12: NV12Buffer (transparent),

  /// YUY2, also known as YUYV is a YUV 4:2:2 chroma downsampled format with 8 bits per channel.
  ///
  /// The order of the channels is Y0, U0, Y1, V0.
  YUY2: YUY2Buffer (transparent),
}
