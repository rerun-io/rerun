namespace rerun.datatypes;

// ---

/// An N-dimensional array of numbers.
///
/// The number of dimensions and their respective lengths is specified by the `shape` field.
/// The dimensions are ordered from outermost to innermost. For example, in the common case of
/// a 2D RGB Image, the shape would be `[height, width, channel]`.
///
/// These dimensions are combined with an index to look up values from the `buffer` field,
/// which stores a contiguous array of typed values.
///
/// \py It's not currently possible to use `send_columns` with tensors since construction
/// \py of `rerun.components.TensorDataBatch` does not support more than a single element.
/// \py This will be addressed as part of <https://github.com/rerun-io/rerun/issues/6832>.
table TensorData (
  "attr.python.aliases": "npt.ArrayLike",
  "attr.python.array_aliases": "npt.ArrayLike",
  "attr.rust.derive": "PartialEq,"
) {
  /// The shape of the tensor, i.e. the length of each dimension.
  shape: [uint64] (order: 200);

  /// The names of the dimensions of the tensor (optional).
  ///
  /// If set, should be the same length as [datatypes.TensorData.shape].
  /// If it has a different length your names may show up improperly,
  /// and some constructors may produce a warning or even an error.
  ///
  /// Example: `["height", "width", "channel", "batch"]`.
  names: [string] (order: 250, nullable);

  /// The content/data.
  buffer: rerun.datatypes.TensorBuffer (order: 300);
}
