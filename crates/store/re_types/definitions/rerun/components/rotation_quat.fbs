namespace rerun.components;

/// A 3D rotation expressed as a quaternion.
///
/// Note: although the x,y,z,w components of the quaternion will be passed through to the
/// datastore as provided, when used in the Viewer, quaternions will always be normalized.
/// If normalization fails the rotation is treated as an invalid transform.
struct RotationQuat (
  "attr.rust.derive": "Default, Copy, PartialEq, bytemuck::Pod, bytemuck::Zeroable",
  "attr.rust.repr": "transparent"
) {
  quaternion: rerun.datatypes.Quaternion (order: 100);
}

/// A 3D rotation expressed as a quaternion that doesn't propagate in the transform hierarchy.
///
/// Note: although the x,y,z,w components of the quaternion will be passed through to the
/// datastore as provided, when used in the Viewer, quaternions will always be normalized.
/// If normalization fails the rotation is treated as an invalid transform.
struct PoseRotationQuat (
  "attr.rust.derive": "Default, Copy, PartialEq, bytemuck::Pod, bytemuck::Zeroable",
  "attr.rust.repr": "transparent"
) {
  quaternion: rerun.datatypes.Quaternion (order: 100);
}
