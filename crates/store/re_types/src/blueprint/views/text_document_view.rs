// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/views/text_document.fbs".

#![expect(unused_braces)]
#![expect(unused_imports)]
#![expect(unused_parens)]
#![expect(clippy::clone_on_copy)]
#![expect(clippy::cloned_instead_of_copied)]
#![expect(clippy::map_flatten)]
#![expect(clippy::needless_question_mark)]
#![expect(clippy::new_without_default)]
#![expect(clippy::redundant_closure)]
#![expect(clippy::too_many_arguments)]
#![expect(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **View**: A view of a single text document, for use with [`archetypes::TextDocument`][crate::archetypes::TextDocument].
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug)]
pub struct TextDocumentView {}

impl ::re_types_core::View for TextDocumentView {
    #[inline]
    fn identifier() -> ::re_types_core::ViewClassIdentifier {
        "TextDocument".into()
    }
}

impl ::re_byte_size::SizeBytes for TextDocumentView {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        0
    }

    #[inline]
    fn is_pod() -> bool {
        true
    }
}
