// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/views/graph.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **View**: A graph view to display time-variying, directed or undirected graph visualization.
#[derive(Clone, Debug)]
pub struct GraphView {
    /// Everything within these bounds is guaranteed to be visible.
    ///
    /// Somethings outside of these bounds may also be visible due to letterboxing.
    pub visual_bounds: crate::blueprint::archetypes::VisualBounds2D,
}

impl ::re_types_core::SizeBytes for GraphView {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.visual_bounds.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::blueprint::archetypes::VisualBounds2D>::is_pod()
    }
}

impl<T: Into<crate::blueprint::archetypes::VisualBounds2D>> From<T> for GraphView {
    fn from(v: T) -> Self {
        Self {
            visual_bounds: v.into(),
        }
    }
}

impl std::borrow::Borrow<crate::blueprint::archetypes::VisualBounds2D> for GraphView {
    #[inline]
    fn borrow(&self) -> &crate::blueprint::archetypes::VisualBounds2D {
        &self.visual_bounds
    }
}

impl std::ops::Deref for GraphView {
    type Target = crate::blueprint::archetypes::VisualBounds2D;

    #[inline]
    fn deref(&self) -> &crate::blueprint::archetypes::VisualBounds2D {
        &self.visual_bounds
    }
}

impl std::ops::DerefMut for GraphView {
    #[inline]
    fn deref_mut(&mut self) -> &mut crate::blueprint::archetypes::VisualBounds2D {
        &mut self.visual_bounds
    }
}

impl ::re_types_core::View for GraphView {
    #[inline]
    fn identifier() -> ::re_types_core::SpaceViewClassIdentifier {
        "Graph".into()
    }
}
