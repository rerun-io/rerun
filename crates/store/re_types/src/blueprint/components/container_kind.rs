// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/container_kind.fbs".

#![expect(unused_braces)]
#![expect(unused_imports)]
#![expect(unused_parens)]
#![expect(clippy::clone_on_copy)]
#![expect(clippy::cloned_instead_of_copied)]
#![expect(clippy::map_flatten)]
#![expect(clippy::needless_question_mark)]
#![expect(clippy::new_without_default)]
#![expect(clippy::redundant_closure)]
#![expect(clippy::too_many_arguments)]
#![expect(clippy::too_many_lines)]
#![expect(non_camel_case_types)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Component**: The kind of a blueprint container (tabs, grid, â€¦).
#[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, Default)]
#[repr(u8)]
pub enum ContainerKind {
    /// Put children in separate tabs
    Tabs = 1,

    /// Order the children left to right
    Horizontal = 2,

    /// Order the children top to bottom
    Vertical = 3,

    /// Organize children in a grid layout
    #[default]
    Grid = 4,
}

impl ::re_types_core::Component for ContainerKind {
    #[inline]
    fn name() -> ComponentType {
        "rerun.blueprint.components.ContainerKind".into()
    }
}

::re_types_core::macros::impl_into_cow!(ContainerKind);

impl ::re_types_core::Loggable for ContainerKind {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        #![expect(clippy::wildcard_imports)]
        use arrow::datatypes::*;
        DataType::UInt8
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![expect(clippy::wildcard_imports)]
        #![expect(clippy::manual_is_variant_and)]
        use ::re_types_core::{Loggable as _, ResultExt as _, arrow_helpers::as_array_ref};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| *datum as u8);
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_validity: Option<arrow::buffer::NullBuffer> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            as_array_ref(PrimitiveArray::<UInt8Type>::new(
                ScalarBuffer::from(
                    data0
                        .into_iter()
                        .map(|v| v.unwrap_or_default())
                        .collect::<Vec<_>>(),
                ),
                data0_validity,
            ))
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![expect(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _, arrow_zip_validity::ZipValidity};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok(arrow_data
            .as_any()
            .downcast_ref::<UInt8Array>()
            .ok_or_else(|| {
                let expected = Self::arrow_datatype();
                let actual = arrow_data.data_type().clone();
                DeserializationError::datatype_mismatch(expected, actual)
            })
            .with_context("rerun.blueprint.components.ContainerKind#enum")?
            .into_iter()
            .map(|typ| match typ {
                Some(1) => Ok(Some(Self::Tabs)),
                Some(2) => Ok(Some(Self::Horizontal)),
                Some(3) => Ok(Some(Self::Vertical)),
                Some(4) => Ok(Some(Self::Grid)),
                None => Ok(None),
                Some(invalid) => Err(DeserializationError::missing_union_arm(
                    Self::arrow_datatype(),
                    "<invalid>",
                    invalid as _,
                )),
            })
            .collect::<DeserializationResult<Vec<Option<_>>>>()
            .with_context("rerun.blueprint.components.ContainerKind")?)
    }
}

impl std::fmt::Display for ContainerKind {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Tabs => write!(f, "Tabs"),
            Self::Horizontal => write!(f, "Horizontal"),
            Self::Vertical => write!(f, "Vertical"),
            Self::Grid => write!(f, "Grid"),
        }
    }
}

impl ::re_types_core::reflection::Enum for ContainerKind {
    #[inline]
    fn variants() -> &'static [Self] {
        &[Self::Tabs, Self::Horizontal, Self::Vertical, Self::Grid]
    }

    #[inline]
    fn docstring_md(self) -> &'static str {
        match self {
            Self::Tabs => "Put children in separate tabs",
            Self::Horizontal => "Order the children left to right",
            Self::Vertical => "Order the children top to bottom",
            Self::Grid => "Organize children in a grid layout",
        }
    }
}

impl ::re_byte_size::SizeBytes for ContainerKind {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        0
    }

    #[inline]
    fn is_pod() -> bool {
        true
    }
}
