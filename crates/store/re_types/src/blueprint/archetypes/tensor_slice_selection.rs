// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/tensor_slice_selection.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Specifies a 2D slice of a tensor.
#[derive(Clone, Debug, Default)]
pub struct TensorSliceSelection {
    /// Which dimension to map to width.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    pub width: Option<SerializedComponentBatch>,

    /// Which dimension to map to height.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    pub height: Option<SerializedComponentBatch>,

    /// Selected indices for all other dimensions.
    ///
    /// If any of the here listed dimensions is equal to `width` or `height`, it will be ignored.
    pub indices: Option<SerializedComponentBatch>,

    /// Any dimension listed here will have a slider for the index.
    ///
    /// Edits to the sliders will directly manipulate dimensions on the `indices` list.
    /// If any of the here listed dimensions is equal to `width` or `height`, it will be ignored.
    /// If not specified, adds slides for any dimension in `indices`.
    pub slider: Option<SerializedComponentBatch>,
}

impl TensorSliceSelection {
    /// Returns the [`ComponentDescriptor`] for [`Self::width`].
    #[inline]
    pub fn descriptor_width() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.TensorSliceSelection".into()),
            component_name: "rerun.components.TensorWidthDimension".into(),
            archetype_field_name: Some("width".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::height`].
    #[inline]
    pub fn descriptor_height() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.TensorSliceSelection".into()),
            component_name: "rerun.components.TensorHeightDimension".into(),
            archetype_field_name: Some("height".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::indices`].
    #[inline]
    pub fn descriptor_indices() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.TensorSliceSelection".into()),
            component_name: "rerun.components.TensorDimensionIndexSelection".into(),
            archetype_field_name: Some("indices".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::slider`].
    #[inline]
    pub fn descriptor_slider() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.TensorSliceSelection".into()),
            component_name: "rerun.blueprint.components.TensorDimensionIndexSlider".into(),
            archetype_field_name: Some("slider".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.TensorSliceSelection".into()),
            component_name: "rerun.blueprint.components.TensorSliceSelectionIndicator".into(),
            archetype_field_name: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [TensorSliceSelection::descriptor_indicator()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 4usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            TensorSliceSelection::descriptor_width(),
            TensorSliceSelection::descriptor_height(),
            TensorSliceSelection::descriptor_indices(),
            TensorSliceSelection::descriptor_slider(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 5usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            TensorSliceSelection::descriptor_indicator(),
            TensorSliceSelection::descriptor_width(),
            TensorSliceSelection::descriptor_height(),
            TensorSliceSelection::descriptor_indices(),
            TensorSliceSelection::descriptor_slider(),
        ]
    });

impl TensorSliceSelection {
    /// The total number of components in the archetype: 0 required, 1 recommended, 4 optional
    pub const NUM_COMPONENTS: usize = 5usize;
}

/// Indicator component for the [`TensorSliceSelection`] [`::re_types_core::Archetype`]
pub type TensorSliceSelectionIndicator =
    ::re_types_core::GenericIndicatorComponent<TensorSliceSelection>;

impl ::re_types_core::Archetype for TensorSliceSelection {
    type Indicator = TensorSliceSelectionIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.TensorSliceSelection".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Tensor slice selection"
    }

    #[inline]
    fn indicator() -> SerializedComponentBatch {
        #[allow(clippy::unwrap_used)]
        TensorSliceSelectionIndicator::DEFAULT.serialized().unwrap()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let width = arrays_by_descr
            .get(&Self::descriptor_width())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_width()));
        let height = arrays_by_descr
            .get(&Self::descriptor_height())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_height()));
        let indices = arrays_by_descr
            .get(&Self::descriptor_indices())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_indices()));
        let slider = arrays_by_descr
            .get(&Self::descriptor_slider())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_slider()));
        Ok(Self {
            width,
            height,
            indices,
            slider,
        })
    }
}

impl ::re_types_core::AsComponents for TensorSliceSelection {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.width.clone(),
            self.height.clone(),
            self.indices.clone(),
            self.slider.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for TensorSliceSelection {}

impl TensorSliceSelection {
    /// Create a new `TensorSliceSelection`.
    #[inline]
    pub fn new() -> Self {
        Self {
            width: None,
            height: None,
            indices: None,
            slider: None,
        }
    }

    /// Update only some specific fields of a `TensorSliceSelection`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `TensorSliceSelection`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            width: Some(SerializedComponentBatch::new(
                crate::components::TensorWidthDimension::arrow_empty(),
                Self::descriptor_width(),
            )),
            height: Some(SerializedComponentBatch::new(
                crate::components::TensorHeightDimension::arrow_empty(),
                Self::descriptor_height(),
            )),
            indices: Some(SerializedComponentBatch::new(
                crate::components::TensorDimensionIndexSelection::arrow_empty(),
                Self::descriptor_indices(),
            )),
            slider: Some(SerializedComponentBatch::new(
                crate::blueprint::components::TensorDimensionIndexSlider::arrow_empty(),
                Self::descriptor_slider(),
            )),
        }
    }

    /// Which dimension to map to width.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    #[inline]
    pub fn with_width(mut self, width: impl Into<crate::components::TensorWidthDimension>) -> Self {
        self.width = try_serialize_field(Self::descriptor_width(), [width]);
        self
    }

    /// Which dimension to map to height.
    ///
    /// If not specified, the height will be determined automatically based on the name and index of the dimension.
    #[inline]
    pub fn with_height(
        mut self,
        height: impl Into<crate::components::TensorHeightDimension>,
    ) -> Self {
        self.height = try_serialize_field(Self::descriptor_height(), [height]);
        self
    }

    /// Selected indices for all other dimensions.
    ///
    /// If any of the here listed dimensions is equal to `width` or `height`, it will be ignored.
    #[inline]
    pub fn with_indices(
        mut self,
        indices: impl IntoIterator<Item = impl Into<crate::components::TensorDimensionIndexSelection>>,
    ) -> Self {
        self.indices = try_serialize_field(Self::descriptor_indices(), indices);
        self
    }

    /// Any dimension listed here will have a slider for the index.
    ///
    /// Edits to the sliders will directly manipulate dimensions on the `indices` list.
    /// If any of the here listed dimensions is equal to `width` or `height`, it will be ignored.
    /// If not specified, adds slides for any dimension in `indices`.
    #[inline]
    pub fn with_slider(
        mut self,
        slider: impl IntoIterator<
            Item = impl Into<crate::blueprint::components::TensorDimensionIndexSlider>,
        >,
    ) -> Self {
        self.slider = try_serialize_field(Self::descriptor_slider(), slider);
        self
    }
}

impl ::re_byte_size::SizeBytes for TensorSliceSelection {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.width.heap_size_bytes()
            + self.height.heap_size_bytes()
            + self.indices.heap_size_bytes()
            + self.slider.heap_size_bytes()
    }
}
