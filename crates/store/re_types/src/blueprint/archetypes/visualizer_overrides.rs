// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/visualizer_overrides.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Override the visualizers for an entity.
///
/// This archetype is a stop-gap mechanism based on the current implementation details
/// of the visualizer system. It is not intended to be a long-term solution, but provides
/// enough utility to be useful in the short term.
///
/// **NOTE**: Rerun `v0.24` changed the behavior of [`archetypes::VisualizerOverrides`][crate::blueprint::archetypes::VisualizerOverrides], so that currently they only
/// work with time series views. We plan to bring this feature for all views in future versions.
///
/// This can only be used as part of blueprints. It will have no effect if used
/// in a regular entity.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, Default)]
pub struct VisualizerOverrides {
    /// Names of the visualizers that should be active.
    pub ranges: Option<SerializedComponentBatch>,
}

impl VisualizerOverrides {
    /// Returns the [`ComponentDescriptor`] for [`Self::ranges`].
    ///
    /// The corresponding component is [`crate::blueprint::components::VisualizerOverride`].
    #[inline]
    pub fn descriptor_ranges() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.VisualizerOverrides".into()),
            component: "VisualizerOverrides:ranges".into(),
            component_type: Some("rerun.blueprint.components.VisualizerOverride".into()),
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [VisualizerOverrides::descriptor_ranges()]);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [VisualizerOverrides::descriptor_ranges()]);

impl VisualizerOverrides {
    /// The total number of components in the archetype: 1 required, 0 recommended, 0 optional
    pub const NUM_COMPONENTS: usize = 1usize;
}

impl ::re_types_core::Archetype for VisualizerOverrides {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.VisualizerOverrides".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Visualizer overrides"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let ranges = arrays_by_descr
            .get(&Self::descriptor_ranges())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_ranges()));
        Ok(Self { ranges })
    }
}

impl ::re_types_core::AsComponents for VisualizerOverrides {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        std::iter::once(self.ranges.clone()).flatten().collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for VisualizerOverrides {}

impl VisualizerOverrides {
    /// Create a new `VisualizerOverrides`.
    #[inline]
    pub fn new(
        ranges: impl IntoIterator<Item = impl Into<crate::blueprint::components::VisualizerOverride>>,
    ) -> Self {
        Self {
            ranges: try_serialize_field(Self::descriptor_ranges(), ranges),
        }
    }

    /// Update only some specific fields of a `VisualizerOverrides`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `VisualizerOverrides`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            ranges: Some(SerializedComponentBatch::new(
                crate::blueprint::components::VisualizerOverride::arrow_empty(),
                Self::descriptor_ranges(),
            )),
        }
    }

    /// Names of the visualizers that should be active.
    #[inline]
    pub fn with_ranges(
        mut self,
        ranges: impl IntoIterator<Item = impl Into<crate::blueprint::components::VisualizerOverride>>,
    ) -> Self {
        self.ranges = try_serialize_field(Self::descriptor_ranges(), ranges);
        self
    }
}

impl ::re_byte_size::SizeBytes for VisualizerOverrides {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.ranges.heap_size_bytes()
    }
}
