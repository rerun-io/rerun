// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/eye_controls3d.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: The controls for the 3D eye in a spatial 3D view.
///
/// This configures the camera through which the 3D scene is viewed.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, Default)]
pub struct EyeControls3D {
    /// The cameras current position.
    pub position: Option<SerializedComponentBatch>,

    /// The position the camera is currently looking at.
    ///
    /// If this is an orbital camera, this also is the center it orbits around.
    pub look_target: Option<SerializedComponentBatch>,

    /// What speed, if any, the camera should spin around the eye-up axis when in orbit mode.
    pub spin_speed: Option<SerializedComponentBatch>,

    /// The up-axis of the eye itself, in world-space.
    ///
    /// Initially, the up-axis of the eye will be the same as the up-axis of the scene (or +Z if
    /// the scene has no up axis defined).
    ///
    /// A zero vector is valid and will result in 3 degrees of freedom.
    pub eye_up: Option<SerializedComponentBatch>,

    /// The kind of the eye for the spatial 3D view.
    ///
    /// This controls how the eye movement behaves when the user interact with the view.
    /// Defaults to orbital.
    pub kind: Option<SerializedComponentBatch>,

    /// Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene).
    ///
    /// The default depends on the control kind.
    /// For orbit cameras it is derived from the distance to the orbit center.
    /// For first person cameras it is derived from the scene size.
    pub speed: Option<SerializedComponentBatch>,

    /// Currently tracked entity.
    ///
    /// If this is a camera, it takes over the camera pose, otherwise follows the entity.
    pub tracking_entity: Option<SerializedComponentBatch>,
}

impl EyeControls3D {
    /// Returns the [`ComponentDescriptor`] for [`Self::position`].
    ///
    /// The corresponding component is [`crate::components::Position3D`].
    #[inline]
    pub fn descriptor_position() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:position".into(),
            component_type: Some("rerun.components.Position3D".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::look_target`].
    ///
    /// The corresponding component is [`crate::components::Position3D`].
    #[inline]
    pub fn descriptor_look_target() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:look_target".into(),
            component_type: Some("rerun.components.Position3D".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::spin_speed`].
    ///
    /// The corresponding component is [`crate::blueprint::components::AngularSpeed`].
    #[inline]
    pub fn descriptor_spin_speed() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:spin_speed".into(),
            component_type: Some("rerun.blueprint.components.AngularSpeed".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::eye_up`].
    ///
    /// The corresponding component is [`crate::components::Vector3D`].
    #[inline]
    pub fn descriptor_eye_up() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:eye_up".into(),
            component_type: Some("rerun.components.Vector3D".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::kind`].
    ///
    /// The corresponding component is [`crate::blueprint::components::Eye3DKind`].
    #[inline]
    pub fn descriptor_kind() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:kind".into(),
            component_type: Some("rerun.blueprint.components.Eye3DKind".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::speed`].
    ///
    /// The corresponding component is [`crate::components::LinearSpeed`].
    #[inline]
    pub fn descriptor_speed() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:speed".into(),
            component_type: Some("rerun.components.LinearSpeed".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::tracking_entity`].
    ///
    /// The corresponding component is [`crate::components::EntityPath`].
    #[inline]
    pub fn descriptor_tracking_entity() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.EyeControls3D".into()),
            component: "EyeControls3D:tracking_entity".into(),
            component_type: Some("rerun.components.EntityPath".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 7usize]> =
    std::sync::LazyLock::new(|| {
        [
            EyeControls3D::descriptor_position(),
            EyeControls3D::descriptor_look_target(),
            EyeControls3D::descriptor_spin_speed(),
            EyeControls3D::descriptor_eye_up(),
            EyeControls3D::descriptor_kind(),
            EyeControls3D::descriptor_speed(),
            EyeControls3D::descriptor_tracking_entity(),
        ]
    });

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 7usize]> =
    std::sync::LazyLock::new(|| {
        [
            EyeControls3D::descriptor_position(),
            EyeControls3D::descriptor_look_target(),
            EyeControls3D::descriptor_spin_speed(),
            EyeControls3D::descriptor_eye_up(),
            EyeControls3D::descriptor_kind(),
            EyeControls3D::descriptor_speed(),
            EyeControls3D::descriptor_tracking_entity(),
        ]
    });

impl EyeControls3D {
    /// The total number of components in the archetype: 0 required, 0 recommended, 7 optional
    pub const NUM_COMPONENTS: usize = 7usize;
}

impl ::re_types_core::Archetype for EyeControls3D {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.EyeControls3D".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Eye controls 3D"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let position = arrays_by_descr
            .get(&Self::descriptor_position())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_position()));
        let look_target = arrays_by_descr
            .get(&Self::descriptor_look_target())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_look_target())
            });
        let spin_speed = arrays_by_descr
            .get(&Self::descriptor_spin_speed())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_spin_speed())
            });
        let eye_up = arrays_by_descr
            .get(&Self::descriptor_eye_up())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_eye_up()));
        let kind = arrays_by_descr
            .get(&Self::descriptor_kind())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_kind()));
        let speed = arrays_by_descr
            .get(&Self::descriptor_speed())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_speed()));
        let tracking_entity = arrays_by_descr
            .get(&Self::descriptor_tracking_entity())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_tracking_entity())
            });
        Ok(Self {
            position,
            look_target,
            spin_speed,
            eye_up,
            kind,
            speed,
            tracking_entity,
        })
    }
}

impl ::re_types_core::AsComponents for EyeControls3D {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            self.position.clone(),
            self.look_target.clone(),
            self.spin_speed.clone(),
            self.eye_up.clone(),
            self.kind.clone(),
            self.speed.clone(),
            self.tracking_entity.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for EyeControls3D {}

impl EyeControls3D {
    /// Create a new `EyeControls3D`.
    #[inline]
    pub fn new() -> Self {
        Self {
            position: None,
            look_target: None,
            spin_speed: None,
            eye_up: None,
            kind: None,
            speed: None,
            tracking_entity: None,
        }
    }

    /// Update only some specific fields of a `EyeControls3D`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `EyeControls3D`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            position: Some(SerializedComponentBatch::new(
                crate::components::Position3D::arrow_empty(),
                Self::descriptor_position(),
            )),
            look_target: Some(SerializedComponentBatch::new(
                crate::components::Position3D::arrow_empty(),
                Self::descriptor_look_target(),
            )),
            spin_speed: Some(SerializedComponentBatch::new(
                crate::blueprint::components::AngularSpeed::arrow_empty(),
                Self::descriptor_spin_speed(),
            )),
            eye_up: Some(SerializedComponentBatch::new(
                crate::components::Vector3D::arrow_empty(),
                Self::descriptor_eye_up(),
            )),
            kind: Some(SerializedComponentBatch::new(
                crate::blueprint::components::Eye3DKind::arrow_empty(),
                Self::descriptor_kind(),
            )),
            speed: Some(SerializedComponentBatch::new(
                crate::components::LinearSpeed::arrow_empty(),
                Self::descriptor_speed(),
            )),
            tracking_entity: Some(SerializedComponentBatch::new(
                crate::components::EntityPath::arrow_empty(),
                Self::descriptor_tracking_entity(),
            )),
        }
    }

    /// The cameras current position.
    #[inline]
    pub fn with_position(mut self, position: impl Into<crate::components::Position3D>) -> Self {
        self.position = try_serialize_field(Self::descriptor_position(), [position]);
        self
    }

    /// The position the camera is currently looking at.
    ///
    /// If this is an orbital camera, this also is the center it orbits around.
    #[inline]
    pub fn with_look_target(
        mut self,
        look_target: impl Into<crate::components::Position3D>,
    ) -> Self {
        self.look_target = try_serialize_field(Self::descriptor_look_target(), [look_target]);
        self
    }

    /// What speed, if any, the camera should spin around the eye-up axis when in orbit mode.
    #[inline]
    pub fn with_spin_speed(
        mut self,
        spin_speed: impl Into<crate::blueprint::components::AngularSpeed>,
    ) -> Self {
        self.spin_speed = try_serialize_field(Self::descriptor_spin_speed(), [spin_speed]);
        self
    }

    /// The up-axis of the eye itself, in world-space.
    ///
    /// Initially, the up-axis of the eye will be the same as the up-axis of the scene (or +Z if
    /// the scene has no up axis defined).
    ///
    /// A zero vector is valid and will result in 3 degrees of freedom.
    #[inline]
    pub fn with_eye_up(mut self, eye_up: impl Into<crate::components::Vector3D>) -> Self {
        self.eye_up = try_serialize_field(Self::descriptor_eye_up(), [eye_up]);
        self
    }

    /// The kind of the eye for the spatial 3D view.
    ///
    /// This controls how the eye movement behaves when the user interact with the view.
    /// Defaults to orbital.
    #[inline]
    pub fn with_kind(mut self, kind: impl Into<crate::blueprint::components::Eye3DKind>) -> Self {
        self.kind = try_serialize_field(Self::descriptor_kind(), [kind]);
        self
    }

    /// Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene).
    ///
    /// The default depends on the control kind.
    /// For orbit cameras it is derived from the distance to the orbit center.
    /// For first person cameras it is derived from the scene size.
    #[inline]
    pub fn with_speed(mut self, speed: impl Into<crate::components::LinearSpeed>) -> Self {
        self.speed = try_serialize_field(Self::descriptor_speed(), [speed]);
        self
    }

    /// Currently tracked entity.
    ///
    /// If this is a camera, it takes over the camera pose, otherwise follows the entity.
    #[inline]
    pub fn with_tracking_entity(
        mut self,
        tracking_entity: impl Into<crate::components::EntityPath>,
    ) -> Self {
        self.tracking_entity =
            try_serialize_field(Self::descriptor_tracking_entity(), [tracking_entity]);
        self
    }
}

impl ::re_byte_size::SizeBytes for EyeControls3D {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.position.heap_size_bytes()
            + self.look_target.heap_size_bytes()
            + self.spin_speed.heap_size_bytes()
            + self.eye_up.heap_size_bytes()
            + self.kind.heap_size_bytes()
            + self.speed.heap_size_bytes()
            + self.tracking_entity.heap_size_bytes()
    }
}
