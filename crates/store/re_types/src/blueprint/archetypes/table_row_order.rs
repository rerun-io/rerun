// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/range_table_settings.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Configuration for the sorting of the rows of a time range table.
#[derive(Clone, Debug, Copy)]
pub struct TableRowOrder {
    /// The type of the background.
    pub group_by: Option<crate::blueprint::components::TableGroupBy>,

    /// Color used for the `SolidColor` background type.
    pub sort_order: Option<crate::blueprint::components::SortOrder>,
}

impl ::re_types_core::SizeBytes for TableRowOrder {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.group_by.heap_size_bytes() + self.sort_order.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Option<crate::blueprint::components::TableGroupBy>>::is_pod()
            && <Option<crate::blueprint::components::SortOrder>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.blueprint.components.TableRowOrderIndicator".into()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.TableGroupBy".into(),
            "rerun.blueprint.components.SortOrder".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 3usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.TableRowOrderIndicator".into(),
            "rerun.blueprint.components.TableGroupBy".into(),
            "rerun.blueprint.components.SortOrder".into(),
        ]
    });

impl TableRowOrder {
    /// The total number of components in the archetype: 0 required, 1 recommended, 2 optional
    pub const NUM_COMPONENTS: usize = 3usize;
}

/// Indicator component for the [`TableRowOrder`] [`::re_types_core::Archetype`]
pub type TableRowOrderIndicator = ::re_types_core::GenericIndicatorComponent<TableRowOrder>;

impl ::re_types_core::Archetype for TableRowOrder {
    type Indicator = TableRowOrderIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.TableRowOrder".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Table row order"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: TableRowOrderIndicator = TableRowOrderIndicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let group_by =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.TableGroupBy") {
                <crate::blueprint::components::TableGroupBy>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.TableRowOrder#group_by")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        let sort_order =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.SortOrder") {
                <crate::blueprint::components::SortOrder>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.TableRowOrder#sort_order")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        Ok(Self {
            group_by,
            sort_order,
        })
    }
}

impl ::re_types_core::AsComponents for TableRowOrder {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.group_by
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.sort_order
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for TableRowOrder {}

impl TableRowOrder {
    /// Create a new `TableRowOrder`.
    #[inline]
    pub fn new() -> Self {
        Self {
            group_by: None,
            sort_order: None,
        }
    }

    /// The type of the background.
    #[inline]
    pub fn with_group_by(
        mut self,
        group_by: impl Into<crate::blueprint::components::TableGroupBy>,
    ) -> Self {
        self.group_by = Some(group_by.into());
        self
    }

    /// Color used for the `SolidColor` background type.
    #[inline]
    pub fn with_sort_order(
        mut self,
        sort_order: impl Into<crate::blueprint::components::SortOrder>,
    ) -> Self {
        self.sort_order = Some(sort_order.into());
        self
    }
}
