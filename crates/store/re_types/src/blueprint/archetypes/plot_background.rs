// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/background.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Configuration of a background in a plot view.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, Default)]
pub struct PlotBackground {
    /// Color used for the background.
    pub color: Option<SerializedComponentBatch>,

    /// Should the grid be drawn?
    pub show_grid: Option<SerializedComponentBatch>,
}

impl PlotBackground {
    /// Returns the [`ComponentDescriptor`] for [`Self::color`].
    ///
    /// The corresponding component is [`crate::components::Color`].
    #[inline]
    pub fn descriptor_color() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.PlotBackground".into()),
            component: "PlotBackground:color".into(),
            component_type: Some("rerun.components.Color".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::show_grid`].
    ///
    /// The corresponding component is [`crate::blueprint::components::Enabled`].
    #[inline]
    pub fn descriptor_show_grid() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.blueprint.archetypes.PlotBackground".into()),
            component: "PlotBackground:show_grid".into(),
            component_type: Some("rerun.blueprint.components.Enabled".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 2usize]> =
    std::sync::LazyLock::new(|| {
        [
            PlotBackground::descriptor_color(),
            PlotBackground::descriptor_show_grid(),
        ]
    });

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 2usize]> =
    std::sync::LazyLock::new(|| {
        [
            PlotBackground::descriptor_color(),
            PlotBackground::descriptor_show_grid(),
        ]
    });

impl PlotBackground {
    /// The total number of components in the archetype: 0 required, 0 recommended, 2 optional
    pub const NUM_COMPONENTS: usize = 2usize;
}

impl ::re_types_core::Archetype for PlotBackground {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.PlotBackground".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Plot background"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let color = arrays_by_descr
            .get(&Self::descriptor_color())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_color()));
        let show_grid = arrays_by_descr
            .get(&Self::descriptor_show_grid())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_show_grid())
            });
        Ok(Self { color, show_grid })
    }
}

impl ::re_types_core::AsComponents for PlotBackground {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [self.color.clone(), self.show_grid.clone()]
            .into_iter()
            .flatten()
            .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for PlotBackground {}

impl PlotBackground {
    /// Create a new `PlotBackground`.
    #[inline]
    pub fn new() -> Self {
        Self {
            color: None,
            show_grid: None,
        }
    }

    /// Update only some specific fields of a `PlotBackground`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `PlotBackground`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            color: Some(SerializedComponentBatch::new(
                crate::components::Color::arrow_empty(),
                Self::descriptor_color(),
            )),
            show_grid: Some(SerializedComponentBatch::new(
                crate::blueprint::components::Enabled::arrow_empty(),
                Self::descriptor_show_grid(),
            )),
        }
    }

    /// Color used for the background.
    #[inline]
    pub fn with_color(mut self, color: impl Into<crate::components::Color>) -> Self {
        self.color = try_serialize_field(Self::descriptor_color(), [color]);
        self
    }

    /// Should the grid be drawn?
    #[inline]
    pub fn with_show_grid(
        mut self,
        show_grid: impl Into<crate::blueprint::components::Enabled>,
    ) -> Self {
        self.show_grid = try_serialize_field(Self::descriptor_show_grid(), [show_grid]);
        self
    }
}

impl ::re_byte_size::SizeBytes for PlotBackground {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.color.heap_size_bytes() + self.show_grid.heap_size_bytes()
    }
}
