// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/dataframe_query.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: The query for the dataframe view.
#[derive(Clone, Debug)]
pub struct DataframeQueryV2 {
    /// The timeline for this query.
    ///
    /// If unset, the time panel's timeline is used and stored.
    pub timeline: Option<crate::blueprint::components::TimelineName>,

    /// If set, a range filter is applied.
    ///
    /// Note: will be unset as soon as `timeline` is changed.
    pub range_filter: Option<crate::blueprint::components::RangeFilter>,

    /// Whether the filter by event feature is active.
    pub filter_by_event_active: Option<crate::blueprint::components::FilterByEventActive>,

    /// The column used when the filter by event feature is used.
    ///
    /// Note: only valid if the entity/component exists on `timeline`.
    pub filter_by_event_column: Option<crate::blueprint::components::ComponentColumnSelector>,

    /// Should empty cells be filled with latest-at queries?
    pub apply_latest_at: Option<crate::blueprint::components::ApplyLatestAt>,

    /// Selected columns. If unset, all columns are selected.
    pub selected_columns: Option<crate::blueprint::components::SelectedColumns>,
}

impl ::re_types_core::SizeBytes for DataframeQueryV2 {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.timeline.heap_size_bytes()
            + self.range_filter.heap_size_bytes()
            + self.filter_by_event_active.heap_size_bytes()
            + self.filter_by_event_column.heap_size_bytes()
            + self.apply_latest_at.heap_size_bytes()
            + self.selected_columns.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Option<crate::blueprint::components::TimelineName>>::is_pod()
            && <Option<crate::blueprint::components::RangeFilter>>::is_pod()
            && <Option<crate::blueprint::components::FilterByEventActive>>::is_pod()
            && <Option<crate::blueprint::components::ComponentColumnSelector>>::is_pod()
            && <Option<crate::blueprint::components::ApplyLatestAt>>::is_pod()
            && <Option<crate::blueprint::components::SelectedColumns>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.blueprint.components.DataframeQueryV2Indicator".into()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 6usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.TimelineName".into(),
            "rerun.blueprint.components.RangeFilter".into(),
            "rerun.blueprint.components.FilterByEventActive".into(),
            "rerun.blueprint.components.ComponentColumnSelector".into(),
            "rerun.blueprint.components.ApplyLatestAt".into(),
            "rerun.blueprint.components.SelectedColumns".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 7usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.DataframeQueryV2Indicator".into(),
            "rerun.blueprint.components.TimelineName".into(),
            "rerun.blueprint.components.RangeFilter".into(),
            "rerun.blueprint.components.FilterByEventActive".into(),
            "rerun.blueprint.components.ComponentColumnSelector".into(),
            "rerun.blueprint.components.ApplyLatestAt".into(),
            "rerun.blueprint.components.SelectedColumns".into(),
        ]
    });

impl DataframeQueryV2 {
    /// The total number of components in the archetype: 0 required, 1 recommended, 6 optional
    pub const NUM_COMPONENTS: usize = 7usize;
}

/// Indicator component for the [`DataframeQueryV2`] [`::re_types_core::Archetype`]
pub type DataframeQueryV2Indicator = ::re_types_core::GenericIndicatorComponent<DataframeQueryV2>;

impl ::re_types_core::Archetype for DataframeQueryV2 {
    type Indicator = DataframeQueryV2Indicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.DataframeQueryV2".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Dataframe query v2"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: DataframeQueryV2Indicator = DataframeQueryV2Indicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let timeline =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.TimelineName") {
                <crate::blueprint::components::TimelineName>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.DataframeQueryV2#timeline")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        let range_filter =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.RangeFilter") {
                <crate::blueprint::components::RangeFilter>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.DataframeQueryV2#range_filter")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        let filter_by_event_active = if let Some(array) =
            arrays_by_name.get("rerun.blueprint.components.FilterByEventActive")
        {
            <crate::blueprint::components::FilterByEventActive>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.DataframeQueryV2#filter_by_event_active")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let filter_by_event_column = if let Some(array) =
            arrays_by_name.get("rerun.blueprint.components.ComponentColumnSelector")
        {
            <crate::blueprint::components::ComponentColumnSelector>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.DataframeQueryV2#filter_by_event_column")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let apply_latest_at =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.ApplyLatestAt") {
                <crate::blueprint::components::ApplyLatestAt>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.DataframeQueryV2#apply_latest_at")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        let selected_columns =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.SelectedColumns") {
                <crate::blueprint::components::SelectedColumns>::from_arrow_opt(&**array)
                    .with_context("rerun.blueprint.archetypes.DataframeQueryV2#selected_columns")?
                    .into_iter()
                    .next()
                    .flatten()
            } else {
                None
            };
        Ok(Self {
            timeline,
            range_filter,
            filter_by_event_active,
            filter_by_event_column,
            apply_latest_at,
            selected_columns,
        })
    }
}

impl ::re_types_core::AsComponents for DataframeQueryV2 {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.timeline
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.range_filter
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.filter_by_event_active
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.filter_by_event_column
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.apply_latest_at
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.selected_columns
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for DataframeQueryV2 {}

impl DataframeQueryV2 {
    /// Create a new `DataframeQueryV2`.
    #[inline]
    pub fn new() -> Self {
        Self {
            timeline: None,
            range_filter: None,
            filter_by_event_active: None,
            filter_by_event_column: None,
            apply_latest_at: None,
            selected_columns: None,
        }
    }

    /// The timeline for this query.
    ///
    /// If unset, the time panel's timeline is used and stored.
    #[inline]
    pub fn with_timeline(
        mut self,
        timeline: impl Into<crate::blueprint::components::TimelineName>,
    ) -> Self {
        self.timeline = Some(timeline.into());
        self
    }

    /// If set, a range filter is applied.
    ///
    /// Note: will be unset as soon as `timeline` is changed.
    #[inline]
    pub fn with_range_filter(
        mut self,
        range_filter: impl Into<crate::blueprint::components::RangeFilter>,
    ) -> Self {
        self.range_filter = Some(range_filter.into());
        self
    }

    /// Whether the filter by event feature is active.
    #[inline]
    pub fn with_filter_by_event_active(
        mut self,
        filter_by_event_active: impl Into<crate::blueprint::components::FilterByEventActive>,
    ) -> Self {
        self.filter_by_event_active = Some(filter_by_event_active.into());
        self
    }

    /// The column used when the filter by event feature is used.
    ///
    /// Note: only valid if the entity/component exists on `timeline`.
    #[inline]
    pub fn with_filter_by_event_column(
        mut self,
        filter_by_event_column: impl Into<crate::blueprint::components::ComponentColumnSelector>,
    ) -> Self {
        self.filter_by_event_column = Some(filter_by_event_column.into());
        self
    }

    /// Should empty cells be filled with latest-at queries?
    #[inline]
    pub fn with_apply_latest_at(
        mut self,
        apply_latest_at: impl Into<crate::blueprint::components::ApplyLatestAt>,
    ) -> Self {
        self.apply_latest_at = Some(apply_latest_at.into());
        self
    }

    /// Selected columns. If unset, all columns are selected.
    #[inline]
    pub fn with_selected_columns(
        mut self,
        selected_columns: impl Into<crate::blueprint::components::SelectedColumns>,
    ) -> Self {
        self.selected_columns = Some(selected_columns.into());
        self
    }
}
