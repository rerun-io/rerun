// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/dataframe_visible_columns.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Which columns should be displayed by the dataframe view.
#[derive(Clone, Debug)]
pub struct DataframeVisibleColumns {
    /// Are all column selected, or only those specified by the user?
    pub selection_mode: Option<crate::blueprint::components::ColumnSelectionMode>,

    /// The time columns to include (if mode is set to "Selected").
    pub time_columns: Option<Vec<crate::blueprint::components::TimelineName>>,

    /// The component columns to include (if mode is set to "Selected").
    pub component_columns: Option<Vec<crate::blueprint::components::ComponentColumnSelector>>,
}

impl ::re_types_core::SizeBytes for DataframeVisibleColumns {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.selection_mode.heap_size_bytes()
            + self.time_columns.heap_size_bytes()
            + self.component_columns.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Option<crate::blueprint::components::ColumnSelectionMode>>::is_pod()
            && <Option<Vec<crate::blueprint::components::TimelineName>>>::is_pod()
            && <Option<Vec<crate::blueprint::components::ComponentColumnSelector>>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| {
        ["rerun.blueprint.components.DataframeVisibleColumnsIndicator".into()]
    });

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 3usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.ColumnSelectionMode".into(),
            "rerun.blueprint.components.TimelineName".into(),
            "rerun.blueprint.components.ComponentColumnSelector".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 4usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.blueprint.components.DataframeVisibleColumnsIndicator".into(),
            "rerun.blueprint.components.ColumnSelectionMode".into(),
            "rerun.blueprint.components.TimelineName".into(),
            "rerun.blueprint.components.ComponentColumnSelector".into(),
        ]
    });

impl DataframeVisibleColumns {
    /// The total number of components in the archetype: 0 required, 1 recommended, 3 optional
    pub const NUM_COMPONENTS: usize = 4usize;
}

/// Indicator component for the [`DataframeVisibleColumns`] [`::re_types_core::Archetype`]
pub type DataframeVisibleColumnsIndicator =
    ::re_types_core::GenericIndicatorComponent<DataframeVisibleColumns>;

impl ::re_types_core::Archetype for DataframeVisibleColumns {
    type Indicator = DataframeVisibleColumnsIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.DataframeVisibleColumns".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Dataframe visible columns"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: DataframeVisibleColumnsIndicator =
            DataframeVisibleColumnsIndicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let selection_mode = if let Some(array) =
            arrays_by_name.get("rerun.blueprint.components.ColumnSelectionMode")
        {
            <crate::blueprint::components::ColumnSelectionMode>::from_arrow_opt(&**array)
                .with_context("rerun.blueprint.archetypes.DataframeVisibleColumns#selection_mode")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let time_columns =
            if let Some(array) = arrays_by_name.get("rerun.blueprint.components.TimelineName") {
                Some({
                    <crate::blueprint::components::TimelineName>::from_arrow_opt(&**array)
                        .with_context(
                            "rerun.blueprint.archetypes.DataframeVisibleColumns#time_columns",
                        )?
                        .into_iter()
                        .map(|v| v.ok_or_else(DeserializationError::missing_data))
                        .collect::<DeserializationResult<Vec<_>>>()
                        .with_context(
                            "rerun.blueprint.archetypes.DataframeVisibleColumns#time_columns",
                        )?
                })
            } else {
                None
            };
        let component_columns = if let Some(array) =
            arrays_by_name.get("rerun.blueprint.components.ComponentColumnSelector")
        {
            Some({
                <crate::blueprint::components::ComponentColumnSelector>::from_arrow_opt(&**array)
                    .with_context(
                        "rerun.blueprint.archetypes.DataframeVisibleColumns#component_columns",
                    )?
                    .into_iter()
                    .map(|v| v.ok_or_else(DeserializationError::missing_data))
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context(
                        "rerun.blueprint.archetypes.DataframeVisibleColumns#component_columns",
                    )?
            })
        } else {
            None
        };
        Ok(Self {
            selection_mode,
            time_columns,
            component_columns,
        })
    }
}

impl ::re_types_core::AsComponents for DataframeVisibleColumns {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.selection_mode
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.time_columns
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn ComponentBatch).into()),
            self.component_columns
                .as_ref()
                .map(|comp_batch| (comp_batch as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for DataframeVisibleColumns {}

impl DataframeVisibleColumns {
    /// Create a new `DataframeVisibleColumns`.
    #[inline]
    pub fn new() -> Self {
        Self {
            selection_mode: None,
            time_columns: None,
            component_columns: None,
        }
    }

    /// Are all column selected, or only those specified by the user?
    #[inline]
    pub fn with_selection_mode(
        mut self,
        selection_mode: impl Into<crate::blueprint::components::ColumnSelectionMode>,
    ) -> Self {
        self.selection_mode = Some(selection_mode.into());
        self
    }

    /// The time columns to include (if mode is set to "Selected").
    #[inline]
    pub fn with_time_columns(
        mut self,
        time_columns: impl IntoIterator<Item = impl Into<crate::blueprint::components::TimelineName>>,
    ) -> Self {
        self.time_columns = Some(time_columns.into_iter().map(Into::into).collect());
        self
    }

    /// The component columns to include (if mode is set to "Selected").
    #[inline]
    pub fn with_component_columns(
        mut self,
        component_columns: impl IntoIterator<
            Item = impl Into<crate::blueprint::components::ComponentColumnSelector>,
        >,
    ) -> Self {
        self.component_columns = Some(component_columns.into_iter().map(Into::into).collect());
        self
    }
}
