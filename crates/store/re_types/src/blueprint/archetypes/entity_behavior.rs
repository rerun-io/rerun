// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/entity_behavior.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: General visualization behavior of an entity.
///
/// TODO(#6541): Fields of this archetype currently only have an effect when logged in the blueprint store.
#[derive(Clone, Debug, Default)]
pub struct EntityBehavior {
    /// Whether the entity can be interacted with.
    ///
    /// This property is propagated down the entity hierarchy until another child entity
    /// sets `interactive` to a different value at which point propagation continues with that value instead.
    ///
    /// Defaults to parent's `interactive` value or true if there is no parent.
    pub interactive: Option<SerializedComponentBatch>,

    /// Whether the entity is visible.
    ///
    /// This property is propagated down the entity hierarchy until another child entity
    /// sets `visible` to a different value at which point propagation continues with that value instead.
    ///
    /// Defaults to parent's `visible` value or true if there is no parent.
    pub visible: Option<SerializedComponentBatch>,
}

impl EntityBehavior {
    /// Returns the [`ComponentDescriptor`] for [`Self::interactive`].
    #[inline]
    pub fn descriptor_interactive() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.EntityBehavior".into()),
            component_name: "rerun.components.Interactive".into(),
            archetype_field_name: Some("interactive".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::visible`].
    #[inline]
    pub fn descriptor_visible() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.EntityBehavior".into()),
            component_name: "rerun.components.Visible".into(),
            archetype_field_name: Some("visible".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.blueprint.archetypes.EntityBehavior".into()),
            component_name: "rerun.blueprint.components.EntityBehaviorIndicator".into(),
            archetype_field_name: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [EntityBehavior::descriptor_indicator()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            EntityBehavior::descriptor_interactive(),
            EntityBehavior::descriptor_visible(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 3usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            EntityBehavior::descriptor_indicator(),
            EntityBehavior::descriptor_interactive(),
            EntityBehavior::descriptor_visible(),
        ]
    });

impl EntityBehavior {
    /// The total number of components in the archetype: 0 required, 1 recommended, 2 optional
    pub const NUM_COMPONENTS: usize = 3usize;
}

/// Indicator component for the [`EntityBehavior`] [`::re_types_core::Archetype`]
pub type EntityBehaviorIndicator = ::re_types_core::GenericIndicatorComponent<EntityBehavior>;

impl ::re_types_core::Archetype for EntityBehavior {
    type Indicator = EntityBehaviorIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.blueprint.archetypes.EntityBehavior".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Entity behavior"
    }

    #[inline]
    fn indicator() -> SerializedComponentBatch {
        #[allow(clippy::unwrap_used)]
        EntityBehaviorIndicator::DEFAULT.serialized().unwrap()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let interactive = arrays_by_descr
            .get(&Self::descriptor_interactive())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_interactive())
            });
        let visible = arrays_by_descr
            .get(&Self::descriptor_visible())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_visible()));
        Ok(Self {
            interactive,
            visible,
        })
    }
}

impl ::re_types_core::AsComponents for EntityBehavior {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.interactive.clone(),
            self.visible.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for EntityBehavior {}

impl EntityBehavior {
    /// Create a new `EntityBehavior`.
    #[inline]
    pub fn new() -> Self {
        Self {
            interactive: None,
            visible: None,
        }
    }

    /// Update only some specific fields of a `EntityBehavior`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `EntityBehavior`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            interactive: Some(SerializedComponentBatch::new(
                crate::components::Interactive::arrow_empty(),
                Self::descriptor_interactive(),
            )),
            visible: Some(SerializedComponentBatch::new(
                crate::components::Visible::arrow_empty(),
                Self::descriptor_visible(),
            )),
        }
    }

    /// Whether the entity can be interacted with.
    ///
    /// This property is propagated down the entity hierarchy until another child entity
    /// sets `interactive` to a different value at which point propagation continues with that value instead.
    ///
    /// Defaults to parent's `interactive` value or true if there is no parent.
    #[inline]
    pub fn with_interactive(
        mut self,
        interactive: impl Into<crate::components::Interactive>,
    ) -> Self {
        self.interactive = try_serialize_field(Self::descriptor_interactive(), [interactive]);
        self
    }

    /// Whether the entity is visible.
    ///
    /// This property is propagated down the entity hierarchy until another child entity
    /// sets `visible` to a different value at which point propagation continues with that value instead.
    ///
    /// Defaults to parent's `visible` value or true if there is no parent.
    #[inline]
    pub fn with_visible(mut self, visible: impl Into<crate::components::Visible>) -> Self {
        self.visible = try_serialize_field(Self::descriptor_visible(), [visible]);
        self
    }
}

impl ::re_byte_size::SizeBytes for EntityBehavior {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.interactive.heap_size_bytes() + self.visible.heap_size_bytes()
    }
}
