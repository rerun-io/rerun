// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/selected_columns.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: List of selected columns in a dataframe.
#[derive(Clone, Debug, Default, PartialEq, Eq)]
pub struct SelectedColumns {
    /// The time columns to include
    pub time_columns: Vec<crate::datatypes::Utf8>,

    /// The component columns to include
    pub component_columns: Vec<crate::blueprint::datatypes::ComponentColumnSelector>,
}

impl ::re_types_core::SizeBytes for SelectedColumns {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.time_columns.heap_size_bytes() + self.component_columns.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Vec<crate::datatypes::Utf8>>::is_pod()
            && <Vec<crate::blueprint::datatypes::ComponentColumnSelector>>::is_pod()
    }
}

::re_types_core::macros::impl_into_cow!(SelectedColumns);

impl ::re_types_core::Loggable for SelectedColumns {
    type Name = ::re_types_core::DatatypeName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.blueprint.datatypes.SelectedColumns".into()
    }

    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow2::datatypes::*;
        DataType::Struct(std::sync::Arc::new(vec![
            Field::new(
                "time_columns",
                DataType::List(std::sync::Arc::new(Field::new(
                    "item",
                    <crate::datatypes::Utf8>::arrow_datatype(),
                    false,
                ))),
                false,
            ),
            Field::new(
                "component_columns",
                DataType::List(std::sync::Arc::new(Field::new(
                    "item",
                    <crate::blueprint::datatypes::ComponentColumnSelector>::arrow_datatype(),
                    false,
                ))),
                false,
            ),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        #![allow(clippy::manual_is_variant_and)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let bitmap: Option<arrow2::bitmap::Bitmap> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            StructArray::new(
                    Self::arrow_datatype(),
                    vec![
                        { let (somes, time_columns) : (Vec < _ >, Vec < _ >) = data
                        .iter().map(| datum | { let datum = datum.as_ref().map(| datum |
                        { datum.time_columns.clone() }); (datum.is_some(), datum) })
                        .unzip(); let time_columns_bitmap : Option <
                        arrow2::bitmap::Bitmap > = { let any_nones = somes.iter().any(|
                        some | ! * some); any_nones.then(|| somes.into()) }; { use
                        arrow2:: { buffer::Buffer, offset::OffsetsBuffer }; let offsets =
                        arrow2::offset::Offsets:: < i32 > ::try_from_lengths(time_columns
                        .iter().map(| opt | opt.as_ref().map_or(0, | datum | datum
                        .len()))) ? .into(); let time_columns_inner_data : Vec < _ > =
                        time_columns.into_iter().flatten().flatten().collect(); let
                        time_columns_inner_bitmap : Option < arrow2::bitmap::Bitmap > =
                        None;
                        ListArray::try_new(DataType::List(std::sync::Arc::new(Field::new("item",
                        < crate ::datatypes::Utf8 > ::arrow_datatype(), false))),
                        offsets, { let offsets = arrow2::offset::Offsets:: < i32 >
                        ::try_from_lengths(time_columns_inner_data.iter().map(| datum | {
                        datum.0.len() })) ? .into(); let inner_data :
                        arrow2::buffer::Buffer < u8 > = time_columns_inner_data
                        .into_iter().flat_map(| datum | { datum.0.0 }).collect();

                        #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)] unsafe
                        { Utf8Array:: < i32 > ::new_unchecked(DataType::Utf8, offsets,
                        inner_data, time_columns_inner_bitmap) } .boxed() },
                        time_columns_bitmap,) ? .boxed() } }, { let (somes,
                        component_columns) : (Vec < _ >, Vec < _ >) = data.iter().map(|
                        datum | { let datum = datum.as_ref().map(| datum | { datum
                        .component_columns.clone() }); (datum.is_some(), datum) })
                        .unzip(); let component_columns_bitmap : Option <
                        arrow2::bitmap::Bitmap > = { let any_nones = somes.iter().any(|
                        some | ! * some); any_nones.then(|| somes.into()) }; { use
                        arrow2:: { buffer::Buffer, offset::OffsetsBuffer }; let offsets =
                        arrow2::offset::Offsets:: < i32 >
                        ::try_from_lengths(component_columns.iter().map(| opt | opt
                        .as_ref().map_or(0, | datum | datum.len()))) ? .into(); let
                        component_columns_inner_data : Vec < _ > = component_columns
                        .into_iter().flatten().flatten().collect(); let
                        component_columns_inner_bitmap : Option < arrow2::bitmap::Bitmap
                        > = None;
                        ListArray::try_new(DataType::List(std::sync::Arc::new(Field::new("item",
                        < crate ::blueprint::datatypes::ComponentColumnSelector >
                        ::arrow_datatype(), false))), offsets, { _ =
                        component_columns_inner_bitmap; crate
                        ::blueprint::datatypes::ComponentColumnSelector::to_arrow_opt(component_columns_inner_data
                        .into_iter().map(Some)) ? }, component_columns_bitmap,) ?
                        .boxed() } },
                    ],
                    bitmap,
                )
                .boxed()
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.blueprint.datatypes.SelectedColumns")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let time_columns = {
                    if !arrays_by_name.contains_key("time_columns") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "time_columns",
                        ))
                        .with_context("rerun.blueprint.datatypes.SelectedColumns");
                    }
                    let arrow_data = &**arrays_by_name["time_columns"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    <crate::datatypes::Utf8>::arrow_datatype(),
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.blueprint.datatypes.SelectedColumns#time_columns",
                            )?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                {
                                    let arrow_data_inner = arrow_data_inner
                                        .as_any()
                                        .downcast_ref::<arrow2::array::Utf8Array<i32>>()
                                        .ok_or_else(|| {
                                            let expected = DataType::Utf8;
                                            let actual = arrow_data_inner.data_type().clone();
                                            DeserializationError::datatype_mismatch(expected, actual)
                                        })
                                        .with_context(
                                            "rerun.blueprint.datatypes.SelectedColumns#time_columns",
                                        )?;
                                    let arrow_data_inner_buf = arrow_data_inner.values();
                                    let offsets = arrow_data_inner.offsets();
                                    arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                            offsets.iter().zip(offsets.lengths()),
                                            arrow_data_inner.validity(),
                                        )
                                        .map(|elem| {
                                            elem
                                                .map(|(start, len)| {
                                                    let start = *start as usize;
                                                    let end = start + len;
                                                    if end > arrow_data_inner_buf.len() {
                                                        return Err(
                                                            DeserializationError::offset_slice_oob(
                                                                (start, end),
                                                                arrow_data_inner_buf.len(),
                                                            ),
                                                        );
                                                    }

                                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                                    let data = unsafe {
                                                        arrow_data_inner_buf.clone().sliced_unchecked(start, len)
                                                    };
                                                    Ok(data)
                                                })
                                                .transpose()
                                        })
                                        .map(|res_or_opt| {
                                            res_or_opt
                                                .map(|res_or_opt| {
                                                    res_or_opt
                                                        .map(|v| crate::datatypes::Utf8(
                                                            ::re_types_core::ArrowString(v),
                                                        ))
                                                })
                                        })
                                        .collect::<DeserializationResult<Vec<Option<_>>>>()
                                        .with_context(
                                            "rerun.blueprint.datatypes.SelectedColumns#time_columns",
                                        )?
                                        .into_iter()
                                }
                                    .collect::<Vec<_>>()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                    offsets.iter().zip(offsets.lengths()),
                                    arrow_data.validity(),
                                )
                                .map(|elem| {
                                    elem
                                        .map(|(start, len)| {
                                            let start = *start as usize;
                                            let end = start + len;
                                            if end > arrow_data_inner.len() {
                                                return Err(
                                                    DeserializationError::offset_slice_oob(
                                                        (start, end),
                                                        arrow_data_inner.len(),
                                                    ),
                                                );
                                            }

                                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                            let data = unsafe {
                                                arrow_data_inner.get_unchecked(start..end)
                                            };
                                            let data = data
                                                .iter()
                                                .cloned()
                                                .map(Option::unwrap_or_default)
                                                .collect();
                                            Ok(data)
                                        })
                                        .transpose()
                                })
                                .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                            .into_iter()
                    }
                };
                let component_columns = {
                    if !arrays_by_name.contains_key("component_columns") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "component_columns",
                        ))
                        .with_context("rerun.blueprint.datatypes.SelectedColumns");
                    }
                    let arrow_data = &**arrays_by_name["component_columns"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(
                                    std::sync::Arc::new(
                                        Field::new(
                                            "item",
                                            <crate::blueprint::datatypes::ComponentColumnSelector>::arrow_datatype(),
                                            false,
                                        ),
                                    ),
                                );
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context(
                                "rerun.blueprint.datatypes.SelectedColumns#component_columns",
                            )?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                crate::blueprint::datatypes::ComponentColumnSelector::from_arrow_opt(
                                        arrow_data_inner,
                                    )
                                    .with_context(
                                        "rerun.blueprint.datatypes.SelectedColumns#component_columns",
                                    )?
                                    .into_iter()
                                    .collect::<Vec<_>>()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                    offsets.iter().zip(offsets.lengths()),
                                    arrow_data.validity(),
                                )
                                .map(|elem| {
                                    elem
                                        .map(|(start, len)| {
                                            let start = *start as usize;
                                            let end = start + len;
                                            if end > arrow_data_inner.len() {
                                                return Err(
                                                    DeserializationError::offset_slice_oob(
                                                        (start, end),
                                                        arrow_data_inner.len(),
                                                    ),
                                                );
                                            }

                                            #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                            let data = unsafe {
                                                arrow_data_inner.get_unchecked(start..end)
                                            };
                                            let data = data
                                                .iter()
                                                .cloned()
                                                .map(Option::unwrap_or_default)
                                                .collect();
                                            Ok(data)
                                        })
                                        .transpose()
                                })
                                .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                            .into_iter()
                    }
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                    ::itertools::izip!(time_columns, component_columns),
                    arrow_data.validity(),
                )
                .map(|opt| {
                    opt.map(|(time_columns, component_columns)| {
                        Ok(Self {
                            time_columns: time_columns
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context(
                                    "rerun.blueprint.datatypes.SelectedColumns#time_columns",
                                )?,
                            component_columns: component_columns
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context(
                                    "rerun.blueprint.datatypes.SelectedColumns#component_columns",
                                )?,
                        })
                    })
                    .transpose()
                })
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.blueprint.datatypes.SelectedColumns")?
            }
        })
    }
}
