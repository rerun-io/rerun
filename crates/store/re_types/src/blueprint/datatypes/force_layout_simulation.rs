// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/force_layout_simulation.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: The parameters for a force layout simulation.
#[derive(Clone, Debug, Default, PartialEq)]
pub struct ForceLayoutSimulation {
    /// Similar to the the temperature in a simulated annealing algorithm.
    pub alpha: f64,

    /// If `alpha` drops below this value, the simulation stops.
    pub alpha_min: f64,

    /// The rate at which `alpha` decreases after each iteration.
    pub alpha_decay: f64,

    /// The target value for `alpha`, must be in the range `[0, 1]`.
    pub alpha_target: f64,

    /// Acts as a damping factor for the velocity of nodes.
    pub velocity_decay: f64,
}

impl ::re_types_core::SizeBytes for ForceLayoutSimulation {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.alpha.heap_size_bytes()
            + self.alpha_min.heap_size_bytes()
            + self.alpha_decay.heap_size_bytes()
            + self.alpha_target.heap_size_bytes()
            + self.velocity_decay.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <f64>::is_pod() && <f64>::is_pod() && <f64>::is_pod() && <f64>::is_pod() && <f64>::is_pod()
    }
}

::re_types_core::macros::impl_into_cow!(ForceLayoutSimulation);

impl ::re_types_core::Loggable for ForceLayoutSimulation {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow::datatypes::*;
        DataType::Struct(Fields::from(vec![
            Field::new("alpha", DataType::Float64, false),
            Field::new("alpha_min", DataType::Float64, false),
            Field::new("alpha_decay", DataType::Float64, false),
            Field::new("alpha_target", DataType::Float64, false),
            Field::new("velocity_decay", DataType::Float64, false),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        #![allow(clippy::manual_is_variant_and)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow::{array::*, buffer::*, datatypes::*};

        #[allow(unused)]
        fn as_array_ref<T: Array + 'static>(t: T) -> ArrayRef {
            std::sync::Arc::new(t) as ArrayRef
        }
        Ok({
            let fields = Fields::from(vec![
                Field::new("alpha", DataType::Float64, false),
                Field::new("alpha_min", DataType::Float64, false),
                Field::new("alpha_decay", DataType::Float64, false),
                Field::new("alpha_target", DataType::Float64, false),
                Field::new("velocity_decay", DataType::Float64, false),
            ]);
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let validity: Option<arrow::buffer::NullBuffer> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            as_array_ref(StructArray::new(
                fields,
                vec![
                    {
                        let (somes, alpha): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.alpha.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let alpha_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Float64Type>::new(
                            ScalarBuffer::from(
                                alpha
                                    .into_iter()
                                    .map(|v| v.unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            alpha_validity,
                        ))
                    },
                    {
                        let (somes, alpha_min): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.alpha_min.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let alpha_min_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Float64Type>::new(
                            ScalarBuffer::from(
                                alpha_min
                                    .into_iter()
                                    .map(|v| v.unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            alpha_min_validity,
                        ))
                    },
                    {
                        let (somes, alpha_decay): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.alpha_decay.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let alpha_decay_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Float64Type>::new(
                            ScalarBuffer::from(
                                alpha_decay
                                    .into_iter()
                                    .map(|v| v.unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            alpha_decay_validity,
                        ))
                    },
                    {
                        let (somes, alpha_target): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.alpha_target.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let alpha_target_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Float64Type>::new(
                            ScalarBuffer::from(
                                alpha_target
                                    .into_iter()
                                    .map(|v| v.unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            alpha_target_validity,
                        ))
                    },
                    {
                        let (somes, velocity_decay): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum =
                                    datum.as_ref().map(|datum| datum.velocity_decay.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let velocity_decay_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<Float64Type>::new(
                            ScalarBuffer::from(
                                velocity_decay
                                    .into_iter()
                                    .map(|v| v.unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            velocity_decay_validity,
                        ))
                    },
                ],
                validity,
            ))
        })
    }

    fn from_arrow2_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow::datatypes::*;
        use arrow2::{array::*, buffer::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let alpha = {
                    if !arrays_by_name.contains_key("alpha") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "alpha",
                        ))
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation");
                    }
                    let arrow_data = &**arrays_by_name["alpha"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation#alpha")?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                let alpha_min = {
                    if !arrays_by_name.contains_key("alpha_min") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "alpha_min",
                        ))
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation");
                    }
                    let arrow_data = &**arrays_by_name["alpha_min"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation#alpha_min")?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                let alpha_decay = {
                    if !arrays_by_name.contains_key("alpha_decay") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "alpha_decay",
                        ))
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation");
                    }
                    let arrow_data = &**arrays_by_name["alpha_decay"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context(
                            "rerun.blueprint.datatypes.ForceLayoutSimulation#alpha_decay",
                        )?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                let alpha_target = {
                    if !arrays_by_name.contains_key("alpha_target") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "alpha_target",
                        ))
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation");
                    }
                    let arrow_data = &**arrays_by_name["alpha_target"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context(
                            "rerun.blueprint.datatypes.ForceLayoutSimulation#alpha_target",
                        )?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                let velocity_decay = {
                    if !arrays_by_name.contains_key("velocity_decay") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "velocity_decay",
                        ))
                        .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation");
                    }
                    let arrow_data = &**arrays_by_name["velocity_decay"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<Float64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::Float64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context(
                            "rerun.blueprint.datatypes.ForceLayoutSimulation#velocity_decay",
                        )?
                        .into_iter()
                        .map(|opt| opt.copied())
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                        ::itertools::izip!(
                            alpha, alpha_min, alpha_decay, alpha_target, velocity_decay
                        ),
                        arrow_data.validity(),
                    )
                    .map(|opt| {
                        opt
                            .map(|
                                (
                                    alpha,
                                    alpha_min,
                                    alpha_decay,
                                    alpha_target,
                                    velocity_decay,
                                )|
                            Ok(Self {
                                alpha: alpha
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.datatypes.ForceLayoutSimulation#alpha",
                                    )?,
                                alpha_min: alpha_min
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.datatypes.ForceLayoutSimulation#alpha_min",
                                    )?,
                                alpha_decay: alpha_decay
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.datatypes.ForceLayoutSimulation#alpha_decay",
                                    )?,
                                alpha_target: alpha_target
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.datatypes.ForceLayoutSimulation#alpha_target",
                                    )?,
                                velocity_decay: velocity_decay
                                    .ok_or_else(DeserializationError::missing_data)
                                    .with_context(
                                        "rerun.blueprint.datatypes.ForceLayoutSimulation#velocity_decay",
                                    )?,
                            }))
                            .transpose()
                    })
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.blueprint.datatypes.ForceLayoutSimulation")?
            }
        })
    }
}
