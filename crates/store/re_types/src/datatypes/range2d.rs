// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/range2d.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, ComponentBatchCowWithDescriptor};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: An Axis-Aligned Bounding Box in 2D space, implemented as the minimum and maximum corners.
#[derive(Clone, Debug, Default, Copy, PartialEq, bytemuck::Pod, bytemuck::Zeroable)]
#[repr(C)]
pub struct Range2D {
    /// The range of the X-axis (usually left and right bounds).
    pub x_range: crate::datatypes::Range1D,

    /// The range of the Y-axis (usually top and bottom bounds).
    pub y_range: crate::datatypes::Range1D,
}

::re_types_core::macros::impl_into_cow!(Range2D);

impl ::re_types_core::Loggable for Range2D {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow::datatypes::*;
        DataType::Struct(Fields::from(vec![
            Field::new(
                "x_range",
                <crate::datatypes::Range1D>::arrow_datatype(),
                false,
            ),
            Field::new(
                "y_range",
                <crate::datatypes::Range1D>::arrow_datatype(),
                false,
            ),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        #![allow(clippy::manual_is_variant_and)]
        use ::re_types_core::{arrow_helpers::as_array_ref, Loggable as _, ResultExt as _};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let fields = Fields::from(vec![
                Field::new(
                    "x_range",
                    <crate::datatypes::Range1D>::arrow_datatype(),
                    false,
                ),
                Field::new(
                    "y_range",
                    <crate::datatypes::Range1D>::arrow_datatype(),
                    false,
                ),
            ]);
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let validity: Option<arrow::buffer::NullBuffer> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            as_array_ref(StructArray::new(
                fields,
                vec![
                    {
                        let (somes, x_range): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.x_range.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let x_range_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let x_range_inner_data: Vec<_> = x_range
                                .into_iter()
                                .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                .flatten()
                                .collect();
                            let x_range_inner_validity: Option<arrow::buffer::NullBuffer> =
                                x_range_validity.as_ref().map(|validity| {
                                    validity
                                        .iter()
                                        .map(|b| std::iter::repeat(b).take(2usize))
                                        .flatten()
                                        .collect::<Vec<_>>()
                                        .into()
                                });
                            as_array_ref(FixedSizeListArray::new(
                                std::sync::Arc::new(Field::new("item", DataType::Float64, false)),
                                2,
                                as_array_ref(PrimitiveArray::<Float64Type>::new(
                                    ScalarBuffer::from(
                                        x_range_inner_data.into_iter().collect::<Vec<_>>(),
                                    ),
                                    x_range_inner_validity,
                                )),
                                x_range_validity,
                            ))
                        }
                    },
                    {
                        let (somes, y_range): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.y_range.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let y_range_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        {
                            let y_range_inner_data: Vec<_> = y_range
                                .into_iter()
                                .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                .flatten()
                                .collect();
                            let y_range_inner_validity: Option<arrow::buffer::NullBuffer> =
                                y_range_validity.as_ref().map(|validity| {
                                    validity
                                        .iter()
                                        .map(|b| std::iter::repeat(b).take(2usize))
                                        .flatten()
                                        .collect::<Vec<_>>()
                                        .into()
                                });
                            as_array_ref(FixedSizeListArray::new(
                                std::sync::Arc::new(Field::new("item", DataType::Float64, false)),
                                2,
                                as_array_ref(PrimitiveArray::<Float64Type>::new(
                                    ScalarBuffer::from(
                                        y_range_inner_data.into_iter().collect::<Vec<_>>(),
                                    ),
                                    y_range_inner_validity,
                                )),
                                y_range_validity,
                            ))
                        }
                    },
                ],
                validity,
            ))
        })
    }

    fn from_arrow2_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow::datatypes::*;
        use arrow2::{array::*, buffer::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.datatypes.Range2D")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.values());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name.as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let x_range = {
                    if !arrays_by_name.contains_key("x_range") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "x_range",
                        ))
                        .with_context("rerun.datatypes.Range2D");
                    }
                    let arrow_data = &**arrays_by_name["x_range"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::FixedSizeListArray>()
                            .ok_or_else(|| {
                                let expected = DataType::FixedSizeList(
                                    std::sync::Arc::new(Field::new(
                                        "item",
                                        DataType::Float64,
                                        false,
                                    )),
                                    2,
                                );
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.Range2D#x_range")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let offsets = (0..)
                                .step_by(2usize)
                                .zip((2usize..).step_by(2usize).take(arrow_data.len()));
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float64Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Float64;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.Range2D#x_range")?
                                    .into_iter()
                                    .map(|opt| opt.copied())
                                    .collect::<Vec<_>>()
                            };
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets,
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, end): (usize, usize)| {
                                    debug_assert!(end - start == 2usize);
                                    if end > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data =
                                        unsafe { arrow_data_inner.get_unchecked(start..end) };
                                    let data = data.iter().cloned().map(Option::unwrap_or_default);

                                    // NOTE: Unwrapping cannot fail: the length must be correct.
                                    #[allow(clippy::unwrap_used)]
                                    Ok(array_init::from_iter(data).unwrap())
                                })
                                .transpose()
                            })
                            .map(|res_or_opt| {
                                res_or_opt
                                    .map(|res_or_opt| res_or_opt.map(crate::datatypes::Range1D))
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                };
                let y_range = {
                    if !arrays_by_name.contains_key("y_range") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "y_range",
                        ))
                        .with_context("rerun.datatypes.Range2D");
                    }
                    let arrow_data = &**arrays_by_name["y_range"];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::FixedSizeListArray>()
                            .ok_or_else(|| {
                                let expected = DataType::FixedSizeList(
                                    std::sync::Arc::new(Field::new(
                                        "item",
                                        DataType::Float64,
                                        false,
                                    )),
                                    2,
                                );
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.Range2D#y_range")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let offsets = (0..)
                                .step_by(2usize)
                                .zip((2usize..).step_by(2usize).take(arrow_data.len()));
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float64Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Float64;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.Range2D#y_range")?
                                    .into_iter()
                                    .map(|opt| opt.copied())
                                    .collect::<Vec<_>>()
                            };
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets,
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|(start, end): (usize, usize)| {
                                    debug_assert!(end - start == 2usize);
                                    if end > arrow_data_inner.len() {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data =
                                        unsafe { arrow_data_inner.get_unchecked(start..end) };
                                    let data = data.iter().cloned().map(Option::unwrap_or_default);

                                    // NOTE: Unwrapping cannot fail: the length must be correct.
                                    #[allow(clippy::unwrap_used)]
                                    Ok(array_init::from_iter(data).unwrap())
                                })
                                .transpose()
                            })
                            .map(|res_or_opt| {
                                res_or_opt
                                    .map(|res_or_opt| res_or_opt.map(crate::datatypes::Range1D))
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                };
                arrow2::bitmap::utils::ZipValidity::new_with_validity(
                    ::itertools::izip!(x_range, y_range),
                    arrow_data.validity(),
                )
                .map(|opt| {
                    opt.map(|(x_range, y_range)| {
                        Ok(Self {
                            x_range: x_range
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.Range2D#x_range")?,
                            y_range: y_range
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.Range2D#y_range")?,
                        })
                    })
                    .transpose()
                })
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.datatypes.Range2D")?
            }
        })
    }
}

impl ::re_byte_size::SizeBytes for Range2D {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.x_range.heap_size_bytes() + self.y_range.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::datatypes::Range1D>::is_pod() && <crate::datatypes::Range1D>::is_pod()
    }
}
