// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/channel_count_pair.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: A pair representing a channel ID and its associated message count.
#[derive(Clone, Debug, Default, PartialEq, Eq, PartialOrd, Ord)]
pub struct ChannelCountPair {
    /// The channel ID.
    pub channel_id: crate::datatypes::UInt16,

    /// The message count for this channel.
    pub message_count: crate::datatypes::UInt64,
}

::re_types_core::macros::impl_into_cow!(ChannelCountPair);

impl ::re_types_core::Loggable for ChannelCountPair {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow::datatypes::*;
        DataType::Struct(Fields::from(vec![
            Field::new(
                "channel_id",
                <crate::datatypes::UInt16>::arrow_datatype(),
                false,
            ),
            Field::new(
                "message_count",
                <crate::datatypes::UInt64>::arrow_datatype(),
                false,
            ),
        ]))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        #![allow(clippy::manual_is_variant_and)]
        use ::re_types_core::{Loggable as _, ResultExt as _, arrow_helpers::as_array_ref};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let fields = Fields::from(vec![
                Field::new(
                    "channel_id",
                    <crate::datatypes::UInt16>::arrow_datatype(),
                    false,
                ),
                Field::new(
                    "message_count",
                    <crate::datatypes::UInt64>::arrow_datatype(),
                    false,
                ),
            ]);
            let (somes, data): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    (datum.is_some(), datum)
                })
                .unzip();
            let validity: Option<arrow::buffer::NullBuffer> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            as_array_ref(StructArray::new(
                fields,
                vec![
                    {
                        let (somes, channel_id): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.channel_id.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let channel_id_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<UInt16Type>::new(
                            ScalarBuffer::from(
                                channel_id
                                    .into_iter()
                                    .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            channel_id_validity,
                        ))
                    },
                    {
                        let (somes, message_count): (Vec<_>, Vec<_>) = data
                            .iter()
                            .map(|datum| {
                                let datum = datum.as_ref().map(|datum| datum.message_count.clone());
                                (datum.is_some(), datum)
                            })
                            .unzip();
                        let message_count_validity: Option<arrow::buffer::NullBuffer> = {
                            let any_nones = somes.iter().any(|some| !*some);
                            any_nones.then(|| somes.into())
                        };
                        as_array_ref(PrimitiveArray::<UInt64Type>::new(
                            ScalarBuffer::from(
                                message_count
                                    .into_iter()
                                    .map(|datum| datum.map(|datum| datum.0).unwrap_or_default())
                                    .collect::<Vec<_>>(),
                            ),
                            message_count_validity,
                        ))
                    },
                ],
                validity,
            ))
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _, arrow_zip_validity::ZipValidity};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow::array::StructArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.datatypes.ChannelCountPair")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_fields, arrow_data_arrays) =
                    (arrow_data.fields(), arrow_data.columns());
                let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data_fields
                    .iter()
                    .map(|field| field.name().as_str())
                    .zip(arrow_data_arrays)
                    .collect();
                let channel_id = {
                    if !arrays_by_name.contains_key("channel_id") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "channel_id",
                        ))
                        .with_context("rerun.datatypes.ChannelCountPair");
                    }
                    let arrow_data = &**arrays_by_name["channel_id"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<UInt16Array>()
                        .ok_or_else(|| {
                            let expected = DataType::UInt16;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.ChannelCountPair#channel_id")?
                        .into_iter()
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::UInt16))
                };
                let message_count = {
                    if !arrays_by_name.contains_key("message_count") {
                        return Err(DeserializationError::missing_struct_field(
                            Self::arrow_datatype(),
                            "message_count",
                        ))
                        .with_context("rerun.datatypes.ChannelCountPair");
                    }
                    let arrow_data = &**arrays_by_name["message_count"];
                    arrow_data
                        .as_any()
                        .downcast_ref::<UInt64Array>()
                        .ok_or_else(|| {
                            let expected = DataType::UInt64;
                            let actual = arrow_data.data_type().clone();
                            DeserializationError::datatype_mismatch(expected, actual)
                        })
                        .with_context("rerun.datatypes.ChannelCountPair#message_count")?
                        .into_iter()
                        .map(|res_or_opt| res_or_opt.map(crate::datatypes::UInt64))
                };
                ZipValidity::new_with_validity(
                    ::itertools::izip!(channel_id, message_count),
                    arrow_data.nulls(),
                )
                .map(|opt| {
                    opt.map(|(channel_id, message_count)| {
                        Ok(Self {
                            channel_id: channel_id
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context(
                                "rerun.datatypes.ChannelCountPair#channel_id",
                            )?,
                            message_count: message_count
                                .ok_or_else(DeserializationError::missing_data)
                                .with_context("rerun.datatypes.ChannelCountPair#message_count")?,
                        })
                    })
                    .transpose()
                })
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.datatypes.ChannelCountPair")?
            }
        })
    }
}

impl ::re_byte_size::SizeBytes for ChannelCountPair {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.channel_id.heap_size_bytes() + self.message_count.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::datatypes::UInt16>::is_pod() && <crate::datatypes::UInt64>::is_pod()
    }
}
