// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/tensor_buffer.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, ComponentBatchCowWithDescriptor};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Datatype**: The underlying storage for [`archetypes::Tensor`][crate::archetypes::Tensor].
///
/// Tensor elements are stored in a contiguous buffer of a single type.
#[derive(Clone, PartialEq)]
pub enum TensorBuffer {
    /// 8bit unsigned integer.
    U8(::re_types_core::ArrowBuffer<u8>),

    /// 16bit unsigned integer.
    U16(::re_types_core::ArrowBuffer<u16>),

    /// 32bit unsigned integer.
    U32(::re_types_core::ArrowBuffer<u32>),

    /// 64bit unsigned integer.
    U64(::re_types_core::ArrowBuffer<u64>),

    /// 8bit signed integer.
    I8(::re_types_core::ArrowBuffer<i8>),

    /// 16bit signed integer.
    I16(::re_types_core::ArrowBuffer<i16>),

    /// 32bit signed integer.
    I32(::re_types_core::ArrowBuffer<i32>),

    /// 64bit signed integer.
    I64(::re_types_core::ArrowBuffer<i64>),

    /// 16bit IEEE-754 floating point, also known as `half`.
    F16(::re_types_core::ArrowBuffer<half::f16>),

    /// 32bit IEEE-754 floating point, also known as `float` or `single`.
    F32(::re_types_core::ArrowBuffer<f32>),

    /// 64bit IEEE-754 floating point, also known as `double`.
    F64(::re_types_core::ArrowBuffer<f64>),
}

::re_types_core::macros::impl_into_cow!(TensorBuffer);

impl ::re_types_core::Loggable for TensorBuffer {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow::datatypes::*;
        DataType::Union(
            UnionFields::new(
                vec![0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
                vec![
                    Field::new("_null_markers", DataType::Null, true),
                    Field::new(
                        "U8",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::UInt8,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "U16",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::UInt16,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "U32",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::UInt32,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "U64",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::UInt64,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "I8",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Int8,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "I16",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Int16,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "I32",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Int32,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "I64",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Int64,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "F16",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Float16,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "F32",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Float32,
                            false,
                        ))),
                        false,
                    ),
                    Field::new(
                        "F64",
                        DataType::List(std::sync::Arc::new(Field::new(
                            "item",
                            DataType::Float64,
                            false,
                        ))),
                        false,
                    ),
                ],
            ),
            UnionMode::Dense,
        )
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        #![allow(clippy::manual_is_variant_and)]
        use ::re_types_core::{arrow_helpers::as_array_ref, Loggable as _, ResultExt as _};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            // Dense Arrow union
            let data: Vec<_> = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    datum
                })
                .collect();
            let field_type_ids = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11];
            let fields = vec![
                Field::new("_null_markers", DataType::Null, true),
                Field::new(
                    "U8",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::UInt8,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "U16",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::UInt16,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "U32",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::UInt32,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "U64",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::UInt64,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "I8",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Int8,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "I16",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Int16,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "I32",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Int32,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "I64",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Int64,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "F16",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Float16,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "F32",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Float32,
                        false,
                    ))),
                    false,
                ),
                Field::new(
                    "F64",
                    DataType::List(std::sync::Arc::new(Field::new(
                        "item",
                        DataType::Float64,
                        false,
                    ))),
                    false,
                ),
            ];
            let type_ids: Vec<i8> = data
                .iter()
                .map(|a| match a.as_deref() {
                    None => 0,
                    Some(Self::U8(_)) => 1i8,
                    Some(Self::U16(_)) => 2i8,
                    Some(Self::U32(_)) => 3i8,
                    Some(Self::U64(_)) => 4i8,
                    Some(Self::I8(_)) => 5i8,
                    Some(Self::I16(_)) => 6i8,
                    Some(Self::I32(_)) => 7i8,
                    Some(Self::I64(_)) => 8i8,
                    Some(Self::F16(_)) => 9i8,
                    Some(Self::F32(_)) => 10i8,
                    Some(Self::F64(_)) => 11i8,
                })
                .collect();
            let offsets = {
                let mut u8_offset = 0;
                let mut u16_offset = 0;
                let mut u32_offset = 0;
                let mut u64_offset = 0;
                let mut i8_offset = 0;
                let mut i16_offset = 0;
                let mut i32_offset = 0;
                let mut i64_offset = 0;
                let mut f16_offset = 0;
                let mut f32_offset = 0;
                let mut f64_offset = 0;
                let mut nulls_offset = 0;
                data.iter()
                    .map(|v| match v.as_deref() {
                        None => {
                            let offset = nulls_offset;
                            nulls_offset += 1;
                            offset
                        }
                        Some(Self::U8(_)) => {
                            let offset = u8_offset;
                            u8_offset += 1;
                            offset
                        }
                        Some(Self::U16(_)) => {
                            let offset = u16_offset;
                            u16_offset += 1;
                            offset
                        }
                        Some(Self::U32(_)) => {
                            let offset = u32_offset;
                            u32_offset += 1;
                            offset
                        }
                        Some(Self::U64(_)) => {
                            let offset = u64_offset;
                            u64_offset += 1;
                            offset
                        }
                        Some(Self::I8(_)) => {
                            let offset = i8_offset;
                            i8_offset += 1;
                            offset
                        }
                        Some(Self::I16(_)) => {
                            let offset = i16_offset;
                            i16_offset += 1;
                            offset
                        }
                        Some(Self::I32(_)) => {
                            let offset = i32_offset;
                            i32_offset += 1;
                            offset
                        }
                        Some(Self::I64(_)) => {
                            let offset = i64_offset;
                            i64_offset += 1;
                            offset
                        }
                        Some(Self::F16(_)) => {
                            let offset = f16_offset;
                            f16_offset += 1;
                            offset
                        }
                        Some(Self::F32(_)) => {
                            let offset = f32_offset;
                            f32_offset += 1;
                            offset
                        }
                        Some(Self::F64(_)) => {
                            let offset = f64_offset;
                            f64_offset += 1;
                            offset
                        }
                    })
                    .collect()
            };
            let children = vec![
                as_array_ref(NullArray::new(data.iter().filter(|v| v.is_none()).count())),
                {
                    let u8: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::U8(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let u8_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            u8.iter().map(|datum| datum.num_instances()),
                        );
                        let u8_inner_data: ScalarBuffer<_> = u8
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let u8_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::UInt8, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<UInt8Type>::new(
                                u8_inner_data,
                                u8_inner_validity,
                            )),
                            u8_validity,
                        )?)
                    }
                },
                {
                    let u16: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::U16(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let u16_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            u16.iter().map(|datum| datum.num_instances()),
                        );
                        let u16_inner_data: ScalarBuffer<_> = u16
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let u16_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::UInt16, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<UInt16Type>::new(
                                u16_inner_data,
                                u16_inner_validity,
                            )),
                            u16_validity,
                        )?)
                    }
                },
                {
                    let u32: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::U32(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let u32_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            u32.iter().map(|datum| datum.num_instances()),
                        );
                        let u32_inner_data: ScalarBuffer<_> = u32
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let u32_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::UInt32, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<UInt32Type>::new(
                                u32_inner_data,
                                u32_inner_validity,
                            )),
                            u32_validity,
                        )?)
                    }
                },
                {
                    let u64: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::U64(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let u64_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            u64.iter().map(|datum| datum.num_instances()),
                        );
                        let u64_inner_data: ScalarBuffer<_> = u64
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let u64_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::UInt64, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<UInt64Type>::new(
                                u64_inner_data,
                                u64_inner_validity,
                            )),
                            u64_validity,
                        )?)
                    }
                },
                {
                    let i8: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::I8(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let i8_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            i8.iter().map(|datum| datum.num_instances()),
                        );
                        let i8_inner_data: ScalarBuffer<_> = i8
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let i8_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Int8, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Int8Type>::new(
                                i8_inner_data,
                                i8_inner_validity,
                            )),
                            i8_validity,
                        )?)
                    }
                },
                {
                    let i16: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::I16(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let i16_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            i16.iter().map(|datum| datum.num_instances()),
                        );
                        let i16_inner_data: ScalarBuffer<_> = i16
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let i16_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Int16, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Int16Type>::new(
                                i16_inner_data,
                                i16_inner_validity,
                            )),
                            i16_validity,
                        )?)
                    }
                },
                {
                    let i32: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::I32(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let i32_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            i32.iter().map(|datum| datum.num_instances()),
                        );
                        let i32_inner_data: ScalarBuffer<_> = i32
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let i32_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Int32, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Int32Type>::new(
                                i32_inner_data,
                                i32_inner_validity,
                            )),
                            i32_validity,
                        )?)
                    }
                },
                {
                    let i64: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::I64(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let i64_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            i64.iter().map(|datum| datum.num_instances()),
                        );
                        let i64_inner_data: ScalarBuffer<_> = i64
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let i64_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Int64, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Int64Type>::new(
                                i64_inner_data,
                                i64_inner_validity,
                            )),
                            i64_validity,
                        )?)
                    }
                },
                {
                    let f16: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::F16(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let f16_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            f16.iter().map(|datum| datum.num_instances()),
                        );
                        let f16_inner_data: ScalarBuffer<_> = f16
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let f16_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Float16, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Float16Type>::new(
                                f16_inner_data,
                                f16_inner_validity,
                            )),
                            f16_validity,
                        )?)
                    }
                },
                {
                    let f32: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::F32(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let f32_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            f32.iter().map(|datum| datum.num_instances()),
                        );
                        let f32_inner_data: ScalarBuffer<_> = f32
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let f32_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Float32, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Float32Type>::new(
                                f32_inner_data,
                                f32_inner_validity,
                            )),
                            f32_validity,
                        )?)
                    }
                },
                {
                    let f64: Vec<_> = data
                        .iter()
                        .filter_map(|datum| match datum.as_deref() {
                            Some(Self::F64(v)) => Some(v.clone()),
                            _ => None,
                        })
                        .collect();
                    let f64_validity: Option<arrow::buffer::NullBuffer> = None;
                    {
                        let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                            f64.iter().map(|datum| datum.num_instances()),
                        );
                        let f64_inner_data: ScalarBuffer<_> = f64
                            .iter()
                            .map(|b| b.as_slice())
                            .collect::<Vec<_>>()
                            .concat()
                            .into();
                        let f64_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                        as_array_ref(ListArray::try_new(
                            std::sync::Arc::new(Field::new("item", DataType::Float64, false)),
                            offsets,
                            as_array_ref(PrimitiveArray::<Float64Type>::new(
                                f64_inner_data,
                                f64_inner_validity,
                            )),
                            f64_validity,
                        )?)
                    }
                },
            ];
            debug_assert_eq!(field_type_ids.len(), fields.len());
            debug_assert_eq!(fields.len(), children.len());
            as_array_ref(UnionArray::try_new(
                UnionFields::new(field_type_ids, fields),
                ScalarBuffer::from(type_ids),
                Some(offsets),
                children,
            )?)
        })
    }

    fn from_arrow2_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow::datatypes::*;
        use arrow2::{array::*, buffer::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::UnionArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.datatypes.TensorBuffer")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let (arrow_data_types, arrow_data_arrays) =
                    (arrow_data.types(), arrow_data.fields());
                let arrow_data_offsets = arrow_data
                    .offsets()
                    .ok_or_else(|| {
                        let expected = Self::arrow_datatype();
                        let actual = arrow_data.data_type().clone();
                        DeserializationError::datatype_mismatch(expected, actual)
                    })
                    .with_context("rerun.datatypes.TensorBuffer")?;
                if arrow_data_types.len() != arrow_data_offsets.len() {
                    return Err(DeserializationError::offset_slice_oob(
                        (0, arrow_data_types.len()),
                        arrow_data_offsets.len(),
                    ))
                    .with_context("rerun.datatypes.TensorBuffer");
                }
                let u8 = {
                    if arrow_data_arrays.len() <= 1 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[1];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::UInt8,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U8")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt8Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::UInt8;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U8")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let u16 = {
                    if arrow_data_arrays.len() <= 2 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[2];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::UInt16,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U16")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt16Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::UInt16;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U16")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let u32 = {
                    if arrow_data_arrays.len() <= 3 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[3];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::UInt32,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U32")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt32Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::UInt32;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U32")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let u64 = {
                    if arrow_data_arrays.len() <= 4 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[4];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::UInt64,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#U64")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<UInt64Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::UInt64;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#U64")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i8 = {
                    if arrow_data_arrays.len() <= 5 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[5];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Int8,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I8")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int8Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Int8;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I8")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i16 = {
                    if arrow_data_arrays.len() <= 6 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[6];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Int16,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I16")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int16Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Int16;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I16")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i32 = {
                    if arrow_data_arrays.len() <= 7 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[7];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Int32,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I32")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int32Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Int32;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I32")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let i64 = {
                    if arrow_data_arrays.len() <= 8 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[8];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Int64,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#I64")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Int64Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Int64;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#I64")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let f16 = {
                    if arrow_data_arrays.len() <= 9 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[9];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Float16,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#F16")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float16Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Float16;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#F16")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let f32 = {
                    if arrow_data_arrays.len() <= 10 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[10];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Float32,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#F32")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float32Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Float32;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#F32")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                let f64 = {
                    if arrow_data_arrays.len() <= 11 {
                        return Ok(Vec::new());
                    }
                    let arrow_data = &*arrow_data_arrays[11];
                    {
                        let arrow_data = arrow_data
                            .as_any()
                            .downcast_ref::<arrow2::array::ListArray<i32>>()
                            .ok_or_else(|| {
                                let expected = DataType::List(std::sync::Arc::new(Field::new(
                                    "item",
                                    DataType::Float64,
                                    false,
                                )));
                                let actual = arrow_data.data_type().clone();
                                DeserializationError::datatype_mismatch(expected, actual)
                            })
                            .with_context("rerun.datatypes.TensorBuffer#F64")?;
                        if arrow_data.is_empty() {
                            Vec::new()
                        } else {
                            let arrow_data_inner = {
                                let arrow_data_inner = &**arrow_data.values();
                                arrow_data_inner
                                    .as_any()
                                    .downcast_ref::<Float64Array>()
                                    .ok_or_else(|| {
                                        let expected = DataType::Float64;
                                        let actual = arrow_data_inner.data_type().clone();
                                        DeserializationError::datatype_mismatch(expected, actual)
                                    })
                                    .with_context("rerun.datatypes.TensorBuffer#F64")?
                                    .values()
                            };
                            let offsets = arrow_data.offsets();
                            arrow2::bitmap::utils::ZipValidity::new_with_validity(
                                offsets.windows(2),
                                arrow_data.validity(),
                            )
                            .map(|elem| {
                                elem.map(|window| {
                                    let start = window[0] as usize;
                                    let end = window[1] as usize;
                                    if arrow_data_inner.len() < end {
                                        return Err(DeserializationError::offset_slice_oob(
                                            (start, end),
                                            arrow_data_inner.len(),
                                        ));
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    let data = unsafe {
                                        arrow_data_inner
                                            .clone()
                                            .sliced_unchecked(start, end - start)
                                    };
                                    let data = ::re_types_core::ArrowBuffer::from(data);
                                    Ok(data)
                                })
                                .transpose()
                            })
                            .collect::<DeserializationResult<Vec<Option<_>>>>()?
                        }
                        .into_iter()
                    }
                    .collect::<Vec<_>>()
                };
                arrow_data_types
                    .iter()
                    .enumerate()
                    .map(|(i, typ)| {
                        let offset = arrow_data_offsets[i];
                        if *typ == 0 {
                            Ok(None)
                        } else {
                            Ok(Some(match typ {
                                1i8 => Self::U8({
                                    if offset as usize >= u8.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u8.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U8");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u8.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U8")?
                                }),
                                2i8 => Self::U16({
                                    if offset as usize >= u16.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u16.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U16");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u16.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U16")?
                                }),
                                3i8 => Self::U32({
                                    if offset as usize >= u32.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u32.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U32");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u32.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U32")?
                                }),
                                4i8 => Self::U64({
                                    if offset as usize >= u64.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            u64.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#U64");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { u64.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#U64")?
                                }),
                                5i8 => Self::I8({
                                    if offset as usize >= i8.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i8.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I8");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i8.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I8")?
                                }),
                                6i8 => Self::I16({
                                    if offset as usize >= i16.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i16.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I16");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i16.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I16")?
                                }),
                                7i8 => Self::I32({
                                    if offset as usize >= i32.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i32.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I32");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i32.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I32")?
                                }),
                                8i8 => Self::I64({
                                    if offset as usize >= i64.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            i64.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#I64");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { i64.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#I64")?
                                }),
                                9i8 => Self::F16({
                                    if offset as usize >= f16.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            f16.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#F16");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { f16.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#F16")?
                                }),
                                10i8 => Self::F32({
                                    if offset as usize >= f32.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            f32.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#F32");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { f32.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#F32")?
                                }),
                                11i8 => Self::F64({
                                    if offset as usize >= f64.len() {
                                        return Err(DeserializationError::offset_oob(
                                            offset as _,
                                            f64.len(),
                                        ))
                                        .with_context("rerun.datatypes.TensorBuffer#F64");
                                    }

                                    #[allow(unsafe_code, clippy::undocumented_unsafe_blocks)]
                                    unsafe { f64.get_unchecked(offset as usize) }
                                        .clone()
                                        .ok_or_else(DeserializationError::missing_data)
                                        .with_context("rerun.datatypes.TensorBuffer#F64")?
                                }),
                                _ => {
                                    return Err(DeserializationError::missing_union_arm(
                                        Self::arrow_datatype(),
                                        "<invalid>",
                                        *typ as _,
                                    ));
                                }
                            }))
                        }
                    })
                    .collect::<DeserializationResult<Vec<_>>>()
                    .with_context("rerun.datatypes.TensorBuffer")?
            }
        })
    }
}

impl ::re_byte_size::SizeBytes for TensorBuffer {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        #![allow(clippy::match_same_arms)]
        match self {
            Self::U8(v) => v.heap_size_bytes(),
            Self::U16(v) => v.heap_size_bytes(),
            Self::U32(v) => v.heap_size_bytes(),
            Self::U64(v) => v.heap_size_bytes(),
            Self::I8(v) => v.heap_size_bytes(),
            Self::I16(v) => v.heap_size_bytes(),
            Self::I32(v) => v.heap_size_bytes(),
            Self::I64(v) => v.heap_size_bytes(),
            Self::F16(v) => v.heap_size_bytes(),
            Self::F32(v) => v.heap_size_bytes(),
            Self::F64(v) => v.heap_size_bytes(),
        }
    }

    #[inline]
    fn is_pod() -> bool {
        <::re_types_core::ArrowBuffer<u8>>::is_pod()
            && <::re_types_core::ArrowBuffer<u16>>::is_pod()
            && <::re_types_core::ArrowBuffer<u32>>::is_pod()
            && <::re_types_core::ArrowBuffer<u64>>::is_pod()
            && <::re_types_core::ArrowBuffer<i8>>::is_pod()
            && <::re_types_core::ArrowBuffer<i16>>::is_pod()
            && <::re_types_core::ArrowBuffer<i32>>::is_pod()
            && <::re_types_core::ArrowBuffer<i64>>::is_pod()
            && <::re_types_core::ArrowBuffer<half::f16>>::is_pod()
            && <::re_types_core::ArrowBuffer<f32>>::is_pod()
            && <::re_types_core::ArrowBuffer<f64>>::is_pod()
    }
}
