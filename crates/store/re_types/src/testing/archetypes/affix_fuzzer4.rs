// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

#[derive(Clone, Debug, PartialEq, Default)]
pub struct AffixFuzzer4 {
    pub fuzz2101: Option<SerializedComponentBatch>,
    pub fuzz2102: Option<SerializedComponentBatch>,
    pub fuzz2103: Option<SerializedComponentBatch>,
    pub fuzz2104: Option<SerializedComponentBatch>,
    pub fuzz2105: Option<SerializedComponentBatch>,
    pub fuzz2106: Option<SerializedComponentBatch>,
    pub fuzz2107: Option<SerializedComponentBatch>,
    pub fuzz2108: Option<SerializedComponentBatch>,
    pub fuzz2109: Option<SerializedComponentBatch>,
    pub fuzz2110: Option<SerializedComponentBatch>,
    pub fuzz2111: Option<SerializedComponentBatch>,
    pub fuzz2112: Option<SerializedComponentBatch>,
    pub fuzz2113: Option<SerializedComponentBatch>,
    pub fuzz2114: Option<SerializedComponentBatch>,
    pub fuzz2115: Option<SerializedComponentBatch>,
    pub fuzz2116: Option<SerializedComponentBatch>,
    pub fuzz2117: Option<SerializedComponentBatch>,
    pub fuzz2118: Option<SerializedComponentBatch>,
}

impl AffixFuzzer4 {
    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2101`].
    #[inline]
    pub fn descriptor_fuzz2101() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer1".into(),
            archetype_field_name: Some("fuzz2101".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2102`].
    #[inline]
    pub fn descriptor_fuzz2102() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer2".into(),
            archetype_field_name: Some("fuzz2102".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2103`].
    #[inline]
    pub fn descriptor_fuzz2103() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer3".into(),
            archetype_field_name: Some("fuzz2103".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2104`].
    #[inline]
    pub fn descriptor_fuzz2104() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer4".into(),
            archetype_field_name: Some("fuzz2104".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2105`].
    #[inline]
    pub fn descriptor_fuzz2105() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer5".into(),
            archetype_field_name: Some("fuzz2105".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2106`].
    #[inline]
    pub fn descriptor_fuzz2106() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer6".into(),
            archetype_field_name: Some("fuzz2106".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2107`].
    #[inline]
    pub fn descriptor_fuzz2107() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer7".into(),
            archetype_field_name: Some("fuzz2107".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2108`].
    #[inline]
    pub fn descriptor_fuzz2108() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer8".into(),
            archetype_field_name: Some("fuzz2108".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2109`].
    #[inline]
    pub fn descriptor_fuzz2109() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer9".into(),
            archetype_field_name: Some("fuzz2109".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2110`].
    #[inline]
    pub fn descriptor_fuzz2110() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer10".into(),
            archetype_field_name: Some("fuzz2110".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2111`].
    #[inline]
    pub fn descriptor_fuzz2111() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer11".into(),
            archetype_field_name: Some("fuzz2111".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2112`].
    #[inline]
    pub fn descriptor_fuzz2112() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer12".into(),
            archetype_field_name: Some("fuzz2112".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2113`].
    #[inline]
    pub fn descriptor_fuzz2113() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer13".into(),
            archetype_field_name: Some("fuzz2113".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2114`].
    #[inline]
    pub fn descriptor_fuzz2114() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer14".into(),
            archetype_field_name: Some("fuzz2114".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2115`].
    #[inline]
    pub fn descriptor_fuzz2115() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer15".into(),
            archetype_field_name: Some("fuzz2115".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2116`].
    #[inline]
    pub fn descriptor_fuzz2116() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer16".into(),
            archetype_field_name: Some("fuzz2116".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2117`].
    #[inline]
    pub fn descriptor_fuzz2117() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer17".into(),
            archetype_field_name: Some("fuzz2117".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::fuzz2118`].
    #[inline]
    pub fn descriptor_fuzz2118() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer18".into(),
            archetype_field_name: Some("fuzz2118".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.testing.archetypes.AffixFuzzer4".into()),
            component_name: "rerun.testing.components.AffixFuzzer4Indicator".into(),
            archetype_field_name: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [AffixFuzzer4::descriptor_indicator()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 18usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            AffixFuzzer4::descriptor_fuzz2101(),
            AffixFuzzer4::descriptor_fuzz2102(),
            AffixFuzzer4::descriptor_fuzz2103(),
            AffixFuzzer4::descriptor_fuzz2104(),
            AffixFuzzer4::descriptor_fuzz2105(),
            AffixFuzzer4::descriptor_fuzz2106(),
            AffixFuzzer4::descriptor_fuzz2107(),
            AffixFuzzer4::descriptor_fuzz2108(),
            AffixFuzzer4::descriptor_fuzz2109(),
            AffixFuzzer4::descriptor_fuzz2110(),
            AffixFuzzer4::descriptor_fuzz2111(),
            AffixFuzzer4::descriptor_fuzz2112(),
            AffixFuzzer4::descriptor_fuzz2113(),
            AffixFuzzer4::descriptor_fuzz2114(),
            AffixFuzzer4::descriptor_fuzz2115(),
            AffixFuzzer4::descriptor_fuzz2116(),
            AffixFuzzer4::descriptor_fuzz2117(),
            AffixFuzzer4::descriptor_fuzz2118(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 19usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            AffixFuzzer4::descriptor_indicator(),
            AffixFuzzer4::descriptor_fuzz2101(),
            AffixFuzzer4::descriptor_fuzz2102(),
            AffixFuzzer4::descriptor_fuzz2103(),
            AffixFuzzer4::descriptor_fuzz2104(),
            AffixFuzzer4::descriptor_fuzz2105(),
            AffixFuzzer4::descriptor_fuzz2106(),
            AffixFuzzer4::descriptor_fuzz2107(),
            AffixFuzzer4::descriptor_fuzz2108(),
            AffixFuzzer4::descriptor_fuzz2109(),
            AffixFuzzer4::descriptor_fuzz2110(),
            AffixFuzzer4::descriptor_fuzz2111(),
            AffixFuzzer4::descriptor_fuzz2112(),
            AffixFuzzer4::descriptor_fuzz2113(),
            AffixFuzzer4::descriptor_fuzz2114(),
            AffixFuzzer4::descriptor_fuzz2115(),
            AffixFuzzer4::descriptor_fuzz2116(),
            AffixFuzzer4::descriptor_fuzz2117(),
            AffixFuzzer4::descriptor_fuzz2118(),
        ]
    });

impl AffixFuzzer4 {
    /// The total number of components in the archetype: 0 required, 1 recommended, 18 optional
    pub const NUM_COMPONENTS: usize = 19usize;
}

/// Indicator component for the [`AffixFuzzer4`] [`::re_types_core::Archetype`]
pub type AffixFuzzer4Indicator = ::re_types_core::GenericIndicatorComponent<AffixFuzzer4>;

impl ::re_types_core::Archetype for AffixFuzzer4 {
    type Indicator = AffixFuzzer4Indicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.testing.archetypes.AffixFuzzer4".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Affix fuzzer 4"
    }

    #[inline]
    fn indicator() -> SerializedComponentBatch {
        #[allow(clippy::unwrap_used)]
        AffixFuzzer4Indicator::DEFAULT.serialized().unwrap()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let fuzz2101 = arrays_by_descr
            .get(&Self::descriptor_fuzz2101())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2101()));
        let fuzz2102 = arrays_by_descr
            .get(&Self::descriptor_fuzz2102())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2102()));
        let fuzz2103 = arrays_by_descr
            .get(&Self::descriptor_fuzz2103())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2103()));
        let fuzz2104 = arrays_by_descr
            .get(&Self::descriptor_fuzz2104())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2104()));
        let fuzz2105 = arrays_by_descr
            .get(&Self::descriptor_fuzz2105())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2105()));
        let fuzz2106 = arrays_by_descr
            .get(&Self::descriptor_fuzz2106())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2106()));
        let fuzz2107 = arrays_by_descr
            .get(&Self::descriptor_fuzz2107())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2107()));
        let fuzz2108 = arrays_by_descr
            .get(&Self::descriptor_fuzz2108())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2108()));
        let fuzz2109 = arrays_by_descr
            .get(&Self::descriptor_fuzz2109())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2109()));
        let fuzz2110 = arrays_by_descr
            .get(&Self::descriptor_fuzz2110())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2110()));
        let fuzz2111 = arrays_by_descr
            .get(&Self::descriptor_fuzz2111())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2111()));
        let fuzz2112 = arrays_by_descr
            .get(&Self::descriptor_fuzz2112())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2112()));
        let fuzz2113 = arrays_by_descr
            .get(&Self::descriptor_fuzz2113())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2113()));
        let fuzz2114 = arrays_by_descr
            .get(&Self::descriptor_fuzz2114())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2114()));
        let fuzz2115 = arrays_by_descr
            .get(&Self::descriptor_fuzz2115())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2115()));
        let fuzz2116 = arrays_by_descr
            .get(&Self::descriptor_fuzz2116())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2116()));
        let fuzz2117 = arrays_by_descr
            .get(&Self::descriptor_fuzz2117())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2117()));
        let fuzz2118 = arrays_by_descr
            .get(&Self::descriptor_fuzz2118())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_fuzz2118()));
        Ok(Self {
            fuzz2101,
            fuzz2102,
            fuzz2103,
            fuzz2104,
            fuzz2105,
            fuzz2106,
            fuzz2107,
            fuzz2108,
            fuzz2109,
            fuzz2110,
            fuzz2111,
            fuzz2112,
            fuzz2113,
            fuzz2114,
            fuzz2115,
            fuzz2116,
            fuzz2117,
            fuzz2118,
        })
    }
}

impl ::re_types_core::AsComponents for AffixFuzzer4 {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.fuzz2101.clone(),
            self.fuzz2102.clone(),
            self.fuzz2103.clone(),
            self.fuzz2104.clone(),
            self.fuzz2105.clone(),
            self.fuzz2106.clone(),
            self.fuzz2107.clone(),
            self.fuzz2108.clone(),
            self.fuzz2109.clone(),
            self.fuzz2110.clone(),
            self.fuzz2111.clone(),
            self.fuzz2112.clone(),
            self.fuzz2113.clone(),
            self.fuzz2114.clone(),
            self.fuzz2115.clone(),
            self.fuzz2116.clone(),
            self.fuzz2117.clone(),
            self.fuzz2118.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for AffixFuzzer4 {}

impl AffixFuzzer4 {
    /// Create a new `AffixFuzzer4`.
    #[inline]
    pub fn new() -> Self {
        Self {
            fuzz2101: None,
            fuzz2102: None,
            fuzz2103: None,
            fuzz2104: None,
            fuzz2105: None,
            fuzz2106: None,
            fuzz2107: None,
            fuzz2108: None,
            fuzz2109: None,
            fuzz2110: None,
            fuzz2111: None,
            fuzz2112: None,
            fuzz2113: None,
            fuzz2114: None,
            fuzz2115: None,
            fuzz2116: None,
            fuzz2117: None,
            fuzz2118: None,
        }
    }

    /// Update only some specific fields of a `AffixFuzzer4`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `AffixFuzzer4`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            fuzz2101: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer1::arrow_empty(),
                Self::descriptor_fuzz2101(),
            )),
            fuzz2102: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer2::arrow_empty(),
                Self::descriptor_fuzz2102(),
            )),
            fuzz2103: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer3::arrow_empty(),
                Self::descriptor_fuzz2103(),
            )),
            fuzz2104: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer4::arrow_empty(),
                Self::descriptor_fuzz2104(),
            )),
            fuzz2105: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer5::arrow_empty(),
                Self::descriptor_fuzz2105(),
            )),
            fuzz2106: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer6::arrow_empty(),
                Self::descriptor_fuzz2106(),
            )),
            fuzz2107: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer7::arrow_empty(),
                Self::descriptor_fuzz2107(),
            )),
            fuzz2108: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer8::arrow_empty(),
                Self::descriptor_fuzz2108(),
            )),
            fuzz2109: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer9::arrow_empty(),
                Self::descriptor_fuzz2109(),
            )),
            fuzz2110: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer10::arrow_empty(),
                Self::descriptor_fuzz2110(),
            )),
            fuzz2111: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer11::arrow_empty(),
                Self::descriptor_fuzz2111(),
            )),
            fuzz2112: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer12::arrow_empty(),
                Self::descriptor_fuzz2112(),
            )),
            fuzz2113: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer13::arrow_empty(),
                Self::descriptor_fuzz2113(),
            )),
            fuzz2114: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer14::arrow_empty(),
                Self::descriptor_fuzz2114(),
            )),
            fuzz2115: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer15::arrow_empty(),
                Self::descriptor_fuzz2115(),
            )),
            fuzz2116: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer16::arrow_empty(),
                Self::descriptor_fuzz2116(),
            )),
            fuzz2117: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer17::arrow_empty(),
                Self::descriptor_fuzz2117(),
            )),
            fuzz2118: Some(SerializedComponentBatch::new(
                crate::testing::components::AffixFuzzer18::arrow_empty(),
                Self::descriptor_fuzz2118(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [
            self.fuzz2101
                .map(|fuzz2101| fuzz2101.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2102
                .map(|fuzz2102| fuzz2102.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2103
                .map(|fuzz2103| fuzz2103.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2104
                .map(|fuzz2104| fuzz2104.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2105
                .map(|fuzz2105| fuzz2105.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2106
                .map(|fuzz2106| fuzz2106.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2107
                .map(|fuzz2107| fuzz2107.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2108
                .map(|fuzz2108| fuzz2108.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2109
                .map(|fuzz2109| fuzz2109.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2110
                .map(|fuzz2110| fuzz2110.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2111
                .map(|fuzz2111| fuzz2111.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2112
                .map(|fuzz2112| fuzz2112.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2113
                .map(|fuzz2113| fuzz2113.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2114
                .map(|fuzz2114| fuzz2114.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2115
                .map(|fuzz2115| fuzz2115.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2116
                .map(|fuzz2116| fuzz2116.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2117
                .map(|fuzz2117| fuzz2117.partitioned(_lengths.clone()))
                .transpose()?,
            self.fuzz2118
                .map(|fuzz2118| fuzz2118.partitioned(_lengths.clone()))
                .transpose()?,
        ];
        Ok(columns
            .into_iter()
            .flatten()
            .chain([::re_types_core::indicator_column::<Self>(
                _lengths.into_iter().count(),
            )?]))
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_fuzz2101 = self.fuzz2101.as_ref().map(|b| b.array.len());
        let len_fuzz2102 = self.fuzz2102.as_ref().map(|b| b.array.len());
        let len_fuzz2103 = self.fuzz2103.as_ref().map(|b| b.array.len());
        let len_fuzz2104 = self.fuzz2104.as_ref().map(|b| b.array.len());
        let len_fuzz2105 = self.fuzz2105.as_ref().map(|b| b.array.len());
        let len_fuzz2106 = self.fuzz2106.as_ref().map(|b| b.array.len());
        let len_fuzz2107 = self.fuzz2107.as_ref().map(|b| b.array.len());
        let len_fuzz2108 = self.fuzz2108.as_ref().map(|b| b.array.len());
        let len_fuzz2109 = self.fuzz2109.as_ref().map(|b| b.array.len());
        let len_fuzz2110 = self.fuzz2110.as_ref().map(|b| b.array.len());
        let len_fuzz2111 = self.fuzz2111.as_ref().map(|b| b.array.len());
        let len_fuzz2112 = self.fuzz2112.as_ref().map(|b| b.array.len());
        let len_fuzz2113 = self.fuzz2113.as_ref().map(|b| b.array.len());
        let len_fuzz2114 = self.fuzz2114.as_ref().map(|b| b.array.len());
        let len_fuzz2115 = self.fuzz2115.as_ref().map(|b| b.array.len());
        let len_fuzz2116 = self.fuzz2116.as_ref().map(|b| b.array.len());
        let len_fuzz2117 = self.fuzz2117.as_ref().map(|b| b.array.len());
        let len_fuzz2118 = self.fuzz2118.as_ref().map(|b| b.array.len());
        let len = None
            .or(len_fuzz2101)
            .or(len_fuzz2102)
            .or(len_fuzz2103)
            .or(len_fuzz2104)
            .or(len_fuzz2105)
            .or(len_fuzz2106)
            .or(len_fuzz2107)
            .or(len_fuzz2108)
            .or(len_fuzz2109)
            .or(len_fuzz2110)
            .or(len_fuzz2111)
            .or(len_fuzz2112)
            .or(len_fuzz2113)
            .or(len_fuzz2114)
            .or(len_fuzz2115)
            .or(len_fuzz2116)
            .or(len_fuzz2117)
            .or(len_fuzz2118)
            .unwrap_or(0);
        self.columns(std::iter::repeat(1).take(len))
    }

    #[inline]
    pub fn with_fuzz2101(
        mut self,
        fuzz2101: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer1>>,
    ) -> Self {
        self.fuzz2101 = try_serialize_field(Self::descriptor_fuzz2101(), fuzz2101);
        self
    }

    #[inline]
    pub fn with_fuzz2102(
        mut self,
        fuzz2102: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer2>>,
    ) -> Self {
        self.fuzz2102 = try_serialize_field(Self::descriptor_fuzz2102(), fuzz2102);
        self
    }

    #[inline]
    pub fn with_fuzz2103(
        mut self,
        fuzz2103: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer3>>,
    ) -> Self {
        self.fuzz2103 = try_serialize_field(Self::descriptor_fuzz2103(), fuzz2103);
        self
    }

    #[inline]
    pub fn with_fuzz2104(
        mut self,
        fuzz2104: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer4>>,
    ) -> Self {
        self.fuzz2104 = try_serialize_field(Self::descriptor_fuzz2104(), fuzz2104);
        self
    }

    #[inline]
    pub fn with_fuzz2105(
        mut self,
        fuzz2105: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer5>>,
    ) -> Self {
        self.fuzz2105 = try_serialize_field(Self::descriptor_fuzz2105(), fuzz2105);
        self
    }

    #[inline]
    pub fn with_fuzz2106(
        mut self,
        fuzz2106: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer6>>,
    ) -> Self {
        self.fuzz2106 = try_serialize_field(Self::descriptor_fuzz2106(), fuzz2106);
        self
    }

    #[inline]
    pub fn with_fuzz2107(
        mut self,
        fuzz2107: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer7>>,
    ) -> Self {
        self.fuzz2107 = try_serialize_field(Self::descriptor_fuzz2107(), fuzz2107);
        self
    }

    #[inline]
    pub fn with_fuzz2108(
        mut self,
        fuzz2108: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer8>>,
    ) -> Self {
        self.fuzz2108 = try_serialize_field(Self::descriptor_fuzz2108(), fuzz2108);
        self
    }

    #[inline]
    pub fn with_fuzz2109(
        mut self,
        fuzz2109: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer9>>,
    ) -> Self {
        self.fuzz2109 = try_serialize_field(Self::descriptor_fuzz2109(), fuzz2109);
        self
    }

    #[inline]
    pub fn with_fuzz2110(
        mut self,
        fuzz2110: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer10>>,
    ) -> Self {
        self.fuzz2110 = try_serialize_field(Self::descriptor_fuzz2110(), fuzz2110);
        self
    }

    #[inline]
    pub fn with_fuzz2111(
        mut self,
        fuzz2111: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer11>>,
    ) -> Self {
        self.fuzz2111 = try_serialize_field(Self::descriptor_fuzz2111(), fuzz2111);
        self
    }

    #[inline]
    pub fn with_fuzz2112(
        mut self,
        fuzz2112: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer12>>,
    ) -> Self {
        self.fuzz2112 = try_serialize_field(Self::descriptor_fuzz2112(), fuzz2112);
        self
    }

    #[inline]
    pub fn with_fuzz2113(
        mut self,
        fuzz2113: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer13>>,
    ) -> Self {
        self.fuzz2113 = try_serialize_field(Self::descriptor_fuzz2113(), fuzz2113);
        self
    }

    #[inline]
    pub fn with_fuzz2114(
        mut self,
        fuzz2114: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer14>>,
    ) -> Self {
        self.fuzz2114 = try_serialize_field(Self::descriptor_fuzz2114(), fuzz2114);
        self
    }

    #[inline]
    pub fn with_fuzz2115(
        mut self,
        fuzz2115: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer15>>,
    ) -> Self {
        self.fuzz2115 = try_serialize_field(Self::descriptor_fuzz2115(), fuzz2115);
        self
    }

    #[inline]
    pub fn with_fuzz2116(
        mut self,
        fuzz2116: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer16>>,
    ) -> Self {
        self.fuzz2116 = try_serialize_field(Self::descriptor_fuzz2116(), fuzz2116);
        self
    }

    #[inline]
    pub fn with_fuzz2117(
        mut self,
        fuzz2117: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer17>>,
    ) -> Self {
        self.fuzz2117 = try_serialize_field(Self::descriptor_fuzz2117(), fuzz2117);
        self
    }

    #[inline]
    pub fn with_fuzz2118(
        mut self,
        fuzz2118: impl IntoIterator<Item = impl Into<crate::testing::components::AffixFuzzer18>>,
    ) -> Self {
        self.fuzz2118 = try_serialize_field(Self::descriptor_fuzz2118(), fuzz2118);
        self
    }
}

impl ::re_byte_size::SizeBytes for AffixFuzzer4 {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.fuzz2101.heap_size_bytes()
            + self.fuzz2102.heap_size_bytes()
            + self.fuzz2103.heap_size_bytes()
            + self.fuzz2104.heap_size_bytes()
            + self.fuzz2105.heap_size_bytes()
            + self.fuzz2106.heap_size_bytes()
            + self.fuzz2107.heap_size_bytes()
            + self.fuzz2108.heap_size_bytes()
            + self.fuzz2109.heap_size_bytes()
            + self.fuzz2110.heap_size_bytes()
            + self.fuzz2111.heap_size_bytes()
            + self.fuzz2112.heap_size_bytes()
            + self.fuzz2113.heap_size_bytes()
            + self.fuzz2114.heap_size_bytes()
            + self.fuzz2115.heap_size_bytes()
            + self.fuzz2116.heap_size_bytes()
            + self.fuzz2117.heap_size_bytes()
            + self.fuzz2118.heap_size_bytes()
    }
}
