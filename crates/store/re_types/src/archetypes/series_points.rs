// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/series_points.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Define the style properties for one or more point series (scatter plot) in a chart.
///
/// This archetype only provides styling information.
/// Changes over time are supported for most but not all its fields (see respective fields for details),
/// it's generally recommended to log this type as static.
///
/// The underlying data needs to be logged to the same entity-path using [`archetypes::Scalars`][crate::archetypes::Scalars].
/// Dimensionality of the scalar arrays logged at each time point is assumed to be the same over time.
///
/// ## Example
///
/// ### Point series
/// ```ignore
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///     let rec = rerun::RecordingStreamBuilder::new("rerun_example_series_point_style").spawn()?;
///
///     // Set up plot styling:
///     // They are logged static as they don't change over time and apply to all timelines.
///     // Log two point series under a shared root so that they show in the same plot by default.
///     rec.log_static(
///         "trig/sin",
///         &rerun::SeriesPoints::new()
///             .with_colors([[255, 0, 0]])
///             .with_names(["sin(0.01t)"])
///             .with_markers([rerun::components::MarkerShape::Circle])
///             .with_marker_sizes([4.0]),
///     )?;
///     rec.log_static(
///         "trig/cos",
///         &rerun::SeriesPoints::new()
///             .with_colors([[0, 255, 0]])
///             .with_names(["cos(0.01t)"])
///             .with_markers([rerun::components::MarkerShape::Cross])
///             .with_marker_sizes([2.0]),
///     )?;
///
///     for t in 0..((std::f32::consts::TAU * 2.0 * 10.0) as i64) {
///         rec.set_time_sequence("step", t);
///
///         // Log two time series under a shared root so that they show in the same plot by default.
///         rec.log("trig/sin", &rerun::Scalars::single((t as f64 / 10.0).sin()))?;
///         rec.log("trig/cos", &rerun::Scalars::single((t as f64 / 10.0).cos()))?;
///     }
///
///     Ok(())
/// }
/// ```
/// <center>
/// <picture>
///   <source media="(max-width: 480px)" srcset="https://static.rerun.io/series_point_style/82207a705da6c086b28ce161db1db9e8b12258b7/480w.png">
///   <source media="(max-width: 768px)" srcset="https://static.rerun.io/series_point_style/82207a705da6c086b28ce161db1db9e8b12258b7/768w.png">
///   <source media="(max-width: 1024px)" srcset="https://static.rerun.io/series_point_style/82207a705da6c086b28ce161db1db9e8b12258b7/1024w.png">
///   <source media="(max-width: 1200px)" srcset="https://static.rerun.io/series_point_style/82207a705da6c086b28ce161db1db9e8b12258b7/1200w.png">
///   <img src="https://static.rerun.io/series_point_style/82207a705da6c086b28ce161db1db9e8b12258b7/full.png" width="640">
/// </picture>
/// </center>
#[derive(Clone, Debug, Default)]
pub struct SeriesPoints {
    /// Color for the corresponding series.
    ///
    /// May change over time, but can cause discontinuities in the line.
    pub colors: Option<SerializedComponentBatch>,

    /// What shape to use to represent the point
    ///
    /// May change over time.
    pub markers: Option<SerializedComponentBatch>,

    /// Display name of the series.
    ///
    /// Used in the legend. Expected to be unchanging over time.
    pub names: Option<SerializedComponentBatch>,

    /// Which lines are visible.
    ///
    /// If not set, all line series on this entity are visible.
    /// Unlike with the regular visibility property of the entire entity, any series that is hidden
    /// via this property will still be visible in the legend.
    ///
    /// May change over time.
    pub visible_series: Option<SerializedComponentBatch>,

    /// Sizes of the markers.
    ///
    /// May change over time.
    pub marker_sizes: Option<SerializedComponentBatch>,
}

impl SeriesPoints {
    /// Returns the [`ComponentDescriptor`] for [`Self::colors`].
    #[inline]
    pub fn descriptor_colors() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.SeriesPoints".into()),
            component_name: "rerun.components.Color".into(),
            archetype_field_name: Some("colors".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::markers`].
    #[inline]
    pub fn descriptor_markers() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.SeriesPoints".into()),
            component_name: "rerun.components.MarkerShape".into(),
            archetype_field_name: Some("markers".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::names`].
    #[inline]
    pub fn descriptor_names() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.SeriesPoints".into()),
            component_name: "rerun.components.Name".into(),
            archetype_field_name: Some("names".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::visible_series`].
    #[inline]
    pub fn descriptor_visible_series() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.SeriesPoints".into()),
            component_name: "rerun.components.SeriesVisible".into(),
            archetype_field_name: Some("visible_series".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::marker_sizes`].
    #[inline]
    pub fn descriptor_marker_sizes() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.SeriesPoints".into()),
            component_name: "rerun.components.MarkerSize".into(),
            archetype_field_name: Some("marker_sizes".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.SeriesPoints".into()),
            component_name: "rerun.components.SeriesPointsIndicator".into(),
            archetype_field_name: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [SeriesPoints::descriptor_indicator()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 5usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            SeriesPoints::descriptor_colors(),
            SeriesPoints::descriptor_markers(),
            SeriesPoints::descriptor_names(),
            SeriesPoints::descriptor_visible_series(),
            SeriesPoints::descriptor_marker_sizes(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 6usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            SeriesPoints::descriptor_indicator(),
            SeriesPoints::descriptor_colors(),
            SeriesPoints::descriptor_markers(),
            SeriesPoints::descriptor_names(),
            SeriesPoints::descriptor_visible_series(),
            SeriesPoints::descriptor_marker_sizes(),
        ]
    });

impl SeriesPoints {
    /// The total number of components in the archetype: 0 required, 1 recommended, 5 optional
    pub const NUM_COMPONENTS: usize = 6usize;
}

/// Indicator component for the [`SeriesPoints`] [`::re_types_core::Archetype`]
pub type SeriesPointsIndicator = ::re_types_core::GenericIndicatorComponent<SeriesPoints>;

impl ::re_types_core::Archetype for SeriesPoints {
    type Indicator = SeriesPointsIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.SeriesPoints".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Series points"
    }

    #[inline]
    fn indicator() -> SerializedComponentBatch {
        #[allow(clippy::unwrap_used)]
        SeriesPointsIndicator::DEFAULT.serialized().unwrap()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let colors = arrays_by_descr
            .get(&Self::descriptor_colors())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_colors()));
        let markers = arrays_by_descr
            .get(&Self::descriptor_markers())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_markers()));
        let names = arrays_by_descr
            .get(&Self::descriptor_names())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_names()));
        let visible_series = arrays_by_descr
            .get(&Self::descriptor_visible_series())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_visible_series())
            });
        let marker_sizes = arrays_by_descr
            .get(&Self::descriptor_marker_sizes())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_marker_sizes())
            });
        Ok(Self {
            colors,
            markers,
            names,
            visible_series,
            marker_sizes,
        })
    }
}

impl ::re_types_core::AsComponents for SeriesPoints {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.colors.clone(),
            self.markers.clone(),
            self.names.clone(),
            self.visible_series.clone(),
            self.marker_sizes.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for SeriesPoints {}

impl SeriesPoints {
    /// Create a new `SeriesPoints`.
    #[inline]
    pub fn new() -> Self {
        Self {
            colors: None,
            markers: None,
            names: None,
            visible_series: None,
            marker_sizes: None,
        }
    }

    /// Update only some specific fields of a `SeriesPoints`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `SeriesPoints`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            colors: Some(SerializedComponentBatch::new(
                crate::components::Color::arrow_empty(),
                Self::descriptor_colors(),
            )),
            markers: Some(SerializedComponentBatch::new(
                crate::components::MarkerShape::arrow_empty(),
                Self::descriptor_markers(),
            )),
            names: Some(SerializedComponentBatch::new(
                crate::components::Name::arrow_empty(),
                Self::descriptor_names(),
            )),
            visible_series: Some(SerializedComponentBatch::new(
                crate::components::SeriesVisible::arrow_empty(),
                Self::descriptor_visible_series(),
            )),
            marker_sizes: Some(SerializedComponentBatch::new(
                crate::components::MarkerSize::arrow_empty(),
                Self::descriptor_marker_sizes(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [
            self.colors
                .map(|colors| colors.partitioned(_lengths.clone()))
                .transpose()?,
            self.markers
                .map(|markers| markers.partitioned(_lengths.clone()))
                .transpose()?,
            self.names
                .map(|names| names.partitioned(_lengths.clone()))
                .transpose()?,
            self.visible_series
                .map(|visible_series| visible_series.partitioned(_lengths.clone()))
                .transpose()?,
            self.marker_sizes
                .map(|marker_sizes| marker_sizes.partitioned(_lengths.clone()))
                .transpose()?,
        ];
        Ok(columns
            .into_iter()
            .flatten()
            .chain([::re_types_core::indicator_column::<Self>(
                _lengths.into_iter().count(),
            )?]))
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_colors = self.colors.as_ref().map(|b| b.array.len());
        let len_markers = self.markers.as_ref().map(|b| b.array.len());
        let len_names = self.names.as_ref().map(|b| b.array.len());
        let len_visible_series = self.visible_series.as_ref().map(|b| b.array.len());
        let len_marker_sizes = self.marker_sizes.as_ref().map(|b| b.array.len());
        let len = None
            .or(len_colors)
            .or(len_markers)
            .or(len_names)
            .or(len_visible_series)
            .or(len_marker_sizes)
            .unwrap_or(0);
        self.columns(std::iter::repeat(1).take(len))
    }

    /// Color for the corresponding series.
    ///
    /// May change over time, but can cause discontinuities in the line.
    #[inline]
    pub fn with_colors(
        mut self,
        colors: impl IntoIterator<Item = impl Into<crate::components::Color>>,
    ) -> Self {
        self.colors = try_serialize_field(Self::descriptor_colors(), colors);
        self
    }

    /// What shape to use to represent the point
    ///
    /// May change over time.
    #[inline]
    pub fn with_markers(
        mut self,
        markers: impl IntoIterator<Item = impl Into<crate::components::MarkerShape>>,
    ) -> Self {
        self.markers = try_serialize_field(Self::descriptor_markers(), markers);
        self
    }

    /// Display name of the series.
    ///
    /// Used in the legend. Expected to be unchanging over time.
    #[inline]
    pub fn with_names(
        mut self,
        names: impl IntoIterator<Item = impl Into<crate::components::Name>>,
    ) -> Self {
        self.names = try_serialize_field(Self::descriptor_names(), names);
        self
    }

    /// Which lines are visible.
    ///
    /// If not set, all line series on this entity are visible.
    /// Unlike with the regular visibility property of the entire entity, any series that is hidden
    /// via this property will still be visible in the legend.
    ///
    /// May change over time.
    #[inline]
    pub fn with_visible_series(
        mut self,
        visible_series: impl IntoIterator<Item = impl Into<crate::components::SeriesVisible>>,
    ) -> Self {
        self.visible_series =
            try_serialize_field(Self::descriptor_visible_series(), visible_series);
        self
    }

    /// Sizes of the markers.
    ///
    /// May change over time.
    #[inline]
    pub fn with_marker_sizes(
        mut self,
        marker_sizes: impl IntoIterator<Item = impl Into<crate::components::MarkerSize>>,
    ) -> Self {
        self.marker_sizes = try_serialize_field(Self::descriptor_marker_sizes(), marker_sizes);
        self
    }
}

impl ::re_byte_size::SizeBytes for SeriesPoints {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.colors.heap_size_bytes()
            + self.markers.heap_size_bytes()
            + self.names.heap_size_bytes()
            + self.visible_series.heap_size_bytes()
            + self.marker_sizes.heap_size_bytes()
    }
}
