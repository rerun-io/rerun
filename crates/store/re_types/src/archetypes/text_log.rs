// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/text_log.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, ComponentBatchCowWithDescriptor, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: A log entry in a text log, comprised of a text body and its log level.
///
/// ## Example
///
/// ### `text_log_integration`:
/// ```ignore
/// use rerun::external::log;
///
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///     let rec = rerun::RecordingStreamBuilder::new("rerun_example_text_log_integration").spawn()?;
///
///     // Log a text entry directly:
///     rec.log(
///         "logs",
///         &rerun::TextLog::new("this entry has loglevel TRACE")
///             .with_level(rerun::TextLogLevel::TRACE),
///     )?;
///
///     // Or log via a logging handler:
///     rerun::Logger::new(rec.clone()) // recording streams are ref-counted
///         .with_path_prefix("logs/handler")
///         // You can also use the standard `RUST_LOG` environment variable!
///         .with_filter(rerun::default_log_filter())
///         .init()?;
///     log::info!("This INFO log got added through the standard logging interface");
///
///     log::logger().flush();
///
///     Ok(())
/// }
/// ```
/// <center>
/// <picture>
///   <source media="(max-width: 480px)" srcset="https://static.rerun.io/text_log_integration/9737d0c986325802a9885499d6fcc773b1736488/480w.png">
///   <source media="(max-width: 768px)" srcset="https://static.rerun.io/text_log_integration/9737d0c986325802a9885499d6fcc773b1736488/768w.png">
///   <source media="(max-width: 1024px)" srcset="https://static.rerun.io/text_log_integration/9737d0c986325802a9885499d6fcc773b1736488/1024w.png">
///   <source media="(max-width: 1200px)" srcset="https://static.rerun.io/text_log_integration/9737d0c986325802a9885499d6fcc773b1736488/1200w.png">
///   <img src="https://static.rerun.io/text_log_integration/9737d0c986325802a9885499d6fcc773b1736488/full.png" width="640">
/// </picture>
/// </center>
#[derive(Clone, Debug, PartialEq, Default)]
pub struct TextLog {
    /// The body of the message.
    pub text: Option<SerializedComponentBatch>,

    /// The verbosity level of the message.
    ///
    /// This can be used to filter the log messages in the Rerun Viewer.
    pub level: Option<SerializedComponentBatch>,

    /// Optional color to use for the log line in the Rerun Viewer.
    pub color: Option<SerializedComponentBatch>,
}

impl TextLog {
    /// Returns the [`ComponentDescriptor`] for [`Self::text`].
    #[inline]
    pub fn descriptor_text() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.TextLog".into()),
            component_name: "rerun.components.Text".into(),
            archetype_field_name: Some("text".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::level`].
    #[inline]
    pub fn descriptor_level() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.TextLog".into()),
            component_name: "rerun.components.TextLogLevel".into(),
            archetype_field_name: Some("level".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::color`].
    #[inline]
    pub fn descriptor_color() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.TextLog".into()),
            component_name: "rerun.components.Color".into(),
            archetype_field_name: Some("color".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.TextLog".into()),
            component_name: "rerun.components.TextLogIndicator".into(),
            archetype_field_name: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [TextLog::descriptor_text()]);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 2usize]> =
    once_cell::sync::Lazy::new(|| [TextLog::descriptor_level(), TextLog::descriptor_indicator()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [TextLog::descriptor_color()]);

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 4usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            TextLog::descriptor_text(),
            TextLog::descriptor_level(),
            TextLog::descriptor_indicator(),
            TextLog::descriptor_color(),
        ]
    });

impl TextLog {
    /// The total number of components in the archetype: 1 required, 2 recommended, 1 optional
    pub const NUM_COMPONENTS: usize = 4usize;
}

/// Indicator component for the [`TextLog`] [`::re_types_core::Archetype`]
pub type TextLogIndicator = ::re_types_core::GenericIndicatorComponent<TextLog>;

impl ::re_types_core::Archetype for TextLog {
    type Indicator = TextLogIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.TextLog".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Text log"
    }

    #[inline]
    fn indicator() -> ComponentBatchCowWithDescriptor<'static> {
        static INDICATOR: TextLogIndicator = TextLogIndicator::DEFAULT;
        ComponentBatchCowWithDescriptor::new(&INDICATOR as &dyn ::re_types_core::ComponentBatch)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let text = arrays_by_descr
            .get(&Self::descriptor_text())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_text()));
        let level = arrays_by_descr
            .get(&Self::descriptor_level())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_level()));
        let color = arrays_by_descr
            .get(&Self::descriptor_color())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_color()));
        Ok(Self { text, level, color })
    }
}

impl ::re_types_core::AsComponents for TextLog {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Self::indicator().serialized(),
            self.text.clone(),
            self.level.clone(),
            self.color.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for TextLog {}

impl TextLog {
    /// Create a new `TextLog`.
    #[inline]
    pub fn new(text: impl Into<crate::components::Text>) -> Self {
        Self {
            text: try_serialize_field(Self::descriptor_text(), [text]),
            level: None,
            color: None,
        }
    }

    /// Update only some specific fields of a `TextLog`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `TextLog`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            text: Some(SerializedComponentBatch::new(
                crate::components::Text::arrow_empty(),
                Self::descriptor_text(),
            )),
            level: Some(SerializedComponentBatch::new(
                crate::components::TextLogLevel::arrow_empty(),
                Self::descriptor_level(),
            )),
            color: Some(SerializedComponentBatch::new(
                crate::components::Color::arrow_empty(),
                Self::descriptor_color(),
            )),
        }
    }

    /// The body of the message.
    #[inline]
    pub fn with_text(mut self, text: impl Into<crate::components::Text>) -> Self {
        self.text = try_serialize_field(Self::descriptor_text(), [text]);
        self
    }

    /// The verbosity level of the message.
    ///
    /// This can be used to filter the log messages in the Rerun Viewer.
    #[inline]
    pub fn with_level(mut self, level: impl Into<crate::components::TextLogLevel>) -> Self {
        self.level = try_serialize_field(Self::descriptor_level(), [level]);
        self
    }

    /// Optional color to use for the log line in the Rerun Viewer.
    #[inline]
    pub fn with_color(mut self, color: impl Into<crate::components::Color>) -> Self {
        self.color = try_serialize_field(Self::descriptor_color(), [color]);
        self
    }
}

impl ::re_byte_size::SizeBytes for TextLog {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.text.heap_size_bytes() + self.level.heap_size_bytes() + self.color.heap_size_bytes()
    }
}
