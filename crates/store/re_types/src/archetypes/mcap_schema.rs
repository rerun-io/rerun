// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/mcap_schema.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: A schema definition that describes the structure of messages in an MCAP file.
///
/// Schemas define the data types and field structures used by messages in MCAP channels.
/// They provide the blueprint for interpreting message payloads, specifying field names,
/// types, and organization. Each schema is referenced by channels to indicate how their
/// messages should be decoded and understood.
///
/// See also [`archetypes::McapChannel`][crate::archetypes::McapChannel] for channels that reference these schemas,
/// [`archetypes::McapMessage`][crate::archetypes::McapMessage] for the messages that conform to these schemas, and the
/// [MCAP specification](https://mcap.dev/) for complete format details.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, PartialEq, Default)]
pub struct McapSchema {
    /// Unique identifier for this schema within the MCAP file.
    ///
    /// Schema IDs must be unique within an MCAP file and are referenced by channels
    /// to specify their message structure. A single schema can be shared across multiple channels.
    pub id: Option<SerializedComponentBatch>,

    /// Human-readable name identifying this schema.
    ///
    /// Schema names typically describe the message type or data structure
    /// (e.g., `"geometry_msgs/msg/Twist"`, `"sensor_msgs/msg/Image"`, `"MyCustomMessage"`).
    pub name: Option<SerializedComponentBatch>,

    /// The schema definition format used to describe the message structure.
    ///
    /// Common schema encodings include:
    /// * `protobuf` - [Protocol Buffers](https://mcap.dev/spec/registry#protobuf-1) schema definition
    /// * `ros1msg` - [ROS1](https://mcap.dev/spec/registry#ros1msg) message definition format
    /// * `ros2msg` - [ROS2](https://mcap.dev/spec/registry#ros2msg) message definition format
    /// * `jsonschema` - [JSON Schema](https://mcap.dev/spec/registry#jsonschema) specification
    /// * `flatbuffer` - [FlatBuffers](https://mcap.dev/spec/registry#flatbuffer) schema definition
    pub encoding: Option<SerializedComponentBatch>,

    /// The schema definition content as binary data.
    ///
    /// This contains the actual schema specification in the format indicated by the
    /// `encoding` field. For text-based schemas (like ROS message definitions or JSON Schema),
    /// this is typically UTF-8 encoded text. For binary schema formats, this contains
    /// the serialized schema data.
    pub data: Option<SerializedComponentBatch>,
}

impl McapSchema {
    /// Returns the [`ComponentDescriptor`] for [`Self::id`].
    ///
    /// The corresponding component is [`crate::components::SchemaId`].
    #[inline]
    pub fn descriptor_id() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapSchema".into()),
            component: "McapSchema:id".into(),
            component_type: Some("rerun.components.SchemaId".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::name`].
    ///
    /// The corresponding component is [`crate::components::Text`].
    #[inline]
    pub fn descriptor_name() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapSchema".into()),
            component: "McapSchema:name".into(),
            component_type: Some("rerun.components.Text".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::encoding`].
    ///
    /// The corresponding component is [`crate::components::Text`].
    #[inline]
    pub fn descriptor_encoding() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapSchema".into()),
            component: "McapSchema:encoding".into(),
            component_type: Some("rerun.components.Text".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::data`].
    ///
    /// The corresponding component is [`crate::components::Blob`].
    #[inline]
    pub fn descriptor_data() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapSchema".into()),
            component: "McapSchema:data".into(),
            component_type: Some("rerun.components.Blob".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 4usize]> =
    std::sync::LazyLock::new(|| {
        [
            McapSchema::descriptor_id(),
            McapSchema::descriptor_name(),
            McapSchema::descriptor_encoding(),
            McapSchema::descriptor_data(),
        ]
    });

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 4usize]> =
    std::sync::LazyLock::new(|| {
        [
            McapSchema::descriptor_id(),
            McapSchema::descriptor_name(),
            McapSchema::descriptor_encoding(),
            McapSchema::descriptor_data(),
        ]
    });

impl McapSchema {
    /// The total number of components in the archetype: 4 required, 0 recommended, 0 optional
    pub const NUM_COMPONENTS: usize = 4usize;
}

impl ::re_types_core::Archetype for McapSchema {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.McapSchema".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Mcap schema"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let id = arrays_by_descr
            .get(&Self::descriptor_id())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_id()));
        let name = arrays_by_descr
            .get(&Self::descriptor_name())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_name()));
        let encoding = arrays_by_descr
            .get(&Self::descriptor_encoding())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_encoding()));
        let data = arrays_by_descr
            .get(&Self::descriptor_data())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_data()));
        Ok(Self {
            id,
            name,
            encoding,
            data,
        })
    }
}

impl ::re_types_core::AsComponents for McapSchema {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            self.id.clone(),
            self.name.clone(),
            self.encoding.clone(),
            self.data.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for McapSchema {}

impl McapSchema {
    /// Create a new `McapSchema`.
    #[inline]
    pub fn new(
        id: impl Into<crate::components::SchemaId>,
        name: impl Into<crate::components::Text>,
        encoding: impl Into<crate::components::Text>,
        data: impl Into<crate::components::Blob>,
    ) -> Self {
        Self {
            id: try_serialize_field(Self::descriptor_id(), [id]),
            name: try_serialize_field(Self::descriptor_name(), [name]),
            encoding: try_serialize_field(Self::descriptor_encoding(), [encoding]),
            data: try_serialize_field(Self::descriptor_data(), [data]),
        }
    }

    /// Update only some specific fields of a `McapSchema`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `McapSchema`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            id: Some(SerializedComponentBatch::new(
                crate::components::SchemaId::arrow_empty(),
                Self::descriptor_id(),
            )),
            name: Some(SerializedComponentBatch::new(
                crate::components::Text::arrow_empty(),
                Self::descriptor_name(),
            )),
            encoding: Some(SerializedComponentBatch::new(
                crate::components::Text::arrow_empty(),
                Self::descriptor_encoding(),
            )),
            data: Some(SerializedComponentBatch::new(
                crate::components::Blob::arrow_empty(),
                Self::descriptor_data(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [
            self.id
                .map(|id| id.partitioned(_lengths.clone()))
                .transpose()?,
            self.name
                .map(|name| name.partitioned(_lengths.clone()))
                .transpose()?,
            self.encoding
                .map(|encoding| encoding.partitioned(_lengths.clone()))
                .transpose()?,
            self.data
                .map(|data| data.partitioned(_lengths.clone()))
                .transpose()?,
        ];
        Ok(columns.into_iter().flatten())
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_id = self.id.as_ref().map(|b| b.array.len());
        let len_name = self.name.as_ref().map(|b| b.array.len());
        let len_encoding = self.encoding.as_ref().map(|b| b.array.len());
        let len_data = self.data.as_ref().map(|b| b.array.len());
        let len = None
            .or(len_id)
            .or(len_name)
            .or(len_encoding)
            .or(len_data)
            .unwrap_or(0);
        self.columns(std::iter::repeat_n(1, len))
    }

    /// Unique identifier for this schema within the MCAP file.
    ///
    /// Schema IDs must be unique within an MCAP file and are referenced by channels
    /// to specify their message structure. A single schema can be shared across multiple channels.
    #[inline]
    pub fn with_id(mut self, id: impl Into<crate::components::SchemaId>) -> Self {
        self.id = try_serialize_field(Self::descriptor_id(), [id]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::SchemaId`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_id`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_id(
        mut self,
        id: impl IntoIterator<Item = impl Into<crate::components::SchemaId>>,
    ) -> Self {
        self.id = try_serialize_field(Self::descriptor_id(), id);
        self
    }

    /// Human-readable name identifying this schema.
    ///
    /// Schema names typically describe the message type or data structure
    /// (e.g., `"geometry_msgs/msg/Twist"`, `"sensor_msgs/msg/Image"`, `"MyCustomMessage"`).
    #[inline]
    pub fn with_name(mut self, name: impl Into<crate::components::Text>) -> Self {
        self.name = try_serialize_field(Self::descriptor_name(), [name]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Text`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_name`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_name(
        mut self,
        name: impl IntoIterator<Item = impl Into<crate::components::Text>>,
    ) -> Self {
        self.name = try_serialize_field(Self::descriptor_name(), name);
        self
    }

    /// The schema definition format used to describe the message structure.
    ///
    /// Common schema encodings include:
    /// * `protobuf` - [Protocol Buffers](https://mcap.dev/spec/registry#protobuf-1) schema definition
    /// * `ros1msg` - [ROS1](https://mcap.dev/spec/registry#ros1msg) message definition format
    /// * `ros2msg` - [ROS2](https://mcap.dev/spec/registry#ros2msg) message definition format
    /// * `jsonschema` - [JSON Schema](https://mcap.dev/spec/registry#jsonschema) specification
    /// * `flatbuffer` - [FlatBuffers](https://mcap.dev/spec/registry#flatbuffer) schema definition
    #[inline]
    pub fn with_encoding(mut self, encoding: impl Into<crate::components::Text>) -> Self {
        self.encoding = try_serialize_field(Self::descriptor_encoding(), [encoding]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Text`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_encoding`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_encoding(
        mut self,
        encoding: impl IntoIterator<Item = impl Into<crate::components::Text>>,
    ) -> Self {
        self.encoding = try_serialize_field(Self::descriptor_encoding(), encoding);
        self
    }

    /// The schema definition content as binary data.
    ///
    /// This contains the actual schema specification in the format indicated by the
    /// `encoding` field. For text-based schemas (like ROS message definitions or JSON Schema),
    /// this is typically UTF-8 encoded text. For binary schema formats, this contains
    /// the serialized schema data.
    #[inline]
    pub fn with_data(mut self, data: impl Into<crate::components::Blob>) -> Self {
        self.data = try_serialize_field(Self::descriptor_data(), [data]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Blob`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_data`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_data(
        mut self,
        data: impl IntoIterator<Item = impl Into<crate::components::Blob>>,
    ) -> Self {
        self.data = try_serialize_field(Self::descriptor_data(), data);
        self
    }
}

impl ::re_byte_size::SizeBytes for McapSchema {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.id.heap_size_bytes()
            + self.name.heap_size_bytes()
            + self.encoding.heap_size_bytes()
            + self.data.heap_size_bytes()
    }
}
