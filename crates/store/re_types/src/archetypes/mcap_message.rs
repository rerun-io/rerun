// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/mcap_message.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: The binary payload of a single MCAP message, without metadata.
///
/// This archetype represents only the raw message data from an MCAP file. It does not include
/// MCAP message metadata such as timestamps, channel IDs, sequence numbers, or publication times.
/// The binary payload represents sensor data, commands, or other information encoded according
/// to the format specified by the associated channel.
///
/// See [`archetypes::McapChannel`][crate::archetypes::McapChannel] for channel definitions that specify message encoding,
/// [`archetypes::McapSchema`][crate::archetypes::McapSchema] for data structure definitions, and the
/// [MCAP specification](https://mcap.dev/) for complete format details.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, PartialEq, Default)]
pub struct McapMessage {
    /// The raw message payload as a binary blob.
    ///
    /// This contains the actual message data encoded according to the format specified
    /// by the associated channel's `message_encoding` field. The structure and interpretation
    /// of this binary data depends on the encoding format (e.g., ros1, cdr, protobuf)
    /// and the message schema defined for the channel.
    pub data: Option<SerializedComponentBatch>,
}

impl McapMessage {
    /// Returns the [`ComponentDescriptor`] for [`Self::data`].
    ///
    /// The corresponding component is [`crate::components::Blob`].
    #[inline]
    pub fn descriptor_data() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapMessage".into()),
            component: "McapMessage:data".into(),
            component_type: Some("rerun.components.Blob".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 1usize]> =
    std::sync::LazyLock::new(|| [McapMessage::descriptor_data()]);

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 1usize]> =
    std::sync::LazyLock::new(|| [McapMessage::descriptor_data()]);

impl McapMessage {
    /// The total number of components in the archetype: 1 required, 0 recommended, 0 optional
    pub const NUM_COMPONENTS: usize = 1usize;
}

impl ::re_types_core::Archetype for McapMessage {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.McapMessage".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Mcap message"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let data = arrays_by_descr
            .get(&Self::descriptor_data())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_data()));
        Ok(Self { data })
    }
}

impl ::re_types_core::AsComponents for McapMessage {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        std::iter::once(self.data.clone()).flatten().collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for McapMessage {}

impl McapMessage {
    /// Create a new `McapMessage`.
    #[inline]
    pub fn new(data: impl Into<crate::components::Blob>) -> Self {
        Self {
            data: try_serialize_field(Self::descriptor_data(), [data]),
        }
    }

    /// Update only some specific fields of a `McapMessage`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `McapMessage`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            data: Some(SerializedComponentBatch::new(
                crate::components::Blob::arrow_empty(),
                Self::descriptor_data(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [self
            .data
            .map(|data| data.partitioned(_lengths.clone()))
            .transpose()?];
        Ok(columns.into_iter().flatten())
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_data = self.data.as_ref().map(|b| b.array.len());
        let len = None.or(len_data).unwrap_or(0);
        self.columns(std::iter::repeat_n(1, len))
    }

    /// The raw message payload as a binary blob.
    ///
    /// This contains the actual message data encoded according to the format specified
    /// by the associated channel's `message_encoding` field. The structure and interpretation
    /// of this binary data depends on the encoding format (e.g., ros1, cdr, protobuf)
    /// and the message schema defined for the channel.
    #[inline]
    pub fn with_data(mut self, data: impl Into<crate::components::Blob>) -> Self {
        self.data = try_serialize_field(Self::descriptor_data(), [data]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Blob`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_data`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_data(
        mut self,
        data: impl IntoIterator<Item = impl Into<crate::components::Blob>>,
    ) -> Self {
        self.data = try_serialize_field(Self::descriptor_data(), data);
        self
    }
}

impl ::re_byte_size::SizeBytes for McapMessage {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.data.heap_size_bytes()
    }
}
