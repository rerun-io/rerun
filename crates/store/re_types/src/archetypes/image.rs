// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/image.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: A monochrome or color image.
///
/// See also [`archetypes::DepthImage`][crate::archetypes::DepthImage] and [`archetypes::SegmentationImage`][crate::archetypes::SegmentationImage].
///
/// The raw image data is stored as a single buffer of bytes in a [rerun.components.Blob].
/// The meaning of these bytes is determined by the `ImageFormat` which specifies the resolution
/// and the pixel format (e.g. RGB, RGBA, …).
///
/// The order of dimensions in the underlying [`components::Blob`][crate::components::Blob] follows the typical
/// row-major, interleaved-pixel image format.
///
/// Rerun also supports compressed images (JPEG, PNG, …), using [`archetypes::ImageEncoded`][crate::archetypes::ImageEncoded].
/// Compressing images can save a lot of bandwidth and memory.
///
/// ## Example
///
/// ### `image_simple`:
/// ```ignore
/// use ndarray::{s, Array, ShapeBuilder};
///
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///     let rec = rerun::RecordingStreamBuilder::new("rerun_example_image").spawn()?;
///
///     let mut image = Array::<u8, _>::zeros((200, 300, 3).f());
///     image.slice_mut(s![.., .., 0]).fill(255);
///     image.slice_mut(s![50..150, 50..150, 0]).fill(0);
///     image.slice_mut(s![50..150, 50..150, 1]).fill(255);
///
///     rec.log(
///         "image",
///         &rerun::Image::from_color_model_and_tensor(rerun::ColorModel::RGB, image)?,
///     )?;
///
///     Ok(())
/// }
/// ```
/// <center>
/// <picture>
///   <source media="(max-width: 480px)" srcset="https://static.rerun.io/image_simple/06ba7f8582acc1ffb42a7fd0006fad7816f3e4e4/480w.png">
///   <source media="(max-width: 768px)" srcset="https://static.rerun.io/image_simple/06ba7f8582acc1ffb42a7fd0006fad7816f3e4e4/768w.png">
///   <source media="(max-width: 1024px)" srcset="https://static.rerun.io/image_simple/06ba7f8582acc1ffb42a7fd0006fad7816f3e4e4/1024w.png">
///   <source media="(max-width: 1200px)" srcset="https://static.rerun.io/image_simple/06ba7f8582acc1ffb42a7fd0006fad7816f3e4e4/1200w.png">
///   <img src="https://static.rerun.io/image_simple/06ba7f8582acc1ffb42a7fd0006fad7816f3e4e4/full.png" width="640">
/// </picture>
/// </center>
#[derive(Clone, Debug, PartialEq)]
pub struct Image {
    /// The raw image data.
    pub data: crate::components::Blob,

    /// The size of the image.
    ///
    /// For chroma downsampled formats, this is the size of the full image (the luminance channel).
    pub resolution: crate::components::Resolution2D,

    /// Used mainly for chroma downsampled formats and differing number of bits per channel.
    ///
    /// If specified, this takes precedence over both [`components::ColorModel`][crate::components::ColorModel] and [`components::ChannelDatatype`][crate::components::ChannelDatatype] (which are ignored).
    pub pixel_format: Option<crate::components::PixelFormat>,

    /// L, RGB, RGBA, …
    ///
    /// Also requires a [`components::ChannelDatatype`][crate::components::ChannelDatatype] to fully specify the pixel format.
    pub color_model: Option<crate::components::ColorModel>,

    /// The data type of each channel (e.g. the red channel) of the image data (U8, F16, …).
    ///
    /// Also requires a [`components::ColorModel`][crate::components::ColorModel] to fully specify the pixel format.
    pub datatype: Option<crate::components::ChannelDatatype>,

    /// Opacity of the image, useful for layering several images.
    ///
    /// Defaults to 1.0 (fully opaque).
    pub opacity: Option<crate::components::Opacity>,

    /// An optional floating point value that specifies the 2D drawing order.
    ///
    /// Objects with higher values are drawn on top of those with lower values.
    pub draw_order: Option<crate::components::DrawOrder>,
}

impl ::re_types_core::SizeBytes for Image {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.data.heap_size_bytes()
            + self.resolution.heap_size_bytes()
            + self.pixel_format.heap_size_bytes()
            + self.color_model.heap_size_bytes()
            + self.datatype.heap_size_bytes()
            + self.opacity.heap_size_bytes()
            + self.draw_order.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::components::Blob>::is_pod()
            && <crate::components::Resolution2D>::is_pod()
            && <Option<crate::components::PixelFormat>>::is_pod()
            && <Option<crate::components::ColorModel>>::is_pod()
            && <Option<crate::components::ChannelDatatype>>::is_pod()
            && <Option<crate::components::Opacity>>::is_pod()
            && <Option<crate::components::DrawOrder>>::is_pod()
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 2usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.Blob".into(),
            "rerun.components.Resolution2D".into(),
        ]
    });

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 1usize]> =
    once_cell::sync::Lazy::new(|| ["rerun.components.ImageIndicator".into()]);

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 5usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.PixelFormat".into(),
            "rerun.components.ColorModel".into(),
            "rerun.components.ChannelDatatype".into(),
            "rerun.components.Opacity".into(),
            "rerun.components.DrawOrder".into(),
        ]
    });

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentName; 8usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            "rerun.components.Blob".into(),
            "rerun.components.Resolution2D".into(),
            "rerun.components.ImageIndicator".into(),
            "rerun.components.PixelFormat".into(),
            "rerun.components.ColorModel".into(),
            "rerun.components.ChannelDatatype".into(),
            "rerun.components.Opacity".into(),
            "rerun.components.DrawOrder".into(),
        ]
    });

impl Image {
    /// The total number of components in the archetype: 2 required, 1 recommended, 5 optional
    pub const NUM_COMPONENTS: usize = 8usize;
}

/// Indicator component for the [`Image`] [`::re_types_core::Archetype`]
pub type ImageIndicator = ::re_types_core::GenericIndicatorComponent<Image>;

impl ::re_types_core::Archetype for Image {
    type Indicator = ImageIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.Image".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Image"
    }

    #[inline]
    fn indicator() -> MaybeOwnedComponentBatch<'static> {
        static INDICATOR: ImageIndicator = ImageIndicator::DEFAULT;
        MaybeOwnedComponentBatch::Ref(&INDICATOR)
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentName]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentName, Box<dyn arrow2::array::Array>)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_name: ::std::collections::HashMap<_, _> = arrow_data
            .into_iter()
            .map(|(name, array)| (name.full_name(), array))
            .collect();
        let data = {
            let array = arrays_by_name
                .get("rerun.components.Blob")
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.archetypes.Image#data")?;
            <crate::components::Blob>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#data")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.archetypes.Image#data")?
        };
        let resolution = {
            let array = arrays_by_name
                .get("rerun.components.Resolution2D")
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.archetypes.Image#resolution")?;
            <crate::components::Resolution2D>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#resolution")?
                .into_iter()
                .next()
                .flatten()
                .ok_or_else(DeserializationError::missing_data)
                .with_context("rerun.archetypes.Image#resolution")?
        };
        let pixel_format = if let Some(array) = arrays_by_name.get("rerun.components.PixelFormat") {
            <crate::components::PixelFormat>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#pixel_format")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let color_model = if let Some(array) = arrays_by_name.get("rerun.components.ColorModel") {
            <crate::components::ColorModel>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#color_model")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let datatype = if let Some(array) = arrays_by_name.get("rerun.components.ChannelDatatype") {
            <crate::components::ChannelDatatype>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#datatype")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let opacity = if let Some(array) = arrays_by_name.get("rerun.components.Opacity") {
            <crate::components::Opacity>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#opacity")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        let draw_order = if let Some(array) = arrays_by_name.get("rerun.components.DrawOrder") {
            <crate::components::DrawOrder>::from_arrow_opt(&**array)
                .with_context("rerun.archetypes.Image#draw_order")?
                .into_iter()
                .next()
                .flatten()
        } else {
            None
        };
        Ok(Self {
            data,
            resolution,
            pixel_format,
            color_model,
            datatype,
            opacity,
            draw_order,
        })
    }
}

impl ::re_types_core::AsComponents for Image {
    fn as_component_batches(&self) -> Vec<MaybeOwnedComponentBatch<'_>> {
        re_tracing::profile_function!();
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            Some((&self.data as &dyn ComponentBatch).into()),
            Some((&self.resolution as &dyn ComponentBatch).into()),
            self.pixel_format
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.color_model
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.datatype
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.opacity
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
            self.draw_order
                .as_ref()
                .map(|comp| (comp as &dyn ComponentBatch).into()),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl Image {
    /// Create a new `Image`.
    #[inline]
    pub fn new(
        data: impl Into<crate::components::Blob>,
        resolution: impl Into<crate::components::Resolution2D>,
    ) -> Self {
        Self {
            data: data.into(),
            resolution: resolution.into(),
            pixel_format: None,
            color_model: None,
            datatype: None,
            opacity: None,
            draw_order: None,
        }
    }

    /// Used mainly for chroma downsampled formats and differing number of bits per channel.
    ///
    /// If specified, this takes precedence over both [`components::ColorModel`][crate::components::ColorModel] and [`components::ChannelDatatype`][crate::components::ChannelDatatype] (which are ignored).
    #[inline]
    pub fn with_pixel_format(
        mut self,
        pixel_format: impl Into<crate::components::PixelFormat>,
    ) -> Self {
        self.pixel_format = Some(pixel_format.into());
        self
    }

    /// L, RGB, RGBA, …
    ///
    /// Also requires a [`components::ChannelDatatype`][crate::components::ChannelDatatype] to fully specify the pixel format.
    #[inline]
    pub fn with_color_model(
        mut self,
        color_model: impl Into<crate::components::ColorModel>,
    ) -> Self {
        self.color_model = Some(color_model.into());
        self
    }

    /// The data type of each channel (e.g. the red channel) of the image data (U8, F16, …).
    ///
    /// Also requires a [`components::ColorModel`][crate::components::ColorModel] to fully specify the pixel format.
    #[inline]
    pub fn with_datatype(
        mut self,
        datatype: impl Into<crate::components::ChannelDatatype>,
    ) -> Self {
        self.datatype = Some(datatype.into());
        self
    }

    /// Opacity of the image, useful for layering several images.
    ///
    /// Defaults to 1.0 (fully opaque).
    #[inline]
    pub fn with_opacity(mut self, opacity: impl Into<crate::components::Opacity>) -> Self {
        self.opacity = Some(opacity.into());
        self
    }

    /// An optional floating point value that specifies the 2D drawing order.
    ///
    /// Objects with higher values are drawn on top of those with lower values.
    #[inline]
    pub fn with_draw_order(mut self, draw_order: impl Into<crate::components::DrawOrder>) -> Self {
        self.draw_order = Some(draw_order.into());
        self
    }
}
