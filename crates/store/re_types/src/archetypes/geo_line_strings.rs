// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/geo_line_strings.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::try_serialize_field;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentName};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Geospatial line strings with positions expressed in [EPSG:4326](https://epsg.io/4326) altitude and longitude (North/East-positive degrees), and optional colors and radii.
///
/// Also known as "line strips" or "polylines".
///
/// ## Example
///
/// ### Log a geospatial line string
/// ```ignore
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///     let rec = rerun::RecordingStreamBuilder::new("rerun_example_geo_line_strings").spawn()?;
///
///     rec.log(
///         "colorado",
///         &rerun::GeoLineStrings::from_lat_lon([[
///             [41.0000, -109.0452],
///             [41.0000, -102.0415],
///             [36.9931, -102.0415],
///             [36.9931, -109.0452],
///             [41.0000, -109.0452],
///         ]])
///         .with_radii([rerun::Radius::new_ui_points(2.0)])
///         .with_colors([rerun::Color::from_rgb(0, 0, 255)]),
///     )?;
///
///     Ok(())
/// }
/// ```
/// <center>
/// <picture>
///   <source media="(max-width: 480px)" srcset="https://static.rerun.io/geo_line_strings_simple/5669983eb10906ace303755b5b5039cad75b917f/480w.png">
///   <source media="(max-width: 768px)" srcset="https://static.rerun.io/geo_line_strings_simple/5669983eb10906ace303755b5b5039cad75b917f/768w.png">
///   <source media="(max-width: 1024px)" srcset="https://static.rerun.io/geo_line_strings_simple/5669983eb10906ace303755b5b5039cad75b917f/1024w.png">
///   <source media="(max-width: 1200px)" srcset="https://static.rerun.io/geo_line_strings_simple/5669983eb10906ace303755b5b5039cad75b917f/1200w.png">
///   <img src="https://static.rerun.io/geo_line_strings_simple/5669983eb10906ace303755b5b5039cad75b917f/full.png" width="640">
/// </picture>
/// </center>
#[derive(Clone, Debug, PartialEq, Default)]
pub struct GeoLineStrings {
    /// The line strings, expressed in [EPSG:4326](https://epsg.io/4326) coordinates (North/East-positive degrees).
    pub line_strings: Option<SerializedComponentBatch>,

    /// Optional radii for the line strings.
    ///
    /// *Note*: scene units radiii are interpreted as meters. Currently, the display scale only considers the latitude of
    /// the first vertex of each line string (see [this issue](https://github.com/rerun-io/rerun/issues/8013)).
    pub radii: Option<SerializedComponentBatch>,

    /// Optional colors for the line strings.
    pub colors: Option<SerializedComponentBatch>,
}

impl GeoLineStrings {
    /// Returns the [`ComponentDescriptor`] for [`Self::line_strings`].
    #[inline]
    pub fn descriptor_line_strings() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.GeoLineStrings".into()),
            component_name: "rerun.components.GeoLineString".into(),
            archetype_field_name: Some("line_strings".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::radii`].
    #[inline]
    pub fn descriptor_radii() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.GeoLineStrings".into()),
            component_name: "rerun.components.Radius".into(),
            archetype_field_name: Some("radii".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::colors`].
    #[inline]
    pub fn descriptor_colors() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.GeoLineStrings".into()),
            component_name: "rerun.components.Color".into(),
            archetype_field_name: Some("colors".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for the associated indicator component.
    #[inline]
    pub fn descriptor_indicator() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype_name: Some("rerun.archetypes.GeoLineStrings".into()),
            component_name: "rerun.components.GeoLineStringsIndicator".into(),
            archetype_field_name: None,
        }
    }
}

static REQUIRED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 1usize]> =
    once_cell::sync::Lazy::new(|| [GeoLineStrings::descriptor_line_strings()]);

static RECOMMENDED_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 3usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            GeoLineStrings::descriptor_radii(),
            GeoLineStrings::descriptor_colors(),
            GeoLineStrings::descriptor_indicator(),
        ]
    });

static OPTIONAL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 0usize]> =
    once_cell::sync::Lazy::new(|| []);

static ALL_COMPONENTS: once_cell::sync::Lazy<[ComponentDescriptor; 4usize]> =
    once_cell::sync::Lazy::new(|| {
        [
            GeoLineStrings::descriptor_line_strings(),
            GeoLineStrings::descriptor_radii(),
            GeoLineStrings::descriptor_colors(),
            GeoLineStrings::descriptor_indicator(),
        ]
    });

impl GeoLineStrings {
    /// The total number of components in the archetype: 1 required, 3 recommended, 0 optional
    pub const NUM_COMPONENTS: usize = 4usize;
}

/// Indicator component for the [`GeoLineStrings`] [`::re_types_core::Archetype`]
pub type GeoLineStringsIndicator = ::re_types_core::GenericIndicatorComponent<GeoLineStrings>;

impl ::re_types_core::Archetype for GeoLineStrings {
    type Indicator = GeoLineStringsIndicator;

    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.GeoLineStrings".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Geo line strings"
    }

    #[inline]
    fn indicator() -> SerializedComponentBatch {
        #[allow(clippy::unwrap_used)]
        GeoLineStringsIndicator::DEFAULT.serialized().unwrap()
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let line_strings = arrays_by_descr
            .get(&Self::descriptor_line_strings())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_line_strings())
            });
        let radii = arrays_by_descr
            .get(&Self::descriptor_radii())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_radii()));
        let colors = arrays_by_descr
            .get(&Self::descriptor_colors())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_colors()));
        Ok(Self {
            line_strings,
            radii,
            colors,
        })
    }
}

impl ::re_types_core::AsComponents for GeoLineStrings {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            Some(Self::indicator()),
            self.line_strings.clone(),
            self.radii.clone(),
            self.colors.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for GeoLineStrings {}

impl GeoLineStrings {
    /// Create a new `GeoLineStrings`.
    #[inline]
    pub(crate) fn new(
        line_strings: impl IntoIterator<Item = impl Into<crate::components::GeoLineString>>,
    ) -> Self {
        Self {
            line_strings: try_serialize_field(Self::descriptor_line_strings(), line_strings),
            radii: None,
            colors: None,
        }
    }

    /// Update only some specific fields of a `GeoLineStrings`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `GeoLineStrings`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            line_strings: Some(SerializedComponentBatch::new(
                crate::components::GeoLineString::arrow_empty(),
                Self::descriptor_line_strings(),
            )),
            radii: Some(SerializedComponentBatch::new(
                crate::components::Radius::arrow_empty(),
                Self::descriptor_radii(),
            )),
            colors: Some(SerializedComponentBatch::new(
                crate::components::Color::arrow_empty(),
                Self::descriptor_colors(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [
            self.line_strings
                .map(|line_strings| line_strings.partitioned(_lengths.clone()))
                .transpose()?,
            self.radii
                .map(|radii| radii.partitioned(_lengths.clone()))
                .transpose()?,
            self.colors
                .map(|colors| colors.partitioned(_lengths.clone()))
                .transpose()?,
        ];
        Ok(columns
            .into_iter()
            .flatten()
            .chain([::re_types_core::indicator_column::<Self>(
                _lengths.into_iter().count(),
            )?]))
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_line_strings = self.line_strings.as_ref().map(|b| b.array.len());
        let len_radii = self.radii.as_ref().map(|b| b.array.len());
        let len_colors = self.colors.as_ref().map(|b| b.array.len());
        let len = None
            .or(len_line_strings)
            .or(len_radii)
            .or(len_colors)
            .unwrap_or(0);
        self.columns(std::iter::repeat(1).take(len))
    }

    /// The line strings, expressed in [EPSG:4326](https://epsg.io/4326) coordinates (North/East-positive degrees).
    #[inline]
    pub fn with_line_strings(
        mut self,
        line_strings: impl IntoIterator<Item = impl Into<crate::components::GeoLineString>>,
    ) -> Self {
        self.line_strings = try_serialize_field(Self::descriptor_line_strings(), line_strings);
        self
    }

    /// Optional radii for the line strings.
    ///
    /// *Note*: scene units radiii are interpreted as meters. Currently, the display scale only considers the latitude of
    /// the first vertex of each line string (see [this issue](https://github.com/rerun-io/rerun/issues/8013)).
    #[inline]
    pub fn with_radii(
        mut self,
        radii: impl IntoIterator<Item = impl Into<crate::components::Radius>>,
    ) -> Self {
        self.radii = try_serialize_field(Self::descriptor_radii(), radii);
        self
    }

    /// Optional colors for the line strings.
    #[inline]
    pub fn with_colors(
        mut self,
        colors: impl IntoIterator<Item = impl Into<crate::components::Color>>,
    ) -> Self {
        self.colors = try_serialize_field(Self::descriptor_colors(), colors);
        self
    }
}

impl ::re_byte_size::SizeBytes for GeoLineStrings {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.line_strings.heap_size_bytes()
            + self.radii.heap_size_bytes()
            + self.colors.heap_size_bytes()
    }
}
