// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/coordinate_frame.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Specifies the coordinate frame for an entity.
///
/// **Experimental:** Transform frames are still in early development!
///
/// If not specified, the coordinate frame uses an implicit frame derived from the entity path.
/// The implicit frame's name is `tf#/your/entity/path` and has an identity transform connection to its parent path.
///
/// To learn more about transforms see [Spaces & Transforms](https://rerun.io/docs/concepts/spaces-and-transforms) in the reference.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
///
/// ## Example
///
/// ### Change coordinate frame to different built-in frames
/// ```ignore
/// #![expect(clippy::cast_possible_wrap)]
///
/// fn main() -> Result<(), Box<dyn std::error::Error>> {
///     let rec = rerun::RecordingStreamBuilder::new("rerun_example_transform3d_hierarchy").spawn()?;
///
///     rec.set_time_sequence("time", 0);
///     rec.log(
///         "red_box",
///         &[
///             &rerun::Boxes3D::from_half_sizes([(0.5, 0.5, 0.5)]).with_colors([(255, 0, 0)])
///                 as &dyn rerun::AsComponents,
///             // Use Transform3D to place the box, so we actually change the underlying coordinate frame and not just the box's pose.
///             &rerun::Transform3D::from_translation([2.0, 0.0, 0.0]),
///         ],
///     )?;
///     rec.log(
///         "blue_box",
///         &[
///             &rerun::Boxes3D::from_half_sizes([(0.5, 0.5, 0.5)]).with_colors([(0, 0, 255)])
///                 as &dyn rerun::AsComponents,
///             // Use Transform3D to place the box, so we actually change the underlying coordinate frame and not just the box's pose.
///             &rerun::Transform3D::from_translation([-2.0, 0.0, 0.0]),
///         ],
///     )?;
///     rec.log(
///         "point",
///         &rerun::Points3D::new([(0.0, 0.0, 0.0)]).with_radii([0.5]),
///     )?;
///
///     // Change where the point is located by cycling through its coordinate frame.
///     for (t, frame_id) in ["tf#/red_box", "tf#/blue_box"].into_iter().enumerate() {
///         rec.set_time_sequence("time", t as i64 + 1); // leave it untouched at t==0.
///         rec.log("point", &rerun::CoordinateFrame::new(frame_id))?;
///     }
///
///     Ok(())
/// }
/// ```
/// <center>
/// <picture>
///   <source media="(max-width: 480px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/480w.png">
///   <source media="(max-width: 768px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/768w.png">
///   <source media="(max-width: 1024px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/1024w.png">
///   <source media="(max-width: 1200px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/1200w.png">
///   <img src="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/full.png" width="640">
/// </picture>
/// </center>
#[derive(Clone, Debug, PartialEq, Default)]
pub struct CoordinateFrame {
    /// The coordinate frame to use for the current entity.
    pub frame_id: Option<SerializedComponentBatch>,
}

impl CoordinateFrame {
    /// Returns the [`ComponentDescriptor`] for [`Self::frame_id`].
    ///
    /// The corresponding component is [`crate::components::TransformFrameId`].
    #[inline]
    pub fn descriptor_frame_id() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.CoordinateFrame".into()),
            component: "CoordinateFrame:frame_id".into(),
            component_type: Some("rerun.components.TransformFrameId".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 1usize]> =
    std::sync::LazyLock::new(|| [CoordinateFrame::descriptor_frame_id()]);

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 1usize]> =
    std::sync::LazyLock::new(|| [CoordinateFrame::descriptor_frame_id()]);

impl CoordinateFrame {
    /// The total number of components in the archetype: 1 required, 0 recommended, 0 optional
    pub const NUM_COMPONENTS: usize = 1usize;
}

impl ::re_types_core::Archetype for CoordinateFrame {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.CoordinateFrame".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Coordinate frame"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let frame_id = arrays_by_descr
            .get(&Self::descriptor_frame_id())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_frame_id()));
        Ok(Self { frame_id })
    }
}

impl ::re_types_core::AsComponents for CoordinateFrame {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        std::iter::once(self.frame_id.clone()).flatten().collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for CoordinateFrame {}

impl CoordinateFrame {
    /// Create a new `CoordinateFrame`.
    #[inline]
    pub fn new(frame_id: impl Into<crate::components::TransformFrameId>) -> Self {
        Self {
            frame_id: try_serialize_field(Self::descriptor_frame_id(), [frame_id]),
        }
    }

    /// Update only some specific fields of a `CoordinateFrame`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `CoordinateFrame`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            frame_id: Some(SerializedComponentBatch::new(
                crate::components::TransformFrameId::arrow_empty(),
                Self::descriptor_frame_id(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [self
            .frame_id
            .map(|frame_id| frame_id.partitioned(_lengths.clone()))
            .transpose()?];
        Ok(columns.into_iter().flatten())
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_frame_id = self.frame_id.as_ref().map(|b| b.array.len());
        let len = None.or(len_frame_id).unwrap_or(0);
        self.columns(std::iter::repeat_n(1, len))
    }

    /// The coordinate frame to use for the current entity.
    #[inline]
    pub fn with_frame_id(
        mut self,
        frame_id: impl Into<crate::components::TransformFrameId>,
    ) -> Self {
        self.frame_id = try_serialize_field(Self::descriptor_frame_id(), [frame_id]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::TransformFrameId`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_frame_id`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_frame_id(
        mut self,
        frame_id: impl IntoIterator<Item = impl Into<crate::components::TransformFrameId>>,
    ) -> Self {
        self.frame_id = try_serialize_field(Self::descriptor_frame_id(), frame_id);
        self
    }
}

impl ::re_byte_size::SizeBytes for CoordinateFrame {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.frame_id.heap_size_bytes()
    }
}
