// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/mcap_channel.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: A channel within an MCAP file that defines how messages are structured and encoded.
///
/// Channels in MCAP files group messages by topic and define their encoding format.
/// Each channel has a unique identifier and specifies the message schema and encoding used
/// for all messages published to that topic.
///
/// See also [`archetypes::McapMessage`][crate::archetypes::McapMessage] for individual messages within a channel,
/// [`archetypes::McapSchema`][crate::archetypes::McapSchema] for the data structure definitions, and the
/// [MCAP specification](https://mcap.dev/) for complete format details.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, PartialEq, Default)]
pub struct McapChannel {
    /// Unique identifier for this channel within the MCAP file.
    ///
    /// Channel IDs must be unique within a single MCAP file and are used to associate
    /// messages with their corresponding channel definition.
    pub id: Option<SerializedComponentBatch>,

    /// The topic name that this channel publishes to.
    ///
    /// Topics are hierarchical paths from the original robotics system (e.g., "/sensors/camera/image")
    /// that categorize and organize different data streams.
    /// Topics are separate from Rerun's entity paths, but they often can be mapped to them.
    pub topic: Option<SerializedComponentBatch>,

    /// The encoding format used for messages in this channel.
    ///
    /// Common encodings include:
    /// * `ros1` - ROS1 message format
    /// * `cdr` - Common Data Representation (CDR) message format, used by ROS2
    /// * `protobuf` - Protocol Buffers
    /// * `json` - JSON encoding
    pub message_encoding: Option<SerializedComponentBatch>,

    /// Additional metadata for this channel stored as key-value pairs.
    ///
    /// This can include channel-specific configuration, description, units, coordinate frames,
    /// or any other contextual information that helps interpret the data in this channel.
    pub metadata: Option<SerializedComponentBatch>,
}

impl McapChannel {
    /// Returns the [`ComponentDescriptor`] for [`Self::id`].
    ///
    /// The corresponding component is [`crate::components::ChannelId`].
    #[inline]
    pub fn descriptor_id() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapChannel".into()),
            component: "McapChannel:id".into(),
            component_type: Some("rerun.components.ChannelId".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::topic`].
    ///
    /// The corresponding component is [`crate::components::Text`].
    #[inline]
    pub fn descriptor_topic() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapChannel".into()),
            component: "McapChannel:topic".into(),
            component_type: Some("rerun.components.Text".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::message_encoding`].
    ///
    /// The corresponding component is [`crate::components::Text`].
    #[inline]
    pub fn descriptor_message_encoding() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapChannel".into()),
            component: "McapChannel:message_encoding".into(),
            component_type: Some("rerun.components.Text".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::metadata`].
    ///
    /// The corresponding component is [`crate::components::KeyValuePairs`].
    #[inline]
    pub fn descriptor_metadata() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapChannel".into()),
            component: "McapChannel:metadata".into(),
            component_type: Some("rerun.components.KeyValuePairs".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 3usize]> =
    std::sync::LazyLock::new(|| {
        [
            McapChannel::descriptor_id(),
            McapChannel::descriptor_topic(),
            McapChannel::descriptor_message_encoding(),
        ]
    });

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 1usize]> =
    std::sync::LazyLock::new(|| [McapChannel::descriptor_metadata()]);

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 4usize]> =
    std::sync::LazyLock::new(|| {
        [
            McapChannel::descriptor_id(),
            McapChannel::descriptor_topic(),
            McapChannel::descriptor_message_encoding(),
            McapChannel::descriptor_metadata(),
        ]
    });

impl McapChannel {
    /// The total number of components in the archetype: 3 required, 0 recommended, 1 optional
    pub const NUM_COMPONENTS: usize = 4usize;
}

impl ::re_types_core::Archetype for McapChannel {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.McapChannel".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Mcap channel"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let id = arrays_by_descr
            .get(&Self::descriptor_id())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_id()));
        let topic = arrays_by_descr
            .get(&Self::descriptor_topic())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_topic()));
        let message_encoding = arrays_by_descr
            .get(&Self::descriptor_message_encoding())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_message_encoding())
            });
        let metadata = arrays_by_descr
            .get(&Self::descriptor_metadata())
            .map(|array| SerializedComponentBatch::new(array.clone(), Self::descriptor_metadata()));
        Ok(Self {
            id,
            topic,
            message_encoding,
            metadata,
        })
    }
}

impl ::re_types_core::AsComponents for McapChannel {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            self.id.clone(),
            self.topic.clone(),
            self.message_encoding.clone(),
            self.metadata.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for McapChannel {}

impl McapChannel {
    /// Create a new `McapChannel`.
    #[inline]
    pub fn new(
        id: impl Into<crate::components::ChannelId>,
        topic: impl Into<crate::components::Text>,
        message_encoding: impl Into<crate::components::Text>,
    ) -> Self {
        Self {
            id: try_serialize_field(Self::descriptor_id(), [id]),
            topic: try_serialize_field(Self::descriptor_topic(), [topic]),
            message_encoding: try_serialize_field(
                Self::descriptor_message_encoding(),
                [message_encoding],
            ),
            metadata: None,
        }
    }

    /// Update only some specific fields of a `McapChannel`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `McapChannel`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            id: Some(SerializedComponentBatch::new(
                crate::components::ChannelId::arrow_empty(),
                Self::descriptor_id(),
            )),
            topic: Some(SerializedComponentBatch::new(
                crate::components::Text::arrow_empty(),
                Self::descriptor_topic(),
            )),
            message_encoding: Some(SerializedComponentBatch::new(
                crate::components::Text::arrow_empty(),
                Self::descriptor_message_encoding(),
            )),
            metadata: Some(SerializedComponentBatch::new(
                crate::components::KeyValuePairs::arrow_empty(),
                Self::descriptor_metadata(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [
            self.id
                .map(|id| id.partitioned(_lengths.clone()))
                .transpose()?,
            self.topic
                .map(|topic| topic.partitioned(_lengths.clone()))
                .transpose()?,
            self.message_encoding
                .map(|message_encoding| message_encoding.partitioned(_lengths.clone()))
                .transpose()?,
            self.metadata
                .map(|metadata| metadata.partitioned(_lengths.clone()))
                .transpose()?,
        ];
        Ok(columns.into_iter().flatten())
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_id = self.id.as_ref().map(|b| b.array.len());
        let len_topic = self.topic.as_ref().map(|b| b.array.len());
        let len_message_encoding = self.message_encoding.as_ref().map(|b| b.array.len());
        let len_metadata = self.metadata.as_ref().map(|b| b.array.len());
        let len = None
            .or(len_id)
            .or(len_topic)
            .or(len_message_encoding)
            .or(len_metadata)
            .unwrap_or(0);
        self.columns(std::iter::repeat_n(1, len))
    }

    /// Unique identifier for this channel within the MCAP file.
    ///
    /// Channel IDs must be unique within a single MCAP file and are used to associate
    /// messages with their corresponding channel definition.
    #[inline]
    pub fn with_id(mut self, id: impl Into<crate::components::ChannelId>) -> Self {
        self.id = try_serialize_field(Self::descriptor_id(), [id]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::ChannelId`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_id`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_id(
        mut self,
        id: impl IntoIterator<Item = impl Into<crate::components::ChannelId>>,
    ) -> Self {
        self.id = try_serialize_field(Self::descriptor_id(), id);
        self
    }

    /// The topic name that this channel publishes to.
    ///
    /// Topics are hierarchical paths from the original robotics system (e.g., "/sensors/camera/image")
    /// that categorize and organize different data streams.
    /// Topics are separate from Rerun's entity paths, but they often can be mapped to them.
    #[inline]
    pub fn with_topic(mut self, topic: impl Into<crate::components::Text>) -> Self {
        self.topic = try_serialize_field(Self::descriptor_topic(), [topic]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Text`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_topic`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_topic(
        mut self,
        topic: impl IntoIterator<Item = impl Into<crate::components::Text>>,
    ) -> Self {
        self.topic = try_serialize_field(Self::descriptor_topic(), topic);
        self
    }

    /// The encoding format used for messages in this channel.
    ///
    /// Common encodings include:
    /// * `ros1` - ROS1 message format
    /// * `cdr` - Common Data Representation (CDR) message format, used by ROS2
    /// * `protobuf` - Protocol Buffers
    /// * `json` - JSON encoding
    #[inline]
    pub fn with_message_encoding(
        mut self,
        message_encoding: impl Into<crate::components::Text>,
    ) -> Self {
        self.message_encoding =
            try_serialize_field(Self::descriptor_message_encoding(), [message_encoding]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Text`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_message_encoding`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_message_encoding(
        mut self,
        message_encoding: impl IntoIterator<Item = impl Into<crate::components::Text>>,
    ) -> Self {
        self.message_encoding =
            try_serialize_field(Self::descriptor_message_encoding(), message_encoding);
        self
    }

    /// Additional metadata for this channel stored as key-value pairs.
    ///
    /// This can include channel-specific configuration, description, units, coordinate frames,
    /// or any other contextual information that helps interpret the data in this channel.
    #[inline]
    pub fn with_metadata(mut self, metadata: impl Into<crate::components::KeyValuePairs>) -> Self {
        self.metadata = try_serialize_field(Self::descriptor_metadata(), [metadata]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::KeyValuePairs`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_metadata`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_metadata(
        mut self,
        metadata: impl IntoIterator<Item = impl Into<crate::components::KeyValuePairs>>,
    ) -> Self {
        self.metadata = try_serialize_field(Self::descriptor_metadata(), metadata);
        self
    }
}

impl ::re_byte_size::SizeBytes for McapChannel {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.id.heap_size_bytes()
            + self.topic.heap_size_bytes()
            + self.message_encoding.heap_size_bytes()
            + self.metadata.heap_size_bytes()
    }
}
