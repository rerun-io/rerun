// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/mcap_statistics.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Archetype**: Recording-level statistics about an MCAP file, logged as a part of [`archetypes::RecordingInfo`][crate::archetypes::RecordingInfo].
///
/// This archetype contains summary information about an entire MCAP recording, including
/// counts of messages, schemas, channels, and other records, as well as timing information
/// spanning the full recording duration. It is typically logged once per recording to provide
/// an overview of the dataset's structure and content.
///
/// See also [`archetypes::McapChannel`][crate::archetypes::McapChannel] for individual channel definitions,
/// [`archetypes::McapMessage`][crate::archetypes::McapMessage] for message content, [`archetypes::McapSchema`][crate::archetypes::McapSchema] for schema definitions,
/// and the [MCAP specification](https://mcap.dev/) for complete format details.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, PartialEq, Default)]
pub struct McapStatistics {
    /// Total number of data messages contained in the MCAP recording.
    ///
    /// This count includes all timestamped data messages but excludes metadata records,
    /// schema definitions, and other non-message records.
    pub message_count: Option<SerializedComponentBatch>,

    /// Number of unique schema definitions in the recording.
    ///
    /// Each schema defines the structure for one or more message types used by channels.
    pub schema_count: Option<SerializedComponentBatch>,

    /// Number of channels defined in the recording.
    ///
    /// Each channel represents a unique topic and encoding combination for publishing messages.
    pub channel_count: Option<SerializedComponentBatch>,

    /// Number of file attachments embedded in the recording.
    ///
    /// Attachments can include calibration files, configuration data, or other auxiliary files.
    pub attachment_count: Option<SerializedComponentBatch>,

    /// Number of metadata records providing additional context about the recording.
    ///
    /// Metadata records contain key-value pairs with information about the recording environment,
    /// system configuration, or other contextual data.
    pub metadata_count: Option<SerializedComponentBatch>,

    /// Number of data chunks used to organize messages in the file.
    ///
    /// Chunks group related messages together for efficient storage and indexed access.
    pub chunk_count: Option<SerializedComponentBatch>,

    /// Timestamp of the earliest message in the recording.
    ///
    /// This marks the beginning of the recorded data timeline.
    pub message_start_time: Option<SerializedComponentBatch>,

    /// Timestamp of the latest message in the recording.
    ///
    /// Together with `message_start_time`, this defines the total duration of the recording.
    pub message_end_time: Option<SerializedComponentBatch>,

    /// Detailed breakdown of message counts per channel.
    pub channel_message_counts: Option<SerializedComponentBatch>,
}

impl McapStatistics {
    /// Returns the [`ComponentDescriptor`] for [`Self::message_count`].
    ///
    /// The corresponding component is [`crate::components::Count`].
    #[inline]
    pub fn descriptor_message_count() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:message_count".into(),
            component_type: Some("rerun.components.Count".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::schema_count`].
    ///
    /// The corresponding component is [`crate::components::Count`].
    #[inline]
    pub fn descriptor_schema_count() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:schema_count".into(),
            component_type: Some("rerun.components.Count".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::channel_count`].
    ///
    /// The corresponding component is [`crate::components::Count`].
    #[inline]
    pub fn descriptor_channel_count() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:channel_count".into(),
            component_type: Some("rerun.components.Count".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::attachment_count`].
    ///
    /// The corresponding component is [`crate::components::Count`].
    #[inline]
    pub fn descriptor_attachment_count() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:attachment_count".into(),
            component_type: Some("rerun.components.Count".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::metadata_count`].
    ///
    /// The corresponding component is [`crate::components::Count`].
    #[inline]
    pub fn descriptor_metadata_count() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:metadata_count".into(),
            component_type: Some("rerun.components.Count".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::chunk_count`].
    ///
    /// The corresponding component is [`crate::components::Count`].
    #[inline]
    pub fn descriptor_chunk_count() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:chunk_count".into(),
            component_type: Some("rerun.components.Count".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::message_start_time`].
    ///
    /// The corresponding component is [`crate::components::Timestamp`].
    #[inline]
    pub fn descriptor_message_start_time() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:message_start_time".into(),
            component_type: Some("rerun.components.Timestamp".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::message_end_time`].
    ///
    /// The corresponding component is [`crate::components::Timestamp`].
    #[inline]
    pub fn descriptor_message_end_time() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:message_end_time".into(),
            component_type: Some("rerun.components.Timestamp".into()),
        }
    }

    /// Returns the [`ComponentDescriptor`] for [`Self::channel_message_counts`].
    ///
    /// The corresponding component is [`crate::components::ChannelMessageCounts`].
    #[inline]
    pub fn descriptor_channel_message_counts() -> ComponentDescriptor {
        ComponentDescriptor {
            archetype: Some("rerun.archetypes.McapStatistics".into()),
            component: "McapStatistics:channel_message_counts".into(),
            component_type: Some("rerun.components.ChannelMessageCounts".into()),
        }
    }
}

static REQUIRED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 8usize]> =
    std::sync::LazyLock::new(|| {
        [
            McapStatistics::descriptor_message_count(),
            McapStatistics::descriptor_schema_count(),
            McapStatistics::descriptor_channel_count(),
            McapStatistics::descriptor_attachment_count(),
            McapStatistics::descriptor_metadata_count(),
            McapStatistics::descriptor_chunk_count(),
            McapStatistics::descriptor_message_start_time(),
            McapStatistics::descriptor_message_end_time(),
        ]
    });

static RECOMMENDED_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 0usize]> =
    std::sync::LazyLock::new(|| []);

static OPTIONAL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 1usize]> =
    std::sync::LazyLock::new(|| [McapStatistics::descriptor_channel_message_counts()]);

static ALL_COMPONENTS: std::sync::LazyLock<[ComponentDescriptor; 9usize]> =
    std::sync::LazyLock::new(|| {
        [
            McapStatistics::descriptor_message_count(),
            McapStatistics::descriptor_schema_count(),
            McapStatistics::descriptor_channel_count(),
            McapStatistics::descriptor_attachment_count(),
            McapStatistics::descriptor_metadata_count(),
            McapStatistics::descriptor_chunk_count(),
            McapStatistics::descriptor_message_start_time(),
            McapStatistics::descriptor_message_end_time(),
            McapStatistics::descriptor_channel_message_counts(),
        ]
    });

impl McapStatistics {
    /// The total number of components in the archetype: 8 required, 0 recommended, 1 optional
    pub const NUM_COMPONENTS: usize = 9usize;
}

impl ::re_types_core::Archetype for McapStatistics {
    #[inline]
    fn name() -> ::re_types_core::ArchetypeName {
        "rerun.archetypes.McapStatistics".into()
    }

    #[inline]
    fn display_name() -> &'static str {
        "Mcap statistics"
    }

    #[inline]
    fn required_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        REQUIRED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn recommended_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        RECOMMENDED_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn optional_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        OPTIONAL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn all_components() -> ::std::borrow::Cow<'static, [ComponentDescriptor]> {
        ALL_COMPONENTS.as_slice().into()
    }

    #[inline]
    fn from_arrow_components(
        arrow_data: impl IntoIterator<Item = (ComponentDescriptor, arrow::array::ArrayRef)>,
    ) -> DeserializationResult<Self> {
        re_tracing::profile_function!();
        use ::re_types_core::{Loggable as _, ResultExt as _};
        let arrays_by_descr: ::nohash_hasher::IntMap<_, _> = arrow_data.into_iter().collect();
        let message_count = arrays_by_descr
            .get(&Self::descriptor_message_count())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_message_count())
            });
        let schema_count = arrays_by_descr
            .get(&Self::descriptor_schema_count())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_schema_count())
            });
        let channel_count = arrays_by_descr
            .get(&Self::descriptor_channel_count())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_channel_count())
            });
        let attachment_count = arrays_by_descr
            .get(&Self::descriptor_attachment_count())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_attachment_count())
            });
        let metadata_count = arrays_by_descr
            .get(&Self::descriptor_metadata_count())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_metadata_count())
            });
        let chunk_count = arrays_by_descr
            .get(&Self::descriptor_chunk_count())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_chunk_count())
            });
        let message_start_time = arrays_by_descr
            .get(&Self::descriptor_message_start_time())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_message_start_time())
            });
        let message_end_time = arrays_by_descr
            .get(&Self::descriptor_message_end_time())
            .map(|array| {
                SerializedComponentBatch::new(array.clone(), Self::descriptor_message_end_time())
            });
        let channel_message_counts = arrays_by_descr
            .get(&Self::descriptor_channel_message_counts())
            .map(|array| {
                SerializedComponentBatch::new(
                    array.clone(),
                    Self::descriptor_channel_message_counts(),
                )
            });
        Ok(Self {
            message_count,
            schema_count,
            channel_count,
            attachment_count,
            metadata_count,
            chunk_count,
            message_start_time,
            message_end_time,
            channel_message_counts,
        })
    }
}

impl ::re_types_core::AsComponents for McapStatistics {
    #[inline]
    fn as_serialized_batches(&self) -> Vec<SerializedComponentBatch> {
        use ::re_types_core::Archetype as _;
        [
            self.message_count.clone(),
            self.schema_count.clone(),
            self.channel_count.clone(),
            self.attachment_count.clone(),
            self.metadata_count.clone(),
            self.chunk_count.clone(),
            self.message_start_time.clone(),
            self.message_end_time.clone(),
            self.channel_message_counts.clone(),
        ]
        .into_iter()
        .flatten()
        .collect()
    }
}

impl ::re_types_core::ArchetypeReflectionMarker for McapStatistics {}

impl McapStatistics {
    /// Create a new `McapStatistics`.
    #[inline]
    pub fn new(
        message_count: impl Into<crate::components::Count>,
        schema_count: impl Into<crate::components::Count>,
        channel_count: impl Into<crate::components::Count>,
        attachment_count: impl Into<crate::components::Count>,
        metadata_count: impl Into<crate::components::Count>,
        chunk_count: impl Into<crate::components::Count>,
        message_start_time: impl Into<crate::components::Timestamp>,
        message_end_time: impl Into<crate::components::Timestamp>,
    ) -> Self {
        Self {
            message_count: try_serialize_field(Self::descriptor_message_count(), [message_count]),
            schema_count: try_serialize_field(Self::descriptor_schema_count(), [schema_count]),
            channel_count: try_serialize_field(Self::descriptor_channel_count(), [channel_count]),
            attachment_count: try_serialize_field(
                Self::descriptor_attachment_count(),
                [attachment_count],
            ),
            metadata_count: try_serialize_field(
                Self::descriptor_metadata_count(),
                [metadata_count],
            ),
            chunk_count: try_serialize_field(Self::descriptor_chunk_count(), [chunk_count]),
            message_start_time: try_serialize_field(
                Self::descriptor_message_start_time(),
                [message_start_time],
            ),
            message_end_time: try_serialize_field(
                Self::descriptor_message_end_time(),
                [message_end_time],
            ),
            channel_message_counts: None,
        }
    }

    /// Update only some specific fields of a `McapStatistics`.
    #[inline]
    pub fn update_fields() -> Self {
        Self::default()
    }

    /// Clear all the fields of a `McapStatistics`.
    #[inline]
    pub fn clear_fields() -> Self {
        use ::re_types_core::Loggable as _;
        Self {
            message_count: Some(SerializedComponentBatch::new(
                crate::components::Count::arrow_empty(),
                Self::descriptor_message_count(),
            )),
            schema_count: Some(SerializedComponentBatch::new(
                crate::components::Count::arrow_empty(),
                Self::descriptor_schema_count(),
            )),
            channel_count: Some(SerializedComponentBatch::new(
                crate::components::Count::arrow_empty(),
                Self::descriptor_channel_count(),
            )),
            attachment_count: Some(SerializedComponentBatch::new(
                crate::components::Count::arrow_empty(),
                Self::descriptor_attachment_count(),
            )),
            metadata_count: Some(SerializedComponentBatch::new(
                crate::components::Count::arrow_empty(),
                Self::descriptor_metadata_count(),
            )),
            chunk_count: Some(SerializedComponentBatch::new(
                crate::components::Count::arrow_empty(),
                Self::descriptor_chunk_count(),
            )),
            message_start_time: Some(SerializedComponentBatch::new(
                crate::components::Timestamp::arrow_empty(),
                Self::descriptor_message_start_time(),
            )),
            message_end_time: Some(SerializedComponentBatch::new(
                crate::components::Timestamp::arrow_empty(),
                Self::descriptor_message_end_time(),
            )),
            channel_message_counts: Some(SerializedComponentBatch::new(
                crate::components::ChannelMessageCounts::arrow_empty(),
                Self::descriptor_channel_message_counts(),
            )),
        }
    }

    /// Partitions the component data into multiple sub-batches.
    ///
    /// Specifically, this transforms the existing [`SerializedComponentBatch`]es data into [`SerializedComponentColumn`]s
    /// instead, via [`SerializedComponentBatch::partitioned`].
    ///
    /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
    ///
    /// The specified `lengths` must sum to the total length of the component batch.
    ///
    /// [`SerializedComponentColumn`]: [::re_types_core::SerializedComponentColumn]
    #[inline]
    pub fn columns<I>(
        self,
        _lengths: I,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>>
    where
        I: IntoIterator<Item = usize> + Clone,
    {
        let columns = [
            self.message_count
                .map(|message_count| message_count.partitioned(_lengths.clone()))
                .transpose()?,
            self.schema_count
                .map(|schema_count| schema_count.partitioned(_lengths.clone()))
                .transpose()?,
            self.channel_count
                .map(|channel_count| channel_count.partitioned(_lengths.clone()))
                .transpose()?,
            self.attachment_count
                .map(|attachment_count| attachment_count.partitioned(_lengths.clone()))
                .transpose()?,
            self.metadata_count
                .map(|metadata_count| metadata_count.partitioned(_lengths.clone()))
                .transpose()?,
            self.chunk_count
                .map(|chunk_count| chunk_count.partitioned(_lengths.clone()))
                .transpose()?,
            self.message_start_time
                .map(|message_start_time| message_start_time.partitioned(_lengths.clone()))
                .transpose()?,
            self.message_end_time
                .map(|message_end_time| message_end_time.partitioned(_lengths.clone()))
                .transpose()?,
            self.channel_message_counts
                .map(|channel_message_counts| channel_message_counts.partitioned(_lengths.clone()))
                .transpose()?,
        ];
        Ok(columns.into_iter().flatten())
    }

    /// Helper to partition the component data into unit-length sub-batches.
    ///
    /// This is semantically similar to calling [`Self::columns`] with `std::iter::take(1).repeat(n)`,
    /// where `n` is automatically guessed.
    #[inline]
    pub fn columns_of_unit_batches(
        self,
    ) -> SerializationResult<impl Iterator<Item = ::re_types_core::SerializedComponentColumn>> {
        let len_message_count = self.message_count.as_ref().map(|b| b.array.len());
        let len_schema_count = self.schema_count.as_ref().map(|b| b.array.len());
        let len_channel_count = self.channel_count.as_ref().map(|b| b.array.len());
        let len_attachment_count = self.attachment_count.as_ref().map(|b| b.array.len());
        let len_metadata_count = self.metadata_count.as_ref().map(|b| b.array.len());
        let len_chunk_count = self.chunk_count.as_ref().map(|b| b.array.len());
        let len_message_start_time = self.message_start_time.as_ref().map(|b| b.array.len());
        let len_message_end_time = self.message_end_time.as_ref().map(|b| b.array.len());
        let len_channel_message_counts =
            self.channel_message_counts.as_ref().map(|b| b.array.len());
        let len = None
            .or(len_message_count)
            .or(len_schema_count)
            .or(len_channel_count)
            .or(len_attachment_count)
            .or(len_metadata_count)
            .or(len_chunk_count)
            .or(len_message_start_time)
            .or(len_message_end_time)
            .or(len_channel_message_counts)
            .unwrap_or(0);
        self.columns(std::iter::repeat_n(1, len))
    }

    /// Total number of data messages contained in the MCAP recording.
    ///
    /// This count includes all timestamped data messages but excludes metadata records,
    /// schema definitions, and other non-message records.
    #[inline]
    pub fn with_message_count(
        mut self,
        message_count: impl Into<crate::components::Count>,
    ) -> Self {
        self.message_count = try_serialize_field(Self::descriptor_message_count(), [message_count]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Count`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_message_count`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_message_count(
        mut self,
        message_count: impl IntoIterator<Item = impl Into<crate::components::Count>>,
    ) -> Self {
        self.message_count = try_serialize_field(Self::descriptor_message_count(), message_count);
        self
    }

    /// Number of unique schema definitions in the recording.
    ///
    /// Each schema defines the structure for one or more message types used by channels.
    #[inline]
    pub fn with_schema_count(mut self, schema_count: impl Into<crate::components::Count>) -> Self {
        self.schema_count = try_serialize_field(Self::descriptor_schema_count(), [schema_count]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Count`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_schema_count`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_schema_count(
        mut self,
        schema_count: impl IntoIterator<Item = impl Into<crate::components::Count>>,
    ) -> Self {
        self.schema_count = try_serialize_field(Self::descriptor_schema_count(), schema_count);
        self
    }

    /// Number of channels defined in the recording.
    ///
    /// Each channel represents a unique topic and encoding combination for publishing messages.
    #[inline]
    pub fn with_channel_count(
        mut self,
        channel_count: impl Into<crate::components::Count>,
    ) -> Self {
        self.channel_count = try_serialize_field(Self::descriptor_channel_count(), [channel_count]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Count`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_channel_count`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_channel_count(
        mut self,
        channel_count: impl IntoIterator<Item = impl Into<crate::components::Count>>,
    ) -> Self {
        self.channel_count = try_serialize_field(Self::descriptor_channel_count(), channel_count);
        self
    }

    /// Number of file attachments embedded in the recording.
    ///
    /// Attachments can include calibration files, configuration data, or other auxiliary files.
    #[inline]
    pub fn with_attachment_count(
        mut self,
        attachment_count: impl Into<crate::components::Count>,
    ) -> Self {
        self.attachment_count =
            try_serialize_field(Self::descriptor_attachment_count(), [attachment_count]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Count`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_attachment_count`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_attachment_count(
        mut self,
        attachment_count: impl IntoIterator<Item = impl Into<crate::components::Count>>,
    ) -> Self {
        self.attachment_count =
            try_serialize_field(Self::descriptor_attachment_count(), attachment_count);
        self
    }

    /// Number of metadata records providing additional context about the recording.
    ///
    /// Metadata records contain key-value pairs with information about the recording environment,
    /// system configuration, or other contextual data.
    #[inline]
    pub fn with_metadata_count(
        mut self,
        metadata_count: impl Into<crate::components::Count>,
    ) -> Self {
        self.metadata_count =
            try_serialize_field(Self::descriptor_metadata_count(), [metadata_count]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Count`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_metadata_count`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_metadata_count(
        mut self,
        metadata_count: impl IntoIterator<Item = impl Into<crate::components::Count>>,
    ) -> Self {
        self.metadata_count =
            try_serialize_field(Self::descriptor_metadata_count(), metadata_count);
        self
    }

    /// Number of data chunks used to organize messages in the file.
    ///
    /// Chunks group related messages together for efficient storage and indexed access.
    #[inline]
    pub fn with_chunk_count(mut self, chunk_count: impl Into<crate::components::Count>) -> Self {
        self.chunk_count = try_serialize_field(Self::descriptor_chunk_count(), [chunk_count]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Count`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_chunk_count`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_chunk_count(
        mut self,
        chunk_count: impl IntoIterator<Item = impl Into<crate::components::Count>>,
    ) -> Self {
        self.chunk_count = try_serialize_field(Self::descriptor_chunk_count(), chunk_count);
        self
    }

    /// Timestamp of the earliest message in the recording.
    ///
    /// This marks the beginning of the recorded data timeline.
    #[inline]
    pub fn with_message_start_time(
        mut self,
        message_start_time: impl Into<crate::components::Timestamp>,
    ) -> Self {
        self.message_start_time =
            try_serialize_field(Self::descriptor_message_start_time(), [message_start_time]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Timestamp`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_message_start_time`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_message_start_time(
        mut self,
        message_start_time: impl IntoIterator<Item = impl Into<crate::components::Timestamp>>,
    ) -> Self {
        self.message_start_time =
            try_serialize_field(Self::descriptor_message_start_time(), message_start_time);
        self
    }

    /// Timestamp of the latest message in the recording.
    ///
    /// Together with `message_start_time`, this defines the total duration of the recording.
    #[inline]
    pub fn with_message_end_time(
        mut self,
        message_end_time: impl Into<crate::components::Timestamp>,
    ) -> Self {
        self.message_end_time =
            try_serialize_field(Self::descriptor_message_end_time(), [message_end_time]);
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::Timestamp`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_message_end_time`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_message_end_time(
        mut self,
        message_end_time: impl IntoIterator<Item = impl Into<crate::components::Timestamp>>,
    ) -> Self {
        self.message_end_time =
            try_serialize_field(Self::descriptor_message_end_time(), message_end_time);
        self
    }

    /// Detailed breakdown of message counts per channel.
    #[inline]
    pub fn with_channel_message_counts(
        mut self,
        channel_message_counts: impl Into<crate::components::ChannelMessageCounts>,
    ) -> Self {
        self.channel_message_counts = try_serialize_field(
            Self::descriptor_channel_message_counts(),
            [channel_message_counts],
        );
        self
    }

    /// This method makes it possible to pack multiple [`crate::components::ChannelMessageCounts`] in a single component batch.
    ///
    /// This only makes sense when used in conjunction with [`Self::columns`]. [`Self::with_channel_message_counts`] should
    /// be used when logging a single row's worth of data.
    #[inline]
    pub fn with_many_channel_message_counts(
        mut self,
        channel_message_counts: impl IntoIterator<
            Item = impl Into<crate::components::ChannelMessageCounts>,
        >,
    ) -> Self {
        self.channel_message_counts = try_serialize_field(
            Self::descriptor_channel_message_counts(),
            channel_message_counts,
        );
        self
    }
}

impl ::re_byte_size::SizeBytes for McapStatistics {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.message_count.heap_size_bytes()
            + self.schema_count.heap_size_bytes()
            + self.channel_count.heap_size_bytes()
            + self.attachment_count.heap_size_bytes()
            + self.metadata_count.heap_size_bytes()
            + self.chunk_count.heap_size_bytes()
            + self.message_start_time.heap_size_bytes()
            + self.message_end_time.heap_size_bytes()
            + self.channel_message_counts.heap_size_bytes()
    }
}
