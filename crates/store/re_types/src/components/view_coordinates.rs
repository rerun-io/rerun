// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/view_coordinates.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

#[doc(hidden)]
pub struct __ViewCoordinatesMarker;

/// **Component**: How we interpret the coordinate system of an entity/space.
///
/// For instance: What is "up"? What does the Z axis mean?
///
/// The three coordinates are always ordered as [x, y, z].
///
/// For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points
/// down, and the Z axis points forward.
///
/// ⚠ [Rerun does not yet support left-handed coordinate systems](https://github.com/rerun-io/rerun/issues/5032).
///
/// The following constants are used to represent the different directions:
///  * Up = 1
///  * Down = 2
///  * Right = 3
///  * Left = 4
///  * Forward = 5
///  * Back = 6
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
pub type ViewCoordinates =
    crate::WrapperComponent<crate::datatypes::ViewCoordinates, __ViewCoordinatesMarker>;

#[allow(non_snake_case)]
#[inline]
pub const fn ViewCoordinates(v: crate::datatypes::ViewCoordinates) -> ViewCoordinates {
    crate::WrapperComponent::<crate::datatypes::ViewCoordinates, __ViewCoordinatesMarker>(
        v,
        std::marker::PhantomData,
    )
}

impl ::re_types_core::Component for ViewCoordinates {
    #[inline]
    fn name() -> ComponentType {
        "rerun.components.ViewCoordinates".into()
    }
}

impl<T: Into<crate::datatypes::ViewCoordinates>> From<T> for ViewCoordinates {
    fn from(v: T) -> Self {
        ViewCoordinates(v.into())
    }
}
