// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/transform_mat3x3.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

#[doc(hidden)]
pub struct __TransformMat3x3Marker;

/// **Component**: A 3x3 transformation matrix Matrix.
///
/// 3x3 matrixes are able to represent any affine transformation in 3D space,
/// i.e. rotation, scaling, shearing, reflection etc.
///
/// Matrices in Rerun are stored as flat list of coefficients in column-major order:
/// ```text
///             column 0       column 1       column 2
///        -------------------------------------------------
/// row 0 | flat_columns[0] flat_columns[3] flat_columns[6]
/// row 1 | flat_columns[1] flat_columns[4] flat_columns[7]
/// row 2 | flat_columns[2] flat_columns[5] flat_columns[8]
/// ```
pub type TransformMat3x3 =
    crate::WrapperComponent<crate::datatypes::Mat3x3, __TransformMat3x3Marker>;

#[allow(non_snake_case)]
#[inline]
pub const fn TransformMat3x3(v: crate::datatypes::Mat3x3) -> TransformMat3x3 {
    crate::WrapperComponent::<crate::datatypes::Mat3x3, __TransformMat3x3Marker>(
        v,
        std::marker::PhantomData,
    )
}

impl ::re_types_core::Component for TransformMat3x3 {
    #[inline]
    fn name() -> ComponentType {
        "rerun.components.TransformMat3x3".into()
    }
}

impl<T: Into<crate::datatypes::Mat3x3>> From<T> for TransformMat3x3 {
    fn from(v: T) -> Self {
        TransformMat3x3(v.into())
    }
}
