// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/colormap.fbs".

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::external::arrow2;
use ::re_types_core::ComponentName;
use ::re_types_core::SerializationResult;
use ::re_types_core::{ComponentBatch, MaybeOwnedComponentBatch};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Component**: Colormap for mapping scalar values within a given range to a color.
///
/// This provides a number of popular pre-defined colormaps.
/// In the future, the Rerun Viewer will allow users to define their own colormaps,
/// but currently the Viewer is limited to the types defined here.
#[derive(Clone, Copy, Debug, Hash, PartialEq, Eq, Default)]
pub enum Colormap {
    /// A simple black to white gradient.
    ///
    /// This is a sRGB gray gradient which is perceptually uniform.
    Grayscale = 1,

    /// The Inferno colormap from Matplotlib.
    ///
    /// This is a perceptually uniform colormap.
    /// It interpolates from black to red to bright yellow.
    Inferno = 2,

    /// The Magma colormap from Matplotlib.
    ///
    /// This is a perceptually uniform colormap.
    /// It interpolates from black to purple to white.
    Magma = 3,

    /// The Plasma colormap from Matplotlib.
    ///
    /// This is a perceptually uniform colormap.
    /// It interpolates from dark blue to purple to yellow.
    Plasma = 4,

    /// Google's Turbo colormap map.
    ///
    /// This is a perceptually non-uniform rainbow colormap addressing many issues of
    /// more traditional rainbow colormaps like Jet.
    /// It is more perceptually uniform without sharp transitions and is more colorblind-friendly.
    /// Details: <https://research.google/blog/turbo-an-improved-rainbow-colormap-for-visualization/>
    #[default]
    Turbo = 5,

    /// The Viridis colormap from Matplotlib
    ///
    /// This is a perceptually uniform colormap which is robust to color blindness.
    /// It interpolates from dark purple to green to yellow.
    Viridis = 6,
}

impl ::re_types_core::reflection::Enum for Colormap {
    #[inline]
    fn variants() -> &'static [Self] {
        &[
            Self::Grayscale,
            Self::Inferno,
            Self::Magma,
            Self::Plasma,
            Self::Turbo,
            Self::Viridis,
        ]
    }

    #[inline]
    fn docstring_md(self) -> &'static str {
        match self {
            Self::Grayscale => {
                "A simple black to white gradient.\n\nThis is a sRGB gray gradient which is perceptually uniform."
            }
            Self::Inferno => {
                "The Inferno colormap from Matplotlib.\n\nThis is a perceptually uniform colormap.\nIt interpolates from black to red to bright yellow."
            }
            Self::Magma => {
                "The Magma colormap from Matplotlib.\n\nThis is a perceptually uniform colormap.\nIt interpolates from black to purple to white."
            }
            Self::Plasma => {
                "The Plasma colormap from Matplotlib.\n\nThis is a perceptually uniform colormap.\nIt interpolates from dark blue to purple to yellow."
            }
            Self::Turbo => {
                "Google's Turbo colormap map.\n\nThis is a perceptually non-uniform rainbow colormap addressing many issues of\nmore traditional rainbow colormaps like Jet.\nIt is more perceptually uniform without sharp transitions and is more colorblind-friendly.\nDetails: <https://research.google/blog/turbo-an-improved-rainbow-colormap-for-visualization/>"
            }
            Self::Viridis => {
                "The Viridis colormap from Matplotlib\n\nThis is a perceptually uniform colormap which is robust to color blindness.\nIt interpolates from dark purple to green to yellow."
            }
        }
    }
}

impl ::re_types_core::SizeBytes for Colormap {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        0
    }

    #[inline]
    fn is_pod() -> bool {
        true
    }
}

impl std::fmt::Display for Colormap {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            Self::Grayscale => write!(f, "Grayscale"),
            Self::Inferno => write!(f, "Inferno"),
            Self::Magma => write!(f, "Magma"),
            Self::Plasma => write!(f, "Plasma"),
            Self::Turbo => write!(f, "Turbo"),
            Self::Viridis => write!(f, "Viridis"),
        }
    }
}

::re_types_core::macros::impl_into_cow!(Colormap);

impl ::re_types_core::Loggable for Colormap {
    type Name = ::re_types_core::ComponentName;

    #[inline]
    fn name() -> Self::Name {
        "rerun.components.Colormap".into()
    }

    #[inline]
    fn arrow_datatype() -> arrow2::datatypes::DataType {
        #![allow(clippy::wildcard_imports)]
        use arrow2::datatypes::*;
        DataType::Union(
            std::sync::Arc::new(vec![
                Field::new("_null_markers", DataType::Null, true),
                Field::new("Grayscale", DataType::Null, true),
                Field::new("Inferno", DataType::Null, true),
                Field::new("Magma", DataType::Null, true),
                Field::new("Plasma", DataType::Null, true),
                Field::new("Turbo", DataType::Null, true),
                Field::new("Viridis", DataType::Null, true),
            ]),
            Some(std::sync::Arc::new(vec![
                0i32, 1i32, 2i32, 3i32, 4i32, 5i32, 6i32,
            ])),
            UnionMode::Sparse,
        )
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<Box<dyn arrow2::array::Array>>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, datatypes::*};
        Ok({
            // Sparse Arrow union
            let data: Vec<_> = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    datum
                })
                .collect();
            let num_variants = 6usize;
            let types = data
                .iter()
                .map(|a| match a.as_deref() {
                    None => 0,
                    Some(value) => *value as i8,
                })
                .collect();
            let fields: Vec<_> =
                std::iter::repeat(NullArray::new(DataType::Null, data.len()).boxed())
                    .take(1 + num_variants)
                    .collect();
            UnionArray::new(Self::arrow_datatype(), types, fields, None).boxed()
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow2::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        #![allow(clippy::wildcard_imports)]
        use ::re_types_core::{Loggable as _, ResultExt as _};
        use arrow2::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow2::array::UnionArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.components.Colormap")?;
            let arrow_data_types = arrow_data.types();
            arrow_data_types
                .iter()
                .map(|typ| match typ {
                    0 => Ok(None),
                    1 => Ok(Some(Self::Grayscale)),
                    2 => Ok(Some(Self::Inferno)),
                    3 => Ok(Some(Self::Magma)),
                    4 => Ok(Some(Self::Plasma)),
                    5 => Ok(Some(Self::Turbo)),
                    6 => Ok(Some(Self::Viridis)),
                    _ => Err(DeserializationError::missing_union_arm(
                        Self::arrow_datatype(),
                        "<invalid>",
                        *typ as _,
                    )),
                })
                .collect::<DeserializationResult<Vec<_>>>()
                .with_context("rerun.components.Colormap")?
        })
    }
}
