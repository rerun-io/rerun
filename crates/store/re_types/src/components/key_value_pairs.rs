// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/key_value_pairs.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Component**: A map of string keys to string values.
///
/// This component can be used to attach arbitrary metadata or annotations to entities.
/// Each key-value pair is stored as a UTF-8 string mapping.
///
/// ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
#[derive(Clone, Debug, Default, PartialEq, Eq)]
pub struct KeyValuePairs(
    /// The key-value pairs that make up this string map.
    pub Vec<crate::datatypes::Utf8Pair>,
);

impl ::re_types_core::Component for KeyValuePairs {
    #[inline]
    fn name() -> ComponentType {
        "rerun.components.KeyValuePairs".into()
    }
}

::re_types_core::macros::impl_into_cow!(KeyValuePairs);

impl ::re_types_core::Loggable for KeyValuePairs {
    #[inline]
    fn arrow_datatype() -> arrow::datatypes::DataType {
        use arrow::datatypes::*;
        DataType::List(std::sync::Arc::new(Field::new(
            "item",
            <crate::datatypes::Utf8Pair>::arrow_datatype(),
            false,
        )))
    }

    fn to_arrow_opt<'a>(
        data: impl IntoIterator<Item = Option<impl Into<::std::borrow::Cow<'a, Self>>>>,
    ) -> SerializationResult<arrow::array::ArrayRef>
    where
        Self: Clone + 'a,
    {
        #![allow(clippy::manual_is_variant_and)]
        use ::re_types_core::{Loggable as _, ResultExt as _, arrow_helpers::as_array_ref};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let (somes, data0): (Vec<_>, Vec<_>) = data
                .into_iter()
                .map(|datum| {
                    let datum: Option<::std::borrow::Cow<'a, Self>> = datum.map(Into::into);
                    let datum = datum.map(|datum| datum.into_owned().0);
                    (datum.is_some(), datum)
                })
                .unzip();
            let data0_validity: Option<arrow::buffer::NullBuffer> = {
                let any_nones = somes.iter().any(|some| !*some);
                any_nones.then(|| somes.into())
            };
            {
                let offsets = arrow::buffer::OffsetBuffer::<i32>::from_lengths(
                    data0
                        .iter()
                        .map(|opt| opt.as_ref().map_or(0, |datum| datum.len())),
                );
                let data0_inner_data: Vec<_> = data0.into_iter().flatten().flatten().collect();
                let data0_inner_validity: Option<arrow::buffer::NullBuffer> = None;
                as_array_ref(ListArray::try_new(
                    std::sync::Arc::new(Field::new(
                        "item",
                        <crate::datatypes::Utf8Pair>::arrow_datatype(),
                        false,
                    )),
                    offsets,
                    {
                        _ = data0_inner_validity;
                        crate::datatypes::Utf8Pair::to_arrow_opt(
                            data0_inner_data.into_iter().map(Some),
                        )?
                    },
                    data0_validity,
                )?)
            }
        })
    }

    fn from_arrow_opt(
        arrow_data: &dyn arrow::array::Array,
    ) -> DeserializationResult<Vec<Option<Self>>>
    where
        Self: Sized,
    {
        use ::re_types_core::{Loggable as _, ResultExt as _, arrow_zip_validity::ZipValidity};
        use arrow::{array::*, buffer::*, datatypes::*};
        Ok({
            let arrow_data = arrow_data
                .as_any()
                .downcast_ref::<arrow::array::ListArray>()
                .ok_or_else(|| {
                    let expected = Self::arrow_datatype();
                    let actual = arrow_data.data_type().clone();
                    DeserializationError::datatype_mismatch(expected, actual)
                })
                .with_context("rerun.components.KeyValuePairs#pairs")?;
            if arrow_data.is_empty() {
                Vec::new()
            } else {
                let arrow_data_inner = {
                    let arrow_data_inner = &**arrow_data.values();
                    crate::datatypes::Utf8Pair::from_arrow_opt(arrow_data_inner)
                        .with_context("rerun.components.KeyValuePairs#pairs")?
                        .into_iter()
                        .collect::<Vec<_>>()
                };
                let offsets = arrow_data.offsets();
                ZipValidity::new_with_validity(offsets.windows(2), arrow_data.nulls())
                    .map(|elem| {
                        elem.map(|window| {
                            let start = window[0] as usize;
                            let end = window[1] as usize;
                            if arrow_data_inner.len() < end {
                                return Err(DeserializationError::offset_slice_oob(
                                    (start, end),
                                    arrow_data_inner.len(),
                                ));
                            }

                            #[expect(unsafe_code, clippy::undocumented_unsafe_blocks)]
                            let data = unsafe { arrow_data_inner.get_unchecked(start..end) };
                            let data = data
                                .iter()
                                .cloned()
                                .map(Option::unwrap_or_default)
                                .collect();
                            Ok(data)
                        })
                        .transpose()
                    })
                    .collect::<DeserializationResult<Vec<Option<_>>>>()?
            }
            .into_iter()
        }
        .map(|v| v.ok_or_else(DeserializationError::missing_data))
        .map(|res| res.map(|v| Some(Self(v))))
        .collect::<DeserializationResult<Vec<Option<_>>>>()
        .with_context("rerun.components.KeyValuePairs#pairs")
        .with_context("rerun.components.KeyValuePairs")?)
    }
}

impl<I: Into<crate::datatypes::Utf8Pair>, T: IntoIterator<Item = I>> From<T> for KeyValuePairs {
    fn from(v: T) -> Self {
        Self(v.into_iter().map(|v| v.into()).collect())
    }
}

impl ::re_byte_size::SizeBytes for KeyValuePairs {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.0.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <Vec<crate::datatypes::Utf8Pair>>::is_pod()
    }
}
