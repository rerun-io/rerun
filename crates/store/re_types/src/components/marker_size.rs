// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/marker_size.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

#[doc(hidden)]
pub struct __MarkerSizeMarker;

/// **Component**: Radius of a marker of a point in e.g. a 2D plot, measured in UI points.
pub type MarkerSize = crate::WrapperComponent<crate::datatypes::Float32, __MarkerSizeMarker>;

#[allow(non_snake_case)]
#[inline]
pub const fn MarkerSize(v: crate::datatypes::Float32) -> MarkerSize {
    crate::WrapperComponent::<crate::datatypes::Float32, __MarkerSizeMarker>(
        v,
        std::marker::PhantomData,
    )
}

impl ::re_types_core::Component for MarkerSize {
    #[inline]
    fn name() -> ComponentType {
        "rerun.components.MarkerSize".into()
    }
}

impl<T: Into<crate::datatypes::Float32>> From<T> for MarkerSize {
    fn from(v: T) -> Self {
        MarkerSize(v.into())
    }
}
