// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/image_format.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::allow_attributes)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]
#![allow(clippy::wildcard_imports)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

/// **Component**: The metadata describing the contents of a [`components::ImageBuffer`][crate::components::ImageBuffer].
#[derive(Clone, Debug, Default, Copy, PartialEq, Eq, Hash)]
#[repr(transparent)]
pub struct ImageFormat(pub crate::datatypes::ImageFormat);

impl ::re_types_core::WrapperComponent for ImageFormat {
    type Datatype = crate::datatypes::ImageFormat;

    #[inline]
    fn name() -> ComponentType {
        "rerun.components.ImageFormat".into()
    }

    #[inline]
    fn into_inner(self) -> Self::Datatype {
        self.0
    }
}

::re_types_core::macros::impl_into_cow!(ImageFormat);

impl<T: Into<crate::datatypes::ImageFormat>> From<T> for ImageFormat {
    fn from(v: T) -> Self {
        Self(v.into())
    }
}

impl std::borrow::Borrow<crate::datatypes::ImageFormat> for ImageFormat {
    #[inline]
    fn borrow(&self) -> &crate::datatypes::ImageFormat {
        &self.0
    }
}

impl std::ops::Deref for ImageFormat {
    type Target = crate::datatypes::ImageFormat;

    #[inline]
    fn deref(&self) -> &crate::datatypes::ImageFormat {
        &self.0
    }
}

impl std::ops::DerefMut for ImageFormat {
    #[inline]
    fn deref_mut(&mut self) -> &mut crate::datatypes::ImageFormat {
        &mut self.0
    }
}

impl ::re_byte_size::SizeBytes for ImageFormat {
    #[inline]
    fn heap_size_bytes(&self) -> u64 {
        self.0.heap_size_bytes()
    }

    #[inline]
    fn is_pod() -> bool {
        <crate::datatypes::ImageFormat>::is_pod()
    }
}
