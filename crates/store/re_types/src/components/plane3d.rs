// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/rust/api.rs
// Based on "crates/store/re_types/definitions/rerun/components/plane3d.fbs".

#![allow(unused_braces)]
#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]
#![allow(clippy::cloned_instead_of_copied)]
#![allow(clippy::map_flatten)]
#![allow(clippy::needless_question_mark)]
#![allow(clippy::new_without_default)]
#![allow(clippy::redundant_closure)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::too_many_lines)]

use ::re_types_core::SerializationResult;
use ::re_types_core::try_serialize_field;
use ::re_types_core::{ComponentBatch as _, SerializedComponentBatch};
use ::re_types_core::{ComponentDescriptor, ComponentType};
use ::re_types_core::{DeserializationError, DeserializationResult};

#[doc(hidden)]
pub struct __Plane3DMarker;

/// **Component**: An infinite 3D plane represented by a unit normal vector and a distance.
///
/// Any point P on the plane fulfills the equation `dot(xyz, P) - d = 0`,
/// where `xyz` is the plane's normal and `d` the distance of the plane from the origin.
/// This representation is also known as the Hesse normal form.
///
/// Note: although the normal will be passed through to the
/// datastore as provided, when used in the Viewer, planes will always be normalized.
/// I.e. the plane with xyz = (2, 0, 0), d = 1 is equivalent to xyz = (1, 0, 0), d = 0.5
pub type Plane3D = crate::WrapperComponent<crate::datatypes::Plane3D, __Plane3DMarker>;

#[allow(non_snake_case)]
#[inline]
pub const fn Plane3D(v: crate::datatypes::Plane3D) -> Plane3D {
    crate::WrapperComponent::<crate::datatypes::Plane3D, __Plane3DMarker>(
        v,
        std::marker::PhantomData,
    )
}

impl ::re_types_core::Component for Plane3D {
    #[inline]
    fn name() -> ComponentType {
        "rerun.components.Plane3D".into()
    }
}

impl<T: Into<crate::datatypes::Plane3D>> From<T> for Plane3D {
    fn from(v: T) -> Self {
        Plane3D(v.into())
    }
}
