syntax = "proto3";

package rerun.sdk_comms.v0;

import "rerun/v0/log_msg.proto";
import "rerun/v0/common.proto";

// Simple buffer for messages between SDKs and viewers.
//
// - SDKs produce messages by calling `WriteMessages`
// - Viewers consume messages by calling `ReadMessages`
//
// The buffer is bounded by a memory limit, and will drop the oldest messages when the limit is reached.
//
// Whenever `ReadMessages` is called, all buffered messages are sent in the order they were received.
// The stream will then also yield any new messages passed to `WriteMessages` from any client.
service MessageProxy {
    // TODO(jan): Would it be more efficient to send a "message batch" instead of individual messages?
    //            It may allow us to amortize the overhead of the gRPC protocol.
    rpc WriteMessages(stream rerun.log_msg.v0.LogMsg) returns (Empty) {}
    rpc ReadMessages(Empty) returns (stream rerun.log_msg.v0.LogMsg) {}
}

message Empty {}
