syntax = "proto3";

package rerun.log_msg.v0;

import "rerun/v0/common.proto";

// TODO(#8631): Remove `LogMsg`
message LogMsg {
    oneof msg {
        // A message that contains a new store info.
        SetStoreInfo set_store_info = 1;

        // A message that contains an Arrow-IPC encoded message.
        ArrowMsg arrow_msg = 2;

        // A message that contains a blueprint activation command.
        BlueprintActivationCommand blueprint_activation_command = 3;
    }
}

// Corresponds to `LogMsg::SetStoreInfo`. Used to identify a recording.
message SetStoreInfo {
    // A time-based UID that is used to determine how a `StoreInfo` fits in the global ordering of events.
    rerun.common.v0.Tuid row_id = 1;

    // The new store info.
    StoreInfo info = 2;
}

// The type of compression used on the payload.
enum Compression {
    // No compression.
    NONE = 0;

    // LZ4 block compression.
    LZ4 = 1;
}

// The encoding of the message payload.
enum Encoding {
    // We don't know what encoding the payload is in.
    UNKNOWN = 0;

    // The payload is encoded as Arrow-IPC.
    ARROW_IPC = 1;
}

// Corresponds to `LogMsg::ArrowMsg`. Used to transmit actual data.
message ArrowMsg {
    // The ID of the store that this message is for.
    rerun.common.v0.StoreId store_id = 1;

    // Compression algorithm used.
    Compression compression = 2;

    int32 uncompressed_size = 3;

    // Encoding of the payload.
    Encoding encoding = 4;

    // Arrow-IPC encoded schema and chunk, compressed according to the `compression` field.
    bytes payload = 1000;
}

// Corresponds to `LogMsg::BlueprintActivationCommand`.
//
// Used for activating a blueprint once it has been fully transmitted,
// because showing a blueprint before it is fully transmitted can lead to
// a confusing user experience, or inconsistent results due to heuristics.
message BlueprintActivationCommand {
    // The ID of the blueprint to activate.
    rerun.common.v0.StoreId blueprint_id = 1;

    // Whether to make the blueprint active immediately.
    bool make_active = 2;

    // Whether to make the blueprint the default.
    bool make_default = 3;
}

// Information about a recording or blueprint.
message StoreInfo {
    // User-chosen name of the application doing the logging.
    rerun.common.v0.ApplicationId application_id = 1;

    // Unique ID of the recording.
    rerun.common.v0.StoreId store_id = 2;

    /// True if the recording is one of the official Rerun examples.
    bool is_official_example = 3;

    // When the recording started.
    rerun.common.v0.Time started = 4;

    // Where the recording came from.
    StoreSource store_source = 5;

    // Version of the store crate.
    StoreVersion store_version = 6;
}

// The source of a recording or blueprint.
message StoreSource {
    // Determines what is encoded in `extra`.
    StoreSourceKind kind = 1;

    // Store source payload. See `StoreSourceKind` for what exactly is encoded here.
    StoreSourceExtra extra = 2;
}

// A newtype for `StoreSource` payload.
//
// This exists to that we can implement conversions on the newtype for convenience.
message StoreSourceExtra {
    bytes payload = 1;
}

// What kind of source a recording comes from.
enum StoreSourceKind {
    // We don't know anything about the source of this recording.
    //
    // `extra` is unused.
    UNKNOWN_KIND = 0;

    // The recording came from the C++ SDK.
    //
    // `extra` is unused.
    C_SDK = 1;

    // The recording came from the Python SDK.
    //
    // `extra` is `PythonVersion`.
    PYTHON_SDK = 2;

    // The recording came from the Rust SDK.
    //
    // `extra` is `CrateInfo`.
    RUST_SDK = 3;

    // The recording came from a file.
    //
    // `extra` is `FileSource`.
    FILE = 4;

    // The recording came from some action in the viewer.
    //
    // `extra` is unused.
    VIEWER = 5;

    // The recording came from some other source.
    //
    // `extra` is a string.
    OTHER = 6;
}

// Version of the Python SDK that created the recording.
message PythonVersion {
    int32 major = 1;
    int32 minor = 2;
    int32 patch = 3;
    string suffix = 4;
}

// Information about the Rust SDK that created the recording.
message CrateInfo {
    // Version of the Rust compiler used to compile the SDK.
    string rustc_version = 1;

    // Version of LLVM used by the Rust compiler.
    string llvm_version = 2;
}

// A recording which came from a file.
message FileSource {
    FileSourceKind kind = 1;
}

// Determines where the file came from.
enum FileSourceKind {
    // We don't know where the file came from.
    UNKNOWN_SOURCE = 0;

    // The file came from the command line.
    CLI = 1;

    // The file was served over HTTP.
    URI = 2;

    // The file was dragged into the viewer.
    DRAG_AND_DROP = 3;

    // The file was opened using a file dialog.
    FILE_DIALOG = 4;

    // The recording was produced using a data loader, such as when logging a mesh file.
    SDK = 5;
}

message StoreVersion {
    // Crate version encoded using our custom scheme.
    //
    // See `CrateVersion` in `re_build_info`.
    int32 crate_version_bits = 1;
}
