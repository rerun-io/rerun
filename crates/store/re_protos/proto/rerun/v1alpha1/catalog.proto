// This is the second iteration of the catalog API. For now it lives alongside the existing `remote_store` APIs (and
// friends) but will ultimately replace them.

syntax = "proto3";

package rerun.catalog.v1alpha1;

import "google/protobuf/any.proto";
import "google/protobuf/timestamp.proto";
import "rerun/v1alpha1/common.proto";

service CatalogService {
  rpc FindEntries(FindEntriesRequest) returns (FindEntriesResponse) {}
  rpc DeleteEntry(DeleteEntryRequest) returns (DeleteEntryResponse) {}

  rpc CreateDatasetEntry(CreateDatasetEntryRequest) returns (CreateDatasetEntryResponse) {}
  rpc ReadDatasetEntry(ReadDatasetEntryRequest) returns (ReadDatasetEntryResponse) {}
  rpc UpdateDatasetEntry(UpdateDatasetEntryRequest) returns (UpdateDatasetEntryResponse) {}

  // Register a foreign table as a new table entry in the catalog.
  rpc RegisterTable(RegisterTableRequest) returns (RegisterTableResponse) {}

  rpc ReadTableEntry(ReadTableEntryRequest) returns (ReadTableEntryResponse) {}
}

// ---------------- Services ------------------

// FindEntries

message FindEntriesRequest {
  EntryFilter filter = 1;
}

message FindEntriesResponse {
  repeated EntryDetails entries = 1;
}

// DeleteDatasetEntry

message DeleteEntryRequest {
  rerun.common.v1alpha1.EntryId id = 1;
}

message DeleteEntryResponse {}

// CreateDatasetEntry

message CreateDatasetEntryRequest {
  // Name of the dataset entry to create.
  //
  // The name should be a short human-readable string. It must be unique within all entries in the catalog. If an entry
  // with the same name already exists, the request will fail.
  optional string name = 1;

  //TODO(ab): add IfExistingBehavior?
}

message CreateDatasetEntryResponse {
  DatasetEntry dataset = 1;
}

// ReadDatasetEntry

message ReadDatasetEntryRequest {
  rerun.common.v1alpha1.EntryId id = 1;
}

message ReadDatasetEntryResponse {
  DatasetEntry dataset = 1;
}

// UpdateDatasetEntry

message UpdateDatasetEntryRequest {
  // The dataset to modify.
  rerun.common.v1alpha1.EntryId id = 1;

  // The new values.
  DatasetDetails dataset_details = 2;
}

message UpdateDatasetEntryResponse {
  // The updated dataset entry
  DatasetEntry dataset = 1;
}

// RegisterTable

message RegisterTableRequest {
  // Name of the table entry to create.
  //
  // The name should be a short human-readable string. It must be unique within all entries in the catalog. If an entry
  // with the same name already exists, the request will fail.
  string name = 1;

  // Information about the table to register.
  //
  // This must be encoded message of one one of the following supported types:
  // - rerun.catalog.v1alpha1.LanceTable
  google.protobuf.Any provider_details = 2;

  //TODO(ab): add IfExistingBehavior?
}

message RegisterTableResponse {
  // Details about the table that was created and registered.
  TableEntry table_entry = 1;
}

// ReadTableEntry

message ReadTableEntryRequest {
  rerun.common.v1alpha1.EntryId id = 1;
}

message ReadTableEntryResponse {
  TableEntry table = 1;
}

// ---------------- Common ------------------

message EntryFilter {
  optional rerun.common.v1alpha1.EntryId id = 1;
  optional string name = 2;
  optional EntryKind entry_kind = 3;
}

// What type of entry. This has strong implication on which APIs are available for this entry.
enum EntryKind {
  // Always reserve unspecified as default value
  ENTRY_KIND_UNSPECIFIED = 0;

  // Order as TYPE, TYPE_VIEW so things stay consistent as we introduce new types.
  ENTRY_KIND_DATASET = 1;

  ENTRY_KIND_DATASET_VIEW = 2;

  ENTRY_KIND_TABLE = 3;

  ENTRY_KIND_TABLE_VIEW = 4;

  ENTRY_KIND_BLUEPRINT_DATASET = 5;
}

// Minimal info about an Entry for high-level catalog summary
message EntryDetails {
  // The EntryId is immutable
  rerun.common.v1alpha1.EntryId id = 1;

  // The name of this entry.
  optional string name = 2;

  // The kind of entry
  EntryKind entry_kind = 3;

  google.protobuf.Timestamp created_at = 4;
  google.protobuf.Timestamp updated_at = 5;
}

message DatasetDetails {
  // The blueprint dataset associated with this dataset (if any).
  optional rerun.common.v1alpha1.EntryId blueprint_dataset = 3;

  // The partition of the blueprint dataset corresponding to the default blueprint (if any).
  optional rerun.common.v1alpha1.PartitionId default_blueprint = 4;
}

message DatasetEntry {
  reserved 3;
  reserved "blueprint_dataset";

  EntryDetails details = 1;

  // Dataset-specific information, may be update with `UpdateDatasetEntry`
  DatasetDetails dataset_details = 4;

  // Read-only
  rerun.common.v1alpha1.DatasetHandle dataset_handle = 2;
}

message TableEntry {
  EntryDetails details = 1;

  // Details specific to the table-provider
  google.protobuf.Any provider_details = 3;

  reserved 2;
  reserved "schema";
}

enum SystemTableKind {
  // Always reserve unspecified as default value
  SYSTEM_TABLE_KIND_UNSPECIFIED = 0;
  // Not used yet
  SYSTEM_TABLE_KIND_NAMESPACES = 1;
  // All of the entries in the associated namespace
  SYSTEM_TABLE_KIND_ENTRIES = 2;
}

message SystemTable {
  SystemTableKind kind = 1;
}

// A foreign table stored as a Lance table.
message LanceTable {
  // The URL of the Lance table.
  string table_url = 1;
}
