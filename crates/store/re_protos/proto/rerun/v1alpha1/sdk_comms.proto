syntax = "proto3";

package rerun.sdk_comms.v1alpha1;

import "rerun/v1alpha1/common.proto";
import "rerun/v1alpha1/log_msg.proto";

// Simple buffer for messages between SDKs and viewers.
//
// - SDKs produce messages by calling `WriteMessages`
// - Viewers consume messages by calling `ReadMessages`
//
// The buffer is bounded by a memory limit, and will drop the oldest messages when the limit is reached.
//
// Whenever `ReadMessages` is called, all buffered messages are sent in the order they were received.
// The stream will then also yield any new messages passed to `WriteMessages` from any client.
service MessageProxyService {
  // TODO(jan): Would it be more efficient to send a "message batch" instead of individual messages?
  //            It may allow us to amortize the overhead of the gRPC protocol.
  rpc WriteMessages(stream WriteMessagesRequest) returns (WriteMessagesResponse) {}
  rpc ReadMessages(ReadMessagesRequest) returns (stream ReadMessagesResponse) {}

  rpc WriteTable(WriteTableRequest) returns (WriteTableResponse) {}
  rpc ReadTables(ReadTablesRequest) returns (stream ReadTablesResponse) {}
}

// WriteMessages

message WriteMessagesRequest {
  rerun.log_msg.v1alpha1.LogMsg log_msg = 1;
}

message WriteMessagesResponse {}

// ReadMessages

message ReadMessagesRequest {}

message ReadMessagesResponse {
  rerun.log_msg.v1alpha1.LogMsg log_msg = 1;
}

// WriteTable

message WriteTableRequest {
  rerun.common.v1alpha1.TableId id = 1;
  rerun.common.v1alpha1.DataframePart data = 2;
}

message WriteTableResponse {}

// ReadTable

message ReadTablesRequest {}

message ReadTablesResponse {
  rerun.common.v1alpha1.TableId id = 1;
  rerun.common.v1alpha1.DataframePart data = 2;
}
