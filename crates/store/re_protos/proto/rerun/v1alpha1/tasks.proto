syntax = "proto3";

package rerun.redap_tasks.v1alpha1;

import "google/protobuf/duration.proto";
import "rerun/v1alpha1/common.proto";

// `TasksService` is the service for submitting and querying persistent redap tasks.
service TasksService {
  // Submit new tasks
  rpc SubmitTasks(SubmitTasksRequest) returns (SubmitTasksResponse);

  // Query the status of submitted tasks
  rpc QueryTasks(QueryTasksRequest) returns (QueryTasksResponse);

  // Fetch the output of a completed task
  rpc FetchTaskOutput(FetchTaskOutputRequest) returns (FetchTaskOutputResponse);

  // Query the status of submitted tasks, waiting for their completion.
  //
  // The method returns a stream of QueryResult. Each item in the stream contains
  // the status of a subset of the tasks, as they complete.
  // The server does not guarantee to immediately send one stream item as soon as a task
  // completes, but may decide to arbitrarily aggregate results into larger batches.
  rpc QueryTasksOnCompletion(QueryTasksOnCompletionRequest) returns (stream QueryTasksOnCompletionResponse);
}

// A task is a unit of work that can be submitted to the system
message Task {
  // Unique identifier for the task
  rerun.common.v1alpha1.TaskId id = 1;
  // Type of the task
  string task_type = 2;
  // Task-type dependant data necessary to de-serialize the task
  bytes task_data = 3;
}

// `SubmitTasksRequest` is the request message for submitting tasks
message SubmitTasksRequest {
  repeated Task tasks = 1;
}

// `SubmitTaskResponse` contains, for each submitted task
// its submission outcome, encoded as a `RecordBatch`
message SubmitTasksResponse {
  rerun.common.v1alpha1.DataframePart data = 1;
}

// `QueryTasksRequest` is the request message for querying tasks status
message QueryTasksRequest {
  // Empty queries for all tasks if the server allows it.
  repeated rerun.common.v1alpha1.TaskId ids = 1;
}

// `QueryTasksResponse` is the response message for querying tasks status
// encoded as a record batch
message QueryTasksResponse {
  rerun.common.v1alpha1.DataframePart data = 1;
}

// `QueryTasksOnCompletionRequest` is the request message for querying tasks status.
// This is close-to-a-copy of `QueryTasksRequest`, with the addition of a timeout.
message QueryTasksOnCompletionRequest {
  // Empty queries for all tasks if the server allows it.
  repeated rerun.common.v1alpha1.TaskId ids = 1;
  // Time limit for the server to wait for task completion.
  // The actual maximum time may be arbitrarily capped by the server.
  google.protobuf.Duration timeout = 2;
}

// `QueryTaskOnCompletionResponse` is the response message for querying tasks status
// encoded as a record batch. This is a copy of `QueryTasksResponse`.
message QueryTasksOnCompletionResponse {
  rerun.common.v1alpha1.DataframePart data = 1;
}

// `FetchTaskOutputRequest` is the request message for fetching task output
message FetchTaskOutputRequest {
  // Unique identifier for the task
  rerun.common.v1alpha1.TaskId id = 1;
}

/// `FetchTaskOutputResponse` is the response message for fetching task output
message FetchTaskOutputResponse {
  // The output of the task, encoded as a record batch
  rerun.common.v1alpha1.DataframePart data = 1;
}
