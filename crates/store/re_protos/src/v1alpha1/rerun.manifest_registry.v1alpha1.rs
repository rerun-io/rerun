// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataSource {
    /// Where is the data for this data source stored (e.g. s3://bucket/file or file:///path/to/file)?
    #[prost(string, optional, tag = "1")]
    pub storage_url: ::core::option::Option<::prost::alloc::string::String>,
    /// What kind of data is it (e.g. rrd, mcap, Lance, etc)?
    #[prost(enumeration = "DataSourceKind", tag = "2")]
    pub typ: i32,
}
impl ::prost::Name for DataSource {
    const NAME: &'static str = "DataSource";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.DataSource".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.DataSource".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    #[prost(message, repeated, tag = "2")]
    pub data_sources: ::prost::alloc::vec::Vec<DataSource>,
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "3"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for RegisterWithDatasetRequest {
    const NAME: &'static str = "RegisterWithDatasetRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.RegisterWithDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.RegisterWithDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for RegisterWithDatasetResponse {
    const NAME: &'static str = "RegisterWithDatasetResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.RegisterWithDatasetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.RegisterWithDatasetResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetAsyncRequest {
    /// today this just wraps the sync request. This at least avoids
    /// repetition and the two messages going out of sync.
    #[prost(message, optional, tag = "1")]
    pub request: ::core::option::Option<RegisterWithDatasetRequest>,
}
impl ::prost::Name for RegisterWithDatasetAsyncRequest {
    const NAME: &'static str = "RegisterWithDatasetAsyncRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.RegisterWithDatasetAsyncRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.RegisterWithDatasetAsyncRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetAsyncResponse {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::TaskId>,
}
impl ::prost::Name for RegisterWithDatasetAsyncResponse {
    const NAME: &'static str = "RegisterWithDatasetAsyncResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.RegisterWithDatasetAsyncResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.RegisterWithDatasetAsyncResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteChunksRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
}
impl ::prost::Name for WriteChunksRequest {
    const NAME: &'static str = "WriteChunksRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.WriteChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.WriteChunksRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WriteChunksResponse {}
impl ::prost::Name for WriteChunksResponse {
    const NAME: &'static str = "WriteChunksResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.WriteChunksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.WriteChunksResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPartitionTableSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
}
impl ::prost::Name for GetPartitionTableSchemaRequest {
    const NAME: &'static str = "GetPartitionTableSchemaRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetPartitionTableSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetPartitionTableSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPartitionTableSchemaResponse {
    #[prost(message, optional, tag = "1")]
    pub schema: ::core::option::Option<super::super::common::v1alpha1::Schema>,
}
impl ::prost::Name for GetPartitionTableSchemaResponse {
    const NAME: &'static str = "GetPartitionTableSchemaResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetPartitionTableSchemaResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetPartitionTableSchemaResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanPartitionTableRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    #[prost(message, optional, tag = "2")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for ScanPartitionTableRequest {
    const NAME: &'static str = "ScanPartitionTableRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ScanPartitionTableRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ScanPartitionTableRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanPartitionTableResponse {
    /// Partitions metadata as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ScanPartitionTableResponse {
    const NAME: &'static str = "ScanPartitionTableResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ScanPartitionTableResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ScanPartitionTableResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatasetSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
}
impl ::prost::Name for GetDatasetSchemaRequest {
    const NAME: &'static str = "GetDatasetSchemaRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetDatasetSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetDatasetSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatasetSchemaResponse {
    #[prost(message, optional, tag = "1")]
    pub schema: ::core::option::Option<super::super::common::v1alpha1::Schema>,
}
impl ::prost::Name for GetDatasetSchemaResponse {
    const NAME: &'static str = "GetDatasetSchemaResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetDatasetSchemaResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetDatasetSchemaResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    /// List of specific partitions that will be indexed (all if left empty).
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    #[prost(message, optional, tag = "3")]
    pub config: ::core::option::Option<IndexConfig>,
    /// Specify behavior when index for a partition was already created.
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "4"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for CreateIndexRequest {
    const NAME: &'static str = "CreateIndexRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreateIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreateIndexRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexConfig {
    /// what kind of index do we want to create and what are its index specific properties.
    #[prost(message, optional, tag = "1")]
    pub properties: ::core::option::Option<IndexProperties>,
    /// Component / column we want to index.
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
    /// What is the filter index i.e. timeline for which we will query the timepoints.
    ///
    /// TODO(zehiko) this might go away and we might just index across all the timelines
    #[prost(message, optional, tag = "3")]
    pub time_index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
}
impl ::prost::Name for IndexConfig {
    const NAME: &'static str = "IndexConfig";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexConfig".into()
    }
}
/// used to define which column we want to index
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexColumn {
    /// The path of the entity.
    #[prost(message, optional, tag = "1")]
    pub entity_path: ::core::option::Option<super::super::common::v1alpha1::EntityPath>,
    /// Component details
    #[prost(message, optional, tag = "2")]
    pub component: ::core::option::Option<super::super::common::v1alpha1::ComponentDescriptor>,
}
impl ::prost::Name for IndexColumn {
    const NAME: &'static str = "IndexColumn";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexColumn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexColumn".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexProperties {
    #[prost(oneof = "index_properties::Props", tags = "1, 2, 3")]
    pub props: ::core::option::Option<index_properties::Props>,
}
/// Nested message and enum types in `IndexProperties`.
pub mod index_properties {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Props {
        #[prost(message, tag = "1")]
        Inverted(super::InvertedIndex),
        #[prost(message, tag = "2")]
        Vector(super::VectorIvfPqIndex),
        #[prost(message, tag = "3")]
        Btree(super::BTreeIndex),
    }
}
impl ::prost::Name for IndexProperties {
    const NAME: &'static str = "IndexProperties";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexProperties".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexProperties".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvertedIndex {
    #[prost(bool, optional, tag = "1")]
    pub store_position: ::core::option::Option<bool>,
    /// TODO(zehiko) add other properties as needed
    #[prost(string, optional, tag = "2")]
    pub base_tokenizer: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for InvertedIndex {
    const NAME: &'static str = "InvertedIndex";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.InvertedIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.InvertedIndex".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorIvfPqIndex {
    #[prost(uint32, optional, tag = "1")]
    pub num_partitions: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub num_sub_vectors: ::core::option::Option<u32>,
    #[prost(enumeration = "VectorDistanceMetric", tag = "3")]
    pub distance_metrics: i32,
}
impl ::prost::Name for VectorIvfPqIndex {
    const NAME: &'static str = "VectorIvfPqIndex";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.VectorIvfPqIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.VectorIvfPqIndex".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BTreeIndex {}
impl ::prost::Name for BTreeIndex {
    const NAME: &'static str = "BTreeIndex";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.BTreeIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.BTreeIndex".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for CreateIndexResponse {
    const NAME: &'static str = "CreateIndexResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreateIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreateIndexResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReIndexRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
}
impl ::prost::Name for ReIndexRequest {
    const NAME: &'static str = "ReIndexRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ReIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ReIndexRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReIndexResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ReIndexResponse {
    const NAME: &'static str = "ReIndexResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ReIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ReIndexResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDatasetRequest {
    /// Dataset for which we want to search index
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    /// Index column that is queried
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
    /// Query data - type of data is index specific. Caller must ensure
    /// to provide the right type. For vector search this should
    /// be a vector of appropriate size, for inverted index this should be a string.
    /// Query data is represented as a unit (single row) RecordBatch with 1 column.
    #[prost(message, optional, tag = "3")]
    pub query: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
    /// Index type specific properties
    #[prost(message, optional, tag = "4")]
    pub properties: ::core::option::Option<IndexQueryProperties>,
    /// Scan parameters
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for SearchDatasetRequest {
    const NAME: &'static str = "SearchDatasetRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.SearchDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.SearchDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDatasetResponse {
    /// Chunks as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for SearchDatasetResponse {
    const NAME: &'static str = "SearchDatasetResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.SearchDatasetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.SearchDatasetResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IndexQueryProperties {
    /// specific index query properties based on the index type
    #[prost(oneof = "index_query_properties::Props", tags = "1, 2, 3")]
    pub props: ::core::option::Option<index_query_properties::Props>,
}
/// Nested message and enum types in `IndexQueryProperties`.
pub mod index_query_properties {
    /// specific index query properties based on the index type
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Props {
        #[prost(message, tag = "1")]
        Inverted(super::InvertedIndexQuery),
        #[prost(message, tag = "2")]
        Vector(super::VectorIndexQuery),
        #[prost(message, tag = "3")]
        Btree(super::BTreeIndexQuery),
    }
}
impl ::prost::Name for IndexQueryProperties {
    const NAME: &'static str = "IndexQueryProperties";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexQueryProperties".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexQueryProperties".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InvertedIndexQuery {}
impl ::prost::Name for InvertedIndexQuery {
    const NAME: &'static str = "InvertedIndexQuery";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.InvertedIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.InvertedIndexQuery".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorIndexQuery {
    #[prost(uint32, optional, tag = "1")]
    pub top_k: ::core::option::Option<u32>,
}
impl ::prost::Name for VectorIndexQuery {
    const NAME: &'static str = "VectorIndexQuery";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.VectorIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.VectorIndexQuery".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BTreeIndexQuery {}
impl ::prost::Name for BTreeIndexQuery {
    const NAME: &'static str = "BTreeIndexQuery";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.BTreeIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.BTreeIndexQuery".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDatasetRequest {
    /// Dataset client wants to query
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    /// Client can specify what partitions are queried. If left unspecified (empty list),
    /// all partitions will be queried.
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Client can specify specific chunk ids to include. If left unspecified (empty list),
    /// all chunks that match other query parameters will be included.
    #[prost(message, repeated, tag = "3")]
    pub chunk_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::Tuid>,
    /// Which entity paths are we interested in? Leave empty to query all of them.
    #[prost(message, repeated, tag = "4")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// Generic parameters that will influence the behavior of the Lance scanner.
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
    /// A chunk-level latest-at or range query, or both.
    ///
    /// This query is AND'd together with the `partition_ids` and `chunk_ids` filters above.
    #[prost(message, optional, tag = "6")]
    pub query: ::core::option::Option<Query>,
}
impl ::prost::Name for QueryDatasetRequest {
    const NAME: &'static str = "QueryDatasetRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDatasetResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for QueryDatasetResponse {
    const NAME: &'static str = "QueryDatasetResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryDatasetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryDatasetResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    /// If specified, will perform a latest-at query with the given parameters.
    ///
    /// You can combine this with a `QueryRange` in order to gather all the relevant chunks for
    /// a full-fledged dataframe query (i.e. they get OR'd together).
    #[prost(message, optional, tag = "1")]
    pub latest_at: ::core::option::Option<QueryLatestAt>,
    /// If specified, will perform a range query with the given parameters.
    ///
    /// You can combine this with a `QueryLatestAt` in order to gather all the relevant chunks for
    /// a full-fledged dataframe query (i.e. they get OR'd together).
    #[prost(message, optional, tag = "2")]
    pub range: ::core::option::Option<QueryRange>,
    /// If true, `columns` will contain the entire schema.
    #[prost(bool, tag = "3")]
    pub columns_always_include_everything: bool,
    /// If true, `columns` always includes `chunk_id`,
    #[prost(bool, tag = "4")]
    pub columns_always_include_chunk_ids: bool,
    /// If true, `columns` always includes `byte_offset` and `byte_size`.
    #[prost(bool, tag = "5")]
    pub columns_always_include_byte_offsets: bool,
    /// If true, `columns` always includes `entity_path`.
    #[prost(bool, tag = "6")]
    pub columns_always_include_entity_paths: bool,
    /// If true, `columns` always includes all static component-level indexes.
    #[prost(bool, tag = "7")]
    pub columns_always_include_static_indexes: bool,
    /// If true, `columns` always includes all temporal chunk-level indexes.
    #[prost(bool, tag = "8")]
    pub columns_always_include_global_indexes: bool,
    /// If true, `columns` always includes all component-level indexes.
    #[prost(bool, tag = "9")]
    pub columns_always_include_component_indexes: bool,
}
impl ::prost::Name for Query {
    const NAME: &'static str = "Query";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.Query".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.Query".into()
    }
}
/// A chunk-level latest-at query, aka `LatestAtRelevantChunks`.
///
/// This has the exact same semantics as the query of the same name on our `ChunkStore`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLatestAt {
    /// Which index column should we perform the query on? E.g. `log_time`.
    #[prost(message, optional, tag = "1")]
    pub index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// What index value are we looking for?
    #[prost(int64, optional, tag = "2")]
    pub at: ::core::option::Option<i64>,
    /// Which components are we interested in?
    ///
    /// If left unspecified, all existing components are considered of interest.
    ///
    /// This will perform a basic fuzzy match on the available columns' descriptors.
    /// The fuzzy logic is a simple case-sensitive `contains()` query.
    /// For example, given a `log_tick__SeriesLine:StrokeWidth#width` index, all of the following
    /// would match: `SeriesLine:StrokeWidth#width`, `StrokeWidth`, `Stroke`, `Width`, `width`,
    /// `SeriesLine`, etc.
    ///
    /// TODO(cmc): I shall bring that back into a more structured form later.
    /// repeated rerun.common.v1alpha1.ComponentDescriptor fuzzy_descriptors = 3;
    #[prost(string, repeated, tag = "3")]
    pub fuzzy_descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for QueryLatestAt {
    const NAME: &'static str = "QueryLatestAt";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryLatestAt".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryLatestAt".into()
    }
}
/// / A chunk-level range query, aka `RangeRelevantChunks`.
///
/// This has the exact same semantics as the query of the same name on our `ChunkStore`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRange {
    /// Which index column should we perform the query on? E.g. `log_time`.
    #[prost(message, optional, tag = "1")]
    pub index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// What index range are we looking for?
    #[prost(message, optional, tag = "2")]
    pub index_range: ::core::option::Option<super::super::common::v1alpha1::TimeRange>,
    /// Which components are we interested in?
    ///
    /// If left unspecified, all existing components are considered of interest.
    ///
    /// This will perform a basic fuzzy match on the available columns' descriptors.
    /// The fuzzy logic is a simple case-sensitive `contains()` query.
    /// For example, given a `log_tick__SeriesLine:StrokeWidth#width` index, all of the following
    /// would match: `SeriesLine:StrokeWidth#width`, `StrokeWidth`, `Stroke`, `Width`, `width`,
    /// `SeriesLine`, etc.
    ///
    /// TODO(cmc): I shall bring that back into a more structured form later.
    /// repeated rerun.common.v1alpha1.ComponentDescriptor fuzzy_descriptors = 3;
    #[prost(string, repeated, tag = "3")]
    pub fuzzy_descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for QueryRange {
    const NAME: &'static str = "QueryRange";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryRange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryRange".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRequest {
    /// Dataset for which we want to get chunks
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    /// Client can specify from which partitions to get chunks. If left unspecified (empty list),
    /// data from all partition (that match other query parameters) will be included.
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Client can specify chunk ids to include. If left unspecified (empty list),
    /// all chunks (that match other query parameters) will be included.
    #[prost(message, repeated, tag = "3")]
    pub chunk_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::Tuid>,
    /// Which entity paths are we interested in? Leave empty to query all of them.
    #[prost(message, repeated, tag = "4")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// A chunk-level latest-at or range query, or both.
    ///
    /// This query is AND'd together with the `partition_ids` and `chunk_ids` filters above.
    #[prost(message, optional, tag = "5")]
    pub query: ::core::option::Option<Query>,
}
impl ::prost::Name for GetChunksRequest {
    const NAME: &'static str = "GetChunksRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetChunksRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksResponse {
    #[prost(message, optional, tag = "1")]
    pub chunk: ::core::option::Option<super::super::common::v1alpha1::RerunChunk>,
}
impl ::prost::Name for GetChunksResponse {
    const NAME: &'static str = "GetChunksResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetChunksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetChunksResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePartitionManifestsRequest {
    /// Dataset for which we want to create manifests
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    /// Create manifest for specific partitions. All will be
    /// created if left unspecified (empty list)
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Define what happens if create is called multiple times for the same
    /// Dataset / partitions
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "3"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for CreatePartitionManifestsRequest {
    const NAME: &'static str = "CreatePartitionManifestsRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreatePartitionManifestsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreatePartitionManifestsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreatePartitionManifestsResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for CreatePartitionManifestsResponse {
    const NAME: &'static str = "CreatePartitionManifestsResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreatePartitionManifestsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreatePartitionManifestsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchPartitionManifestRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    #[prost(message, optional, tag = "2")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::PartitionId>,
    #[prost(message, optional, tag = "3")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for FetchPartitionManifestRequest {
    const NAME: &'static str = "FetchPartitionManifestRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.FetchPartitionManifestRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.FetchPartitionManifestRequest".into()
    }
}
/// TODO(cmc): this should have response extensions too.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchPartitionManifestResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for FetchPartitionManifestResponse {
    const NAME: &'static str = "FetchPartitionManifestResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.FetchPartitionManifestResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.FetchPartitionManifestResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchPartitionRequest {
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    #[prost(message, optional, tag = "2")]
    pub partition_id: ::core::option::Option<super::super::common::v1alpha1::PartitionId>,
}
impl ::prost::Name for FetchPartitionRequest {
    const NAME: &'static str = "FetchPartitionRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.FetchPartitionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.FetchPartitionRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchPartitionResponse {
    /// Chunks as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub chunk: ::core::option::Option<super::super::common::v1alpha1::RerunChunk>,
}
impl ::prost::Name for FetchPartitionResponse {
    const NAME: &'static str = "FetchPartitionResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.FetchPartitionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.FetchPartitionResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchChunkManifestRequest {
    /// Dataset for which we want to fetch chunk manifest
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
    /// Chunk manifest is index specific
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
    /// Scan parameters
    #[prost(message, optional, tag = "3")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for FetchChunkManifestRequest {
    const NAME: &'static str = "FetchChunkManifestRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.FetchChunkManifestRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.FetchChunkManifestRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchChunkManifestResponse {
    /// Chunk manifest as arrow RecordBatches
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for FetchChunkManifestResponse {
    const NAME: &'static str = "FetchChunkManifestResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.FetchChunkManifestResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.FetchChunkManifestResponse".into()
    }
}
/// Application level error - used as `details` in the `google.rpc.Status` message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    /// error code
    #[prost(enumeration = "ErrorCode", tag = "1")]
    pub code: i32,
    /// unique identifier associated with the request (e.g. recording id, recording storage url)
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    /// human readable details about the error
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
impl ::prost::Name for Error {
    const NAME: &'static str = "Error";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.Error".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.Error".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataSourceKind {
    Unspecified = 0,
    Rrd = 1,
}
impl DataSourceKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "DATA_SOURCE_KIND_UNSPECIFIED",
            Self::Rrd => "DATA_SOURCE_KIND_RRD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DATA_SOURCE_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "DATA_SOURCE_KIND_RRD" => Some(Self::Rrd),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VectorDistanceMetric {
    Unspecified = 0,
    L2 = 1,
    Cosine = 2,
    Dot = 3,
    Hamming = 4,
}
impl VectorDistanceMetric {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VECTOR_DISTANCE_METRIC_UNSPECIFIED",
            Self::L2 => "VECTOR_DISTANCE_METRIC_L2",
            Self::Cosine => "VECTOR_DISTANCE_METRIC_COSINE",
            Self::Dot => "VECTOR_DISTANCE_METRIC_DOT",
            Self::Hamming => "VECTOR_DISTANCE_METRIC_HAMMING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VECTOR_DISTANCE_METRIC_UNSPECIFIED" => Some(Self::Unspecified),
            "VECTOR_DISTANCE_METRIC_L2" => Some(Self::L2),
            "VECTOR_DISTANCE_METRIC_COSINE" => Some(Self::Cosine),
            "VECTOR_DISTANCE_METRIC_DOT" => Some(Self::Dot),
            "VECTOR_DISTANCE_METRIC_HAMMING" => Some(Self::Hamming),
            _ => None,
        }
    }
}
/// Error codes for application level errors
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorCode {
    /// unused
    Unspecified = 0,
    /// object store access error
    ObjectStoreError = 1,
    /// metadata database access error
    MetadataDbError = 2,
    /// Encoding / decoding error
    CodecError = 3,
}
impl ErrorCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ERROR_CODE_UNSPECIFIED",
            Self::ObjectStoreError => "ERROR_CODE_OBJECT_STORE_ERROR",
            Self::MetadataDbError => "ERROR_CODE_METADATA_DB_ERROR",
            Self::CodecError => "ERROR_CODE_CODEC_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR_CODE_UNSPECIFIED" => Some(Self::Unspecified),
            "ERROR_CODE_OBJECT_STORE_ERROR" => Some(Self::ObjectStoreError),
            "ERROR_CODE_METADATA_DB_ERROR" => Some(Self::MetadataDbError),
            "ERROR_CODE_CODEC_ERROR" => Some(Self::CodecError),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod manifest_registry_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct ManifestRegistryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ManifestRegistryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ManifestRegistryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ManifestRegistryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Register new partitions with the Dataset
        pub async fn register_with_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterWithDatasetRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterWithDatasetResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/RegisterWithDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "RegisterWithDataset",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn register_with_dataset_async(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterWithDatasetAsyncRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterWithDatasetAsyncResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/RegisterWithDatasetAsync",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "RegisterWithDatasetAsync",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Unimplemented.
        pub async fn write_chunks(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::WriteChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::WriteChunksResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/WriteChunks",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "WriteChunks",
            ));
            self.inner.streaming(req, path, codec).await
        }
        /// Returns the schema of the partition table (i.e. the dataset manifest) itself, *not* the underlying dataset.
        ///
        /// * To inspect the data of the partition table, use `ScanPartitionTable`.
        /// * To retrieve the schema of the underlying dataset, use `GetDatasetSchema` instead.
        pub async fn get_partition_table_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPartitionTableSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPartitionTableSchemaResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetPartitionTableSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "GetPartitionTableSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Inspect the contents of the partition table (i.e. the dataset manifest).
        ///
        /// The returned data will follow the schema specified by `GetPartitionTableSchema`.
        pub async fn scan_partition_table(
            &mut self,
            request: impl tonic::IntoRequest<super::ScanPartitionTableRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ScanPartitionTableResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ScanPartitionTable",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "ScanPartitionTable",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Returns the schema of the dataset.
        ///
        /// This is the union of all the schemas from all the underlying partitions. It will contain all the indexes,
        /// entities and components present in the dataset.
        pub async fn get_dataset_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDatasetSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDatasetSchemaResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetDatasetSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "GetDatasetSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a custom index for a specific column (vector search, full-text search, etc).
        ///
        /// Index can be created for all or specific partitions. Creating an index will create a new
        /// index-specific chunk manifest for the Dataset.
        /// Chunk manifest contains information about individual chunk rows for all chunks containing
        /// relevant index data.
        pub async fn create_index(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateIndexResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreateIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "CreateIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Recreate an index with the same configuration but (potentially) new data.
        pub async fn re_index(
            &mut self,
            request: impl tonic::IntoRequest<super::ReIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::ReIndexResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ReIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "ReIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Search a previously created index.
        ///
        /// Do a full text, vector or scalar search. Currently only an Indexed search is supported, user must first
        /// call `CreateIndex` for the relevant column.
        ///
        /// The response is a RecordBatch with 4 columns:
        /// - 'partition_id': which partition the data is from
        /// - 'timepoint':  represents the points in time where index query matches.
        ///     What time points are matched depends on the type of index that is queried.
        ///     For example: for vector search it might be timepoints where top-K matches are found within *each* partition in
        ///     the indexed entry.
        ///     For inverted index it might be timepoints where the query string is found in the indexed column
        /// - instance column: if index column contains a batch of values (for example a list of embeddings), then each
        ///     instance of the batch is a separate row in the resulting RecordBatch
        /// - instance_id: this is a simple element index in the batch array. For example if indexed column is a list of
        ///     embeddings \[a,b,c\] (where each embedding is of same length) then 'instance_id' of embedding 'a' is 0,
        ///     'instance_id' of 'b' is 1, etc.
        ///
        /// TODO(zehiko) add support for "brute force" search.
        pub async fn search_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchDatasetResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/SearchDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "SearchDataset",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Perform Rerun-native queries on a dataset, returning the matching chunk IDs.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch the actual chunks themselves, see `GetChunks`.
        ///
        /// Passing chunk IDs to this method effectively acts as a IF_EXIST filter.
        pub async fn query_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryDatasetResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/QueryDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "QueryDataset",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Perform Rerun-native queries on a dataset, returning the underlying chunks.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch only the actual chunk IDs rather than the chunks themselves, see `QueryDataset`.
        pub async fn get_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetChunksResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetChunks",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "GetChunks",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Fetch an entire partition from the server, without any pre- or post-processing.
        ///
        /// This is a temporary hack while we get everything up and running.
        pub async fn fetch_partition(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchPartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::FetchPartitionResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/FetchPartition",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "FetchPartition",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Retrieves the chunk manifest for a specific index.
        pub async fn fetch_chunk_manifest(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchChunkManifestRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::FetchChunkManifestResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/FetchChunkManifest",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "FetchChunkManifest",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Create manifests for all partitions in the Dataset. Partition manifest contains information about
        /// the chunks in the partitions.
        ///
        /// This is normally automatically done as part of the registration process.
        pub async fn create_partition_manifests(
            &mut self,
            request: impl tonic::IntoRequest<super::CreatePartitionManifestsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePartitionManifestsResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreatePartitionManifests",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "CreatePartitionManifests",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Fetch the internal state of a Partition Manifest.
        pub async fn fetch_partition_manifest(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchPartitionManifestRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::FetchPartitionManifestResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/FetchPartitionManifest",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "FetchPartitionManifest",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod manifest_registry_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ManifestRegistryServiceServer.
    #[async_trait]
    pub trait ManifestRegistryService: std::marker::Send + std::marker::Sync + 'static {
        /// Register new partitions with the Dataset
        async fn register_with_dataset(
            &self,
            request: tonic::Request<super::RegisterWithDatasetRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterWithDatasetResponse>, tonic::Status>;
        async fn register_with_dataset_async(
            &self,
            request: tonic::Request<super::RegisterWithDatasetAsyncRequest>,
        ) -> std::result::Result<
            tonic::Response<super::RegisterWithDatasetAsyncResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the WriteChunks method.
        type WriteChunksStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::WriteChunksResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Unimplemented.
        async fn write_chunks(
            &self,
            request: tonic::Request<tonic::Streaming<super::WriteChunksRequest>>,
        ) -> std::result::Result<tonic::Response<Self::WriteChunksStream>, tonic::Status>;
        /// Returns the schema of the partition table (i.e. the dataset manifest) itself, *not* the underlying dataset.
        ///
        /// * To inspect the data of the partition table, use `ScanPartitionTable`.
        /// * To retrieve the schema of the underlying dataset, use `GetDatasetSchema` instead.
        async fn get_partition_table_schema(
            &self,
            request: tonic::Request<super::GetPartitionTableSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPartitionTableSchemaResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the ScanPartitionTable method.
        type ScanPartitionTableStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ScanPartitionTableResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Inspect the contents of the partition table (i.e. the dataset manifest).
        ///
        /// The returned data will follow the schema specified by `GetPartitionTableSchema`.
        async fn scan_partition_table(
            &self,
            request: tonic::Request<super::ScanPartitionTableRequest>,
        ) -> std::result::Result<tonic::Response<Self::ScanPartitionTableStream>, tonic::Status>;
        /// Returns the schema of the dataset.
        ///
        /// This is the union of all the schemas from all the underlying partitions. It will contain all the indexes,
        /// entities and components present in the dataset.
        async fn get_dataset_schema(
            &self,
            request: tonic::Request<super::GetDatasetSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDatasetSchemaResponse>, tonic::Status>;
        /// Creates a custom index for a specific column (vector search, full-text search, etc).
        ///
        /// Index can be created for all or specific partitions. Creating an index will create a new
        /// index-specific chunk manifest for the Dataset.
        /// Chunk manifest contains information about individual chunk rows for all chunks containing
        /// relevant index data.
        async fn create_index(
            &self,
            request: tonic::Request<super::CreateIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateIndexResponse>, tonic::Status>;
        /// Recreate an index with the same configuration but (potentially) new data.
        async fn re_index(
            &self,
            request: tonic::Request<super::ReIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::ReIndexResponse>, tonic::Status>;
        /// Server streaming response type for the SearchDataset method.
        type SearchDatasetStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchDatasetResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Search a previously created index.
        ///
        /// Do a full text, vector or scalar search. Currently only an Indexed search is supported, user must first
        /// call `CreateIndex` for the relevant column.
        ///
        /// The response is a RecordBatch with 4 columns:
        /// - 'partition_id': which partition the data is from
        /// - 'timepoint':  represents the points in time where index query matches.
        ///     What time points are matched depends on the type of index that is queried.
        ///     For example: for vector search it might be timepoints where top-K matches are found within *each* partition in
        ///     the indexed entry.
        ///     For inverted index it might be timepoints where the query string is found in the indexed column
        /// - instance column: if index column contains a batch of values (for example a list of embeddings), then each
        ///     instance of the batch is a separate row in the resulting RecordBatch
        /// - instance_id: this is a simple element index in the batch array. For example if indexed column is a list of
        ///     embeddings \[a,b,c\] (where each embedding is of same length) then 'instance_id' of embedding 'a' is 0,
        ///     'instance_id' of 'b' is 1, etc.
        ///
        /// TODO(zehiko) add support for "brute force" search.
        async fn search_dataset(
            &self,
            request: tonic::Request<super::SearchDatasetRequest>,
        ) -> std::result::Result<tonic::Response<Self::SearchDatasetStream>, tonic::Status>;
        /// Server streaming response type for the QueryDataset method.
        type QueryDatasetStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryDatasetResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Perform Rerun-native queries on a dataset, returning the matching chunk IDs.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch the actual chunks themselves, see `GetChunks`.
        ///
        /// Passing chunk IDs to this method effectively acts as a IF_EXIST filter.
        async fn query_dataset(
            &self,
            request: tonic::Request<super::QueryDatasetRequest>,
        ) -> std::result::Result<tonic::Response<Self::QueryDatasetStream>, tonic::Status>;
        /// Server streaming response type for the GetChunks method.
        type GetChunksStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetChunksResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Perform Rerun-native queries on a dataset, returning the underlying chunks.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch only the actual chunk IDs rather than the chunks themselves, see `QueryDataset`.
        async fn get_chunks(
            &self,
            request: tonic::Request<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetChunksStream>, tonic::Status>;
        /// Server streaming response type for the FetchPartition method.
        type FetchPartitionStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::FetchPartitionResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Fetch an entire partition from the server, without any pre- or post-processing.
        ///
        /// This is a temporary hack while we get everything up and running.
        async fn fetch_partition(
            &self,
            request: tonic::Request<super::FetchPartitionRequest>,
        ) -> std::result::Result<tonic::Response<Self::FetchPartitionStream>, tonic::Status>;
        /// Server streaming response type for the FetchChunkManifest method.
        type FetchChunkManifestStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::FetchChunkManifestResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Retrieves the chunk manifest for a specific index.
        async fn fetch_chunk_manifest(
            &self,
            request: tonic::Request<super::FetchChunkManifestRequest>,
        ) -> std::result::Result<tonic::Response<Self::FetchChunkManifestStream>, tonic::Status>;
        /// Create manifests for all partitions in the Dataset. Partition manifest contains information about
        /// the chunks in the partitions.
        ///
        /// This is normally automatically done as part of the registration process.
        async fn create_partition_manifests(
            &self,
            request: tonic::Request<super::CreatePartitionManifestsRequest>,
        ) -> std::result::Result<
            tonic::Response<super::CreatePartitionManifestsResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the FetchPartitionManifest method.
        type FetchPartitionManifestStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::FetchPartitionManifestResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Fetch the internal state of a Partition Manifest.
        async fn fetch_partition_manifest(
            &self,
            request: tonic::Request<super::FetchPartitionManifestRequest>,
        ) -> std::result::Result<tonic::Response<Self::FetchPartitionManifestStream>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ManifestRegistryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ManifestRegistryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ManifestRegistryServiceServer<T>
    where
        T: ManifestRegistryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/RegisterWithDataset" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterWithDatasetSvc<T: ManifestRegistryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::RegisterWithDatasetRequest>
                    for RegisterWithDatasetSvc<T> {
                        type Response = super::RegisterWithDatasetResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterWithDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::register_with_dataset(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterWithDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/RegisterWithDatasetAsync" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterWithDatasetAsyncSvc<T: ManifestRegistryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::RegisterWithDatasetAsyncRequest>
                    for RegisterWithDatasetAsyncSvc<T> {
                        type Response = super::RegisterWithDatasetAsyncResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::RegisterWithDatasetAsyncRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::register_with_dataset_async(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterWithDatasetAsyncSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/WriteChunks" => {
                    #[allow(non_camel_case_types)]
                    struct WriteChunksSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::StreamingService<super::WriteChunksRequest>
                    for WriteChunksSvc<T> {
                        type Response = super::WriteChunksResponse;
                        type ResponseStream = T::WriteChunksStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                tonic::Streaming<super::WriteChunksRequest>,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::write_chunks(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetPartitionTableSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetPartitionTableSchemaSvc<T: ManifestRegistryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::GetPartitionTableSchemaRequest>
                    for GetPartitionTableSchemaSvc<T> {
                        type Response = super::GetPartitionTableSchemaResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::GetPartitionTableSchemaRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::get_partition_table_schema(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPartitionTableSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ScanPartitionTable" => {
                    #[allow(non_camel_case_types)]
                    struct ScanPartitionTableSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<
                        super::ScanPartitionTableRequest,
                    > for ScanPartitionTableSvc<T> {
                        type Response = super::ScanPartitionTableResponse;
                        type ResponseStream = T::ScanPartitionTableStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScanPartitionTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::scan_partition_table(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ScanPartitionTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetDatasetSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetDatasetSchemaSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::GetDatasetSchemaRequest>
                    for GetDatasetSchemaSvc<T> {
                        type Response = super::GetDatasetSchemaResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDatasetSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::get_dataset_schema(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDatasetSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreateIndex" => {
                    #[allow(non_camel_case_types)]
                    struct CreateIndexSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::CreateIndexRequest>
                    for CreateIndexSvc<T> {
                        type Response = super::CreateIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::create_index(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ReIndex" => {
                    #[allow(non_camel_case_types)]
                    struct ReIndexSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::ReIndexRequest>
                    for ReIndexSvc<T> {
                        type Response = super::ReIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::re_index(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/SearchDataset" => {
                    #[allow(non_camel_case_types)]
                    struct SearchDatasetSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::SearchDatasetRequest>
                    for SearchDatasetSvc<T> {
                        type Response = super::SearchDatasetResponse;
                        type ResponseStream = T::SearchDatasetStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::search_dataset(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/QueryDataset" => {
                    #[allow(non_camel_case_types)]
                    struct QueryDatasetSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::QueryDatasetRequest>
                    for QueryDatasetSvc<T> {
                        type Response = super::QueryDatasetResponse;
                        type ResponseStream = T::QueryDatasetStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::query_dataset(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetChunks" => {
                    #[allow(non_camel_case_types)]
                    struct GetChunksSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::GetChunksRequest>
                    for GetChunksSvc<T> {
                        type Response = super::GetChunksResponse;
                        type ResponseStream = T::GetChunksStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::get_chunks(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/FetchPartition" => {
                    #[allow(non_camel_case_types)]
                    struct FetchPartitionSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::FetchPartitionRequest>
                    for FetchPartitionSvc<T> {
                        type Response = super::FetchPartitionResponse;
                        type ResponseStream = T::FetchPartitionStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchPartitionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::fetch_partition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchPartitionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/FetchChunkManifest" => {
                    #[allow(non_camel_case_types)]
                    struct FetchChunkManifestSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<
                        super::FetchChunkManifestRequest,
                    > for FetchChunkManifestSvc<T> {
                        type Response = super::FetchChunkManifestResponse;
                        type ResponseStream = T::FetchChunkManifestStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchChunkManifestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::fetch_chunk_manifest(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchChunkManifestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreatePartitionManifests" => {
                    #[allow(non_camel_case_types)]
                    struct CreatePartitionManifestsSvc<T: ManifestRegistryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::CreatePartitionManifestsRequest>
                    for CreatePartitionManifestsSvc<T> {
                        type Response = super::CreatePartitionManifestsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::CreatePartitionManifestsRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::create_partition_manifests(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreatePartitionManifestsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/FetchPartitionManifest" => {
                    #[allow(non_camel_case_types)]
                    struct FetchPartitionManifestSvc<T: ManifestRegistryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<
                        super::FetchPartitionManifestRequest,
                    > for FetchPartitionManifestSvc<T> {
                        type Response = super::FetchPartitionManifestResponse;
                        type ResponseStream = T::FetchPartitionManifestStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchPartitionManifestRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::fetch_partition_manifest(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchPartitionManifestSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ManifestRegistryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rerun.manifest_registry.v1alpha1.ManifestRegistryService";
    impl<T> tonic::server::NamedService for ManifestRegistryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
