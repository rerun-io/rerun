// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Partition {
    /// human readable description of the partition
    #[prost(string, tag = "1")]
    pub description: ::prost::alloc::string::String,
    /// partition storage url (e.g. s3://bucket/file or file:///path/to/file)
    #[prost(string, tag = "2")]
    pub storage_url: ::prost::alloc::string::String,
    /// type of partition (rrd, mcap, Lance, etc)
    #[prost(enumeration = "PartitionType", tag = "3")]
    pub typ: i32,
}
impl ::prost::Name for Partition {
    const NAME: &'static str = "Partition";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.Partition".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.Partition".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct PartitionId {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::Tuid>,
}
impl ::prost::Name for PartitionId {
    const NAME: &'static str = "PartitionId";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.PartitionId".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.PartitionId".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterPartitionsRequest {
    /// Dataset entry
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// Partitions to add
    #[prost(message, repeated, tag = "2")]
    pub partitions: ::prost::alloc::vec::Vec<Partition>,
}
impl ::prost::Name for RegisterPartitionsRequest {
    const NAME: &'static str = "RegisterPartitionsRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.RegisterPartitionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.RegisterPartitionsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterPartitionsResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for RegisterPartitionsResponse {
    const NAME: &'static str = "RegisterPartitionsResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.RegisterPartitionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.RegisterPartitionsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UnregisterPartitionsRequest {
    /// Dataset from which we want to remove partitions
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// Partitions to remove
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<PartitionId>,
}
impl ::prost::Name for UnregisterPartitionsRequest {
    const NAME: &'static str = "UnregisterPartitionsRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.UnregisterPartitionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.UnregisterPartitionsRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UnregisterPartitionsResponse {}
impl ::prost::Name for UnregisterPartitionsResponse {
    const NAME: &'static str = "UnregisterPartitionsResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.UnregisterPartitionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.UnregisterPartitionsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPartitionsRequest {
    /// Dataset for which we want to list partitions
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// Scan parameters
    #[prost(message, optional, tag = "2")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for ListPartitionsRequest {
    const NAME: &'static str = "ListPartitionsRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ListPartitionsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ListPartitionsRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListPartitionsResponse {
    /// Partitions metadata as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ListPartitionsResponse {
    const NAME: &'static str = "ListPartitionsResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ListPartitionsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ListPartitionsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateManifestsRequest {
    /// Dataset for which we want to create manifests
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
}
impl ::prost::Name for CreateManifestsRequest {
    const NAME: &'static str = "CreateManifestsRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreateManifestsRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreateManifestsRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateManifestsResponse {}
impl ::prost::Name for CreateManifestsResponse {
    const NAME: &'static str = "CreateManifestsResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreateManifestsResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreateManifestsResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPartitionRequest {
    /// Dataset for which we want to query manifest
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// What partition are we querying the manifest for?
    #[prost(message, optional, tag = "2")]
    pub partition_id: ::core::option::Option<PartitionId>,
    /// Generic parameters that will influence the behavior of the Lance scanner.
    #[prost(message, optional, tag = "3")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
    /// If true, `columns` will contain the entire schema.
    #[prost(bool, tag = "4")]
    pub columns_always_include_everything: bool,
    /// If true, `columns` always includes `chunk_id`,
    #[prost(bool, tag = "5")]
    pub columns_always_include_chunk_ids: bool,
    /// If true, `columns` always includes `byte_offset` and `byte_size`.
    #[prost(bool, tag = "6")]
    pub columns_always_include_byte_offsets: bool,
    /// If true, `columns` always includes `entity_path`.
    #[prost(bool, tag = "7")]
    pub columns_always_include_entity_paths: bool,
    /// If true, `columns` always includes all static component-level indexes.
    #[prost(bool, tag = "8")]
    pub columns_always_include_static_indexes: bool,
    /// If true, `columns` always includes all temporal chunk-level indexes.
    #[prost(bool, tag = "9")]
    pub columns_always_include_global_indexes: bool,
    /// If true, `columns` always includes all component-level indexes.
    #[prost(bool, tag = "10")]
    pub columns_always_include_component_indexes: bool,
    /// If specified, will perform a latest-at query with the given parameters.
    ///
    /// Incompatible with `range`.
    #[prost(message, optional, tag = "11")]
    pub latest_at: ::core::option::Option<QueryManifestLatestAtRelevantChunks>,
    /// If specified, will perform a range query with the given parameters.
    ///
    /// Incompatible with `latest_at`.
    #[prost(message, optional, tag = "12")]
    pub range: ::core::option::Option<QueryManifestRangeRelevantChunks>,
}
impl ::prost::Name for QueryPartitionRequest {
    const NAME: &'static str = "QueryPartitionRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryPartitionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryPartitionRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryPartitionResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for QueryPartitionResponse {
    const NAME: &'static str = "QueryPartitionResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryPartitionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryPartitionResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryManifestLatestAtRelevantChunks {
    /// Which entity paths are we interested in?
    #[prost(message, repeated, tag = "1")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// Which index column should we perform the query on? E.g. `log_time`.
    #[prost(message, optional, tag = "2")]
    pub index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// What index value are we looking for?
    #[prost(int64, tag = "3")]
    pub at: i64,
    /// Which components are we interested in?
    ///
    /// If left unspecified, all existing components are considered of interest.
    ///
    /// This will perform a basic fuzzy match on the available columns' descriptors.
    /// The fuzzy logic is a simple case-sensitive `contains()` query.
    /// For example, given a `log_tick__SeriesLine:StrokeWidth#width` index, all of the following
    /// would match: `SeriesLine:StrokeWidth#width`, `StrokeWidth`, `Stroke`, `Width`, `width`,
    /// `SeriesLine`, etc.
    #[prost(string, repeated, tag = "4")]
    pub fuzzy_descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for QueryManifestLatestAtRelevantChunks {
    const NAME: &'static str = "QueryManifestLatestAtRelevantChunks";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryManifestLatestAtRelevantChunks".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryManifestLatestAtRelevantChunks".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryManifestRangeRelevantChunks {
    /// Which entity paths are we interested in?
    #[prost(message, repeated, tag = "1")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// Which index column should we perform the query on? E.g. `log_time`.
    #[prost(message, optional, tag = "2")]
    pub index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// What index range are we looking for?
    #[prost(message, optional, tag = "3")]
    pub index_range: ::core::option::Option<super::super::common::v1alpha1::TimeRange>,
    /// Which components are we interested in?
    ///
    /// If left unspecified, all existing components are considered of interest.
    ///
    /// This will perform a basic fuzzy match on the available columns' descriptors.
    /// The fuzzy logic is a simple case-sensitive `contains()` query.
    /// For example, given a `log_tick__SeriesLine:StrokeWidth#width` index, all of the following
    /// would match: `SeriesLine:StrokeWidth#width`, `StrokeWidth`, `Stroke`, `Width`, `width`,
    /// `SeriesLine`, etc.
    #[prost(string, repeated, tag = "4")]
    pub fuzzy_descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
impl ::prost::Name for QueryManifestRangeRelevantChunks {
    const NAME: &'static str = "QueryManifestRangeRelevantChunks";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.QueryManifestRangeRelevantChunks".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.QueryManifestRangeRelevantChunks".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllChunksRequest {
    /// Partition's Dataset
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// Partition for which we want to get chunks
    #[prost(message, optional, tag = "2")]
    pub partition_id: ::core::option::Option<PartitionId>,
}
impl ::prost::Name for GetAllChunksRequest {
    const NAME: &'static str = "GetAllChunksRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetAllChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetAllChunksRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetAllChunksResponse {
    /// Chunks as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub chunk: ::core::option::Option<super::super::common::v1alpha1::RerunChunk>,
}
impl ::prost::Name for GetAllChunksResponse {
    const NAME: &'static str = "GetAllChunksResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetAllChunksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetAllChunksResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRangeRequest {
    /// Partition's Dataset
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// Partition for which we want to get chunks
    #[prost(message, optional, tag = "2")]
    pub partition_id: ::core::option::Option<PartitionId>,
    /// Timeline for which we specify the time range
    #[prost(message, optional, tag = "3")]
    pub time_index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// Time range for which we want to fetch the chunks
    #[prost(message, optional, tag = "4")]
    pub time_range: ::core::option::Option<super::super::common::v1alpha1::TimeRange>,
}
impl ::prost::Name for GetChunksRangeRequest {
    const NAME: &'static str = "GetChunksRangeRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetChunksRangeRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetChunksRangeRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRangeResponse {
    #[prost(message, optional, tag = "1")]
    pub chunk: ::core::option::Option<super::super::common::v1alpha1::RerunChunk>,
}
impl ::prost::Name for GetChunksRangeResponse {
    const NAME: &'static str = "GetChunksRangeResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.GetChunksRangeResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.GetChunksRangeResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexRequest {
    /// Dataset for which we want to create index
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// what kind of index do we want to create and what are
    /// its index specific properties
    #[prost(message, optional, tag = "2")]
    pub properties: ::core::option::Option<IndexProperties>,
    /// Component / column we want to index
    #[prost(message, optional, tag = "3")]
    pub column: ::core::option::Option<IndexColumn>,
    /// What is the filter index i.e. timeline for which we
    /// will query the timepoints
    /// TODO(zehiko) this might go away and we might just index
    /// across all the timelines
    #[prost(message, optional, tag = "4")]
    pub time_index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
}
impl ::prost::Name for CreateIndexRequest {
    const NAME: &'static str = "CreateIndexRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreateIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreateIndexRequest".into()
    }
}
/// used to define which column we want to index
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexColumn {
    /// The path of the entity.
    #[prost(message, optional, tag = "1")]
    pub entity_path: ::core::option::Option<super::super::common::v1alpha1::EntityPath>,
    /// Optional name of the `Archetype` associated with this data.
    #[prost(string, optional, tag = "2")]
    pub archetype_name: ::core::option::Option<::prost::alloc::string::String>,
    /// Optional name of the field within `Archetype` associated with this data.
    #[prost(string, optional, tag = "3")]
    pub archetype_field_name: ::core::option::Option<::prost::alloc::string::String>,
    /// Semantic name associated with this data.
    #[prost(string, tag = "4")]
    pub component_name: ::prost::alloc::string::String,
}
impl ::prost::Name for IndexColumn {
    const NAME: &'static str = "IndexColumn";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexColumn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexColumn".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexProperties {
    #[prost(oneof = "index_properties::Props", tags = "1, 2, 3")]
    pub props: ::core::option::Option<index_properties::Props>,
}
/// Nested message and enum types in `IndexProperties`.
pub mod index_properties {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Props {
        #[prost(message, tag = "1")]
        Inverted(super::InvertedIndex),
        #[prost(message, tag = "2")]
        Vector(super::VectorIvfPqIndex),
        #[prost(message, tag = "3")]
        Btree(super::BTreeIndex),
    }
}
impl ::prost::Name for IndexProperties {
    const NAME: &'static str = "IndexProperties";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexProperties".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexProperties".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvertedIndex {
    #[prost(bool, tag = "1")]
    pub store_position: bool,
    /// TODO(zehiko) add other properties as needed
    #[prost(string, tag = "2")]
    pub base_tokenizer: ::prost::alloc::string::String,
}
impl ::prost::Name for InvertedIndex {
    const NAME: &'static str = "InvertedIndex";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.InvertedIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.InvertedIndex".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorIvfPqIndex {
    #[prost(uint32, tag = "1")]
    pub num_partitions: u32,
    #[prost(uint32, tag = "2")]
    pub num_sub_vectors: u32,
    #[prost(enumeration = "VectorDistanceMetric", tag = "3")]
    pub distance_metrics: i32,
}
impl ::prost::Name for VectorIvfPqIndex {
    const NAME: &'static str = "VectorIvfPqIndex";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.VectorIvfPqIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.VectorIvfPqIndex".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BTreeIndex {}
impl ::prost::Name for BTreeIndex {
    const NAME: &'static str = "BTreeIndex";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.BTreeIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.BTreeIndex".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct CreateIndexResponse {
    #[prost(uint64, tag = "1")]
    pub indexed_rows: u64,
}
impl ::prost::Name for CreateIndexResponse {
    const NAME: &'static str = "CreateIndexResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.CreateIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.CreateIndexResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListIndexesRequest {
    /// Dataset for which we want to list indexes
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
}
impl ::prost::Name for ListIndexesRequest {
    const NAME: &'static str = "ListIndexesRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ListIndexesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ListIndexesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ListIndexesResponse {
    /// Indexes metadata as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
    /// Scan parameters
    #[prost(message, optional, tag = "2")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for ListIndexesResponse {
    const NAME: &'static str = "ListIndexesResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ListIndexesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ListIndexesResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReIndexRequest {
    /// Dataset for which we want to reindex
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// which column do we want to reindex
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
}
impl ::prost::Name for ReIndexRequest {
    const NAME: &'static str = "ReIndexRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ReIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ReIndexRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReIndexResponse {}
impl ::prost::Name for ReIndexResponse {
    const NAME: &'static str = "ReIndexResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.ReIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.ReIndexResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchIndexRequest {
    /// Dataset for which we want to search index
    #[prost(message, optional, tag = "1")]
    pub entry: ::core::option::Option<super::super::common::v1alpha1::DatasetEntry>,
    /// Index column that is queried
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
    /// Query data - type of data is index specific. Caller must ensure
    /// to provide the right type. For vector search this should
    /// be a vector of appropriate size, for inverted index this should be a string.
    /// Query data is represented as a unit (single row) RecordBatch with 1 column.
    #[prost(message, optional, tag = "3")]
    pub query: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
    /// Index type specific properties
    #[prost(message, optional, tag = "4")]
    pub properties: ::core::option::Option<IndexQueryProperties>,
    /// Scan parameters
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for SearchIndexRequest {
    const NAME: &'static str = "SearchIndexRequest";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.SearchIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.SearchIndexRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchIndexResponse {
    /// Chunks as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for SearchIndexResponse {
    const NAME: &'static str = "SearchIndexResponse";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.SearchIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.SearchIndexResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IndexQueryProperties {
    /// specific index query properties based on the index type
    #[prost(oneof = "index_query_properties::Props", tags = "1, 2, 3")]
    pub props: ::core::option::Option<index_query_properties::Props>,
}
/// Nested message and enum types in `IndexQueryProperties`.
pub mod index_query_properties {
    /// specific index query properties based on the index type
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Props {
        #[prost(message, tag = "1")]
        Inverted(super::InvertedIndexQuery),
        #[prost(message, tag = "2")]
        Vector(super::VectorIndexQuery),
        #[prost(message, tag = "3")]
        Btree(super::BTreeIndexQuery),
    }
}
impl ::prost::Name for IndexQueryProperties {
    const NAME: &'static str = "IndexQueryProperties";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.IndexQueryProperties".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.IndexQueryProperties".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InvertedIndexQuery {}
impl ::prost::Name for InvertedIndexQuery {
    const NAME: &'static str = "InvertedIndexQuery";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.InvertedIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.InvertedIndexQuery".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorIndexQuery {
    #[prost(uint32, tag = "1")]
    pub top_k: u32,
}
impl ::prost::Name for VectorIndexQuery {
    const NAME: &'static str = "VectorIndexQuery";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.VectorIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.VectorIndexQuery".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BTreeIndexQuery {}
impl ::prost::Name for BTreeIndexQuery {
    const NAME: &'static str = "BTreeIndexQuery";
    const PACKAGE: &'static str = "rerun.manifest_registry.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.manifest_registry.v1alpha1.BTreeIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.manifest_registry.v1alpha1.BTreeIndexQuery".into()
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum PartitionType {
    Unspecified = 0,
    Rrd = 1,
}
impl PartitionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "PARTITION_TYPE_UNSPECIFIED",
            Self::Rrd => "PARTITION_TYPE_RRD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PARTITION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PARTITION_TYPE_RRD" => Some(Self::Rrd),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VectorDistanceMetric {
    Unspecified = 0,
    L2 = 1,
    Cosine = 2,
    Dot = 3,
    Hamming = 4,
}
impl VectorDistanceMetric {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VECTOR_DISTANCE_METRIC_UNSPECIFIED",
            Self::L2 => "VECTOR_DISTANCE_METRIC_L2",
            Self::Cosine => "VECTOR_DISTANCE_METRIC_COSINE",
            Self::Dot => "VECTOR_DISTANCE_METRIC_DOT",
            Self::Hamming => "VECTOR_DISTANCE_METRIC_HAMMING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VECTOR_DISTANCE_METRIC_UNSPECIFIED" => Some(Self::Unspecified),
            "VECTOR_DISTANCE_METRIC_L2" => Some(Self::L2),
            "VECTOR_DISTANCE_METRIC_COSINE" => Some(Self::Cosine),
            "VECTOR_DISTANCE_METRIC_DOT" => Some(Self::Dot),
            "VECTOR_DISTANCE_METRIC_HAMMING" => Some(Self::Hamming),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod manifest_registry_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    #[derive(Debug, Clone)]
    pub struct ManifestRegistryServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> ManifestRegistryServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> ManifestRegistryServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            ManifestRegistryServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// register new partitions with the Dataset
        pub async fn register_partitions(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterPartitionsRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterPartitionsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/RegisterPartitions",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "RegisterPartitions",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// unregister partitions from the Dataset
        pub async fn unregister_partitions(
            &mut self,
            request: impl tonic::IntoRequest<super::UnregisterPartitionsRequest>,
        ) -> std::result::Result<tonic::Response<super::UnregisterPartitionsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/UnregisterPartitions",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "UnregisterPartitions",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// list partitions in the Dataset
        pub async fn list_partitions(
            &mut self,
            request: impl tonic::IntoRequest<super::ListPartitionsRequest>,
        ) -> std::result::Result<tonic::Response<super::ListPartitionsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ListPartitions",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "ListPartitions",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// create manifests for all partitions in the Dataset
        pub async fn create_manifests(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateManifestsRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateManifestsResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreateManifests",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "CreateManifests",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Query specific partition manifest
        pub async fn query_partition(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryPartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryPartitionResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/QueryPartition",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "QueryPartition",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Get all chunks for a single partition
        pub async fn get_all_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetAllChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetAllChunksResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetAllChunks",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "GetAllChunks",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Get partition chunks that contain data for the specified time range
        pub async fn get_chunks_range(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChunksRangeRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetChunksRangeResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetChunksRange",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "GetChunksRange",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Create index for the Dataset. All the partitions and data matching the given
        /// index column will be indexed
        pub async fn create_index(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateIndexResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreateIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "CreateIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// List indexes for the Dataset
        pub async fn list_indexes(
            &mut self,
            request: impl tonic::IntoRequest<super::ListIndexesRequest>,
        ) -> std::result::Result<tonic::Response<super::ListIndexesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ListIndexes",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "ListIndexes",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Reindex the Dataset for the given index
        pub async fn re_index(
            &mut self,
            request: impl tonic::IntoRequest<super::ReIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::ReIndexResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ReIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "ReIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Search indexed data.
        /// The response to `SearchIndex` is a RecordBatch with 3 columns:
        /// - 'partition_id' - which partition the data is from
        /// - 'timepoint' -  represents the points in time where index query matches.
        /// What time points are matched depends on the type of index that is queried.
        /// For example: for vector search it might be timepoints where top-K matches
        /// are found within *each* partition in the indexed entry. For inverted index
        /// it might be timepoints where the query string is found in the indexed column
        /// - 'data' - the data that is returned for the matched timepoints
        pub async fn search_index(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchIndexResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/SearchIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.manifest_registry.v1alpha1.ManifestRegistryService",
                "SearchIndex",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod manifest_registry_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with ManifestRegistryServiceServer.
    #[async_trait]
    pub trait ManifestRegistryService: std::marker::Send + std::marker::Sync + 'static {
        /// register new partitions with the Dataset
        async fn register_partitions(
            &self,
            request: tonic::Request<super::RegisterPartitionsRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterPartitionsResponse>, tonic::Status>;
        /// unregister partitions from the Dataset
        async fn unregister_partitions(
            &self,
            request: tonic::Request<super::UnregisterPartitionsRequest>,
        ) -> std::result::Result<tonic::Response<super::UnregisterPartitionsResponse>, tonic::Status>;
        /// list partitions in the Dataset
        async fn list_partitions(
            &self,
            request: tonic::Request<super::ListPartitionsRequest>,
        ) -> std::result::Result<tonic::Response<super::ListPartitionsResponse>, tonic::Status>;
        /// create manifests for all partitions in the Dataset
        async fn create_manifests(
            &self,
            request: tonic::Request<super::CreateManifestsRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateManifestsResponse>, tonic::Status>;
        /// Server streaming response type for the QueryPartition method.
        type QueryPartitionStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryPartitionResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Query specific partition manifest
        async fn query_partition(
            &self,
            request: tonic::Request<super::QueryPartitionRequest>,
        ) -> std::result::Result<tonic::Response<Self::QueryPartitionStream>, tonic::Status>;
        /// Server streaming response type for the GetAllChunks method.
        type GetAllChunksStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetAllChunksResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Get all chunks for a single partition
        async fn get_all_chunks(
            &self,
            request: tonic::Request<super::GetAllChunksRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetAllChunksStream>, tonic::Status>;
        /// Server streaming response type for the GetChunksRange method.
        type GetChunksRangeStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetChunksRangeResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Get partition chunks that contain data for the specified time range
        async fn get_chunks_range(
            &self,
            request: tonic::Request<super::GetChunksRangeRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetChunksRangeStream>, tonic::Status>;
        /// Create index for the Dataset. All the partitions and data matching the given
        /// index column will be indexed
        async fn create_index(
            &self,
            request: tonic::Request<super::CreateIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateIndexResponse>, tonic::Status>;
        /// List indexes for the Dataset
        async fn list_indexes(
            &self,
            request: tonic::Request<super::ListIndexesRequest>,
        ) -> std::result::Result<tonic::Response<super::ListIndexesResponse>, tonic::Status>;
        /// Reindex the Dataset for the given index
        async fn re_index(
            &self,
            request: tonic::Request<super::ReIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::ReIndexResponse>, tonic::Status>;
        /// Server streaming response type for the SearchIndex method.
        type SearchIndexStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchIndexResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Search indexed data.
        /// The response to `SearchIndex` is a RecordBatch with 3 columns:
        /// - 'partition_id' - which partition the data is from
        /// - 'timepoint' -  represents the points in time where index query matches.
        /// What time points are matched depends on the type of index that is queried.
        /// For example: for vector search it might be timepoints where top-K matches
        /// are found within *each* partition in the indexed entry. For inverted index
        /// it might be timepoints where the query string is found in the indexed column
        /// - 'data' - the data that is returned for the matched timepoints
        async fn search_index(
            &self,
            request: tonic::Request<super::SearchIndexRequest>,
        ) -> std::result::Result<tonic::Response<Self::SearchIndexStream>, tonic::Status>;
    }
    #[derive(Debug)]
    pub struct ManifestRegistryServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> ManifestRegistryServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for ManifestRegistryServiceServer<T>
    where
        T: ManifestRegistryService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/RegisterPartitions" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterPartitionsSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::RegisterPartitionsRequest>
                    for RegisterPartitionsSvc<T> {
                        type Response = super::RegisterPartitionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterPartitionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::register_partitions(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterPartitionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/UnregisterPartitions" => {
                    #[allow(non_camel_case_types)]
                    struct UnregisterPartitionsSvc<T: ManifestRegistryService>(
                        pub Arc<T>,
                    );
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::UnregisterPartitionsRequest>
                    for UnregisterPartitionsSvc<T> {
                        type Response = super::UnregisterPartitionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UnregisterPartitionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::unregister_partitions(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UnregisterPartitionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ListPartitions" => {
                    #[allow(non_camel_case_types)]
                    struct ListPartitionsSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::ListPartitionsRequest>
                    for ListPartitionsSvc<T> {
                        type Response = super::ListPartitionsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListPartitionsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::list_partitions(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListPartitionsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreateManifests" => {
                    #[allow(non_camel_case_types)]
                    struct CreateManifestsSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::CreateManifestsRequest>
                    for CreateManifestsSvc<T> {
                        type Response = super::CreateManifestsResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateManifestsRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::create_manifests(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateManifestsSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/QueryPartition" => {
                    #[allow(non_camel_case_types)]
                    struct QueryPartitionSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::QueryPartitionRequest>
                    for QueryPartitionSvc<T> {
                        type Response = super::QueryPartitionResponse;
                        type ResponseStream = T::QueryPartitionStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryPartitionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::query_partition(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryPartitionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetAllChunks" => {
                    #[allow(non_camel_case_types)]
                    struct GetAllChunksSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::GetAllChunksRequest>
                    for GetAllChunksSvc<T> {
                        type Response = super::GetAllChunksResponse;
                        type ResponseStream = T::GetAllChunksStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetAllChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::get_all_chunks(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetAllChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/GetChunksRange" => {
                    #[allow(non_camel_case_types)]
                    struct GetChunksRangeSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::GetChunksRangeRequest>
                    for GetChunksRangeSvc<T> {
                        type Response = super::GetChunksRangeResponse;
                        type ResponseStream = T::GetChunksRangeStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChunksRangeRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::get_chunks_range(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetChunksRangeSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/CreateIndex" => {
                    #[allow(non_camel_case_types)]
                    struct CreateIndexSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::CreateIndexRequest>
                    for CreateIndexSvc<T> {
                        type Response = super::CreateIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::create_index(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ListIndexes" => {
                    #[allow(non_camel_case_types)]
                    struct ListIndexesSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::ListIndexesRequest>
                    for ListIndexesSvc<T> {
                        type Response = super::ListIndexesResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ListIndexesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::list_indexes(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ListIndexesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/ReIndex" => {
                    #[allow(non_camel_case_types)]
                    struct ReIndexSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::UnaryService<super::ReIndexRequest>
                    for ReIndexSvc<T> {
                        type Response = super::ReIndexResponse;
                        type Future = BoxFuture<
                            tonic::Response<Self::Response>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::re_index(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.manifest_registry.v1alpha1.ManifestRegistryService/SearchIndex" => {
                    #[allow(non_camel_case_types)]
                    struct SearchIndexSvc<T: ManifestRegistryService>(pub Arc<T>);
                    impl<
                        T: ManifestRegistryService,
                    > tonic::server::ServerStreamingService<super::SearchIndexRequest>
                    for SearchIndexSvc<T> {
                        type Response = super::SearchIndexResponse;
                        type ResponseStream = T::SearchIndexStream;
                        type Future = BoxFuture<
                            tonic::Response<Self::ResponseStream>,
                            tonic::Status,
                        >;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as ManifestRegistryService>::search_index(
                                        &inner,
                                        request,
                                    )
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => {
                    Box::pin(async move {
                        let mut response = http::Response::new(empty_body());
                        let headers = response.headers_mut();
                        headers
                            .insert(
                                tonic::Status::GRPC_STATUS,
                                (tonic::Code::Unimplemented as i32).into(),
                            );
                        headers
                            .insert(
                                http::header::CONTENT_TYPE,
                                tonic::metadata::GRPC_CONTENT_TYPE,
                            );
                        Ok(response)
                    })
                }
            }
        }
    }
    impl<T> Clone for ManifestRegistryServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rerun.manifest_registry.v1alpha1.ManifestRegistryService";
    impl<T> tonic::server::NamedService for ManifestRegistryServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
