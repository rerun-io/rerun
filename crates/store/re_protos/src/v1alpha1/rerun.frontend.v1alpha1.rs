// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    #[prost(message, repeated, tag = "2")]
    pub data_sources:
        ::prost::alloc::vec::Vec<super::super::manifest_registry::v1alpha1::DataSource>,
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "3"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for RegisterWithDatasetRequest {
    const NAME: &'static str = "RegisterWithDatasetRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.RegisterWithDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.RegisterWithDatasetRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WriteChunksRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for WriteChunksRequest {
    const NAME: &'static str = "WriteChunksRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.WriteChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.WriteChunksRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPartitionTableSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for GetPartitionTableSchemaRequest {
    const NAME: &'static str = "GetPartitionTableSchemaRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.GetPartitionTableSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.GetPartitionTableSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanPartitionTableRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    #[prost(message, optional, tag = "2")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for ScanPartitionTableRequest {
    const NAME: &'static str = "ScanPartitionTableRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.ScanPartitionTableRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.ScanPartitionTableRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDatasetSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for GetDatasetSchemaRequest {
    const NAME: &'static str = "GetDatasetSchemaRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.GetDatasetSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.GetDatasetSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// List of specific partitions that will be indexed (all if left empty).
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    #[prost(message, optional, tag = "3")]
    pub config: ::core::option::Option<super::super::manifest_registry::v1alpha1::IndexConfig>,
    /// Specify behavior when index for a partition was already created.
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "4"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for CreateIndexRequest {
    const NAME: &'static str = "CreateIndexRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.CreateIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.CreateIndexRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReIndexRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for ReIndexRequest {
    const NAME: &'static str = "ReIndexRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.ReIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.ReIndexRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Index column that is queried
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<super::super::manifest_registry::v1alpha1::IndexColumn>,
    /// Query data - type of data is index specific. Caller must ensure
    /// to provide the right type. For vector search this should
    /// be a vector of appropriate size, for inverted index this should be a string.
    /// Query data is represented as a unit (single row) RecordBatch with 1 column.
    #[prost(message, optional, tag = "3")]
    pub query: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
    /// Index type specific properties
    #[prost(message, optional, tag = "4")]
    pub properties:
        ::core::option::Option<super::super::manifest_registry::v1alpha1::IndexQueryProperties>,
    /// Scan parameters
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for SearchDatasetRequest {
    const NAME: &'static str = "SearchDatasetRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.SearchDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.SearchDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Client can specify what partitions are queried. If left unspecified (empty list),
    /// all partitions will be queried.
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Client can specify specific chunk ids to include. If left unspecified (empty list),
    /// all chunks that match other query parameters will be included.
    #[prost(message, repeated, tag = "3")]
    pub chunk_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::Tuid>,
    /// Which entity paths are we interested in? Leave empty to query all of them.
    #[prost(message, repeated, tag = "4")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// Generic parameters that will influence the behavior of the Lance scanner.
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
    #[prost(message, optional, tag = "6")]
    pub query: ::core::option::Option<super::super::manifest_registry::v1alpha1::Query>,
}
impl ::prost::Name for QueryDatasetRequest {
    const NAME: &'static str = "QueryDatasetRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.QueryDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.QueryDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Client can specify from which partitions to get chunks. If left unspecified (empty list),
    /// data from all partition (that match other query parameters) will be included.
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Client can specify chunk ids to include. If left unspecified (empty list),
    /// all chunks (that match other query parameters) will be included.
    #[prost(message, repeated, tag = "3")]
    pub chunk_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::Tuid>,
    /// Which entity paths are we interested in? Leave empty to query all of them.
    #[prost(message, repeated, tag = "4")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// Query details
    #[prost(message, optional, tag = "5")]
    pub query: ::core::option::Option<super::super::manifest_registry::v1alpha1::Query>,
}
impl ::prost::Name for GetChunksRequest {
    const NAME: &'static str = "GetChunksRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.GetChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.GetChunksRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchPartitionRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    #[prost(message, optional, tag = "2")]
    pub partition_id: ::core::option::Option<super::super::common::v1alpha1::PartitionId>,
}
impl ::prost::Name for FetchPartitionRequest {
    const NAME: &'static str = "FetchPartitionRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.FetchPartitionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.FetchPartitionRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTableSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub table_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for GetTableSchemaRequest {
    const NAME: &'static str = "GetTableSchemaRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.GetTableSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.GetTableSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTableSchemaResponse {
    #[prost(message, optional, tag = "1")]
    pub schema: ::core::option::Option<super::super::common::v1alpha1::Schema>,
}
impl ::prost::Name for GetTableSchemaResponse {
    const NAME: &'static str = "GetTableSchemaResponse";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.GetTableSchemaResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.GetTableSchemaResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanTableRequest {
    /// TODO(jleibs): support ScanParameters iff we can plumb them into Datafusion TableProvider
    /// Otherwise, just wait for Arrow Flight
    /// rerun.common.v1alpha1.ScanParameters scan_parameters = 2;
    #[prost(message, optional, tag = "1")]
    pub table_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for ScanTableRequest {
    const NAME: &'static str = "ScanTableRequest";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.ScanTableRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.ScanTableRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanTableResponse {
    #[prost(message, optional, tag = "1")]
    pub dataframe_part: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ScanTableResponse {
    const NAME: &'static str = "ScanTableResponse";
    const PACKAGE: &'static str = "rerun.frontend.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.frontend.v1alpha1.ScanTableResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.frontend.v1alpha1.ScanTableResponse".into()
    }
}
/// Generated client implementations.
pub mod frontend_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// Redap's public API.
    #[derive(Debug, Clone)]
    pub struct FrontendServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> FrontendServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::BoxBody>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> FrontendServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::BoxBody>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::BoxBody>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<http::Request<tonic::body::BoxBody>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            FrontendServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn find_entries(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::catalog::v1alpha1::FindEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::FindEntriesResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/FindEntries",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "FindEntries",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::super::super::catalog::v1alpha1::DeleteEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::DeleteEntryResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/DeleteEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "DeleteEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_dataset_entry(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::catalog::v1alpha1::CreateDatasetEntryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::CreateDatasetEntryResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/CreateDatasetEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "CreateDatasetEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_dataset_entry(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::catalog::v1alpha1::ReadDatasetEntryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::ReadDatasetEntryResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/ReadDatasetEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "ReadDatasetEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_table_entry(
            &mut self,
            request: impl tonic::IntoRequest<
                super::super::super::catalog::v1alpha1::ReadTableEntryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::ReadTableEntryResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/ReadTableEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "ReadTableEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Register new partitions with the Dataset
        pub async fn register_with_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterWithDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::manifest_registry::v1alpha1::RegisterWithDatasetResponse,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/RegisterWithDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "RegisterWithDataset",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Unimplemented.
        pub async fn write_chunks(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::WriteChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<
                    super::super::super::manifest_registry::v1alpha1::WriteChunksResponse,
                >,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/WriteChunks",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "WriteChunks",
            ));
            self.inner.streaming(req, path, codec).await
        }
        /// Returns the schema of the partition table (i.e. the dataset manifest) itself, *not* the underlying dataset.
        ///
        /// * To inspect the data of the partition table, use `ScanPartitionTable`.
        /// * To retrieve the schema of the underlying dataset, use `GetDatasetSchema` instead.
        pub async fn get_partition_table_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPartitionTableSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::manifest_registry::v1alpha1::GetPartitionTableSchemaResponse,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/GetPartitionTableSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "GetPartitionTableSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Inspect the contents of the partition table (i.e. the dataset manifest).
        ///
        /// The returned data will follow the schema specified by `GetPartitionTableSchema`.
        pub async fn scan_partition_table(
            &mut self,
            request: impl tonic::IntoRequest<super::ScanPartitionTableRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<
                    super::super::super::manifest_registry::v1alpha1::ScanPartitionTableResponse,
                >,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/ScanPartitionTable",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "ScanPartitionTable",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Returns the schema of the dataset.
        ///
        /// This is the union of all the schemas from all the underlying partitions. It will contain all the indexes,
        /// entities and components present in the dataset.
        pub async fn get_dataset_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDatasetSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::manifest_registry::v1alpha1::GetDatasetSchemaResponse,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/GetDatasetSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "GetDatasetSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a custom index for a specific column (vector search, full-text search, etc).
        pub async fn create_index(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::manifest_registry::v1alpha1::CreateIndexResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/CreateIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "CreateIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Recreate an index with the same configuration but (potentially) new data.
        pub async fn re_index(
            &mut self,
            request: impl tonic::IntoRequest<super::ReIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::manifest_registry::v1alpha1::ReIndexResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/ReIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "ReIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Search a previously created index.
        pub async fn search_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<
                    super::super::super::manifest_registry::v1alpha1::SearchDatasetResponse,
                >,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/SearchDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "SearchDataset",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Perform Rerun-native queries on a dataset, returning the matching chunk IDs.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch the actual chunks themselves, see `GetChunks`.
        ///
        /// Passing chunk IDs to this method effectively acts as a IF_EXIST filter.
        pub async fn query_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<
                    super::super::super::manifest_registry::v1alpha1::QueryDatasetResponse,
                >,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/QueryDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "QueryDataset",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Perform Rerun-native queries on a dataset, returning the underlying chunks.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch only the actual chunk IDs rather than the chunks themselves, see `QueryDataset`.
        pub async fn get_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<
                    super::super::super::manifest_registry::v1alpha1::GetChunksResponse,
                >,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/GetChunks",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "GetChunks",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Fetch an entire partition from the server, without any pre- or post-processing.
        ///
        /// This is a temporary hack while we get everything up and running.
        pub async fn fetch_partition(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchPartitionRequest>,
        ) -> std::result::Result<
            tonic::Response<
                tonic::codec::Streaming<
                    super::super::super::manifest_registry::v1alpha1::FetchPartitionResponse,
                >,
            >,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/FetchPartition",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "FetchPartition",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        pub async fn get_table_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTableSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetTableSchemaResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/GetTableSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "GetTableSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn scan_table(
            &mut self,
            request: impl tonic::IntoRequest<super::ScanTableRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ScanTableResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.frontend.v1alpha1.FrontendService/ScanTable",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.frontend.v1alpha1.FrontendService",
                "ScanTable",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod frontend_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with FrontendServiceServer.
    #[async_trait]
    pub trait FrontendService: std::marker::Send + std::marker::Sync + 'static {
        async fn find_entries(
            &self,
            request: tonic::Request<super::super::super::catalog::v1alpha1::FindEntriesRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::FindEntriesResponse>,
            tonic::Status,
        >;
        async fn delete_entry(
            &self,
            request: tonic::Request<super::super::super::catalog::v1alpha1::DeleteEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::DeleteEntryResponse>,
            tonic::Status,
        >;
        async fn create_dataset_entry(
            &self,
            request: tonic::Request<
                super::super::super::catalog::v1alpha1::CreateDatasetEntryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::CreateDatasetEntryResponse>,
            tonic::Status,
        >;
        async fn read_dataset_entry(
            &self,
            request: tonic::Request<
                super::super::super::catalog::v1alpha1::ReadDatasetEntryRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::ReadDatasetEntryResponse>,
            tonic::Status,
        >;
        async fn read_table_entry(
            &self,
            request: tonic::Request<super::super::super::catalog::v1alpha1::ReadTableEntryRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::catalog::v1alpha1::ReadTableEntryResponse>,
            tonic::Status,
        >;
        /// Register new partitions with the Dataset
        async fn register_with_dataset(
            &self,
            request: tonic::Request<super::RegisterWithDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::manifest_registry::v1alpha1::RegisterWithDatasetResponse,
            >,
            tonic::Status,
        >;
        /// Server streaming response type for the WriteChunks method.
        type WriteChunksStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::manifest_registry::v1alpha1::WriteChunksResponse,
                    tonic::Status,
                >,
            > + std::marker::Send
            + 'static;
        /// Unimplemented.
        async fn write_chunks(
            &self,
            request: tonic::Request<tonic::Streaming<super::WriteChunksRequest>>,
        ) -> std::result::Result<tonic::Response<Self::WriteChunksStream>, tonic::Status>;
        /// Returns the schema of the partition table (i.e. the dataset manifest) itself, *not* the underlying dataset.
        ///
        /// * To inspect the data of the partition table, use `ScanPartitionTable`.
        /// * To retrieve the schema of the underlying dataset, use `GetDatasetSchema` instead.
        async fn get_partition_table_schema(
            &self,
            request: tonic::Request<super::GetPartitionTableSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::manifest_registry::v1alpha1::GetPartitionTableSchemaResponse,
            >,
            tonic::Status,
        >;
        /// Server streaming response type for the ScanPartitionTable method.
        type ScanPartitionTableStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::manifest_registry::v1alpha1::ScanPartitionTableResponse,
                    tonic::Status,
                >,
            > + std::marker::Send
            + 'static;
        /// Inspect the contents of the partition table (i.e. the dataset manifest).
        ///
        /// The returned data will follow the schema specified by `GetPartitionTableSchema`.
        async fn scan_partition_table(
            &self,
            request: tonic::Request<super::ScanPartitionTableRequest>,
        ) -> std::result::Result<tonic::Response<Self::ScanPartitionTableStream>, tonic::Status>;
        /// Returns the schema of the dataset.
        ///
        /// This is the union of all the schemas from all the underlying partitions. It will contain all the indexes,
        /// entities and components present in the dataset.
        async fn get_dataset_schema(
            &self,
            request: tonic::Request<super::GetDatasetSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<
                super::super::super::manifest_registry::v1alpha1::GetDatasetSchemaResponse,
            >,
            tonic::Status,
        >;
        /// Creates a custom index for a specific column (vector search, full-text search, etc).
        async fn create_index(
            &self,
            request: tonic::Request<super::CreateIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::manifest_registry::v1alpha1::CreateIndexResponse>,
            tonic::Status,
        >;
        /// Recreate an index with the same configuration but (potentially) new data.
        async fn re_index(
            &self,
            request: tonic::Request<super::ReIndexRequest>,
        ) -> std::result::Result<
            tonic::Response<super::super::super::manifest_registry::v1alpha1::ReIndexResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the SearchDataset method.
        type SearchDatasetStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::manifest_registry::v1alpha1::SearchDatasetResponse,
                    tonic::Status,
                >,
            > + std::marker::Send
            + 'static;
        /// Search a previously created index.
        async fn search_dataset(
            &self,
            request: tonic::Request<super::SearchDatasetRequest>,
        ) -> std::result::Result<tonic::Response<Self::SearchDatasetStream>, tonic::Status>;
        /// Server streaming response type for the QueryDataset method.
        type QueryDatasetStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::manifest_registry::v1alpha1::QueryDatasetResponse,
                    tonic::Status,
                >,
            > + std::marker::Send
            + 'static;
        /// Perform Rerun-native queries on a dataset, returning the matching chunk IDs.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch the actual chunks themselves, see `GetChunks`.
        ///
        /// Passing chunk IDs to this method effectively acts as a IF_EXIST filter.
        async fn query_dataset(
            &self,
            request: tonic::Request<super::QueryDatasetRequest>,
        ) -> std::result::Result<tonic::Response<Self::QueryDatasetStream>, tonic::Status>;
        /// Server streaming response type for the GetChunks method.
        type GetChunksStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::manifest_registry::v1alpha1::GetChunksResponse,
                    tonic::Status,
                >,
            > + std::marker::Send
            + 'static;
        /// Perform Rerun-native queries on a dataset, returning the underlying chunks.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch only the actual chunk IDs rather than the chunks themselves, see `QueryDataset`.
        async fn get_chunks(
            &self,
            request: tonic::Request<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetChunksStream>, tonic::Status>;
        /// Server streaming response type for the FetchPartition method.
        type FetchPartitionStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<
                    super::super::super::manifest_registry::v1alpha1::FetchPartitionResponse,
                    tonic::Status,
                >,
            > + std::marker::Send
            + 'static;
        /// Fetch an entire partition from the server, without any pre- or post-processing.
        ///
        /// This is a temporary hack while we get everything up and running.
        async fn fetch_partition(
            &self,
            request: tonic::Request<super::FetchPartitionRequest>,
        ) -> std::result::Result<tonic::Response<Self::FetchPartitionStream>, tonic::Status>;
        async fn get_table_schema(
            &self,
            request: tonic::Request<super::GetTableSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetTableSchemaResponse>, tonic::Status>;
        /// Server streaming response type for the ScanTable method.
        type ScanTableStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ScanTableResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        async fn scan_table(
            &self,
            request: tonic::Request<super::ScanTableRequest>,
        ) -> std::result::Result<tonic::Response<Self::ScanTableStream>, tonic::Status>;
    }
    /// Redap's public API.
    #[derive(Debug)]
    pub struct FrontendServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> FrontendServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for FrontendServiceServer<T>
    where
        T: FrontendService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::BoxBody>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rerun.frontend.v1alpha1.FrontendService/FindEntries" => {
                    #[allow(non_camel_case_types)]
                    struct FindEntriesSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<
                            super::super::super::catalog::v1alpha1::FindEntriesRequest,
                        > for FindEntriesSvc<T>
                    {
                        type Response = super::super::super::catalog::v1alpha1::FindEntriesResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::catalog::v1alpha1::FindEntriesRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::find_entries(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindEntriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/DeleteEntry" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteEntrySvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<
                            super::super::super::catalog::v1alpha1::DeleteEntryRequest,
                        > for DeleteEntrySvc<T>
                    {
                        type Response = super::super::super::catalog::v1alpha1::DeleteEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::catalog::v1alpha1::DeleteEntryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::delete_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/CreateDatasetEntry" => {
                    #[allow(non_camel_case_types)]
                    struct CreateDatasetEntrySvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<
                            super::super::super::catalog::v1alpha1::CreateDatasetEntryRequest,
                        > for CreateDatasetEntrySvc<T>
                    {
                        type Response =
                            super::super::super::catalog::v1alpha1::CreateDatasetEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::catalog::v1alpha1::CreateDatasetEntryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::create_dataset_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateDatasetEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/ReadDatasetEntry" => {
                    #[allow(non_camel_case_types)]
                    struct ReadDatasetEntrySvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<
                            super::super::super::catalog::v1alpha1::ReadDatasetEntryRequest,
                        > for ReadDatasetEntrySvc<T>
                    {
                        type Response =
                            super::super::super::catalog::v1alpha1::ReadDatasetEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::catalog::v1alpha1::ReadDatasetEntryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::read_dataset_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadDatasetEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/ReadTableEntry" => {
                    #[allow(non_camel_case_types)]
                    struct ReadTableEntrySvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<
                            super::super::super::catalog::v1alpha1::ReadTableEntryRequest,
                        > for ReadTableEntrySvc<T>
                    {
                        type Response =
                            super::super::super::catalog::v1alpha1::ReadTableEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<
                                super::super::super::catalog::v1alpha1::ReadTableEntryRequest,
                            >,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::read_table_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadTableEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/RegisterWithDataset" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterWithDatasetSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<super::RegisterWithDatasetRequest>
                        for RegisterWithDatasetSvc<T>
                    {
                        type Response = super::super::super::manifest_registry::v1alpha1::RegisterWithDatasetResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterWithDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::register_with_dataset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterWithDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/WriteChunks" => {
                    #[allow(non_camel_case_types)]
                    struct WriteChunksSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::StreamingService<super::WriteChunksRequest>
                        for WriteChunksSvc<T>
                    {
                        type Response =
                            super::super::super::manifest_registry::v1alpha1::WriteChunksResponse;
                        type ResponseStream = T::WriteChunksStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::WriteChunksRequest>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::write_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/GetPartitionTableSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetPartitionTableSchemaSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<super::GetPartitionTableSchemaRequest>
                        for GetPartitionTableSchemaSvc<T>
                    {
                        type Response = super::super::super::manifest_registry::v1alpha1::GetPartitionTableSchemaResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPartitionTableSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::get_partition_table_schema(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPartitionTableSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/ScanPartitionTable" => {
                    #[allow(non_camel_case_types)]
                    struct ScanPartitionTableSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::ServerStreamingService<super::ScanPartitionTableRequest>
                        for ScanPartitionTableSvc<T>
                    {
                        type Response = super::super::super::manifest_registry::v1alpha1::ScanPartitionTableResponse;
                        type ResponseStream = T::ScanPartitionTableStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScanPartitionTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::scan_partition_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ScanPartitionTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/GetDatasetSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetDatasetSchemaSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<super::GetDatasetSchemaRequest>
                        for GetDatasetSchemaSvc<T>
                    {
                        type Response = super::super::super::manifest_registry::v1alpha1::GetDatasetSchemaResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDatasetSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::get_dataset_schema(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDatasetSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/CreateIndex" => {
                    #[allow(non_camel_case_types)]
                    struct CreateIndexSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService> tonic::server::UnaryService<super::CreateIndexRequest>
                        for CreateIndexSvc<T>
                    {
                        type Response =
                            super::super::super::manifest_registry::v1alpha1::CreateIndexResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::create_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/ReIndex" => {
                    #[allow(non_camel_case_types)]
                    struct ReIndexSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService> tonic::server::UnaryService<super::ReIndexRequest> for ReIndexSvc<T> {
                        type Response =
                            super::super::super::manifest_registry::v1alpha1::ReIndexResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::re_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/SearchDataset" => {
                    #[allow(non_camel_case_types)]
                    struct SearchDatasetSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::ServerStreamingService<super::SearchDatasetRequest>
                        for SearchDatasetSvc<T>
                    {
                        type Response =
                            super::super::super::manifest_registry::v1alpha1::SearchDatasetResponse;
                        type ResponseStream = T::SearchDatasetStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::search_dataset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/QueryDataset" => {
                    #[allow(non_camel_case_types)]
                    struct QueryDatasetSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::ServerStreamingService<super::QueryDatasetRequest>
                        for QueryDatasetSvc<T>
                    {
                        type Response =
                            super::super::super::manifest_registry::v1alpha1::QueryDatasetResponse;
                        type ResponseStream = T::QueryDatasetStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::query_dataset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/GetChunks" => {
                    #[allow(non_camel_case_types)]
                    struct GetChunksSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::ServerStreamingService<super::GetChunksRequest>
                        for GetChunksSvc<T>
                    {
                        type Response =
                            super::super::super::manifest_registry::v1alpha1::GetChunksResponse;
                        type ResponseStream = T::GetChunksStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::get_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/FetchPartition" => {
                    #[allow(non_camel_case_types)]
                    struct FetchPartitionSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::ServerStreamingService<super::FetchPartitionRequest>
                        for FetchPartitionSvc<T>
                    {
                        type Response = super::super::super::manifest_registry::v1alpha1::FetchPartitionResponse;
                        type ResponseStream = T::FetchPartitionStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchPartitionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::fetch_partition(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchPartitionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/GetTableSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetTableSchemaSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::UnaryService<super::GetTableSchemaRequest>
                        for GetTableSchemaSvc<T>
                    {
                        type Response = super::GetTableSchemaResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTableSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::get_table_schema(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTableSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.frontend.v1alpha1.FrontendService/ScanTable" => {
                    #[allow(non_camel_case_types)]
                    struct ScanTableSvc<T: FrontendService>(pub Arc<T>);
                    impl<T: FrontendService>
                        tonic::server::ServerStreamingService<super::ScanTableRequest>
                        for ScanTableSvc<T>
                    {
                        type Response = super::ScanTableResponse;
                        type ResponseStream = T::ScanTableStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScanTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as FrontendService>::scan_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ScanTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(empty_body());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for FrontendServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rerun.frontend.v1alpha1.FrontendService";
    impl<T> tonic::server::NamedService for FrontendServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
