// This file is @generated by prost-build.
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VersionRequest {}
impl ::prost::Name for VersionRequest {
    const NAME: &'static str = "VersionRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.VersionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.VersionRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct VersionResponse {
    #[prost(message, optional, tag = "1")]
    pub build_info: ::core::option::Option<super::super::common::v1alpha1::BuildInfo>,
}
impl ::prost::Name for VersionResponse {
    const NAME: &'static str = "VersionResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.VersionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.VersionResponse".into()
    }
}
/// Application level error - used as `details` in the `google.rpc.Status` message
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Error {
    /// error code
    #[prost(enumeration = "ErrorCode", tag = "1")]
    pub code: i32,
    /// unique identifier associated with the request (e.g. recording id, recording storage url)
    #[prost(string, tag = "2")]
    pub id: ::prost::alloc::string::String,
    /// human readable details about the error
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
}
impl ::prost::Name for Error {
    const NAME: &'static str = "Error";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.Error".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.Error".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DataSource {
    /// Where is the data for this data source stored (e.g. s3://bucket/file or file:///path/to/file)?
    #[prost(string, optional, tag = "1")]
    pub storage_url: ::core::option::Option<::prost::alloc::string::String>,
    /// / Which Partition Layer should this data source be registered to?
    /// /
    /// / Defaults to `base` if unspecified.
    #[prost(string, optional, tag = "3")]
    pub layer: ::core::option::Option<::prost::alloc::string::String>,
    /// What kind of data is it (e.g. rrd, mcap, Lance, etc)?
    #[prost(enumeration = "DataSourceKind", tag = "2")]
    pub typ: i32,
}
impl ::prost::Name for DataSource {
    const NAME: &'static str = "DataSource";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DataSource".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DataSource".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    #[prost(message, repeated, tag = "2")]
    pub data_sources: ::prost::alloc::vec::Vec<DataSource>,
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "3"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for RegisterWithDatasetRequest {
    const NAME: &'static str = "RegisterWithDatasetRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.RegisterWithDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.RegisterWithDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterWithDatasetResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for RegisterWithDatasetResponse {
    const NAME: &'static str = "RegisterWithDatasetResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.RegisterWithDatasetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.RegisterWithDatasetResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct WriteChunksRequest {
    #[prost(message, optional, tag = "1")]
    pub chunk: ::core::option::Option<super::super::common::v1alpha1::RerunChunk>,
}
impl ::prost::Name for WriteChunksRequest {
    const NAME: &'static str = "WriteChunksRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.WriteChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.WriteChunksRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct WriteChunksResponse {}
impl ::prost::Name for WriteChunksResponse {
    const NAME: &'static str = "WriteChunksResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.WriteChunksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.WriteChunksResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetPartitionTableSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for GetPartitionTableSchemaRequest {
    const NAME: &'static str = "GetPartitionTableSchemaRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetPartitionTableSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetPartitionTableSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetPartitionTableSchemaResponse {
    #[prost(message, optional, tag = "1")]
    pub schema: ::core::option::Option<super::super::common::v1alpha1::Schema>,
}
impl ::prost::Name for GetPartitionTableSchemaResponse {
    const NAME: &'static str = "GetPartitionTableSchemaResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetPartitionTableSchemaResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetPartitionTableSchemaResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanPartitionTableRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    #[prost(message, optional, tag = "2")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for ScanPartitionTableRequest {
    const NAME: &'static str = "ScanPartitionTableRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ScanPartitionTableRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ScanPartitionTableRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanPartitionTableResponse {
    /// Partitions metadata as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ScanPartitionTableResponse {
    const NAME: &'static str = "ScanPartitionTableResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ScanPartitionTableResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ScanPartitionTableResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetDatasetSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for GetDatasetSchemaRequest {
    const NAME: &'static str = "GetDatasetSchemaRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetDatasetSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetDatasetSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetDatasetSchemaResponse {
    #[prost(message, optional, tag = "1")]
    pub schema: ::core::option::Option<super::super::common::v1alpha1::Schema>,
}
impl ::prost::Name for GetDatasetSchemaResponse {
    const NAME: &'static str = "GetDatasetSchemaResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetDatasetSchemaResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetDatasetSchemaResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// List of specific partitions that will be indexed (all if left empty).
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// List of specific partition layers that will be indexed (all if left empty).
    ///
    /// If non-empty, this must match the length of `partition_ids`.
    #[prost(string, repeated, tag = "5")]
    pub partition_layers: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "3")]
    pub config: ::core::option::Option<IndexConfig>,
    /// Specify behavior when index for a partition was already created.
    #[prost(
        enumeration = "super::super::common::v1alpha1::IfDuplicateBehavior",
        tag = "4"
    )]
    pub on_duplicate: i32,
}
impl ::prost::Name for CreateIndexRequest {
    const NAME: &'static str = "CreateIndexRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.CreateIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.CreateIndexRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateIndexResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for CreateIndexResponse {
    const NAME: &'static str = "CreateIndexResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.CreateIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.CreateIndexResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReIndexRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for ReIndexRequest {
    const NAME: &'static str = "ReIndexRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ReIndexRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ReIndexRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReIndexResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ReIndexResponse {
    const NAME: &'static str = "ReIndexResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ReIndexResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ReIndexResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexConfig {
    /// what kind of index do we want to create and what are its index specific properties.
    #[prost(message, optional, tag = "1")]
    pub properties: ::core::option::Option<IndexProperties>,
    /// Component / column we want to index.
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
    /// What is the filter index i.e. timeline for which we will query the timepoints.
    ///
    /// TODO(zehiko) this might go away and we might just index across all the timelines
    #[prost(message, optional, tag = "3")]
    pub time_index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
}
impl ::prost::Name for IndexConfig {
    const NAME: &'static str = "IndexConfig";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.IndexConfig".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.IndexConfig".into()
    }
}
/// used to define which column we want to index
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexColumn {
    /// The path of the entity.
    #[prost(message, optional, tag = "1")]
    pub entity_path: ::core::option::Option<super::super::common::v1alpha1::EntityPath>,
    /// Component details
    #[prost(message, optional, tag = "2")]
    pub component: ::core::option::Option<super::super::common::v1alpha1::ComponentDescriptor>,
}
impl ::prost::Name for IndexColumn {
    const NAME: &'static str = "IndexColumn";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.IndexColumn".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.IndexColumn".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct IndexProperties {
    #[prost(oneof = "index_properties::Props", tags = "1, 2, 3")]
    pub props: ::core::option::Option<index_properties::Props>,
}
/// Nested message and enum types in `IndexProperties`.
pub mod index_properties {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Props {
        #[prost(message, tag = "1")]
        Inverted(super::InvertedIndex),
        #[prost(message, tag = "2")]
        Vector(super::VectorIvfPqIndex),
        #[prost(message, tag = "3")]
        Btree(super::BTreeIndex),
    }
}
impl ::prost::Name for IndexProperties {
    const NAME: &'static str = "IndexProperties";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.IndexProperties".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.IndexProperties".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct InvertedIndex {
    #[prost(bool, optional, tag = "1")]
    pub store_position: ::core::option::Option<bool>,
    /// TODO(zehiko) add other properties as needed
    #[prost(string, optional, tag = "2")]
    pub base_tokenizer: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for InvertedIndex {
    const NAME: &'static str = "InvertedIndex";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.InvertedIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.InvertedIndex".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorIvfPqIndex {
    #[prost(uint32, optional, tag = "1")]
    pub num_partitions: ::core::option::Option<u32>,
    #[prost(uint32, optional, tag = "2")]
    pub num_sub_vectors: ::core::option::Option<u32>,
    #[prost(enumeration = "VectorDistanceMetric", tag = "3")]
    pub distance_metrics: i32,
}
impl ::prost::Name for VectorIvfPqIndex {
    const NAME: &'static str = "VectorIvfPqIndex";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.VectorIvfPqIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.VectorIvfPqIndex".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BTreeIndex {}
impl ::prost::Name for BTreeIndex {
    const NAME: &'static str = "BTreeIndex";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.BTreeIndex".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.BTreeIndex".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Index column that is queried
    #[prost(message, optional, tag = "2")]
    pub column: ::core::option::Option<IndexColumn>,
    /// Query data - type of data is index specific. Caller must ensure
    /// to provide the right type. For vector search this should
    /// be a vector of appropriate size, for inverted index this should be a string.
    /// Query data is represented as a unit (single row) RecordBatch with 1 column.
    #[prost(message, optional, tag = "3")]
    pub query: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
    /// Index type specific properties
    #[prost(message, optional, tag = "4")]
    pub properties: ::core::option::Option<IndexQueryProperties>,
    /// Scan parameters
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
}
impl ::prost::Name for SearchDatasetRequest {
    const NAME: &'static str = "SearchDatasetRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.SearchDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.SearchDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SearchDatasetResponse {
    /// Chunks as arrow RecordBatch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for SearchDatasetResponse {
    const NAME: &'static str = "SearchDatasetResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.SearchDatasetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.SearchDatasetResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct IndexQueryProperties {
    /// specific index query properties based on the index type
    #[prost(oneof = "index_query_properties::Props", tags = "1, 2, 3")]
    pub props: ::core::option::Option<index_query_properties::Props>,
}
/// Nested message and enum types in `IndexQueryProperties`.
pub mod index_query_properties {
    /// specific index query properties based on the index type
    #[derive(Clone, Copy, PartialEq, ::prost::Oneof)]
    pub enum Props {
        #[prost(message, tag = "1")]
        Inverted(super::InvertedIndexQuery),
        #[prost(message, tag = "2")]
        Vector(super::VectorIndexQuery),
        #[prost(message, tag = "3")]
        Btree(super::BTreeIndexQuery),
    }
}
impl ::prost::Name for IndexQueryProperties {
    const NAME: &'static str = "IndexQueryProperties";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.IndexQueryProperties".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.IndexQueryProperties".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct InvertedIndexQuery {}
impl ::prost::Name for InvertedIndexQuery {
    const NAME: &'static str = "InvertedIndexQuery";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.InvertedIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.InvertedIndexQuery".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct VectorIndexQuery {
    #[prost(uint32, optional, tag = "1")]
    pub top_k: ::core::option::Option<u32>,
}
impl ::prost::Name for VectorIndexQuery {
    const NAME: &'static str = "VectorIndexQuery";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.VectorIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.VectorIndexQuery".into()
    }
}
/// TODO(zehiko) add properties as needed
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct BTreeIndexQuery {}
impl ::prost::Name for BTreeIndexQuery {
    const NAME: &'static str = "BTreeIndexQuery";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.BTreeIndexQuery".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.BTreeIndexQuery".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDatasetRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Client can specify what partitions are queried. If left unspecified (empty list),
    /// all partitions will be queried.
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Client can specify specific chunk ids to include. If left unspecified (empty list),
    /// all chunks that match other query parameters will be included.
    #[prost(message, repeated, tag = "3")]
    pub chunk_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::Tuid>,
    /// Which entity paths are we interested in? Leave empty, and set `select_all_entity_paths`,
    /// in order to query all of them.
    #[prost(message, repeated, tag = "4")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// If set, the query will cover all existing entity paths.
    ///
    /// `entity_paths` must be empty, otherwise an error will be raised.
    ///
    /// Truth table:
    /// ```text
    /// select_all_entity_paths | entity_paths   | result
    /// ------------------------+----------------+--------
    /// false                   | \[\]             | valid query, empty results (no entity paths selected)
    /// false                   | \['foo', 'bar'\] | valid query, 'foo' & 'bar' selected
    /// true                    | \[\]             | valid query, all entity paths selected
    /// true                    | \['foo', 'bar'\] | invalid query, error
    /// ```
    #[prost(bool, tag = "7")]
    pub select_all_entity_paths: bool,
    /// Which components are we interested in?
    ///
    /// If left unspecified, all existing components are considered of interest.
    ///
    /// This will perform a basic fuzzy match on the available columns' descriptors.
    /// The fuzzy logic is a simple case-sensitive `contains()` query.
    /// For example, given a `log_tick__SeriesLines:width` index, all of the following
    /// would match: `SeriesLines:width`, `Width`, `SeriesLines`, etc.
    #[prost(string, repeated, tag = "10")]
    pub fuzzy_descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// If set, static data will be excluded from the results.
    #[prost(bool, tag = "8")]
    pub exclude_static_data: bool,
    /// If set, temporal data will be excluded from the results.
    #[prost(bool, tag = "9")]
    pub exclude_temporal_data: bool,
    /// Generic parameters that will influence the behavior of the Lance scanner.
    #[prost(message, optional, tag = "5")]
    pub scan_parameters: ::core::option::Option<super::super::common::v1alpha1::ScanParameters>,
    #[prost(message, optional, tag = "6")]
    pub query: ::core::option::Option<Query>,
}
impl ::prost::Name for QueryDatasetRequest {
    const NAME: &'static str = "QueryDatasetRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryDatasetRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryDatasetRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryDatasetResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for QueryDatasetResponse {
    const NAME: &'static str = "QueryDatasetResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryDatasetResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryDatasetResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Query {
    /// If specified, will perform a latest-at query with the given parameters.
    ///
    /// You can combine this with a `QueryRange` in order to gather all the relevant chunks for
    /// a full-fledged dataframe query (i.e. they get OR'd together).
    #[prost(message, optional, tag = "1")]
    pub latest_at: ::core::option::Option<QueryLatestAt>,
    /// If specified, will perform a range query with the given parameters.
    ///
    /// You can combine this with a `QueryLatestAt` in order to gather all the relevant chunks for
    /// a full-fledged dataframe query (i.e. they get OR'd together).
    #[prost(message, optional, tag = "2")]
    pub range: ::core::option::Option<QueryRange>,
    /// If true, `columns` will contain the entire schema.
    #[prost(bool, tag = "3")]
    pub columns_always_include_everything: bool,
    /// If true, `columns` always includes `chunk_id`,
    #[prost(bool, tag = "4")]
    pub columns_always_include_chunk_ids: bool,
    /// If true, `columns` always includes `byte_offset` and `byte_size`.
    #[prost(bool, tag = "5")]
    pub columns_always_include_byte_offsets: bool,
    /// If true, `columns` always includes `entity_path`.
    #[prost(bool, tag = "6")]
    pub columns_always_include_entity_paths: bool,
    /// If true, `columns` always includes all static component-level indexes.
    #[prost(bool, tag = "7")]
    pub columns_always_include_static_indexes: bool,
    /// If true, `columns` always includes all temporal chunk-level indexes.
    #[prost(bool, tag = "8")]
    pub columns_always_include_global_indexes: bool,
    /// If true, `columns` always includes all component-level indexes.
    #[prost(bool, tag = "9")]
    pub columns_always_include_component_indexes: bool,
}
impl ::prost::Name for Query {
    const NAME: &'static str = "Query";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.Query".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.Query".into()
    }
}
/// A chunk-level latest-at query, aka `LatestAtRelevantChunks`.
///
/// This has the exact same semantics as the query of the same name on our `ChunkStore`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryLatestAt {
    /// Which index column should we perform the query on? E.g. `log_time`.
    ///
    /// Leave this empty to query for static data.
    #[prost(message, optional, tag = "1")]
    pub index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// What index value are we looking for?
    ///
    /// Leave this empty to query for static data.
    #[prost(int64, optional, tag = "2")]
    pub at: ::core::option::Option<i64>,
}
impl ::prost::Name for QueryLatestAt {
    const NAME: &'static str = "QueryLatestAt";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryLatestAt".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryLatestAt".into()
    }
}
/// / A chunk-level range query, aka `RangeRelevantChunks`.
///
/// This has the exact same semantics as the query of the same name on our `ChunkStore`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryRange {
    /// Which index column should we perform the query on? E.g. `log_time`.
    #[prost(message, optional, tag = "1")]
    pub index: ::core::option::Option<super::super::common::v1alpha1::IndexColumnSelector>,
    /// What index range are we looking for?
    #[prost(message, optional, tag = "2")]
    pub index_range: ::core::option::Option<super::super::common::v1alpha1::TimeRange>,
}
impl ::prost::Name for QueryRange {
    const NAME: &'static str = "QueryRange";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryRange".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryRange".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Client can specify from which partitions to get chunks. If left unspecified (empty list),
    /// data from all partition (that match other query parameters) will be included.
    #[prost(message, repeated, tag = "2")]
    pub partition_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::PartitionId>,
    /// Client can specify chunk ids to include. If left unspecified (empty list),
    /// all chunks (that match other query parameters) will be included.
    #[prost(message, repeated, tag = "3")]
    pub chunk_ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::Tuid>,
    /// Which entity paths are we interested in? Leave empty, and set `select_all_entity_paths`,
    /// in order to query all of them.
    #[prost(message, repeated, tag = "4")]
    pub entity_paths: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::EntityPath>,
    /// If set, the query will cover all existing entity paths.
    ///
    /// `entity_paths` must be empty, otherwise an error will be raised.
    ///
    /// Truth table:
    /// ```text
    /// select_all_entity_paths | entity_paths   | result
    /// ------------------------+----------------+--------
    /// false                   | \[\]             | valid query, empty results (no entity paths selected)
    /// false                   | \['foo', 'bar'\] | valid query, 'foo' & 'bar' selected
    /// true                    | \[\]             | valid query, all entity paths selected
    /// true                    | \['foo', 'bar'\] | invalid query, error
    /// ```
    #[prost(bool, tag = "6")]
    pub select_all_entity_paths: bool,
    /// Which components are we interested in?
    ///
    /// If left unspecified, all existing components are considered of interest.
    ///
    /// This will perform a basic fuzzy match on the available columns' descriptors.
    /// The fuzzy logic is a simple case-sensitive `contains()` query.
    /// For example, given a `log_tick__SeriesLines:width` index, all of the following
    /// would match: `SeriesLines:width`, `Width`, `SeriesLines`, etc.
    #[prost(string, repeated, tag = "9")]
    pub fuzzy_descriptors: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// If set, static data will be excluded from the results.
    #[prost(bool, tag = "7")]
    pub exclude_static_data: bool,
    /// If set, temporal data will be excluded from the results.
    #[prost(bool, tag = "8")]
    pub exclude_temporal_data: bool,
    /// Query details
    #[prost(message, optional, tag = "5")]
    pub query: ::core::option::Option<Query>,
}
impl ::prost::Name for GetChunksRequest {
    const NAME: &'static str = "GetChunksRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetChunksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetChunksRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetChunksResponse {
    /// Every gRPC response, even within the confines of a stream, involves HTTP2 overhead, which isn't
    /// cheap by any means, which is why we're returning a batch of `ArrowMsg` rather than a single one.
    #[prost(message, repeated, tag = "1")]
    pub chunks: ::prost::alloc::vec::Vec<super::super::log_msg::v1alpha1::ArrowMsg>,
}
impl ::prost::Name for GetChunksResponse {
    const NAME: &'static str = "GetChunksResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetChunksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetChunksResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct GetTableSchemaRequest {
    #[prost(message, optional, tag = "1")]
    pub table_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for GetTableSchemaRequest {
    const NAME: &'static str = "GetTableSchemaRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetTableSchemaRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetTableSchemaRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTableSchemaResponse {
    #[prost(message, optional, tag = "1")]
    pub schema: ::core::option::Option<super::super::common::v1alpha1::Schema>,
}
impl ::prost::Name for GetTableSchemaResponse {
    const NAME: &'static str = "GetTableSchemaResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.GetTableSchemaResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.GetTableSchemaResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ScanTableRequest {
    /// TODO(jleibs): support ScanParameters iff we can plumb them into Datafusion TableProvider
    /// Otherwise, just wait for Arrow Flight
    /// rerun.common.v1alpha1.ScanParameters scan_parameters = 2;
    #[prost(message, optional, tag = "1")]
    pub table_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for ScanTableRequest {
    const NAME: &'static str = "ScanTableRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ScanTableRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ScanTableRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ScanTableResponse {
    #[prost(message, optional, tag = "1")]
    pub dataframe_part: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for ScanTableResponse {
    const NAME: &'static str = "ScanTableResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ScanTableResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ScanTableResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DoMaintenanceRequest {
    #[prost(message, optional, tag = "1")]
    pub dataset_id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// Create the acceleration structures for temporal queries.
    ///
    /// This will recreate all scalar indexes from scratch everytime.
    ///
    /// TODO(cmc): support incremental scalar indexing & index compaction
    #[prost(bool, tag = "2")]
    pub build_scalar_indexes: bool,
    /// Compact the underlying Lance fragments, for all Rerun Manifests.
    ///
    /// Hardcoded to the default (optimal) settings.
    #[prost(bool, tag = "3")]
    pub compact_fragments: bool,
    /// If set, all Lance fragments older than this date will be removed, for all Rerun Manifests.
    /// In case requested date is more recent than 1 hour, it will be ignored and 1 hour ago
    /// timestamp will be used. This is to prevent still used files (like recent transaction files)
    /// to be removed and cause Lance Dataset update issues.
    /// See <https://docs.rs/lance/latest/lance/dataset/cleanup/index.html>
    /// and <https://docs.rs/lance/latest/lance/dataset/cleanup/fn.cleanup_old_versions.html>
    #[prost(message, optional, tag = "4")]
    pub cleanup_before: ::core::option::Option<::prost_types::Timestamp>,
    /// Override default platform behavior and allow cleanup of recent files. This will respect
    /// the value of `cleanup_before` timestamp even if it's more recent than 1 hour.
    /// ⚠️ Do not ever use this unless you know exactly what you're doing. Improper use will lead to data loss.
    #[prost(bool, tag = "5")]
    pub unsafe_allow_recent_cleanup: bool,
}
impl ::prost::Name for DoMaintenanceRequest {
    const NAME: &'static str = "DoMaintenanceRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DoMaintenanceRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DoMaintenanceRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DoMaintenanceResponse {
    #[prost(string, tag = "1")]
    pub report: ::prost::alloc::string::String,
}
impl ::prost::Name for DoMaintenanceResponse {
    const NAME: &'static str = "DoMaintenanceResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DoMaintenanceResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DoMaintenanceResponse".into()
    }
}
/// A task is a unit of work that can be submitted to the system
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Task {
    /// Unique identifier for the task
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::TaskId>,
    /// Type of the task
    #[prost(string, tag = "2")]
    pub task_type: ::prost::alloc::string::String,
    /// Task-type dependant data necessary to de-serialize the task
    #[prost(bytes = "bytes", tag = "3")]
    pub task_data: ::prost::bytes::Bytes,
}
impl ::prost::Name for Task {
    const NAME: &'static str = "Task";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.Task".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.Task".into()
    }
}
/// `SubmitTasksRequest` is the request message for submitting tasks
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTasksRequest {
    #[prost(message, repeated, tag = "1")]
    pub tasks: ::prost::alloc::vec::Vec<Task>,
}
impl ::prost::Name for SubmitTasksRequest {
    const NAME: &'static str = "SubmitTasksRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.SubmitTasksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.SubmitTasksRequest".into()
    }
}
/// `SubmitTaskResponse` contains, for each submitted task
/// its submission outcome, encoded as a `RecordBatch`
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SubmitTasksResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for SubmitTasksResponse {
    const NAME: &'static str = "SubmitTasksResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.SubmitTasksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.SubmitTasksResponse".into()
    }
}
/// `QueryTasksRequest` is the request message for querying tasks status
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTasksRequest {
    /// Empty queries for all tasks if the server allows it.
    #[prost(message, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::TaskId>,
}
impl ::prost::Name for QueryTasksRequest {
    const NAME: &'static str = "QueryTasksRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryTasksRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryTasksRequest".into()
    }
}
/// `QueryTasksResponse` is the response message for querying tasks status
/// encoded as a record batch
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTasksResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for QueryTasksResponse {
    const NAME: &'static str = "QueryTasksResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryTasksResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryTasksResponse".into()
    }
}
/// `QueryTasksOnCompletionRequest` is the request message for querying tasks status.
/// This is close-to-a-copy of `QueryTasksRequest`, with the addition of a timeout.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTasksOnCompletionRequest {
    /// Empty queries for all tasks if the server allows it.
    #[prost(message, repeated, tag = "1")]
    pub ids: ::prost::alloc::vec::Vec<super::super::common::v1alpha1::TaskId>,
    /// Time limit for the server to wait for task completion.
    /// The actual maximum time may be arbitrarily capped by the server.
    #[prost(message, optional, tag = "2")]
    pub timeout: ::core::option::Option<::prost_types::Duration>,
}
impl ::prost::Name for QueryTasksOnCompletionRequest {
    const NAME: &'static str = "QueryTasksOnCompletionRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryTasksOnCompletionRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryTasksOnCompletionRequest".into()
    }
}
/// `QueryTaskOnCompletionResponse` is the response message for querying tasks status
/// encoded as a record batch. This is a copy of `QueryTasksResponse`.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct QueryTasksOnCompletionResponse {
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for QueryTasksOnCompletionResponse {
    const NAME: &'static str = "QueryTasksOnCompletionResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.QueryTasksOnCompletionResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.QueryTasksOnCompletionResponse".into()
    }
}
/// `FetchTaskOutputRequest` is the request message for fetching task output
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchTaskOutputRequest {
    /// Unique identifier for the task
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::TaskId>,
}
impl ::prost::Name for FetchTaskOutputRequest {
    const NAME: &'static str = "FetchTaskOutputRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.FetchTaskOutputRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.FetchTaskOutputRequest".into()
    }
}
/// / `FetchTaskOutputResponse` is the response message for fetching task output
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FetchTaskOutputResponse {
    /// The output of the task, encoded as a record batch
    #[prost(message, optional, tag = "1")]
    pub data: ::core::option::Option<super::super::common::v1alpha1::DataframePart>,
}
impl ::prost::Name for FetchTaskOutputResponse {
    const NAME: &'static str = "FetchTaskOutputResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.FetchTaskOutputResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.FetchTaskOutputResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindEntriesRequest {
    #[prost(message, optional, tag = "1")]
    pub filter: ::core::option::Option<EntryFilter>,
}
impl ::prost::Name for FindEntriesRequest {
    const NAME: &'static str = "FindEntriesRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.FindEntriesRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.FindEntriesRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FindEntriesResponse {
    #[prost(message, repeated, tag = "1")]
    pub entries: ::prost::alloc::vec::Vec<EntryDetails>,
}
impl ::prost::Name for FindEntriesResponse {
    const NAME: &'static str = "FindEntriesResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.FindEntriesResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.FindEntriesResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteEntryRequest {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for DeleteEntryRequest {
    const NAME: &'static str = "DeleteEntryRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DeleteEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DeleteEntryRequest".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct DeleteEntryResponse {}
impl ::prost::Name for DeleteEntryResponse {
    const NAME: &'static str = "DeleteEntryResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DeleteEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DeleteEntryResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEntryRequest {
    /// The entry to modify.
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// The new values for updatable fields.
    #[prost(message, optional, tag = "2")]
    pub entry_details_update: ::core::option::Option<EntryDetailsUpdate>,
}
impl ::prost::Name for UpdateEntryRequest {
    const NAME: &'static str = "UpdateEntryRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.UpdateEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.UpdateEntryRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateEntryResponse {
    /// The updated entry details
    #[prost(message, optional, tag = "1")]
    pub entry_details: ::core::option::Option<EntryDetails>,
}
impl ::prost::Name for UpdateEntryResponse {
    const NAME: &'static str = "UpdateEntryResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.UpdateEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.UpdateEntryResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDatasetEntryRequest {
    /// Name of the dataset entry to create.
    ///
    /// The name should be a short human-readable string. It must be unique within all entries in the catalog. If an entry
    /// with the same name already exists, the request will fail.
    #[prost(string, optional, tag = "1")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// If specified, create the entry using this specific ID. Use at your own risk.
    #[prost(message, optional, tag = "2")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for CreateDatasetEntryRequest {
    const NAME: &'static str = "CreateDatasetEntryRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.CreateDatasetEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.CreateDatasetEntryRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct CreateDatasetEntryResponse {
    #[prost(message, optional, tag = "1")]
    pub dataset: ::core::option::Option<DatasetEntry>,
}
impl ::prost::Name for CreateDatasetEntryResponse {
    const NAME: &'static str = "CreateDatasetEntryResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.CreateDatasetEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.CreateDatasetEntryResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadDatasetEntryRequest {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for ReadDatasetEntryRequest {
    const NAME: &'static str = "ReadDatasetEntryRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ReadDatasetEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ReadDatasetEntryRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadDatasetEntryResponse {
    #[prost(message, optional, tag = "1")]
    pub dataset: ::core::option::Option<DatasetEntry>,
}
impl ::prost::Name for ReadDatasetEntryResponse {
    const NAME: &'static str = "ReadDatasetEntryResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ReadDatasetEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ReadDatasetEntryResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDatasetEntryRequest {
    /// The dataset to modify.
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// The new values.
    #[prost(message, optional, tag = "2")]
    pub dataset_details: ::core::option::Option<DatasetDetails>,
}
impl ::prost::Name for UpdateDatasetEntryRequest {
    const NAME: &'static str = "UpdateDatasetEntryRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.UpdateDatasetEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.UpdateDatasetEntryRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateDatasetEntryResponse {
    /// The updated dataset entry
    #[prost(message, optional, tag = "1")]
    pub dataset: ::core::option::Option<DatasetEntry>,
}
impl ::prost::Name for UpdateDatasetEntryResponse {
    const NAME: &'static str = "UpdateDatasetEntryResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.UpdateDatasetEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.UpdateDatasetEntryResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterTableRequest {
    /// Name of the table entry to create.
    ///
    /// The name should be a short human-readable string. It must be unique within all entries in the catalog. If an entry
    /// with the same name already exists, the request will fail.
    #[prost(string, tag = "1")]
    pub name: ::prost::alloc::string::String,
    /// Information about the table to register.
    ///
    /// This must be encoded message of one one of the following supported types:
    /// - LanceTable
    #[prost(message, optional, tag = "2")]
    pub provider_details: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for RegisterTableRequest {
    const NAME: &'static str = "RegisterTableRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.RegisterTableRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.RegisterTableRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct RegisterTableResponse {
    /// Details about the table that was created and registered.
    #[prost(message, optional, tag = "1")]
    pub table_entry: ::core::option::Option<TableEntry>,
}
impl ::prost::Name for RegisterTableResponse {
    const NAME: &'static str = "RegisterTableResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.RegisterTableResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.RegisterTableResponse".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct ReadTableEntryRequest {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
}
impl ::prost::Name for ReadTableEntryRequest {
    const NAME: &'static str = "ReadTableEntryRequest";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ReadTableEntryRequest".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ReadTableEntryRequest".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ReadTableEntryResponse {
    #[prost(message, optional, tag = "1")]
    pub table: ::core::option::Option<TableEntry>,
}
impl ::prost::Name for ReadTableEntryResponse {
    const NAME: &'static str = "ReadTableEntryResponse";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.ReadTableEntryResponse".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.ReadTableEntryResponse".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntryFilter {
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(enumeration = "EntryKind", optional, tag = "3")]
    pub entry_kind: ::core::option::Option<i32>,
}
impl ::prost::Name for EntryFilter {
    const NAME: &'static str = "EntryFilter";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.EntryFilter".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.EntryFilter".into()
    }
}
/// Minimal info about an Entry for high-level catalog summary
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntryDetails {
    /// The EntryId is immutable
    #[prost(message, optional, tag = "1")]
    pub id: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// The name of this entry.
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
    /// The kind of entry
    #[prost(enumeration = "EntryKind", tag = "3")]
    pub entry_kind: i32,
    #[prost(message, optional, tag = "4")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "5")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
}
impl ::prost::Name for EntryDetails {
    const NAME: &'static str = "EntryDetails";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.EntryDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.EntryDetails".into()
    }
}
/// Updatable fields of an Entry
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct EntryDetailsUpdate {
    /// The name of this entry.
    #[prost(string, optional, tag = "2")]
    pub name: ::core::option::Option<::prost::alloc::string::String>,
}
impl ::prost::Name for EntryDetailsUpdate {
    const NAME: &'static str = "EntryDetailsUpdate";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.EntryDetailsUpdate".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.EntryDetailsUpdate".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetDetails {
    /// The blueprint dataset associated with this dataset (if any).
    #[prost(message, optional, tag = "3")]
    pub blueprint_dataset: ::core::option::Option<super::super::common::v1alpha1::EntryId>,
    /// The partition of the blueprint dataset corresponding to the default blueprint (if any).
    #[prost(message, optional, tag = "4")]
    pub default_blueprint: ::core::option::Option<super::super::common::v1alpha1::PartitionId>,
}
impl ::prost::Name for DatasetDetails {
    const NAME: &'static str = "DatasetDetails";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DatasetDetails".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DatasetDetails".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DatasetEntry {
    #[prost(message, optional, tag = "1")]
    pub details: ::core::option::Option<EntryDetails>,
    /// Dataset-specific information, may be update with `UpdateDatasetEntry`
    #[prost(message, optional, tag = "4")]
    pub dataset_details: ::core::option::Option<DatasetDetails>,
    /// Read-only
    #[prost(message, optional, tag = "2")]
    pub dataset_handle: ::core::option::Option<super::super::common::v1alpha1::DatasetHandle>,
}
impl ::prost::Name for DatasetEntry {
    const NAME: &'static str = "DatasetEntry";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.DatasetEntry".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.DatasetEntry".into()
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TableEntry {
    #[prost(message, optional, tag = "1")]
    pub details: ::core::option::Option<EntryDetails>,
    /// Details specific to the table-provider
    #[prost(message, optional, tag = "3")]
    pub provider_details: ::core::option::Option<::prost_types::Any>,
}
impl ::prost::Name for TableEntry {
    const NAME: &'static str = "TableEntry";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.TableEntry".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.TableEntry".into()
    }
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct SystemTable {
    #[prost(enumeration = "SystemTableKind", tag = "1")]
    pub kind: i32,
}
impl ::prost::Name for SystemTable {
    const NAME: &'static str = "SystemTable";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.SystemTable".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.SystemTable".into()
    }
}
/// A foreign table stored as a Lance table.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct LanceTable {
    /// The URL of the Lance table.
    #[prost(string, tag = "1")]
    pub table_url: ::prost::alloc::string::String,
}
impl ::prost::Name for LanceTable {
    const NAME: &'static str = "LanceTable";
    const PACKAGE: &'static str = "rerun.cloud.v1alpha1";
    fn full_name() -> ::prost::alloc::string::String {
        "rerun.cloud.v1alpha1.LanceTable".into()
    }
    fn type_url() -> ::prost::alloc::string::String {
        "/rerun.cloud.v1alpha1.LanceTable".into()
    }
}
/// Error codes for application level errors
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ErrorCode {
    /// unused
    Unspecified = 0,
    /// object store access error
    ObjectStoreError = 1,
    /// metadata database access error
    MetadataDbError = 2,
    /// Encoding / decoding error
    CodecError = 3,
}
impl ErrorCode {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ERROR_CODE_UNSPECIFIED",
            Self::ObjectStoreError => "ERROR_CODE_OBJECT_STORE_ERROR",
            Self::MetadataDbError => "ERROR_CODE_METADATA_DB_ERROR",
            Self::CodecError => "ERROR_CODE_CODEC_ERROR",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ERROR_CODE_UNSPECIFIED" => Some(Self::Unspecified),
            "ERROR_CODE_OBJECT_STORE_ERROR" => Some(Self::ObjectStoreError),
            "ERROR_CODE_METADATA_DB_ERROR" => Some(Self::MetadataDbError),
            "ERROR_CODE_CODEC_ERROR" => Some(Self::CodecError),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum DataSourceKind {
    Unspecified = 0,
    Rrd = 1,
}
impl DataSourceKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "DATA_SOURCE_KIND_UNSPECIFIED",
            Self::Rrd => "DATA_SOURCE_KIND_RRD",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "DATA_SOURCE_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "DATA_SOURCE_KIND_RRD" => Some(Self::Rrd),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum VectorDistanceMetric {
    Unspecified = 0,
    L2 = 1,
    Cosine = 2,
    Dot = 3,
    Hamming = 4,
}
impl VectorDistanceMetric {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "VECTOR_DISTANCE_METRIC_UNSPECIFIED",
            Self::L2 => "VECTOR_DISTANCE_METRIC_L2",
            Self::Cosine => "VECTOR_DISTANCE_METRIC_COSINE",
            Self::Dot => "VECTOR_DISTANCE_METRIC_DOT",
            Self::Hamming => "VECTOR_DISTANCE_METRIC_HAMMING",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "VECTOR_DISTANCE_METRIC_UNSPECIFIED" => Some(Self::Unspecified),
            "VECTOR_DISTANCE_METRIC_L2" => Some(Self::L2),
            "VECTOR_DISTANCE_METRIC_COSINE" => Some(Self::Cosine),
            "VECTOR_DISTANCE_METRIC_DOT" => Some(Self::Dot),
            "VECTOR_DISTANCE_METRIC_HAMMING" => Some(Self::Hamming),
            _ => None,
        }
    }
}
/// What type of entry. This has strong implication on which APIs are available for this entry.
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum EntryKind {
    /// Always reserve unspecified as default value
    Unspecified = 0,
    /// Order as TYPE, TYPE_VIEW so things stay consistent as we introduce new types.
    Dataset = 1,
    DatasetView = 2,
    Table = 3,
    TableView = 4,
    BlueprintDataset = 5,
}
impl EntryKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ENTRY_KIND_UNSPECIFIED",
            Self::Dataset => "ENTRY_KIND_DATASET",
            Self::DatasetView => "ENTRY_KIND_DATASET_VIEW",
            Self::Table => "ENTRY_KIND_TABLE",
            Self::TableView => "ENTRY_KIND_TABLE_VIEW",
            Self::BlueprintDataset => "ENTRY_KIND_BLUEPRINT_DATASET",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ENTRY_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "ENTRY_KIND_DATASET" => Some(Self::Dataset),
            "ENTRY_KIND_DATASET_VIEW" => Some(Self::DatasetView),
            "ENTRY_KIND_TABLE" => Some(Self::Table),
            "ENTRY_KIND_TABLE_VIEW" => Some(Self::TableView),
            "ENTRY_KIND_BLUEPRINT_DATASET" => Some(Self::BlueprintDataset),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum SystemTableKind {
    /// Always reserve unspecified as default value
    Unspecified = 0,
    /// Not used yet
    Namespaces = 1,
    /// All of the entries in the associated namespace
    Entries = 2,
}
impl SystemTableKind {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "SYSTEM_TABLE_KIND_UNSPECIFIED",
            Self::Namespaces => "SYSTEM_TABLE_KIND_NAMESPACES",
            Self::Entries => "SYSTEM_TABLE_KIND_ENTRIES",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "SYSTEM_TABLE_KIND_UNSPECIFIED" => Some(Self::Unspecified),
            "SYSTEM_TABLE_KIND_NAMESPACES" => Some(Self::Namespaces),
            "SYSTEM_TABLE_KIND_ENTRIES" => Some(Self::Entries),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod rerun_cloud_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::http::Uri;
    use tonic::codegen::*;
    /// The Rerun Cloud public API.
    #[derive(Debug, Clone)]
    pub struct RerunCloudServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl<T> RerunCloudServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> RerunCloudServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                    http::Request<tonic::body::Body>,
                    Response = http::Response<
                        <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                    >,
                >,
            <T as tonic::codegen::Service<http::Request<tonic::body::Body>>>::Error:
                Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            RerunCloudServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        pub async fn version(
            &mut self,
            request: impl tonic::IntoRequest<super::VersionRequest>,
        ) -> std::result::Result<tonic::Response<super::VersionResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/Version",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "Version",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn find_entries(
            &mut self,
            request: impl tonic::IntoRequest<super::FindEntriesRequest>,
        ) -> std::result::Result<tonic::Response<super::FindEntriesResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/FindEntries",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "FindEntries",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn delete_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::DeleteEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/DeleteEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "DeleteEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/UpdateEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "UpdateEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn create_dataset_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateDatasetEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateDatasetEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/CreateDatasetEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "CreateDatasetEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_dataset_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadDatasetEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::ReadDatasetEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/ReadDatasetEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "ReadDatasetEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn update_dataset_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateDatasetEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateDatasetEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/UpdateDatasetEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "UpdateDatasetEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn read_table_entry(
            &mut self,
            request: impl tonic::IntoRequest<super::ReadTableEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::ReadTableEntryResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/ReadTableEntry",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "ReadTableEntry",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Register new partitions with the Dataset
        pub async fn register_with_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterWithDatasetRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterWithDatasetResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/RegisterWithDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "RegisterWithDataset",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Write chunks to one or more partitions.
        ///
        /// The partition ID for each individual chunk is extracted from their metadata (`rerun.partition_id`).
        ///
        /// The destination dataset must be provided in the `x-rerun-dataset-id` header.
        pub async fn write_chunks(
            &mut self,
            request: impl tonic::IntoStreamingRequest<Message = super::WriteChunksRequest>,
        ) -> std::result::Result<tonic::Response<super::WriteChunksResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/WriteChunks",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "WriteChunks",
            ));
            self.inner.client_streaming(req, path, codec).await
        }
        /// Returns the schema of the partition table (i.e. the dataset manifest) itself, *not* the underlying dataset.
        ///
        /// * To inspect the data of the partition table, use `ScanPartitionTable`.
        /// * To retrieve the schema of the underlying dataset, use `GetDatasetSchema` instead.
        pub async fn get_partition_table_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetPartitionTableSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPartitionTableSchemaResponse>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/GetPartitionTableSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "GetPartitionTableSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Inspect the contents of the partition table (i.e. the dataset manifest).
        ///
        /// The returned data will follow the schema specified by `GetPartitionTableSchema`.
        pub async fn scan_partition_table(
            &mut self,
            request: impl tonic::IntoRequest<super::ScanPartitionTableRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ScanPartitionTableResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/ScanPartitionTable",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "ScanPartitionTable",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Returns the schema of the dataset.
        ///
        /// This is the union of all the schemas from all the underlying partitions. It will contain all the indexes,
        /// entities and components present in the dataset.
        pub async fn get_dataset_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetDatasetSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDatasetSchemaResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/GetDatasetSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "GetDatasetSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Creates a custom index for a specific column (vector search, full-text search, etc).
        pub async fn create_index(
            &mut self,
            request: impl tonic::IntoRequest<super::CreateIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateIndexResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/CreateIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "CreateIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Recreate an index with the same configuration but (potentially) new data.
        pub async fn re_index(
            &mut self,
            request: impl tonic::IntoRequest<super::ReIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::ReIndexResponse>, tonic::Status> {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/ReIndex",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "ReIndex",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Search a previously created index.
        pub async fn search_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::SearchDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::SearchDatasetResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/SearchDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "SearchDataset",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Perform Rerun-native queries on a dataset, returning the matching chunk IDs.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch the actual chunks themselves, see `GetChunks`.
        ///
        /// Passing chunk IDs to this method effectively acts as a IF_EXIST filter.
        pub async fn query_dataset(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryDatasetRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryDatasetResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/QueryDataset",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "QueryDataset",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Perform Rerun-native queries on a dataset, returning the underlying chunks.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch only the actual chunk IDs rather than the chunks themselves, see `QueryDataset`.
        pub async fn get_chunks(
            &mut self,
            request: impl tonic::IntoRequest<super::GetChunksRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::GetChunksResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/GetChunks",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "GetChunks",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Register a foreign table as a new table entry in the catalog.
        pub async fn register_table(
            &mut self,
            request: impl tonic::IntoRequest<super::RegisterTableRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterTableResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/RegisterTable",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "RegisterTable",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn get_table_schema(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTableSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetTableSchemaResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/GetTableSchema",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "GetTableSchema",
            ));
            self.inner.unary(req, path, codec).await
        }
        pub async fn scan_table(
            &mut self,
            request: impl tonic::IntoRequest<super::ScanTableRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::ScanTableResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/ScanTable",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "ScanTable",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Query the status of submitted tasks
        pub async fn query_tasks(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTasksRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryTasksResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/QueryTasks",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "QueryTasks",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Fetch the output of a completed task
        pub async fn fetch_task_output(
            &mut self,
            request: impl tonic::IntoRequest<super::FetchTaskOutputRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchTaskOutputResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/FetchTaskOutput",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "FetchTaskOutput",
            ));
            self.inner.unary(req, path, codec).await
        }
        /// Query the status of submitted tasks as soon as they are no longer pending
        pub async fn query_tasks_on_completion(
            &mut self,
            request: impl tonic::IntoRequest<super::QueryTasksOnCompletionRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::QueryTasksOnCompletionResponse>>,
            tonic::Status,
        > {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/QueryTasksOnCompletion",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "QueryTasksOnCompletion",
            ));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Rerun Manifests maintenance operations: scalar index creation, compaction, etc.
        pub async fn do_maintenance(
            &mut self,
            request: impl tonic::IntoRequest<super::DoMaintenanceRequest>,
        ) -> std::result::Result<tonic::Response<super::DoMaintenanceResponse>, tonic::Status>
        {
            self.inner.ready().await.map_err(|e| {
                tonic::Status::unknown(format!("Service was not ready: {}", e.into()))
            })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/rerun.cloud.v1alpha1.RerunCloudService/DoMaintenance",
            );
            let mut req = request.into_request();
            req.extensions_mut().insert(GrpcMethod::new(
                "rerun.cloud.v1alpha1.RerunCloudService",
                "DoMaintenance",
            ));
            self.inner.unary(req, path, codec).await
        }
    }
}
/// Generated server implementations.
pub mod rerun_cloud_service_server {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value
    )]
    use tonic::codegen::*;
    /// Generated trait containing gRPC methods that should be implemented for use with RerunCloudServiceServer.
    #[async_trait]
    pub trait RerunCloudService: std::marker::Send + std::marker::Sync + 'static {
        async fn version(
            &self,
            request: tonic::Request<super::VersionRequest>,
        ) -> std::result::Result<tonic::Response<super::VersionResponse>, tonic::Status>;
        async fn find_entries(
            &self,
            request: tonic::Request<super::FindEntriesRequest>,
        ) -> std::result::Result<tonic::Response<super::FindEntriesResponse>, tonic::Status>;
        async fn delete_entry(
            &self,
            request: tonic::Request<super::DeleteEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::DeleteEntryResponse>, tonic::Status>;
        async fn update_entry(
            &self,
            request: tonic::Request<super::UpdateEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateEntryResponse>, tonic::Status>;
        async fn create_dataset_entry(
            &self,
            request: tonic::Request<super::CreateDatasetEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateDatasetEntryResponse>, tonic::Status>;
        async fn read_dataset_entry(
            &self,
            request: tonic::Request<super::ReadDatasetEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::ReadDatasetEntryResponse>, tonic::Status>;
        async fn update_dataset_entry(
            &self,
            request: tonic::Request<super::UpdateDatasetEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::UpdateDatasetEntryResponse>, tonic::Status>;
        async fn read_table_entry(
            &self,
            request: tonic::Request<super::ReadTableEntryRequest>,
        ) -> std::result::Result<tonic::Response<super::ReadTableEntryResponse>, tonic::Status>;
        /// Register new partitions with the Dataset
        async fn register_with_dataset(
            &self,
            request: tonic::Request<super::RegisterWithDatasetRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterWithDatasetResponse>, tonic::Status>;
        /// Write chunks to one or more partitions.
        ///
        /// The partition ID for each individual chunk is extracted from their metadata (`rerun.partition_id`).
        ///
        /// The destination dataset must be provided in the `x-rerun-dataset-id` header.
        async fn write_chunks(
            &self,
            request: tonic::Request<tonic::Streaming<super::WriteChunksRequest>>,
        ) -> std::result::Result<tonic::Response<super::WriteChunksResponse>, tonic::Status>;
        /// Returns the schema of the partition table (i.e. the dataset manifest) itself, *not* the underlying dataset.
        ///
        /// * To inspect the data of the partition table, use `ScanPartitionTable`.
        /// * To retrieve the schema of the underlying dataset, use `GetDatasetSchema` instead.
        async fn get_partition_table_schema(
            &self,
            request: tonic::Request<super::GetPartitionTableSchemaRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetPartitionTableSchemaResponse>,
            tonic::Status,
        >;
        /// Server streaming response type for the ScanPartitionTable method.
        type ScanPartitionTableStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ScanPartitionTableResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Inspect the contents of the partition table (i.e. the dataset manifest).
        ///
        /// The returned data will follow the schema specified by `GetPartitionTableSchema`.
        async fn scan_partition_table(
            &self,
            request: tonic::Request<super::ScanPartitionTableRequest>,
        ) -> std::result::Result<tonic::Response<Self::ScanPartitionTableStream>, tonic::Status>;
        /// Returns the schema of the dataset.
        ///
        /// This is the union of all the schemas from all the underlying partitions. It will contain all the indexes,
        /// entities and components present in the dataset.
        async fn get_dataset_schema(
            &self,
            request: tonic::Request<super::GetDatasetSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetDatasetSchemaResponse>, tonic::Status>;
        /// Creates a custom index for a specific column (vector search, full-text search, etc).
        async fn create_index(
            &self,
            request: tonic::Request<super::CreateIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::CreateIndexResponse>, tonic::Status>;
        /// Recreate an index with the same configuration but (potentially) new data.
        async fn re_index(
            &self,
            request: tonic::Request<super::ReIndexRequest>,
        ) -> std::result::Result<tonic::Response<super::ReIndexResponse>, tonic::Status>;
        /// Server streaming response type for the SearchDataset method.
        type SearchDatasetStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::SearchDatasetResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Search a previously created index.
        async fn search_dataset(
            &self,
            request: tonic::Request<super::SearchDatasetRequest>,
        ) -> std::result::Result<tonic::Response<Self::SearchDatasetStream>, tonic::Status>;
        /// Server streaming response type for the QueryDataset method.
        type QueryDatasetStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryDatasetResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Perform Rerun-native queries on a dataset, returning the matching chunk IDs.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch the actual chunks themselves, see `GetChunks`.
        ///
        /// Passing chunk IDs to this method effectively acts as a IF_EXIST filter.
        async fn query_dataset(
            &self,
            request: tonic::Request<super::QueryDatasetRequest>,
        ) -> std::result::Result<tonic::Response<Self::QueryDatasetStream>, tonic::Status>;
        /// Server streaming response type for the GetChunks method.
        type GetChunksStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::GetChunksResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Perform Rerun-native queries on a dataset, returning the underlying chunks.
        ///
        /// These Rerun-native queries include:
        /// * Filtering by specific partition and chunk IDs.
        /// * Latest-at, range and dataframe queries.
        /// * Arbitrary Lance filters.
        ///
        /// To fetch only the actual chunk IDs rather than the chunks themselves, see `QueryDataset`.
        async fn get_chunks(
            &self,
            request: tonic::Request<super::GetChunksRequest>,
        ) -> std::result::Result<tonic::Response<Self::GetChunksStream>, tonic::Status>;
        /// Register a foreign table as a new table entry in the catalog.
        async fn register_table(
            &self,
            request: tonic::Request<super::RegisterTableRequest>,
        ) -> std::result::Result<tonic::Response<super::RegisterTableResponse>, tonic::Status>;
        async fn get_table_schema(
            &self,
            request: tonic::Request<super::GetTableSchemaRequest>,
        ) -> std::result::Result<tonic::Response<super::GetTableSchemaResponse>, tonic::Status>;
        /// Server streaming response type for the ScanTable method.
        type ScanTableStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::ScanTableResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        async fn scan_table(
            &self,
            request: tonic::Request<super::ScanTableRequest>,
        ) -> std::result::Result<tonic::Response<Self::ScanTableStream>, tonic::Status>;
        /// Query the status of submitted tasks
        async fn query_tasks(
            &self,
            request: tonic::Request<super::QueryTasksRequest>,
        ) -> std::result::Result<tonic::Response<super::QueryTasksResponse>, tonic::Status>;
        /// Fetch the output of a completed task
        async fn fetch_task_output(
            &self,
            request: tonic::Request<super::FetchTaskOutputRequest>,
        ) -> std::result::Result<tonic::Response<super::FetchTaskOutputResponse>, tonic::Status>;
        /// Server streaming response type for the QueryTasksOnCompletion method.
        type QueryTasksOnCompletionStream: tonic::codegen::tokio_stream::Stream<
                Item = std::result::Result<super::QueryTasksOnCompletionResponse, tonic::Status>,
            > + std::marker::Send
            + 'static;
        /// Query the status of submitted tasks as soon as they are no longer pending
        async fn query_tasks_on_completion(
            &self,
            request: tonic::Request<super::QueryTasksOnCompletionRequest>,
        ) -> std::result::Result<tonic::Response<Self::QueryTasksOnCompletionStream>, tonic::Status>;
        /// Rerun Manifests maintenance operations: scalar index creation, compaction, etc.
        async fn do_maintenance(
            &self,
            request: tonic::Request<super::DoMaintenanceRequest>,
        ) -> std::result::Result<tonic::Response<super::DoMaintenanceResponse>, tonic::Status>;
    }
    /// The Rerun Cloud public API.
    #[derive(Debug)]
    pub struct RerunCloudServiceServer<T> {
        inner: Arc<T>,
        accept_compression_encodings: EnabledCompressionEncodings,
        send_compression_encodings: EnabledCompressionEncodings,
        max_decoding_message_size: Option<usize>,
        max_encoding_message_size: Option<usize>,
    }
    impl<T> RerunCloudServiceServer<T> {
        pub fn new(inner: T) -> Self {
            Self::from_arc(Arc::new(inner))
        }
        pub fn from_arc(inner: Arc<T>) -> Self {
            Self {
                inner,
                accept_compression_encodings: Default::default(),
                send_compression_encodings: Default::default(),
                max_decoding_message_size: None,
                max_encoding_message_size: None,
            }
        }
        pub fn with_interceptor<F>(inner: T, interceptor: F) -> InterceptedService<Self, F>
        where
            F: tonic::service::Interceptor,
        {
            InterceptedService::new(Self::new(inner), interceptor)
        }
        /// Enable decompressing requests with the given encoding.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.accept_compression_encodings.enable(encoding);
            self
        }
        /// Compress responses with the given encoding, if the client supports it.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.send_compression_encodings.enable(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.max_decoding_message_size = Some(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.max_encoding_message_size = Some(limit);
            self
        }
    }
    impl<T, B> tonic::codegen::Service<http::Request<B>> for RerunCloudServiceServer<T>
    where
        T: RerunCloudService,
        B: Body + std::marker::Send + 'static,
        B::Error: Into<StdError> + std::marker::Send + 'static,
    {
        type Response = http::Response<tonic::body::Body>;
        type Error = std::convert::Infallible;
        type Future = BoxFuture<Self::Response, Self::Error>;
        fn poll_ready(
            &mut self,
            _cx: &mut Context<'_>,
        ) -> Poll<std::result::Result<(), Self::Error>> {
            Poll::Ready(Ok(()))
        }
        fn call(&mut self, req: http::Request<B>) -> Self::Future {
            match req.uri().path() {
                "/rerun.cloud.v1alpha1.RerunCloudService/Version" => {
                    #[allow(non_camel_case_types)]
                    struct VersionSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService> tonic::server::UnaryService<super::VersionRequest> for VersionSvc<T> {
                        type Response = super::VersionResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::VersionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::version(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = VersionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/FindEntries" => {
                    #[allow(non_camel_case_types)]
                    struct FindEntriesSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::FindEntriesRequest>
                        for FindEntriesSvc<T>
                    {
                        type Response = super::FindEntriesResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FindEntriesRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::find_entries(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FindEntriesSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/DeleteEntry" => {
                    #[allow(non_camel_case_types)]
                    struct DeleteEntrySvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::DeleteEntryRequest>
                        for DeleteEntrySvc<T>
                    {
                        type Response = super::DeleteEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DeleteEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::delete_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DeleteEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/UpdateEntry" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateEntrySvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::UpdateEntryRequest>
                        for UpdateEntrySvc<T>
                    {
                        type Response = super::UpdateEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::update_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/CreateDatasetEntry" => {
                    #[allow(non_camel_case_types)]
                    struct CreateDatasetEntrySvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::CreateDatasetEntryRequest>
                        for CreateDatasetEntrySvc<T>
                    {
                        type Response = super::CreateDatasetEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateDatasetEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::create_dataset_entry(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateDatasetEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/ReadDatasetEntry" => {
                    #[allow(non_camel_case_types)]
                    struct ReadDatasetEntrySvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::ReadDatasetEntryRequest>
                        for ReadDatasetEntrySvc<T>
                    {
                        type Response = super::ReadDatasetEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadDatasetEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::read_dataset_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadDatasetEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/UpdateDatasetEntry" => {
                    #[allow(non_camel_case_types)]
                    struct UpdateDatasetEntrySvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::UpdateDatasetEntryRequest>
                        for UpdateDatasetEntrySvc<T>
                    {
                        type Response = super::UpdateDatasetEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::UpdateDatasetEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::update_dataset_entry(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = UpdateDatasetEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/ReadTableEntry" => {
                    #[allow(non_camel_case_types)]
                    struct ReadTableEntrySvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::ReadTableEntryRequest>
                        for ReadTableEntrySvc<T>
                    {
                        type Response = super::ReadTableEntryResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReadTableEntryRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::read_table_entry(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReadTableEntrySvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/RegisterWithDataset" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterWithDatasetSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::RegisterWithDatasetRequest>
                        for RegisterWithDatasetSvc<T>
                    {
                        type Response = super::RegisterWithDatasetResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterWithDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::register_with_dataset(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterWithDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/WriteChunks" => {
                    #[allow(non_camel_case_types)]
                    struct WriteChunksSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ClientStreamingService<super::WriteChunksRequest>
                        for WriteChunksSvc<T>
                    {
                        type Response = super::WriteChunksResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<tonic::Streaming<super::WriteChunksRequest>>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::write_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = WriteChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.client_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/GetPartitionTableSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetPartitionTableSchemaSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::GetPartitionTableSchemaRequest>
                        for GetPartitionTableSchemaSvc<T>
                    {
                        type Response = super::GetPartitionTableSchemaResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetPartitionTableSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::get_partition_table_schema(
                                    &inner, request,
                                )
                                .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetPartitionTableSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/ScanPartitionTable" => {
                    #[allow(non_camel_case_types)]
                    struct ScanPartitionTableSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ServerStreamingService<super::ScanPartitionTableRequest>
                        for ScanPartitionTableSvc<T>
                    {
                        type Response = super::ScanPartitionTableResponse;
                        type ResponseStream = T::ScanPartitionTableStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScanPartitionTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::scan_partition_table(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ScanPartitionTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/GetDatasetSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetDatasetSchemaSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::GetDatasetSchemaRequest>
                        for GetDatasetSchemaSvc<T>
                    {
                        type Response = super::GetDatasetSchemaResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetDatasetSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::get_dataset_schema(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetDatasetSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/CreateIndex" => {
                    #[allow(non_camel_case_types)]
                    struct CreateIndexSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::CreateIndexRequest>
                        for CreateIndexSvc<T>
                    {
                        type Response = super::CreateIndexResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::CreateIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::create_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = CreateIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/ReIndex" => {
                    #[allow(non_camel_case_types)]
                    struct ReIndexSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService> tonic::server::UnaryService<super::ReIndexRequest> for ReIndexSvc<T> {
                        type Response = super::ReIndexResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ReIndexRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::re_index(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ReIndexSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/SearchDataset" => {
                    #[allow(non_camel_case_types)]
                    struct SearchDatasetSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ServerStreamingService<super::SearchDatasetRequest>
                        for SearchDatasetSvc<T>
                    {
                        type Response = super::SearchDatasetResponse;
                        type ResponseStream = T::SearchDatasetStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::SearchDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::search_dataset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = SearchDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/QueryDataset" => {
                    #[allow(non_camel_case_types)]
                    struct QueryDatasetSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ServerStreamingService<super::QueryDatasetRequest>
                        for QueryDatasetSvc<T>
                    {
                        type Response = super::QueryDatasetResponse;
                        type ResponseStream = T::QueryDatasetStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryDatasetRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::query_dataset(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryDatasetSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/GetChunks" => {
                    #[allow(non_camel_case_types)]
                    struct GetChunksSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ServerStreamingService<super::GetChunksRequest>
                        for GetChunksSvc<T>
                    {
                        type Response = super::GetChunksResponse;
                        type ResponseStream = T::GetChunksStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetChunksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::get_chunks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetChunksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/RegisterTable" => {
                    #[allow(non_camel_case_types)]
                    struct RegisterTableSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::RegisterTableRequest>
                        for RegisterTableSvc<T>
                    {
                        type Response = super::RegisterTableResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::RegisterTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::register_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = RegisterTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/GetTableSchema" => {
                    #[allow(non_camel_case_types)]
                    struct GetTableSchemaSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::GetTableSchemaRequest>
                        for GetTableSchemaSvc<T>
                    {
                        type Response = super::GetTableSchemaResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::GetTableSchemaRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::get_table_schema(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = GetTableSchemaSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/ScanTable" => {
                    #[allow(non_camel_case_types)]
                    struct ScanTableSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ServerStreamingService<super::ScanTableRequest>
                        for ScanTableSvc<T>
                    {
                        type Response = super::ScanTableResponse;
                        type ResponseStream = T::ScanTableStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::ScanTableRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::scan_table(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = ScanTableSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/QueryTasks" => {
                    #[allow(non_camel_case_types)]
                    struct QueryTasksSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService> tonic::server::UnaryService<super::QueryTasksRequest>
                        for QueryTasksSvc<T>
                    {
                        type Response = super::QueryTasksResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTasksRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::query_tasks(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryTasksSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/FetchTaskOutput" => {
                    #[allow(non_camel_case_types)]
                    struct FetchTaskOutputSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::FetchTaskOutputRequest>
                        for FetchTaskOutputSvc<T>
                    {
                        type Response = super::FetchTaskOutputResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::FetchTaskOutputRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::fetch_task_output(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = FetchTaskOutputSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/QueryTasksOnCompletion" => {
                    #[allow(non_camel_case_types)]
                    struct QueryTasksOnCompletionSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::ServerStreamingService<super::QueryTasksOnCompletionRequest>
                        for QueryTasksOnCompletionSvc<T>
                    {
                        type Response = super::QueryTasksOnCompletionResponse;
                        type ResponseStream = T::QueryTasksOnCompletionStream;
                        type Future =
                            BoxFuture<tonic::Response<Self::ResponseStream>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::QueryTasksOnCompletionRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::query_tasks_on_completion(&inner, request)
                                    .await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = QueryTasksOnCompletionSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.server_streaming(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                "/rerun.cloud.v1alpha1.RerunCloudService/DoMaintenance" => {
                    #[allow(non_camel_case_types)]
                    struct DoMaintenanceSvc<T: RerunCloudService>(pub Arc<T>);
                    impl<T: RerunCloudService>
                        tonic::server::UnaryService<super::DoMaintenanceRequest>
                        for DoMaintenanceSvc<T>
                    {
                        type Response = super::DoMaintenanceResponse;
                        type Future = BoxFuture<tonic::Response<Self::Response>, tonic::Status>;
                        fn call(
                            &mut self,
                            request: tonic::Request<super::DoMaintenanceRequest>,
                        ) -> Self::Future {
                            let inner = Arc::clone(&self.0);
                            let fut = async move {
                                <T as RerunCloudService>::do_maintenance(&inner, request).await
                            };
                            Box::pin(fut)
                        }
                    }
                    let accept_compression_encodings = self.accept_compression_encodings;
                    let send_compression_encodings = self.send_compression_encodings;
                    let max_decoding_message_size = self.max_decoding_message_size;
                    let max_encoding_message_size = self.max_encoding_message_size;
                    let inner = self.inner.clone();
                    let fut = async move {
                        let method = DoMaintenanceSvc(inner);
                        let codec = tonic::codec::ProstCodec::default();
                        let mut grpc = tonic::server::Grpc::new(codec)
                            .apply_compression_config(
                                accept_compression_encodings,
                                send_compression_encodings,
                            )
                            .apply_max_message_size_config(
                                max_decoding_message_size,
                                max_encoding_message_size,
                            );
                        let res = grpc.unary(method, req).await;
                        Ok(res)
                    };
                    Box::pin(fut)
                }
                _ => Box::pin(async move {
                    let mut response = http::Response::new(tonic::body::Body::default());
                    let headers = response.headers_mut();
                    headers.insert(
                        tonic::Status::GRPC_STATUS,
                        (tonic::Code::Unimplemented as i32).into(),
                    );
                    headers.insert(
                        http::header::CONTENT_TYPE,
                        tonic::metadata::GRPC_CONTENT_TYPE,
                    );
                    Ok(response)
                }),
            }
        }
    }
    impl<T> Clone for RerunCloudServiceServer<T> {
        fn clone(&self) -> Self {
            let inner = self.inner.clone();
            Self {
                inner,
                accept_compression_encodings: self.accept_compression_encodings,
                send_compression_encodings: self.send_compression_encodings,
                max_decoding_message_size: self.max_decoding_message_size,
                max_encoding_message_size: self.max_encoding_message_size,
            }
        }
    }
    /// Generated gRPC service name
    pub const SERVICE_NAME: &str = "rerun.cloud.v1alpha1.RerunCloudService";
    impl<T> tonic::server::NamedService for RerunCloudServiceServer<T> {
        const NAME: &'static str = SERVICE_NAME;
    }
}
