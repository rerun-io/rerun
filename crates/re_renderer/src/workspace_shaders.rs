// This file is autogenerated via build.rs.
// DO NOT EDIT.

#[cfg(all(not(target_arch = "wasm32"), debug_assertions))] // non-wasm + debug build
pub fn workspace_shaders() {}

#[cfg(not(all(not(target_arch = "wasm32"), debug_assertions)))] // otherwise
static ONCE: ::std::sync::atomic::AtomicBool = ::std::sync::atomic::AtomicBool::new(false);

#[cfg(not(all(not(target_arch = "wasm32"), debug_assertions)))] // otherwise
pub fn workspace_shaders() {
    if ONCE.swap(true, ::std::sync::atomic::Ordering::Relaxed) {
        return;
    }

    println!("coucou");

    use crate::file_system::FileSystem as _;
    let fs = crate::MemFileSystem::get();

    {
        let virtpath = ::std::path::Path::new("rerun/crates/re_renderer/shader/a/b/c/colors.wgsl");
        fs.create_file(
            &virtpath,
            include_str!("../shader/a/b/c/colors.wgsl").into(),
        )
        .unwrap();
    }

    {
        let virtpath = ::std::path::Path::new("rerun/crates/re_renderer/shader/frame_uniform.wgsl");
        fs.create_file(
            &virtpath,
            include_str!("../shader/frame_uniform.wgsl").into(),
        )
        .unwrap();
    }

    {
        let virtpath =
            ::std::path::Path::new("rerun/crates/re_renderer/shader/generic_skybox.wgsl");
        fs.create_file(
            &virtpath,
            include_str!("../shader/generic_skybox.wgsl").into(),
        )
        .unwrap();
    }

    {
        let virtpath = ::std::path::Path::new("rerun/crates/re_renderer/shader/test_triangle.wgsl");
        fs.create_file(
            &virtpath,
            include_str!("../shader/test_triangle.wgsl").into(),
        )
        .unwrap();
    }

    {
        let virtpath =
            ::std::path::Path::new("rerun/crates/re_renderer/shader/screen_triangle.wgsl");
        fs.create_file(
            &virtpath,
            include_str!("../shader/screen_triangle.wgsl").into(),
        )
        .unwrap();
    }

    {
        let virtpath = ::std::path::Path::new("rerun/crates/re_renderer/shader/colors.wgsl");
        fs.create_file(&virtpath, include_str!("../shader/colors.wgsl").into())
            .unwrap();
    }

    {
        let virtpath = ::std::path::Path::new("rerun/crates/re_renderer/shader/tonemap.wgsl");
        fs.create_file(&virtpath, include_str!("../shader/tonemap.wgsl").into())
            .unwrap();
    }
}
