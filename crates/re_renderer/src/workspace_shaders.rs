// This file is autogenerated via build.rs.
// DO NOT EDIT.

use std::path::Path;

static ONCE: ::std::sync::atomic::AtomicBool = ::std::sync::atomic::AtomicBool::new(false);

pub fn init() {
    if ONCE.swap(true, ::std::sync::atomic::Ordering::Relaxed) {
        return;
    }

    use crate::file_system::FileSystem as _;
    let fs = crate::MemFileSystem::get();

    {
        let virtpath = Path::new("crates/re_renderer/shader/composite.wgsl");
        let content = include_str!("../shader/composite.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/generic_skybox.wgsl");
        let content = include_str!("../shader/generic_skybox.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/global_bindings.wgsl");
        let content = include_str!("../shader/global_bindings.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/instanced_mesh.wgsl");
        let content = include_str!("../shader/instanced_mesh.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/lines.wgsl");
        let content = include_str!("../shader/lines.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/mesh_vertex.wgsl");
        let content = include_str!("../shader/mesh_vertex.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/point_cloud.wgsl");
        let content = include_str!("../shader/point_cloud.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/rectangle.wgsl");
        let content = include_str!("../shader/rectangle.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/screen_triangle.wgsl");
        let content = include_str!("../shader/screen_triangle.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/test_triangle.wgsl");
        let content = include_str!("../shader/test_triangle.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/types.wgsl");
        let content = include_str!("../shader/types.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/camera.wgsl");
        let content = include_str!("../shader/utils/camera.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/depth_offset.wgsl");
        let content = include_str!("../shader/utils/depth_offset.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/encoding.wgsl");
        let content = include_str!("../shader/utils/encoding.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/flags.wgsl");
        let content = include_str!("../shader/utils/flags.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/quaternion.wgsl");
        let content = include_str!("../shader/utils/quaternion.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/size.wgsl");
        let content = include_str!("../shader/utils/size.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }

    {
        let virtpath = Path::new("crates/re_renderer/shader/utils/srgb.wgsl");
        let content = include_str!("../shader/utils/srgb.wgsl").into();
        fs.create_file(virtpath, content).unwrap();
    }
}
