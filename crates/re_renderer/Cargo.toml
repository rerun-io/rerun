[package]
name = "re_renderer"
authors.workspace = true
description = "A wgpu based renderer for all your visualization needs."
edition.workspace = true
homepage.workspace = true
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true
include = [
  "../../LICENSE-APACHE",
  "../../LICENSE-MIT",
  "**/*.rs",
  "Cargo.toml",
  "shader/*",
]

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]


[features]
default = ["import-obj", "import-gltf"]

## Support for Arrow datatypes for end-to-end zero-copy.
arrow = ["dep:arrow2"]

## Support importing .obj files
import-obj = ["dep:tobj"]

## Support importing .gltf and .glb files
import-gltf = ["dep:gltf"]

## Enable (de)serialization using serde.
serde = ["dep:serde"]

## Render using webgl instead of webgpu on wasm builds.
webgl = ["wgpu/webgl"]

[dependencies]
re_error.workspace = true
re_log.workspace = true
re_tracing.workspace = true

ahash.workspace = true
anyhow.workspace = true
bitflags = "1.3"
bytemuck.workspace = true
clean-path = "0.2"
document-features = "0.2"
ecolor = { workspace = true, features = ["bytemuck"] }
enumset.workspace = true
glam = { workspace = true, features = ["bytemuck"] }
half = { workspace = true, features = ["bytemuck"] }
itertools = { workspace = true }
macaw.workspace = true
never = '0.1'
ordered-float = "3.2"
parking_lot.workspace = true
slotmap.workspace = true
smallvec.workspace = true
static_assertions = "1.1"
thiserror.workspace = true
type-map = "0.5"
wgpu.workspace = true

# optional
arrow2 = { workspace = true, optional = true }
gltf = { workspace = true, optional = true }
serde = { version = "1", features = ["derive"], optional = true }
tobj = { version = "4.0", optional = true }

# native
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
crossbeam.workspace = true
notify = "6.0"
wgpu-core.workspace = true

# For examples:
[dev-dependencies]
image = { workspace = true, default-features = false, features = ["png"] }
log = "0.4"
pollster = "0.3"
rand = "0.8"
web-time.workspace = true
winit = "0.28.1"
zip = { version = "0.6", default-features = false, features = ["deflate"] }

# For tests:
unindent = "0.1"

# native
[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies]
async-executor = "1.0"

# wasm
[target.'cfg(target_arch = "wasm32")'.dev-dependencies]
console_error_panic_hook = "0.1.6"
# required to make rand work on wasm, see https://github.com/rust-random/rand#wasm-support
getrandom = { version = "0.2", features = ["js"] }
wasm-bindgen-futures = "0.4.33"
web-sys = { version = "0.3.61", features = [
  "Location",
  "Blob",
  "RequestInit",
  "RequestMode",
  "Request",
  "Response",
] }


# For build.rs:
[build-dependencies]
anyhow.workspace = true
clean-path = "0.2"
pathdiff = "0.2"
walkdir = "2.0"
