[package]
name = "re_renderer"
authors.workspace = true
description = "A wgpu based renderer for all your visualization needs."
edition.workspace = true
homepage.workspace = true
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true
include = [
  "../../LICENSE-APACHE",
  "../../LICENSE-MIT",
  "**/*.rs",
  "Cargo.toml",
  "shader/*",
]

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]


[features]
default = ["import-obj", "import-gltf"]

## Support for Arrow datatypes for end-to-end zero-copy.
arrow = ["dep:arrow2"]

## Support importing .obj files
import-obj = ["dep:tobj"]

## Support importing .gltf and .glb files
import-gltf = ["dep:gltf"]

## Enable (de)serialization using serde.
serde = ["dep:serde"]

## Render using webgl instead of webgpu on wasm builds.
webgl = ["wgpu/webgl"]

[dependencies]
re_error.workspace = true
re_log.workspace = true
re_tracing.workspace = true

ahash.workspace = true
anyhow.workspace = true
bitflags.workspace = true
bytemuck.workspace = true
clean-path.workspace = true
document-features.workspace = true
ecolor = { workspace = true, features = ["bytemuck"] }
enumset.workspace = true
glam = { workspace = true, features = ["bytemuck"] }
half = { workspace = true, features = ["bytemuck"] }
itertools = { workspace = true }
macaw.workspace = true
never.workspace = true
ordered-float.workspace = true
parking_lot.workspace = true
slotmap.workspace = true
smallvec.workspace = true
static_assertions.workspace = true
thiserror.workspace = true
type-map.workspace = true
wgpu.workspace = true
wgpu-core.workspace = true

# optional
arrow2 = { workspace = true, optional = true }
gltf = { workspace = true, optional = true }
serde = { version = "1", features = ["derive"], optional = true }
tobj = { version = "4.0", optional = true }

# native
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
crossbeam.workspace = true
notify.workspace = true
wgpu-core.workspace = true

# For examples:
[dev-dependencies]
image = { workspace = true, default-features = false, features = ["png"] }
log.workspace = true
pollster.workspace = true
rand = { workspace = true, features = ["std", "std_rng"] }
web-time.workspace = true
winit.workspace = true
zip = { workspace = true, default-features = false, features = ["deflate"] }

# For tests:
unindent.workspace = true


[target.'cfg(not(target_arch = "wasm32"))'.dev-dependencies] # native
async-executor.workspace = true

[target.'cfg(target_arch = "wasm32")'.dev-dependencies] # wasm
console_error_panic_hook.workspace = true
# required to make rand work on wasm, see https://github.com/rust-random/rand#wasm-support
getrandom = { workspace = true, features = ["js"] }
wasm-bindgen-futures.workspace = true
web-sys = { workspace = true, features = [
  "Location",
  "Blob",
  "RequestInit",
  "RequestMode",
  "Request",
  "Response",
] }


# For build.rs:
[build-dependencies]

# Rerun
re_build_tools.workspace = true

# External
anyhow.workspace = true
clean-path.workspace = true
pathdiff.workspace = true
walkdir.workspace = true
