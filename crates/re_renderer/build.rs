//! For any target except native debug builds, this build script will find all .wgsl shader
//! files defined anywhere within our workspace and directly embed those into our
//! `re_renderer` library.
//!
//! At run-time, they will be available through an hermetic virtual filesystem.
//!
//! See `re_renderer/src/workspace_shaders.rs` for the end result.

use std::{path::Path, process::Command};
use walkdir::{DirEntry, WalkDir};

// ---

// Mapping to cargo:rerun-if-changed with glob support
fn rerun_if_changed(path: &str) {
    for path in glob::glob(path).unwrap() {
        println!("cargo:rerun-if-changed={}", path.unwrap().to_string_lossy());
    }
}

// ---

fn main() {
    if std::env::var("CI").is_ok() {
        return; // don't run on CI
    }

    let root_path = Path::new(&std::env::var("CARGO_WORKSPACE_DIR").unwrap()).to_owned();
    let manifest_path = Path::new(&std::env::var("CARGO_MANIFEST_DIR").unwrap()).to_owned();
    let src_path = manifest_path.join("src");
    let file_path = src_path.join("workspace_shaders.rs");

    fn is_wgsl(entry: &DirEntry) -> bool {
        let is_dir = entry.file_type().is_dir();
        let is_wgsl = entry
            .file_name()
            .to_str()
            .map_or(false, |s| s.ends_with(".wgsl"));
        is_dir || is_wgsl
    }

    // The local path prefix that was used to build this workspace.
    // Strip this from local paths to preserve hermeticism.
    let strip_prefix = {
        let mut strip_prefix = root_path.clone();
        strip_prefix.pop();
        strip_prefix
    };

    let mut contents = r#"
        // This file is autogenerated via build.rs.
        // DO NOT EDIT.

        static ONCE: ::std::sync::atomic::AtomicBool = ::std::sync::atomic::AtomicBool::new(false);

        pub fn init() {
            if ONCE.swap(true, ::std::sync::atomic::Ordering::Relaxed) {
                return;
            }

            use crate::file_system::FileSystem as _;
            let fs = crate::MemFileSystem::get();
        "#
    .to_owned();

    let walker = WalkDir::new(root_path).into_iter();
    for entry in walker.filter_entry(is_wgsl) {
        let entry = entry.unwrap();

        if !entry.file_type().is_file() {
            continue;
        }

        rerun_if_changed(entry.path().to_string_lossy().as_ref());

        // The relative path to get from the current shader file to `workspace_shaders.rs`.
        // We must make sure to pass relative paths to `include_str`!
        let relpath = pathdiff::diff_paths(entry.path(), &src_path).unwrap();
        // The hermetic path used in the virtual filesystem at run-time.
        let virtpath = entry.path().strip_prefix(&strip_prefix).unwrap();

        contents += &format!(
            "
            {{
                let virtpath = ::std::path::Path::new({virtpath:?});
                fs.create_file(&virtpath, include_str!({relpath:?}).into()).unwrap();
            }}
            ",
        );
    }

    contents += "}";

    std::fs::write(&file_path, contents).unwrap();

    let output = Command::new(std::env::var("CARGO").unwrap_or_else(|_| "cargo".to_owned()))
        .args(["fmt", "--", file_path.to_string_lossy().as_ref()])
        .output()
        .expect("failed to execute process");

    eprintln!("status: {}", output.status);
    eprintln!("stderr: {}", String::from_utf8_lossy(&output.stderr));

    assert!(output.status.success());
}
