[package]
name = "rerun-cli"
authors.workspace = true
categories = ["visualization", "computer-vision"]
description = "Log images, point clouds, etc, and visualize them effortlessly"
edition.workspace = true
homepage.workspace = true
include.workspace = true
keywords = ["mesh", "plotting", "point-cloud", "robotics", "visualization"]
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]

[[bin]]
name = "rerun"
path = "src/bin/rerun.rs"
# This binary's name collides with `crates/rerun` (the library).
# https://github.com/rust-lang/cargo/issues/6313
doc = false

[features]
# The default is what the user gets when they call `cargo install rerun-cli`,
# so wer have all the bells and wistles here
default = ["native_viewer", "web_viewer"]

## Support spawning a native viewer.
## This adds a lot of extra dependencies, so only enable this feature if you need it!
native_viewer = ["rerun/native_viewer"]

## Support serving a web viewer over HTTP.
##
## Enabling this inflates the binary size quite a bit, since it embeds the viewer wasm.
# When building from source (in the repository), this feature adds quite a bit
# to the compile time since it requires compiling and bundling the viewer as wasm.
#
# You also need to install some additional tools, which you can do by running
# [`scripts/setup_web.sh`](https://github.com/rerun-io/rerun/blob/main/scripts/setup_web.sh).
web_viewer = ["rerun/web_viewer"]

[dependencies]
re_build_info.workspace = true
re_log.workspace = true
re_memory.workspace = true
rerun = { workspace = true, features = [
  "analytics",
  "demo",
  "glam",
  "image",
  "sdk",
  "server",
] }

anyhow.workspace = true
document-features = "0.2"
mimalloc.workspace = true
rayon.workspace = true
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }


[build-dependencies]
re_build_tools.workspace = true
