// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/registry.rs
use re_types_core::ComponentName;

/// Information about a Rerun [`component`](re_types_core::Component), generated by codegen.
pub struct ComponentInfo {
    /// Markdown docstring for the component.
    pub docstring_md: &'static str,
}

/// Runtime "reflection" about components.
pub type ComponentRegistry = nohash_hasher::IntMap<ComponentName, ComponentInfo>;

/// Markdown docs for each component.

pub fn registry() -> &'static ComponentRegistry {
    use std::sync::OnceLock;

    static REGISTRY: OnceLock<ComponentRegistry> = OnceLock::new();
    REGISTRY
        .get_or_init(|| {
            let mut registry = ComponentRegistry::default();
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.ActiveTab"),
                    ComponentInfo {
                        docstring_md: "The active tab in a tabbed container.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.AutoLayout"),
                    ComponentInfo {
                        docstring_md: "Whether the viewport layout is determined automatically.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.AutoSpaceViews"),
                    ComponentInfo {
                        docstring_md: "Whether or not space views should be created automatically.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.BackgroundKind"),
                    ComponentInfo {
                        docstring_md: "The type of the background in a view.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.ColumnShare"),
                    ComponentInfo {
                        docstring_md: "The layout share of a column in the container.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.ContainerKind"),
                    ComponentInfo {
                        docstring_md: "The kind of a blueprint container (tabs, grid, â€¦).",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.Corner2D"),
                    ComponentInfo {
                        docstring_md: "One of four 2D corners, typically used to align objects.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.GridColumns"),
                    ComponentInfo {
                        docstring_md: "How many columns a grid container should have.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.IncludedContent"),
                    ComponentInfo {
                        docstring_md: "All the contents in the container.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.IncludedSpaceView"),
                    ComponentInfo {
                        docstring_md: "The unique id of a space view, used to refer to views in containers.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.Interactive"),
                    ComponentInfo {
                        docstring_md: "Whether the entity can be interacted with.\n\nNon interactive components are still visible, but mouse interactions in the view are disabled.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.LockRangeDuringZoom"),
                    ComponentInfo {
                        docstring_md: "Indicate whether the range should be locked when zooming in on the data.\n\nDefault is `false`, i.e. zoom will change the visualized range.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.PanelState"),
                    ComponentInfo {
                        docstring_md: "Tri-state for panel controls.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.QueryExpression"),
                    ComponentInfo {
                        docstring_md: "An individual `QueryExpression` used to filter a set of `EntityPath`s.\n\nEach expression is either an inclusion or an exclusion expression.\nInclusions start with an optional `+` and exclusions must start with a `-`.\n\nMultiple expressions are combined together as part of `SpaceViewContents`.\n\nThe `/**` suffix matches the whole subtree, i.e. self and any child, recursively\n(`/world/**` matches both `/world` and `/world/car/driver`).\nOther uses of `*` are not (yet) supported.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.RootContainer"),
                    ComponentInfo {
                        docstring_md: "The container that sits at the root of a viewport.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.RowShare"),
                    ComponentInfo {
                        docstring_md: "The layout share of a row in the container.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.SpaceViewClass"),
                    ComponentInfo {
                        docstring_md: "The class of a `SpaceView`.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.SpaceViewMaximized"),
                    ComponentInfo {
                        docstring_md: "Whether a space view is maximized.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.SpaceViewOrigin"),
                    ComponentInfo {
                        docstring_md: "The origin of a `SpaceView`.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.ViewFit"),
                    ComponentInfo {
                        docstring_md: "Determines whether an image or texture should be scaled to fit the viewport.",
                    },
                );
            registry
                .insert(
                    ComponentName::new(
                        "rerun.blueprint.components.ViewerRecommendationHash",
                    ),
                    ComponentInfo {
                        docstring_md: "Hash of a viewer recommendation.\n\nThe formation of this hash is considered an internal implementation detail of the viewer.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.Visible"),
                    ComponentInfo {
                        docstring_md: "Whether the container, view, entity or instance is currently visible.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.VisibleTimeRange"),
                    ComponentInfo {
                        docstring_md: "The range of values on a given timeline that will be included in a view's query.\n\nRefer to `VisibleTimeRanges` archetype for more information.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.blueprint.components.VisualBounds2D"),
                    ComponentInfo {
                        docstring_md: "Visual bounds in 2D space used for `Spatial2DView`.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.AggregationPolicy"),
                    ComponentInfo {
                        docstring_md: "Configures a policy for aggregation of values.\n\nThis is used for lines in plots when the X axis distance of individual points goes below a single pixel,\ni.e. a single pixel covers more than one tick worth of data. It can greatly improve performance\n(and readability) in such situations as it prevents overdraw.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.AnnotationContext"),
                    ComponentInfo {
                        docstring_md: "The `AnnotationContext` provides additional information on how to display entities.\n\nEntities can use `ClassId`s and `KeypointId`s to provide annotations, and\nthe labels and colors will be looked up in the appropriate\n`AnnotationContext`. We use the *first* annotation context we find in the\npath-hierarchy when searching up through the ancestors of a given entity\npath.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.AxisLength"),
                    ComponentInfo {
                        docstring_md: "The length of an axis in local units of the space.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Blob"),
                    ComponentInfo {
                        docstring_md: "A binary blob of data.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.ClassId"),
                    ComponentInfo {
                        docstring_md: "A 16-bit ID representing a type of semantic class.\n\nUsed to look up a [`crate::datatypes::ClassDescription`] within the [`crate::components::AnnotationContext`].",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.ClearIsRecursive"),
                    ComponentInfo {
                        docstring_md: "Configures how a clear operation should behave - recursive or not.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Color"),
                    ComponentInfo {
                        docstring_md: "An RGBA color with unmultiplied/separate alpha, in sRGB gamma space with linear alpha.\n\nThe color is stored as a 32-bit integer, where the most significant\nbyte is `R` and the least significant byte is `A`.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Colormap"),
                    ComponentInfo {
                        docstring_md: "Colormap for mapping scalar values within a given range to a color.\n\nThis provides a number of popular pre-defined colormaps.\nIn the future, the Rerun Viewer will allow users to define their own colormaps,\nbut currently the Viewer is limited to the types defined here.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.DepthMeter"),
                    ComponentInfo {
                        docstring_md: "A component indicating how long a meter is, expressed in native units.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.DisconnectedSpace"),
                    ComponentInfo {
                        docstring_md: "Spatially disconnect this entity from its parent.\n\nSpecifies that the entity path at which this is logged is spatially disconnected from its parent,\nmaking it impossible to transform the entity path into its parent's space and vice versa.\nIt *only* applies to space views that work with spatial transformations, i.e. 2D & 3D space views.\nThis is useful for specifying that a subgraph is independent of the rest of the scene.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.DrawOrder"),
                    ComponentInfo {
                        docstring_md: "Draw order used for the display order of 2D elements.\n\nHigher values are drawn on top of lower values.\nAn entity can have only a single draw order component.\nWithin an entity draw order is governed by the order of the components.\n\nDraw order for entities with the same draw order is generally undefined.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.FillRatio"),
                    ComponentInfo {
                        docstring_md: "How much a primitive fills out the available space.\n\nUsed for instance to scale the points of the point cloud created from `DepthImage` projection.\nValid range is from 0 to max float although typically values above 1.0 are not useful\nDefaults to 1.0.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.GammaCorrection"),
                    ComponentInfo {
                        docstring_md: "A gamma correction value to be used with a scalar value or color.\n\nUsed to adjust the gamma of a color or scalar value between 0 and 1 before rendering.\n`new_value = old_value ^ gamma`\n\nValid range is from 0 (excluding) to max float.\nDefaults to 1.0 unless otherwise specified.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.HalfSizes2D"),
                    ComponentInfo {
                        docstring_md: "Half-sizes (extents) of a 2D box along its local axis, starting at its local origin/center.\n\nThe box extends both in negative and positive direction along each axis.\nNegative sizes indicate that the box is flipped along the respective axis, but this has no effect on how it is displayed.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.HalfSizes3D"),
                    ComponentInfo {
                        docstring_md: "Half-sizes (extents) of a 3D box along its local axis, starting at its local origin/center.\n\nThe box extends both in negative and positive direction along each axis.\nNegative sizes indicate that the box is flipped along the respective axis, but this has no effect on how it is displayed.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.ImagePlaneDistance"),
                    ComponentInfo {
                        docstring_md: "The distance from the camera origin to the image plane when the projection is shown in a 3D viewer.\n\nThis is only used for visualization purposes, and does not affect the projection itself.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.KeypointId"),
                    ComponentInfo {
                        docstring_md: "A 16-bit ID representing a type of semantic keypoint within a class.\n\n`KeypointId`s are only meaningful within the context of a [`crate::datatypes::ClassDescription`].\n\nUsed to look up an [`crate::datatypes::AnnotationInfo`] for a Keypoint within the [`crate::components::AnnotationContext`].",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.LineStrip2D"),
                    ComponentInfo {
                        docstring_md: "A line strip in 2D space.\n\nA line strip is a list of points connected by line segments. It can be used to draw\napproximations of smooth curves.\n\nThe points will be connected in order, like so:\n```text\n       2------3     5\n      /        \\   /\n0----1          \\ /\n                 4\n```",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.LineStrip3D"),
                    ComponentInfo {
                        docstring_md: "A line strip in 3D space.\n\nA line strip is a list of points connected by line segments. It can be used to draw\napproximations of smooth curves.\n\nThe points will be connected in order, like so:\n```text\n       2------3     5\n      /        \\   /\n0----1          \\ /\n                 4\n```",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.MagnificationFilter"),
                    ComponentInfo {
                        docstring_md: "Filter used when magnifying an image/texture such that a single pixel/texel is displayed as multiple pixels on screen.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.MarkerShape"),
                    ComponentInfo {
                        docstring_md: "Shape of a marker.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.MarkerSize"),
                    ComponentInfo {
                        docstring_md: "Size of a marker in UI points.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Material"),
                    ComponentInfo {
                        docstring_md: "Material properties of a mesh.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.MediaType"),
                    ComponentInfo {
                        docstring_md: "A standardized media type (RFC2046, formerly known as MIME types), encoded as a utf8 string.\n\nThe complete reference of officially registered media types is maintained by the IANA and can be\nconsulted at <https://www.iana.org/assignments/media-types/media-types.xhtml>.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Name"),
                    ComponentInfo {
                        docstring_md: "A display name, typically for an entity or a item like a plot series.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.OutOfTreeTransform3D"),
                    ComponentInfo {
                        docstring_md: "An out-of-tree affine transform between two 3D spaces, represented in a given direction.\n\n\"Out-of-tree\" means that the transform only affects its own entity: children don't inherit from it.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.PinholeProjection"),
                    ComponentInfo {
                        docstring_md: "Camera projection, from image coordinates to view coordinates.\n\nChild from parent.\nImage coordinates from camera view coordinates.\n\nExample:\n```text\n1496.1     0.0  980.5\n   0.0  1496.1  744.5\n   0.0     0.0    1.0\n```",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Position2D"),
                    ComponentInfo {
                        docstring_md: "A position in 2D space.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Position3D"),
                    ComponentInfo {
                        docstring_md: "A position in 3D space.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Radius"),
                    ComponentInfo {
                        docstring_md: "A Radius component.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Range1D"),
                    ComponentInfo {
                        docstring_md: "A 1D range, specifying a lower and upper bound.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Resolution"),
                    ComponentInfo {
                        docstring_md: "Pixel resolution width & height, e.g. of a camera sensor.\n\nTypically in integer units, but for some use cases floating point may be used.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Rotation3D"),
                    ComponentInfo {
                        docstring_md: "A 3D rotation, represented either by a quaternion or a rotation around axis.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Scalar"),
                    ComponentInfo {
                        docstring_md: "A double-precision scalar.\n\nUsed for time series plots.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.StrokeWidth"),
                    ComponentInfo {
                        docstring_md: "The width of a stroke specified in UI points.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.TensorData"),
                    ComponentInfo {
                        docstring_md: "A multi-dimensional `Tensor` of data.\n\nThe number of dimensions and their respective lengths is specified by the `shape` field.\nThe dimensions are ordered from outermost to innermost. For example, in the common case of\na 2D RGB Image, the shape would be `[height, width, channel]`.\n\nThese dimensions are combined with an index to look up values from the `buffer` field,\nwhich stores a contiguous array of typed values.\n\nNote that the buffer may be encoded in a compressed format such as `jpeg` or\nin a format with downsampled chroma, such as NV12 or YUY2.\nFor file formats, the shape is used as a hint, for chroma downsampled format\nthe shape has to be the shape of the decoded image.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Texcoord2D"),
                    ComponentInfo {
                        docstring_md: "A 2D texture UV coordinate.\n\nTexture coordinates specify a position on a 2D texture.\nA range from 0-1 covers the entire texture in the respective dimension.\nUnless configured otherwise, the texture repeats outside of this range.\nRerun uses top-left as the origin for UV coordinates.\n\n  0     U     1\n0 + --------- â†’\n  |           .\nV |           .\n  |           .\n1 â†“ . . . . . .\n\nThis is the same convention as in Vulkan/Metal/DX12/WebGPU, but (!) unlike OpenGL,\nwhich places the origin at the bottom-left.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Text"),
                    ComponentInfo {
                        docstring_md: "A string of text, e.g. for labels and text documents.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.TextLogLevel"),
                    ComponentInfo {
                        docstring_md: "The severity level of a text log message.\n\nRecommended to be one of:\n* `\"CRITICAL\"`\n* `\"ERROR\"`\n* `\"WARN\"`\n* `\"INFO\"`\n* `\"DEBUG\"`\n* `\"TRACE\"`",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Transform3D"),
                    ComponentInfo {
                        docstring_md: "An affine transform between two 3D spaces, represented in a given direction.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.TriangleIndices"),
                    ComponentInfo {
                        docstring_md: "The three indices of a triangle mesh.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Vector2D"),
                    ComponentInfo {
                        docstring_md: "A vector in 2D space.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.Vector3D"),
                    ComponentInfo {
                        docstring_md: "A vector in 3D space.",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.ViewCoordinates"),
                    ComponentInfo {
                        docstring_md: "How we interpret the coordinate system of an entity/space.\n\nFor instance: What is \"up\"? What does the Z axis mean? Is this right-handed or left-handed?\n\nThe three coordinates are always ordered as [x, y, z].\n\nFor example [Right, Down, Forward] means that the X axis points to the right, the Y axis points\ndown, and the Z axis points forward.\n\nThe following constants are used to represent the different directions:\n * Up = 1\n * Down = 2\n * Right = 3\n * Left = 4\n * Forward = 5\n * Back = 6",
                    },
                );
            registry
                .insert(
                    ComponentName::new("rerun.components.VisualizerOverrides"),
                    ComponentInfo {
                        docstring_md: "The name of a visualizer.",
                    },
                );
            registry
        })
}
