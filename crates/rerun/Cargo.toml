[package]
name = "rerun"
authors.workspace = true
default-run = "rerun"
description = "Log images, point clouds, etc, and visualize them effortlessly"
edition.workspace = true
homepage.workspace = true
include.workspace = true
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]


[features]
default = ["analytics", "glam", "image", "native_viewer", "server", "sdk"]

## Enable telemetry using our analytics SDK.
analytics = [
  "dep:re_analytics",
  "re_viewer?/analytics",
  "re_web_viewer_server?/analytics",
]

## Add support for some math operations using [`glam`](https://crates.io/crates/glam/).
## Only relevant if feature `sdk` is enabled.
glam = ["re_sdk?/glam"]

## Add the `global_session` method.
## Only makes sense together with the `sdk` feature.
global_session = ["re_sdk?/global_session"]

## Integration with the [`image`](https://crates.io/crates/image/) crate.
image = ["re_log_types/image"]

## Support spawning a native viewer.
native_viewer = ["dep:re_viewer"]

## Support for running a HTTP server that listens to incoming log messages from a Rerun SDK.
server = ["re_sdk_comms/server"]

## Embed the Rerun SDK and re-export all of its public symbols.
sdk = ["dep:re_sdk"]

## Support serving a web viewer over HTTP.
##
## Enabling this inflates the binary size quite a bit, since it embeds the viewer wasm.
# When building from source (in the repository), this feature adds quite a bit
# to the compile time since it requires compiling and bundling the viewer as wasm.
#
# You also need to install some additional tools, which you can do by running
# [`scripts/setup_web.sh`](https://github.com/rerun-io/rerun/blob/main/scripts/setup_web.sh).
web_viewer = [
  "dep:once_cell",
  "dep:re_web_viewer_server",
  "dep:webbrowser",
  "re_ws_comms/server",
]

[dependencies]
re_build_info.workspace = true
re_error.workspace = true
re_format.workspace = true
re_log_types = { workspace = true, features = ["load"] }
re_log.workspace = true
re_memory.workspace = true
re_smart_channel.workspace = true
re_ws_comms = { workspace = true, features = ["client"] }

anyhow.workspace = true
document-features = "0.2"
egui = { workspace = true, default-features = false }
itertools = { workspace = true }
parking_lot.workspace = true

# Optional dependencies:
re_analytics = { workspace = true, optional = true }
re_sdk = { workspace = true, optional = true }
re_sdk_comms = { workspace = true, optional = true }
re_viewer = { workspace = true, optional = true }
re_web_viewer_server = { workspace = true, optional = true }

once_cell = { version = "1.17", optional = true }
webbrowser = { version = "0.8", optional = true }

# Native dependencies:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
backtrace = "0.3"
clap = { workspace = true, features = ["derive"] }
mimalloc.workspace = true
ctrlc.workspace = true
tokio = { workspace = true, features = ["macros", "rt-multi-thread"] }

# Native unix dependencies:
[target.'cfg(not(any(target_arch = "wasm32", target_os = "windows")))'.dependencies]
libc = "0.2"


[build-dependencies]
re_build_build_info.workspace = true
