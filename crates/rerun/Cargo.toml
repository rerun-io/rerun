[package]
name = "rerun"
authors.workspace = true
categories = ["visualization", "computer-vision"]
description = "Log images, point clouds, etc, and visualize them effortlessly"
edition.workspace = true
homepage.workspace = true
include.workspace = true
keywords = ["mesh", "plotting", "point-cloud", "robotics", "visualization"]
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = true
targets = ["x86_64-unknown-linux-gnu", "wasm32-unknown-unknown"]


[features]
default = ["analytics", "demo", "glam", "image", "log", "sdk", "server"]

## Enable telemetry using our analytics SDK.
analytics = [
  "dep:re_analytics",
  "re_crash_handler/analytics",
  "re_viewer?/analytics",
  "re_web_viewer_server?/analytics",
]

## Demo helpers for examples.
demo = []

## Add support for some math operations using [`glam`](https://crates.io/crates/glam/).
## Only relevant if feature `sdk` is enabled.
glam = ["re_types?/glam"]

## Add support for math type conversions using [`mint`](https://crates.io/crates/mint/).
## Only relevant if feature `sdk` is enabled.
mint = ["re_types?/mint"]

## Integration with the [`image`](https://crates.io/crates/image/) crate, plus JPEG support.
image = ["re_types?/image"]

## Integration with the [`log`](https://crates.io/crates/log/) crate.
log = ["dep:env_logger", "dep:log"]

## Support spawning a native viewer.
## This adds a lot of extra dependencies, so only enable this feature if you need it!
native_viewer = ["dep:re_viewer"]

## Support for running a TCP server that listens to incoming log messages from a Rerun SDK.
server = ["re_sdk_comms/server"]

## Embed the Rerun SDK & built-in types and re-export all of their public symbols.
sdk = ["dep:re_sdk", "dep:re_types"]

## Support serving a web viewer over HTTP.
##
## Enabling this inflates the binary size quite a bit, since it embeds the viewer wasm.
##
## For faster & easier builds, a pre-built web-views comes bundled with the crate as a Wasm binary.
## Enabling this feature will embed this pre-built web viewer.
##
## However, when building from source in the repository, this feature adds quite a bit
## to the compile time since it requires compiling and bundling the viewer as wasm.
## You also need to install some additional tools, which you can do by running
## [`scripts/setup_web.sh`](https://github.com/rerun-io/rerun/blob/main/scripts/setup_web.sh).
web_viewer = ["dep:re_web_viewer_server", "re_sdk?/web_viewer"]

[dependencies]
re_build_info.workspace = true
re_crash_handler.workspace = true
re_data_source.workspace = true
re_entity_db.workspace = true
re_format.workspace = true
re_log_encoding = { workspace = true, features = ["decoder", "encoder"] }
re_log_types.workspace = true
re_log.workspace = true
re_memory.workspace = true
re_smart_channel.workspace = true
re_tracing.workspace = true
re_ws_comms = { workspace = true, features = ["client"] }

anyhow.workspace = true
document-features.workspace = true
itertools.workspace = true

# Optional dependencies:
re_analytics = { workspace = true, optional = true }
re_sdk = { workspace = true, optional = true }
re_sdk_comms = { workspace = true, optional = true }
re_types = { workspace = true, optional = true }
re_viewer = { workspace = true, optional = true }
re_web_viewer_server = { workspace = true, optional = true }

env_logger = { workspace = true, optional = true }
log = { workspace = true, optional = true }

# Native dependencies:
[target.'cfg(not(target_arch = "wasm32"))'.dependencies]
clap = { workspace = true, features = ["derive"] }
puffin.workspace = true
rayon.workspace = true
tokio = { workspace = true, features = ["macros", "rt-multi-thread", "time"] }


[build-dependencies]
re_build_tools.workspace = true
