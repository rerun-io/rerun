[package]
name = "re_sdk"
authors.workspace = true
categories = ["visualization", "computer-vision"]
description = "Rerun logging SDK"
edition.workspace = true
homepage.workspace = true
include.workspace = true
keywords = ["mesh", "plotting", "point-cloud", "robotics", "visualization"]
license.workspace = true
publish = true
readme = "README.md"
repository.workspace = true
rust-version.workspace = true
version.workspace = true

[package.metadata.docs.rs]
all-features = true


[features]
default = ["demo", "glam", "image", "log"]

## Enable the `demo` module (helpers for Rerun examples).
demo = []

## Add support for some math operations using [`glam`](https://crates.io/crates/glam/).
glam = ["re_types/glam"]

## Integration with the [`image`](https://crates.io/crates/image/) crate, plus JPEG support..
image = ["re_types/image"]

## Integration with the [`log`](https://crates.io/crates/log/) crate.
log = ["dep:env_logger", "dep:log"]

## Support serving a web viewer over HTTP.
##
## Enabling this inflates the binary size quite a bit, since it embeds the viewer wasm.
##
## For faster & easier builds, the web-player build comes bundled with the crate.
## Enabling this feature will embed this pre-built web-player.
##
## However, when building from source in the repository, this feature adds quite a bit
## to the compile time since it requires compiling and bundling the viewer as wasm.
## You also need to install some additional tools, which you can do by running
## [`scripts/setup_web.sh`](https://github.com/rerun-io/rerun/blob/main/scripts/setup_web.sh).
web_viewer = [
  "dep:re_smart_channel",
  "dep:re_web_viewer_server",
  "dep:re_ws_comms",
  "dep:anyhow",
  "dep:webbrowser",
  "re_ws_comms?/server",
]


[dependencies]
re_build_info.workspace = true
re_log_encoding = { workspace = true, features = ["encoder"] }
re_log_types.workspace = true
re_log.workspace = true
re_memory.workspace = true
re_sdk_comms = { workspace = true, features = ["client"] }
re_types = { workspace = true, features = ["ecolor", "glam"] }

ahash.workspace = true
crossbeam.workspace = true
document-features.workspace = true
itertools.workspace = true
once_cell.workspace = true
parking_lot.workspace = true
thiserror.workspace = true

# Optional dependencies

re_smart_channel = { workspace = true, optional = true }
re_ws_comms = { workspace = true, optional = true }
re_web_viewer_server = { workspace = true, optional = true }

anyhow = { workspace = true, optional = true }
env_logger = { workspace = true, optional = true }
log = { workspace = true, optional = true }
webbrowser = { workspace = true, optional = true }


[dev-dependencies]
re_types = { workspace = true, features = ["datagen"] }

arrow2_convert.workspace = true
ndarray.workspace = true
ndarray-rand.workspace = true
rand.workspace = true
similar-asserts.workspace = true


[build-dependencies]
re_build_tools.workspace = true
