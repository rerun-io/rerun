// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/rust/to_archetype.rs

#![allow(unused_imports)]
#![allow(unused_parens)]
#![allow(clippy::clone_on_copy)]

use crate::CachedLatestAtResults;
use re_query2::{PromiseResolver, PromiseResult};
use re_types_core::{Archetype, Loggable as _};
use std::sync::Arc;

impl crate::ToArchetype<re_types::archetypes::Asset3D> for CachedLatestAtResults {
    #[inline]
    fn to_archetype(
        &self,
        resolver: &PromiseResolver,
    ) -> PromiseResult<re_types::archetypes::Asset3D> {
        re_tracing::profile_function!(<re_types::archetypes::Asset3D>::name());

        // --- Required ---

        use re_types::components::Blob;
        let blob = match self.get_required(<Blob>::name()) {
            Ok(blob) => blob,
            Err(err) => return PromiseResult::Error(Arc::new(err)),
        };
        let blob = match blob.to_dense::<Blob>(resolver).flatten() {
            PromiseResult::Ready(data) => {
                let Some(first) = data.first().cloned() else {
                    return PromiseResult::Error(std::sync::Arc::new(
                        re_types_core::DeserializationError::missing_data(),
                    ));
                };
                first
            }
            PromiseResult::Pending => return PromiseResult::Pending,
            PromiseResult::Error(err) => return PromiseResult::Error(err),
        };

        // --- Recommended/Optional ---

        use re_types::components::MediaType;
        let media_type = if let Some(media_type) = self.get(<MediaType>::name()) {
            match media_type.to_dense::<MediaType>(resolver).flatten() {
                PromiseResult::Ready(data) => data.first().cloned(),
                PromiseResult::Pending => return PromiseResult::Pending,
                PromiseResult::Error(err) => return PromiseResult::Error(err),
            }
        } else {
            None
        };

        use re_types::components::OutOfTreeTransform3D;
        let transform = if let Some(transform) = self.get(<OutOfTreeTransform3D>::name()) {
            match transform
                .to_dense::<OutOfTreeTransform3D>(resolver)
                .flatten()
            {
                PromiseResult::Ready(data) => data.first().cloned(),
                PromiseResult::Pending => return PromiseResult::Pending,
                PromiseResult::Error(err) => return PromiseResult::Error(err),
            }
        } else {
            None
        };

        // ---

        let arch = re_types::archetypes::Asset3D {
            blob,
            media_type,
            transform,
        };

        PromiseResult::Ready(arch)
    }
}
