use std::collections::BTreeMap;

use camino::Utf8PathBuf;
use quote::quote;

use crate::{
    codegen::{
        autogen_warning,
        rust::{api::doc_as_lines, util::string_from_quoted},
    },
    ObjectKind, Objects, Reporter,
};

/// Generate `re_types_registry` crate.
pub fn generate_re_types_registry(
    reporter: &Reporter,
    crates_root_path: &Utf8PathBuf,
    objects: &Objects,
    files_to_write: &mut BTreeMap<Utf8PathBuf, String>,
) {
    {
        // TODO(emilk): do the same for achetypes
        let insert_component = objects
            .objects_of_kind(ObjectKind::Component)
            .filter(|obj| !obj.is_testing())
            .map(|obj| {
                let fqname = &obj.fqname;
                let docstring_md =
                    doc_as_lines(reporter, &obj.virtpath, &obj.fqname, &obj.docs).join("\n");
                quote! {
                    registry.insert(ComponentName::new(#fqname), ComponentInfo {
                        docstring_md: #docstring_md,
                    });
                }
            });
        let quoted_file = quote! {
            use re_types_core::ComponentName;

            /// Information about a Rerun [`component`](re_types_core::Component), generated by codegen.
            pub struct ComponentInfo {
                /// Markdown docstring for the component.
                pub docstring_md: &'static str,
            }

            /// Runtime "reflection" about components.
            pub type ComponentRegistry = nohash_hasher::IntMap<ComponentName, ComponentInfo>;

            /// Markdown docs for each component.
            pub fn registry() -> &'static ComponentRegistry {
                use std::sync::OnceLock;
                static REGISTRY: OnceLock<ComponentRegistry> = OnceLock::new();
                REGISTRY.get_or_init(|| {
                    let mut registry = ComponentRegistry::default();
                    #(#insert_component)*
                    registry
                })
            }
        };

        let filepath = crates_root_path
            .join("re_types_registry")
            .join("src")
            .join("components.rs");
        let code = format!(
            "// {}\n{}",
            autogen_warning!(),
            string_from_quoted(reporter, &quoted_file, &filepath)
        );
        files_to_write.insert(filepath, code);
    }

    let quoted_file = quote! {
        //! A registry of known Rerun types (components, archetypes, â€¦).
        //!
        //! Used to e.g. look up docs from a given component name.

        pub mod components;
    };
    let filepath = crates_root_path
        .join("re_types_registry")
        .join("src")
        .join("lib.rs");
    let code = format!(
        "// {}\n{}",
        autogen_warning!(),
        string_from_quoted(reporter, &quoted_file, &filepath)
    );
    files_to_write.insert(filepath, code);
}
