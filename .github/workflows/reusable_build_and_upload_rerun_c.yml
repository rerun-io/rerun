name: Reusable Rerun-c Build

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      PLATFORM:
        required: true
        type: string
      ADHOC_NAME:
        required: false
        type: string
        default: ""
      RELEASE_COMMIT:
        required: false
        type: string
        default: ""

  workflow_dispatch:
    inputs:
      ADHOC_NAME:
        required: false
        type: string
        description: "Name of the adhoc build, used for upload directory"
        default: ""
      PLATFORM:
        type: choice
        options:
          - linux-arm64
          - linux-x64
          - windows-x64
          - macos-arm64
          - macos-x64
        description: "Platform to build for"
        required: true
      CONCURRENCY:
        required: false
        type: string
        default: "adhoc"
        description: "Concurrency group to use"

concurrency:
  group: ${{ inputs.CONCURRENCY }}-build-rerun_c
  cancel-in-progress: true

env:
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings

  # See https://github.com/ericseppanen/cargo-cranky/issues/8
  RUSTDOCFLAGS: --deny warnings --deny rustdoc::missing_crate_level_docs

permissions:
  contents: "read"
  id-token: "write"

jobs:
  set-config:
    name: Set Config (${{ inputs.PLATFORM }})
    runs-on: ubuntu-latest-16-cores
    outputs:
      RUNNER: ${{ steps.set-config.outputs.runner }}
      TARGET: ${{ steps.set-config.outputs.target }}
      CONTAINER: ${{ steps.set-config.outputs.container }}
      LIB_NAME: ${{ steps.set-config.outputs.lib_name }}
    steps:
      - name: Set runner and target based on platform
        id: set-config
        shell: bash
        run: |
          case "${{ inputs.PLATFORM }}" in
            linux-arm64)
              runner="buildjet-8vcpu-ubuntu-2204-arm"
              target="aarch64-unknown-linux-gnu"
              container="{'image': 'rerunio/ci_docker:0.12.0'}"
              lib_name="librerun_c.a"
              ;;
            linux-x64)
              runner="ubuntu-latest-16-cores"
              target="x86_64-unknown-linux-gnu"
              container="{'image': 'rerunio/ci_docker:0.12.0'}"
              lib_name="librerun_c.a"
              ;;
            windows-x64)
              runner="windows-latest-8-cores"
              target="x86_64-pc-windows-msvc"
              container="null"
              lib_name="rerun_c.lib"
              ;;
            macos-arm64)
              runner="macos-latest" # Small runners, because building rerun_c is fast
              target="aarch64-apple-darwin"
              container="null"
              lib_name="librerun_c.a"
              ;;
            macos-x64)
              runner="macos-latest" # Small runners, because building rerun_c is fast
              target="x86_64-apple-darwin"
              container="null"
              lib_name="librerun_c.a"
              ;;
            *) echo "Invalid platform" && exit 1 ;;
          esac
          echo "runner=$runner" >> "$GITHUB_OUTPUT"
          echo "target=$target" >> "$GITHUB_OUTPUT"
          echo "container=$container" >> "$GITHUB_OUTPUT"
          echo "lib_name=$lib_name" >> "$GITHUB_OUTPUT"

  rs-build-rerun_c:
    name: Build rerun_c (${{ needs.set-config.outputs.RUNNER }})

    needs: [set-config]

    runs-on: ${{ needs.set-config.outputs.RUNNER }}
    container: ${{ fromJson(needs.set-config.outputs.CONTAINER) }}

    steps:
      - name: Show context
        shell: bash
        run: |
          echo "GITHUB_CONTEXT": $GITHUB_CONTEXT
          echo "JOB_CONTEXT": $JOB_CONTEXT
          echo "INPUTS_CONTEXT": $INPUTS_CONTEXT
          echo "ENV_CONTEXT": $ENV_CONTEXT
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          INPUTS_CONTEXT: ${{ toJson(inputs) }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.RELEASE_COMMIT || ((github.event_name == 'pull_request' && github.event.pull_request.head.ref) || '') }}

      - name: Set up Rust and Authenticate to GCS
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-${{ inputs.PLATFORM }}"
          save_cache: false
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}
          targets: ${{ needs.set-config.outputs.TARGET }}

      - name: Build rerun_c (release)
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: --locked -p rerun_c --release --target ${{ needs.set-config.outputs.TARGET }}

      - name: Get sha
        id: get-sha
        shell: bash
        run: |
          full_commit="${{ inputs.RELEASE_COMMIT || ((github.event_name == 'pull_request' && github.event.pull_request.head.sha) || github.sha) }}"
          echo "sha=$(echo $full_commit | cut -c1-7)" >> "$GITHUB_OUTPUT"

      - name: "Upload rerun_c (commit)"
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: "./target/${{ needs.set-config.outputs.TARGET }}/release/${{ needs.set-config.outputs.LIB_NAME }}"
          destination: "rerun-builds/commit/${{ steps.get-sha.outputs.sha }}/rerun_c/${{ inputs.PLATFORM }}"
          parent: false

      - name: "Upload rerun_c (adhoc)"
        if: ${{ inputs.ADHOC_NAME != '' }}
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: "./target/${{ needs.set-config.outputs.TARGET }}/release/${{ needs.set-config.outputs.LIB_NAME }}"
          destination: "rerun-builds/adhoc/${{inputs.ADHOC_NAME}}/rerun_c/${{ inputs.PLATFORM }}"
          parent: false
