name: Reusable Test Wheels

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      PLATFORM:
        required: true
        type: string
      WHEEL_ARTIFACT_NAME:
        required: false
        type: string
        default: ""
      RELEASE_COMMIT:
        required: false
        type: string
        default: ""
      FAST:
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ inputs.CONCURRENCY }}-test-wheels
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.8"
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html

  # TODO(jleibs) --deny warnings causes installation of wasm-bindgen to fail on mac
  # RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings
  RUSTFLAGS: --cfg=web_sys_unstable_apis

  RUSTDOCFLAGS: --deny warnings

  # Disable the GHA backend (Github's 10GB storage) since we use our own GCS backend.
  # See: https://github.com/marketplace/actions/sccache-action
  SCCACHE_GHA_ENABLED: "false"

  # Wrap every `rustc` invocation in `sccache`.
  RUSTC_WRAPPER: "sccache"

  # Not only `sccache` cannot cache incremental builds, it's counter-productive to generate all
  # these incremental artifacts when running on CI.
  CARGO_INCREMENTAL: "0"

defaults:
  run:
    shell: bash

permissions:
  contents: "read"
  id-token: "write"

jobs:
  # ---------------------------------------------------------------------------

  set-config:
    name: Set Config (${{ inputs.PLATFORM }})
    runs-on: ubuntu-latest-16-cores
    outputs:
      RUNNER: ${{ steps.set-config.outputs.runner }}
      TARGET: ${{ steps.set-config.outputs.target }}
      CONTAINER: ${{ steps.set-config.outputs.container }}
    steps:
      - name: Set runner and target based on platform
        id: set-config

        # TODO(#5525): at least this target is broken, maybe others — we currently only use linux-x64 and windows-x64
        run: |
          case "${{ inputs.PLATFORM }}" in
            linux-arm64)
              runner="buildjet-8vcpu-ubuntu-2204-arm"
              target="aarch64-unknown-linux-gnu"
              container="'rerunio/ci_docker:0.14.0'"
              ;;
            linux-x64)
              runner="ubuntu-latest-16-cores"
              target="x86_64-unknown-linux-gnu"
              container="'rerunio/ci_docker:0.14.0'"
              ;;
            windows-x64)
              runner="windows-latest-8-cores"
              target="x86_64-pc-windows-msvc"
              container="null"
              ;;
            macos-arm64)
              runner="macos-13-xlarge" # This is an Arm vm, https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners#about-macos-larger-runners
              target="aarch64-apple-darwin"
              container="null"
              ;;
            macos-x64)
              runner="macos-13-large" # This is an Intel vm, see https://docs.github.com/en/actions/using-github-hosted-runners/about-larger-runners/about-larger-runners#about-macos-larger-runners
              target="x86_64-apple-darwin"
              container="null"
              ;;
            *) echo "Invalid platform" && exit 1 ;;
          esac
          echo "runner=$runner" >> "$GITHUB_OUTPUT"
          echo "target=$target" >> "$GITHUB_OUTPUT"
          echo "container=$container" >> "$GITHUB_OUTPUT"

  # ---------------------------------------------------------------------------

  test-wheels:
    name: Test Wheels (${{ needs.set-config.outputs.RUNNER }})

    needs: [set-config]

    runs-on: ${{ needs.set-config.outputs.RUNNER }}
    container:
      image: ${{ fromJson(needs.set-config.outputs.CONTAINER) }}
      credentials:
        username: ${{ secrets.DOCKER_HUB_USER }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}

    steps:
      - name: Show context
        run: |
          echo "GITHUB_CONTEXT": $GITHUB_CONTEXT
          echo "JOB_CONTEXT": $JOB_CONTEXT
          echo "INPUTS_CONTEXT": $INPUTS_CONTEXT
          echo "ENV_CONTEXT": $ENV_CONTEXT
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          INPUTS_CONTEXT: ${{ toJson(inputs) }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.RELEASE_COMMIT || ((github.event_name == 'pull_request' && github.event.pull_request.head.ref) || '') }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-${{ inputs.PLATFORM }}"
          # Cache will be produced by `reusable_checks/rs-lints`
          save_cache: false
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.34.0
          # Only has the deps for round-trips. Not all examples.
          environments: wheel-test-min

      - name: Download Wheel
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.WHEEL_ARTIFACT_NAME }}
          path: wheel

      - name: Get version
        id: get-version
        run: pixi run -e wheel-test-min 'echo "wheel_version=$(python scripts/ci/crates.py get-version)"' >> "$GITHUB_OUTPUT"

      - name: Install built wheel
        run: |
          pixi run python scripts/ci/pixi_install_wheel.py --feature python-pypi --package rerun-sdk --dir wheel

      - name: Print wheel version
        run: |
          pixi list -e wheel-test-min | grep rerun_sdk
          pixi run -e wheel-test-min python -m rerun --version
          pixi run -e wheel-test-min which rerun
          pixi run -e wheel-test-min rerun-from-path  --version

      - name: Run unit tests (with linux arm64 opencv workaround)
        if: ${{ inputs.PLATFORM == 'linux-arm64' }}
        # Workaround for OpenCV TLS issue, see https://github.com/opencv/opencv/issues/14884#issuecomment-815632861
        run: cd rerun_py/tests && LD_PRELOAD=/usr/lib/aarch64-linux-gnu/libgomp.so.1 pixi run -e wheel-test-min pytest -c ../pyproject.toml

      - name: Run unit tests
        if: ${{ inputs.PLATFORM != 'linux-arm64' }}
        run: cd rerun_py/tests && pixi run -e wheel-test-min pytest -c ../pyproject.toml

      - name: Run e2e test
        run: pixi run -e wheel-test-min RUST_LOG=debug python scripts/run_python_e2e_test.py --no-build # rerun-sdk is already built and installed

      - name: Check for archetype roundtrip tests
        if: ${{ inputs.FAST }}
        # Only check that we have the archetype roundtrip tests, but don't spend time actually running them
        run: pixi run -e wheel-test-min RUST_LOG=debug python tests/roundtrips.py --no-run

      - name: Check for release checklist
        if: ${{ inputs.FAST }}
        # Only check that the release checklist executes successfully
        run: RUST_LOG=warn RERUN_STRICT=1 pixi run -e wheel-test-min python tests/python/release_checklist/main.py --stdout > /dev/null

      - name: Build C++ roundtrips
        if: ${{ !inputs.FAST }}
        # Separated out of roundtrips.py run so we control the pixi environment.
        # This used to cause issues on Windows during the setup of the pixi environment when running from inside `roundtrips.py`.
        run: pixi run -e wheel-test-min cpp-build-roundtrips

      - name: Run tests/roundtrips.py
        if: ${{ !inputs.FAST }}
        # explicit target because otherwise cargo loses the target cache… even though this is the target anyhow…
        # --no-py-build because rerun-sdk is already built and installed
        run: pixi run -e wheel-test-min RUST_LOG=debug python tests/roundtrips.py --target ${{ needs.set-config.outputs.TARGET }} --no-py-build --no-cpp-build

      - name: Build C++ snippets
        if: ${{ !inputs.FAST }}
        # Separated out of compare_snippet_output.py run so we control the pixi environment.
        # This used to cause issues on Windows during the setup of the pixi environment when running from inside `compare_snippet_output.py`.
        run: pixi run -e wheel-test-min cpp-build-snippets

      - name: Download test assets
        if: ${{ !inputs.FAST }}
        # Separated out of compare_snippet_output.py run so we control the pixi environment.
        # This used to cause issues on Windows during the setup of the pixi environment when running from inside `compare_snippet_output.py`.
        run: pixi run -e wheel-test-min python ./tests/assets/download_test_assets.py

      - name: Run docs/snippets/compare_snippet_output.py
        if: ${{ !inputs.FAST }}
        # explicit target because otherwise cargo loses the target cache… even though this is the target anyhow…
        # --no-py-build because rerun-sdk is already built and installed
        # --no-asset-download because we already downloaded the assets
        run: pixi run -e wheel-test-min RUST_LOG=debug python docs/snippets/compare_snippet_output.py --target ${{ needs.set-config.outputs.TARGET }} --no-py-build --no-cpp-build --no-asset-download

      - name: Check the python library signatures
        run: pixi run -e wheel-test-min python scripts/ci/python_check_signatures.py
