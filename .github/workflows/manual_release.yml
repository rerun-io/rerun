name: Release a branch or target with the given version

on:
  workflow_dispatch:
    inputs:
      RELEASE_VERSION:
        description: "Release Version Number (Must match Cargo.toml)"
        type: string
        required: true
      OVERRIDE_COMMIT:
        description: "Commit to release"
        type: string
        required: false

permissions:
  contents: write
  id-token: "write"

jobs:
  get-commit-sha:
    name: Get Commit Sha
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.get-short-sha.outputs.short-sha }}
      full-sha: ${{ steps.get-full-sha.outputs.full-sha }}
    steps:
      - name: "Set short-sha"
        id: get-short-sha
        run: |
          if [ -z "${{ inputs.OVERRIDE_COMMIT }}" ]; then
            USED_SHA=${{ github.sha }}
          else
            USED_SHA=${{ inputs.OVERRIDE_COMMIT }}
          fi
          echo "short-sha=$(echo $USED_SHA | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: "Set full-sha"
        id: get-full-sha
        run: |
          FULL_SHA=$(git rev-parse ${{ steps.get-short-sha.outputs.short_sha }})
          echo "full-sha=$FULL_SHA" >> $GITHUB_OUTPUT

  deploy-docs:
    name: Deploy Docs
    uses: ./.github/workflows/reusable_deploy_docs.yml
    with:
      CONCURRENCY: manual-dispatch-${{ github.run_id}}
      PY_DOCS_VERSION_NAME: ${{ github.event.inputs.RELEASE_VERSION }}
      UPDATE_LATEST: true
    secrets: inherit

  publish-wheels:
    name: "Publish Wheels"
    needs: [get-commit-sha]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Don't do a shallow clone since we need it for finding the full commit hash

      - id: "auth"
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Install packaging
        run: |
          python3 -m pip install packaging google-cloud-storage

      - name: Download wheels from Google Cloud Storage
        env:
          BUCKET_PATH:
        run: |
          mkdir wheels
          gsutil cp "gs://rerun-builds/commit/${{ needs.get-commit-sha.outputs.short-sha }}/wheels/*.whl" wheels/

      - name: Verify wheels match the expected release
        run: |
          python3 scripts/ci/verify_wheels.py --folder wheels --version ${{ inputs.RELEASE_VERSION }}

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          # These are both set in the GitHub project configuration
          MATURIN_REPOSITORY: ${{ vars.PYPI_REPOSITORY }}
          MATURIN_PYPI_TOKEN: ${{ secrets.MATURIN_PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing wheels/*

  publish-web-demo:
    name: "Publish Web Demo"
    needs: [get-commit-sha]
    runs-on: ubuntu-latest
    steps:
      - id: "auth"
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Release Web Demo
        run: |
          gsutil -m cp -r "gs://rerun-demo/commit/${{ needs.get-commit-sha.outputs.short-sha }}/*" "gs://rerun-demo/version/latest/"

  publish-crates:
    name: "Publish Crates"
    uses: ./.github/workflows/reusable_release_crates.yml
    with:
      CONCURRENCY: manual-dispatch-${{ github.run_id }}
    secrets: inherit

  github-release:
    name: "GitHub Release"
    needs: [get-commit-sha, deploy-docs, publish-wheels, publish-web-demo, publish-crates]
    runs-on: ubuntu-latest
    steps:
      # Create the actual prerelease
      # https://github.com/ncipollo/release-action
      - name: GitHub Release
        uses: ncipollo/release-action@v1.12.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          name: "Release - ${{ inputs.RELEASE_VERSION }}"
          commit: ${{ needs.get-commit-sha.outputs.full-sha }}
          tag: ${{ inputs.RELEASE_VERSION }}
          artifacts: "wheels/*.whl"
          generateReleaseNotes: true
          allowUpdates: true
          draft: true

