name: "Rust Checks: Lints, Tests, Docs"

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      CHANNEL:
        required: false
        type: string # enum: 'nightly', 'main', or 'pr'

concurrency:
  group: ${{ inputs.CONCURRENCY }}-checks_rust
  cancel-in-progress: true

env:
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings

  RUSTDOCFLAGS: --deny warnings

  # Disable the GHA backend (Github's 10GB storage) since we use our own GCS backend.
  # See: https://github.com/marketplace/actions/sccache-action
  SCCACHE_GHA_ENABLED: "false"

  # Wrap every `rustc` invocation in `sccache`.
  RUSTC_WRAPPER: "sccache"

  # Not only `sccache` cannot cache incremental builds, it's counter-productive to generate all
  # these incremental artifacts when running on CI.
  CARGO_INCREMENTAL: "0"

  # Improve diagnostics for crashes.
  RUST_BACKTRACE: full

  # Sourced from https://vulkan.lunarg.com/sdk/home#linux
  #
  # We don't include the 4th version number, as it's not used in any URL.
  VULKAN_SDK_VERSION: "1.3.290"

defaults:
  run:
    shell: bash

permissions:
  contents: "read"
  id-token: "write"

jobs:
  # ---------------------------------------------------------------------------

  rs-lints:
    name: Rust lints (fmt, check, clippy, tests, doc)
    runs-on: ubuntu-latest-16-cores
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-linux"
          save_cache: true
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.39.0

      # - name: Install Vulkan SDK
      #   uses: jakoch/install-vulkan-sdk-action@v1.0.0
      #   with:
      #     vulkan_version: 1.3.231.1 # TODO: set as variable
      #     install_runtime: true
      #     cache: true
      #     stripdown: true

      - name: (linux) install vulkan sdk
        run: |
          set -e

          sudo apt-get update -y -qq

          # vulkan sdk
          wget -qO - https://packages.lunarg.com/lunarg-signing-key-pub.asc | sudo apt-key add -
          sudo wget -qO /etc/apt/sources.list.d/lunarg-vulkan-$VULKAN_SDK_VERSION-jammy.list https://packages.lunarg.com/vulkan/$VULKAN_SDK_VERSION/lunarg-vulkan-$VULKAN_SDK_VERSION-jammy.list

          sudo apt-get update
          sudo apt install -y vulkan-sdk

      - name: Setup software rasterizer
        run: pixi run python ./scripts/ci/setup_software_rasterizer.py

        # TODO: re-enable
      # - name: Rust checks (PR subset)
      #   if: ${{ inputs.CHANNEL == 'pr' }}
      #   run: pixi run rs-check --only base_checks sdk_variations cargo_deny wasm docs

      - name: Run tests (`cargo test --all-targets --all-features`)
        if: ${{ inputs.CHANNEL == 'pr' }}
        # Need to use pixi due to NASM dependency.
        run: pixi run cargo test --all-targets --all-features

      - name: Rust most checks & tests
        if: ${{ inputs.CHANNEL == 'main' }}
        run: pixi run rs-check --skip individual_crates docs_slow

      - name: Rust all checks & tests
        if: ${{ inputs.CHANNEL == 'nightly' }}
        run: pixi run rs-check

  # Run some basics tests on Mac and Windows
  mac-windows-tests:
    name: Test on ${{ matrix.name }}
    strategy:
      matrix:
        include:
          # TODO(#8245): we run mac tests on `main` because that's the only platform where UI snapshot tests are covered.
          # When the linux runners are able to run these tests (with a software renderer), we can move that back to all nightly.
          - os: "macos-latest"
            name: "macos"
          - os: "windows-latest-8-cores"
            name: "windows"

    # Note: we can't use `matrix.os` here because its evaluated before the matrix stuff.
    #if: ${{ inputs.CHANNEL == 'main' || inputs.CHANNEL == 'nightly' }} # TODO: uncomment this, only here for quicker testing of ci.
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: true

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-${{ matrix.name }}"
          save_cache: true
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      # Building with `--all-features` requires extra build tools like `nasm`.
      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.39.0

      # TODO: if this works, also put it on user ci
      # TODO: explain here and in script
      - name: Install Vulkan SDK
        if: ${{ matrix.name != 'macos' }}
        uses: jakoch/install-vulkan-sdk-action@v1.0.0
        with:
          vulkan_version: 1.3.231.1 # TODO: set as variable
          install_runtime: true
          cache: true
          stripdown: true

      - name: Setup software rasterizer
        run: pixi run python ./scripts/ci/setup_software_rasterizer.py

      - name: Download test assets
        run: pixi run python ./tests/assets/download_test_assets.py

      - name: Run tests (`cargo test --all-targets --all-features`)
        if: ${{ inputs.CHANNEL != 'nightly' }}
        # Need to use pixi due to NASM dependency.
        run: pixi run cargo test --all-targets --all-features

      - name: Rust all checks & tests
        if: ${{ inputs.CHANNEL == 'nightly' }}
        run: pixi run rs-check
