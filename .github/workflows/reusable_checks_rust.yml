name: "Rust & toml Checks: Lints, Tests, Docs"

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      ALL_CHECKS:
        required: false
        type: boolean
        default: false

concurrency:
  group: ${{ inputs.CONCURRENCY }}-checks_rust
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.8"
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings

  # See https://github.com/ericseppanen/cargo-cranky/issues/8
  RUSTDOCFLAGS: --deny warnings --deny rustdoc::missing_crate_level_docs

  # See: https://github.com/marketplace/actions/sccache-action
  SCCACHE_GHA_ENABLED: "false"

permissions:
  contents: "read"
  id-token: "write"

jobs:
  # ---------------------------------------------------------------------------

  rs-lints:
    name: Rust lints (fmt, check, cranky, tests, doc)
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.12.0
    env:
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-linux"
          save_cache: true
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - uses: prefix-dev/setup-pixi@v0.4.1
        with:
          pixi-version: v0.16.1

      # We need to build the web viewer for `rust_checks.py` to succeed.
      # We build in release so that we can reuse the results for actual publishing, if necessary
      - name: Build web-viewer (release)
        shell: bash
        run: |
          pixi run cargo run --locked -p re_build_web_viewer -- --release

      - name: Rust checks & tests
        if: ${{ !inputs.ALL_CHECKS }}
        run: ./scripts/ci/rust_checks.py --skip-check-individual-crates

      - name: Rust all checks & tests
        if: inputs.ALL_CHECKS
        run: ./scripts/ci/rust_checks.py

  # ---------------------------------------------------------------------------

  rs-check-wasm:
    name: Check Rust web build (wasm32 + wasm-bindgen)
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.12.0
    env:
      RUSTC_WRAPPER: "sccache"
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-web"
          save_cache: true
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - name: clippy check re_viewer wasm32
        shell: bash
        run: ./scripts/clippy_wasm.sh

      - name: Check re_renderer examples wasm32
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --target wasm32-unknown-unknown --target-dir target_wasm -p re_renderer --examples

      - uses: prefix-dev/setup-pixi@v0.4.1
        with:
          pixi-version: v0.16.1

      # We build in release so that we can reuse the results for actual publishing, if necessary
      - name: Build web-viewer (release)
        shell: bash
        run: |
          pixi run cargo run --locked -p re_build_web_viewer -- --release

  # ---------------------------------------------------------------------------

  toml-lints:
    name: Lint TOML files
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

      - uses: prefix-dev/setup-pixi@v0.4.1
        with:
          pixi-version: v0.16.1

      - name: Taplo check
        shell: bash
        run: |
          pixi run lint-taplo

  # ---------------------------------------------------------------------------

  rs-cargo-deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    container:
      image: rerunio/ci_docker:0.12.0
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

      - name: Cargo Deny
        shell: bash
        id: expected_version
        run: ./scripts/ci/cargo_deny.sh
