name: "Rust Checks: Lints, Tests, Docs"

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      CHANNEL:
        required: false
        type: string # enum: 'nightly', 'main', or 'pr'

concurrency:
  group: ${{ inputs.CONCURRENCY }}-checks_rust
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.8"
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings

  RUSTDOCFLAGS: --deny warnings

  # Disable the GHA backend (Github's 10GB storage) since we use our own GCS backend.
  # See: https://github.com/marketplace/actions/sccache-action
  SCCACHE_GHA_ENABLED: "false"

  # Wrap every `rustc` invocation in `sccache`.
  RUSTC_WRAPPER: "sccache"

  # Not only `sccache` cannot cache incremental builds, it's counter-productive to generate all
  # these incremental artifacts when running on CI.
  CARGO_INCREMENTAL: "0"

defaults:
  run:
    shell: bash

permissions:
  contents: "read"
  id-token: "write"

jobs:
  # ---------------------------------------------------------------------------

  rs-lints:
    name: Rust lints (fmt, check, clippy, tests, doc)
    runs-on: ubuntu-latest-16-cores
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.ref || '' }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-linux"
          save_cache: true
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.25.0

      - name: Rust checks & tests
        if: ${{ inputs.CHANNEL == 'pr' }}
        run: pixi run rs-check --skip individual_crates tests docs_slow

      - name: Rust checks & tests
        if: ${{ inputs.CHANNEL == 'main' }}
        run: pixi run rs-check --skip individual_crates docs_slow

      - name: Rust all checks & tests
        if: ${{ inputs.CHANNEL == 'nightly' }}
        run: pixi run rs-check

  # Run some basics tests on Mac and Windows
  mac-windows-tests:
    name: Test on macOS and Windows
    if: ${{ inputs.CHANNEL == 'nightly' }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            name: macos
          - os: windows-latest-8-cores
            name: windows
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-${{ matrix.name }}"
          save_cache: true
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      # Building with `--all-features` requires extra build tools like `nasm`.
      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.25.0

      - name: pixi run cargo test --all-targets --all-features
        run: pixi run cargo test --all-targets --all-features
