name: Reusable Build Wheels

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      MATURIN_FEATURE_FLAGS:
        required: false
        type: string
        default: "--no-default-features --features pypi"
      PLATFORM:
        required: true
        type: string
      WHEEL_ARTIFACT_NAME:
        required: false
        type: string
        default: ""
      RELEASE_COMMIT:
        required: false
        type: string
        default: ""

concurrency:
  group: ${{ inputs.CONCURRENCY }}-build-wheels
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.8"
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html

  # TODO(jleibs) --deny warnings causes installation of wasm-bindgen to fail on mac
  # RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings
  RUSTFLAGS: --cfg=web_sys_unstable_apis

  # See https://github.com/ericseppanen/cargo-cranky/issues/8
  RUSTDOCFLAGS: --deny warnings --deny rustdoc::missing_crate_level_docs

  # See: https://github.com/marketplace/actions/sccache-action
  SCCACHE_GHA_ENABLED: "false"

permissions:
  contents: "read"
  id-token: "write"

jobs:
  # ---------------------------------------------------------------------------

  set-config:
    name: Set Config (${{ inputs.PLATFORM }})
    runs-on: ubuntu-latest-16-cores
    outputs:
      RUNNER: ${{ steps.set-config.outputs.runner }}
      TARGET: ${{ steps.set-config.outputs.target }}
      CONTAINER: ${{ steps.set-config.outputs.container }}
    steps:
      - name: Set runner and target based on platform
        id: set-config
        shell: bash
        run: |
          case "${{ inputs.PLATFORM }}" in
            linux)
              runner="ubuntu-latest-16-cores"
              target="x86_64-unknown-linux-gnu"
              container="{'image': 'rerunio/ci_docker:0.10.0'}"
              ;;
            windows)
              runner="windows-latest-8-cores"
              target="x86_64-pc-windows-msvc"
              container="null"
              ;;
            macos-arm)
              runner="macos-latest-large" # See https://github.blog/2023-10-02-introducing-the-new-apple-silicon-powered-m1-macos-larger-runner-for-github-actions/
              target="aarch64-apple-darwin"
              container="null"
              ;;
            macos-intel)
              runner="macos-latest-large" # See https://github.blog/2023-10-02-introducing-the-new-apple-silicon-powered-m1-macos-larger-runner-for-github-actions/
              target="x86_64-apple-darwin"
              container="null"
              ;;
            *) echo "Invalid platform" && exit 1 ;;
          esac
          echo "runner=$runner" >> "$GITHUB_OUTPUT"
          echo "target=$target" >> "$GITHUB_OUTPUT"
          echo "container=$container" >> "$GITHUB_OUTPUT"

  # ---------------------------------------------------------------------------

  build-wheels:
    name: Build Wheels (${{ needs.set-config.outputs.RUNNER }})

    needs: [set-config]

    runs-on: ${{ needs.set-config.outputs.RUNNER }}
    container: ${{ fromJson(needs.set-config.outputs.CONTAINER) }}

    steps:
      - name: Show context
        shell: bash
        run: |
          echo "GITHUB_CONTEXT": $GITHUB_CONTEXT
          echo "JOB_CONTEXT": $JOB_CONTEXT
          echo "INPUTS_CONTEXT": $INPUTS_CONTEXT
          echo "ENV_CONTEXT": $ENV_CONTEXT
        env:
          ENV_CONTEXT: ${{ toJson(env) }}
          GITHUB_CONTEXT: ${{ toJson(github) }}
          JOB_CONTEXT: ${{ toJson(job) }}
          INPUTS_CONTEXT: ${{ toJson(inputs) }}

      - uses: actions/checkout@v4
        with:
          ref: ${{ inputs.RELEASE_COMMIT || ((github.event_name == 'pull_request' && github.event.pull_request.head.ref) || '') }}

      - name: Set up Rust
        uses: ./.github/actions/setup-rust
        with:
          cache_key: "build-${{ inputs.PLATFORM }}"
          # Cache will be produced by `reusable_checks/rs-lints`
          save_cache: false
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - uses: prefix-dev/setup-pixi@v0.3.0
        with:
          pixi-version: v0.6.0

      - name: Install dependencies
        shell: bash
        run: |
          pixi run rustup target add ${{ needs.set-config.outputs.TARGET }}
          pixi run pip install -r rerun_py/requirements-build.txt

      - name: Build web-viewer
        # only build web-viewer when publishing to pypi
        if: ${{ contains(inputs.MATURIN_FEATURE_FLAGS, 'pypi') }}
        shell: bash
        run: |
          pixi run cargo run --locked -p re_build_web_viewer -- --release

      - name: Build Wheel
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: "0.14.17"
          manylinux: manylinux_2_31
          container: off
          command: build
          args: |
            --manifest-path rerun_py/Cargo.toml
            --release
            --target ${{ needs.set-config.outputs.TARGET }}
            ${{ inputs.MATURIN_FEATURE_FLAGS }}
            --out dist
        env:
          # we're not actually publishing anything here, this stops `re_web_viewer_server/build.rs` from running
          RERUN_IS_PUBLISHING: true

      - name: Save wheel artifact
        if: ${{ inputs.WHEEL_ARTIFACT_NAME != '' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{inputs.WHEEL_ARTIFACT_NAME}}
          path: dist

