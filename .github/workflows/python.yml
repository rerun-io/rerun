name: CI (Python)

on:
  pull_request:
    paths:
      - "rerun_py/**"
      - "examples/python/**"
      - ".github/workflows/python.yml"
  push:
    branches:
      - "main"
    tags:
      - "v*.*.*" # on release tag

env:
  PYTHON_VERSION: "3.8"
  PRE_RELEASE_INSTRUCTIONS: |
    ## Installing the pre-release Python SDK
    1. Download the correct `.whl`. For Mac M1/M2, grab the "universal2" `.whl`
    2. Run `pip install rerun_sdk<...>.whl` (replace `<...>` with the actual filename)
    3. Test it: `rerun --version`
  UBUNTU_REQUIRED_PKGS: libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libxkbcommon-dev libssl-dev libfontconfig1-dev libatk-bridge2.0 libfreetype6-dev libglib2.0-dev

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }} # Cancel previous CI jobs only on pull-requests
  cancel-in-progress: true

jobs:
  lint:
    name: Python lints (black, mypy, flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - uses: extractions/setup-just@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          just-version: 1.5

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-lint.txt"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r rerun_py/requirements-lint.txt

      - name: Lint Python
        run: |
          just py-lint

  # ---------------------------------------------------------------------------

  matrix-setup:
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      # Sets TAGGED_OR_MAIN if this workflow is running on a tag or the main branch.
      - name: Set TAGGED_OR_MAIN
        if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main'
        run: echo "TAGGED_OR_MAIN=1" >> $GITHUB_ENV

      - id: set-matrix
        shell: bash
        run: |
          matrix=()

          if [[ $TAGGED_OR_MAIN ]]; then
            # MacOS build is really slow (>30 mins); uses up a lot of CI minutes
            matrix+=('{"platform": "macos", "runs_on": "macos-latest"},')
          fi
          matrix+=('{"platform": "windows", "runs_on": "windows-latest-8-cores"},')
          matrix+=('{"platform": "linux", "runs_on": "ubuntu-latest-16-cores"}')

          echo "Matrix values: ${matrix[@]}"

          echo "matrix={\"include\":[${matrix[@]}]}" >> $GITHUB_OUTPUT

  wheels:
    name: Build Python Wheels
    needs: [lint, matrix-setup]

    strategy:
      matrix: ${{fromJson(needs.matrix-setup.outputs.matrix)}}

    runs-on: ${{ matrix.runs_on }}

    steps:
      - uses: actions/checkout@v3

      - name: Cache APT Packages
        if: matrix.platform == 'linux'
        uses: awalsh128/cache-apt-pkgs-action@v1.2.2
        with:
          packages: ${{ env.UBUNTU_REQUIRED_PKGS }}
          version: 1.0
          execute_install_scripts: true

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST CACHE_KEY
          # Don't update the cache -- it will be updated by the lint job
          # TODO(jleibs): this job will likely run before rust.yml updates
          # the cache. Better cross-job sequencing would be nice here
          save-if: False

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-build.txt"

      - name: Install prerequisites for building the web-viewer Wasm
        shell: bash
        continue-on-error: true
        run: ./scripts/setup_web.sh

      # winget not available within the github runner, so download the package directly
      # See: https://github.com/marketplace/actions/engineerd-configurator
      - name: Install prerequisites for building the web-viewer Wasm on windows
        if: matrix.platform == 'windows'
        uses: engineerd/configurator@v0.0.9
        with:
          name: "wasm-opt.exe"
          url: "https://github.com/WebAssembly/binaryen/releases/download/version_111/binaryen-version_111-x86_64-windows.tar.gz"
          pathInArchive: "binaryen-version_111/bin/wasm-opt.exe"

      - name: Patch Cargo.toml for pre-release
        if: github.ref == 'refs/heads/main'
        # After patching the pre-release version, run cargo check.
        # This updates the cargo.lock file with the new version numbers and keeps the wheel build from failing
        run: |
          python scripts/version_util.py --patch_prerelease
          cargo check

      - name: Version check for tagged-release
        if: startsWith(github.ref, 'refs/tags/v')
        # This call to version_util.py will assert version from Cargo.toml matches git tagged version vX.Y.Z
        run: |
          python scripts/version_util.py --check_version

      - name: Build and install rerun
        run: pip install rerun_py/

      - name: Cache RRD dataset
        id: dataset
        uses: actions/cache@v3
        with:
          path: examples/python/colmap/dataset/
          # TODO(jleibs): Derive this key from the invocation below
          key: colmap-dataset-colmap-fiat-v0

      - name: Generate Embedded RRD file
        shell: bash
        # If you change the line below you should almost definitely change the `key:` line above by giving it a new, unique name
        run: |
          pip install -r examples/python/colmap/requirements.txt
          python examples/python/colmap/main.py --dataset colmap_fiat --resize 800x600 --save colmap_fiat.rrd
          cp colmap_fiat.rrd rerun_py/rerun_sdk/rerun_demo/demo.rrd

      - name: Build Wheel
        uses: PyO3/maturin-action@v1
        with:
          maturin-version: "0.14.10"
          manylinux: auto
          container: off
          command: build
          args: |
            --manifest-path rerun_py/Cargo.toml
            --release
            --no-default-features
            --features pypi
            --universal2
            --out dist

      - name: Install built wheel
        run: |
          pip install rerun-sdk --find-links dist --force-reinstall
          pip install pytest #TODO(john) move to requirements-build.txt
          cd rerun_py/tests && pytest

      - name: Run Car example
        run: |
          pip install -r examples/python/car/requirements.txt
          python examples/python/car/main.py --headless

      - name: Upload wheels
        uses: actions/upload-artifact@v3
        with:
          name: wheels
          path: dist

  # ---------------------------------------------------------------------------

  # See https://github.com/marvinpinto/action-automatic-releases#automatically-generate-a-pre-release-when-changes-land-on-master for details
  pre-release:
    name: Pre Release
    needs: [wheels]
    if: github.ref == 'refs/heads/main'
    runs-on: "ubuntu-latest"
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Github Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          body: ${{ env.PRE_RELEASE_INSTRUCTIONS }}
          prerelease: true
          files: dist/*
          name: "Development Build"
          tag_name: "latest"
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true
          append_body: true

  # ---------------------------------------------------------------------------

  # This job is run on tags starting with "v", e.g., "v0.1.0"
  tagged-release:
    name: Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [wheels]
    steps:
      - name: Download Artifact
        uses: actions/download-artifact@v3
        with:
          name: wheels
          path: dist

      - name: Github Release
        uses: softprops/action-gh-release@v0.1.15
        with:
          prerelease: false
          files: dist/*
          token: ${{ secrets.GITHUB_TOKEN }}
          generate_release_notes: true

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          # These are both set in the Github project configuration
          MATURIN_REPOSITORY: ${{ vars.PYPI_REPOSITORY }}
          MATURIN_PYPI_TOKEN: ${{ secrets.MATURIN_PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing dist/*

  # ---------------------------------------------------------------------------

  py-test-docs:
    name: Verify the docs build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-doc.txt"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r rerun_py/requirements-doc.txt

      - name: Build via mkdocs
        run: |
          mkdocs build -f rerun_py/mkdocs.yml

  py-docs:
    name: Build and deploy docs
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Don't do a shallow clone

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"
          cache-dependency-path: "rerun_py/requirements-doc.txt"

      - name: Install Python dependencies
        run: |
          pip install --upgrade pip
          pip install -r rerun_py/requirements-doc.txt

      - name: Set up git author
        run: |
          remote_repo="https://${GITHUB_TOKEN}@github.com/${GITHUB_REPOSITORY}.git"
          git config --global user.name "${GITHUB_ACTOR}"
          git config --global user.email "${GITHUB_ACTOR}@users.noreply.github.com"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Deploy via mike # https://github.com/jimporter/mike
        run: |
          git fetch
          mike deploy -F rerun_py/mkdocs.yml -p --rebase -b gh-pages --prefix docs/python HEAD
