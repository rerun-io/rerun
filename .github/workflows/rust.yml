on:
  push:
    branches:
      - 'main'
  pull_request:


name: CI

env:
  # This is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  check_no_features:
    name: Check --no-default-features
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          override: true
      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --no-default-features --features __ci --lib

  check_wasm:
    name: Check wasm32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          target: wasm32-unknown-unknown
          override: true
      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: -p re_viewer --all-features --lib --target wasm32-unknown-unknown

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          override: true
      - run: sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --lib

  fmt-crank-check:
    name: Rustfmt + cranky + check all
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          override: true
          components: rustfmt
      - run: sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-
      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check
      - run: cargo install cargo-cranky
      - name: Cranky
        uses: actions-rs/cargo@v1
        with:
          command: cranky
          args: --all-targets --all-features --  -D warnings
      - name: Check all features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features --locked

  cargo-deny:
    name: cargo deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: EmbarkStudios/cargo-deny-action@v1
        with:
          rust-version: "1.63.0"

  lint_py:
    name: lint.py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/lint.py

  wasm_bindgen:
    name: wasm-bindgen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          target: wasm32-unknown-unknown
          override: true
      - uses: jetli/wasm-bindgen-action@v0.1.0
        with:
          version: '0.2.82'
      - run: ./crates/re_viewer/wasm_bindgen_check.sh --skip-setup

  # NOTE: we don't use messense/maturin-action here because we need extra steps to install eframe dependencies
  # NOTE 2: We skip uploading the wheels for all these maturin builds since they are just there to test that it works
  linux-wheels:
    name: Build Linux Wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.63.0
          override: true
      - run: sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs  # TODO(Niko): Could be built into a container
      - run: python3 -m pip install -r crates/re_sdk_python/requirements.txt
      - name: Build wheels
        run: maturin build -m crates/re_sdk_python/Cargo.toml


  maturin-windows:
    name: Maturin Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: messense/maturin-action@v1
        with:
          maturin-version: "0.13.1"
          command: build
          args: -m crates/re_sdk_python/Cargo.toml -o dist


  maturin-macos:
    name: Maturin MacOS
    runs-on: macos-latest
    if: "startsWith(github.ref, 'refs/tags/')" # slow; uses up a lot of CI minutes
    steps:
      - uses: actions/checkout@v3
      - uses: messense/maturin-action@v1
        with:
          maturin-version: "0.13.1"
          command: build
          args: -m crates/re_sdk_python/Cargo.toml  -o dist --universal2

