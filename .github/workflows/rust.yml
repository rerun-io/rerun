on: [push, pull_request]

name: CI

env:
  # This is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings
  RUSTDOCFLAGS: -D warnings

jobs:
  check_all_features:
    name: Check --all-features
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --all-features --locked

  check_no_features:
    name: Check --no-default-features
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: --no-default-features --features __ci --lib

  check_wasm:
    name: Check wasm32
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - run: rustup target add wasm32-unknown-unknown
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: -p re_viewer --all-features --lib --target wasm32-unknown-unknown

  test:
    name: Test Suite
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features --lib

  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs
      - run: rustup component add rustfmt
      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  cranky:
    name: cargo cranky
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get update && sudo apt-get install libgtk-3-dev
      - run: cargo install cargo-cranky
      - uses: actions-rs/cargo@v1
        with:
          command: cranky
          args: --all-targets --all-features --  -D warnings

  cargo-deny:
    name: cargo deny
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: cargo install cargo-deny
      - run: cargo deny check

  lint_py:
    name: lint.py
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - run: ./scripts/lint.py

  # For some reason this causes weird problems:
  # https://github.com/rerun-io/rerun/runs/6271778805?check_suite_focus=true
  # Error: -03 10:39:38 [ERROR] `cargo metadata` exited with an error: info: syncing channel updates for '1.60.0-x86_64-unknown-linux-musl'
  # failed to read `/github/rerun/web_server/Cargo.toml`
  # cargo-deny:
  #   runs-on: ubuntu-20.04
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: EmbarkStudios/cargo-deny-action@v1

  wasm_bindgen:
    name: wasm-bindgen
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: rustup target add wasm32-unknown-unknown
      - run: ./crates/re_viewer/setup_web.sh
      - run: ./crates/re_viewer/wasm_bindgen_check.sh

  # NOTE: we don't use messense/maturin-action here because we need extra steps to install eframe dependencies
  linux-wheels:
    name: Build Linux Wheels
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.62.0
          override: true
      - run: sudo apt-get install libgtk-3-dev libxcb-render0-dev libxcb-shape0-dev libxcb-xfixes0-dev libspeechd-dev libxkbcommon-dev libssl-dev # eframe reqs
      - run: python3 -m pip install -r crates/re_sdk_python/requirements.txt
      - name: Build wheels
        run: maturin build -m crates/re_sdk_python/Cargo.toml --release -o dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  maturin-windows:
    name: Maturin Windows
    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v3
      - uses: messense/maturin-action@v1
        with:
          maturin-version: "0.13.1"
          command: build
          args: -m crates/re_sdk_python/Cargo.toml --release -o dist
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  maturin-macos:
    name: Maturin MacOS
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v3
      - uses: messense/maturin-action@v1
        with:
          maturin-version: "0.13.1"
          command: build
          args: -m crates/re_sdk_python/Cargo.toml --release -o dist --universal2
      - name: Upload wheels
        uses: actions/upload-artifact@v2
        with:
          name: wheels
          path: dist

  maturin-release:
    name: Maturin Release
    runs-on: ubuntu-latest
    if: "startsWith(github.ref, 'refs/tags/')"
    needs: [maturin-macos, maturin-windows, linux-wheels]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: wheels
      - name: Publish to PyPI
        uses: messense/maturin-action@v1
        env:
          MATURIN_PYPI_TOKEN: ${{ secrets.PYPI_API_TOKEN }}
        with:
          maturin-version: "0.13.1"
          command: upload
          args: -m crates/re_sdk_python/Cargo.toml --skip-existing *
