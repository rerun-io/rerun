name: CI (Rust)

on:
  push:
    branches:
      - "main"
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html
  RUSTFLAGS: --cfg=web_sys_unstable_apis -D warnings

  # See https://github.com/ericseppanen/cargo-cranky/issues/8
  RUSTDOCFLAGS: -D warnings -D rustdoc::missing_crate_level_docs

permissions:
  # deployments permission to deploy GitHub pages website
  deployments: write
  # contents permission to update benchmark contents in gh-pages branch
  contents: write

jobs:
  rs-benchmarks:
    name: Rust Criterion benchmarks
    # Only run the rs-benchmarks job when a commit gets pushed to main
    if: ${{ github.event_name == 'push' }}

    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.1
      env:
        RUSTFLAGS: ${{env.RUSTFLAGS}}
        RUSTDOCFLAGS: ${{env.RUSTDOCFLAGS}}
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST CACHE_KEY

      - name: Run benchmark
        run: |
          cargo bench \
            --all-features \
            -p re_arrow_store \
            -p re_data_store \
            -p re_log_types \
            -p re_query \
            -p re_tuid \
            -- --output-format=bencher | tee output.txt

      - name: Store benchmark result
        uses: benchmark-action/github-action-benchmark@v1
        with:
          name: Rust Benchmark
          tool: "cargo"
          output-file-path: output.txt
          github-token: ${{ secrets.GITHUB_TOKEN }}

          # Show alert with commit comment on detecting possible performance regression
          comment-on-alert: true
          alert-threshold: "150%"
          fail-on-alert: true
          comment-always: true

          # Push and deploy GitHub pages branch automatically
          auto-push: true
          gh-pages-branch: gh-pages
          benchmark-data-dir-path: dev/bench
          max-items-in-chart: 30

  # ---------------------------------------------------------------------------

  rs-lints:
    name: Rust lints (fmt, check, cranky, tests, doc)
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.1
      env:
        RUSTFLAGS: ${{env.RUSTFLAGS}}
        RUSTDOCFLAGS: ${{env.RUSTDOCFLAGS}}
    steps:
      - uses: actions/checkout@v2

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST CACHE_KEY
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      # First do our check with --locked to make sure `Cargo.lock` is up to date
      - name: Check all features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --all-features

      - name: Rustfmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

      - name: Cranky
        uses: actions-rs/cargo@v1
        with:
          command: cranky
          args: --all-targets --all-features --  -D warnings

      - name: Check no default features
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --no-default-features --features __ci --lib

      - name: Test doc-tests
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --doc --all-features

      - name: cargo doc
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --no-deps --all-features

      - name: cargo doc --document-private-items
        uses: actions-rs/cargo@v1
        with:
          command: doc
          args: --document-private-items --no-deps --all-features

      - name: Test
        uses: actions-rs/cargo@v1
        with:
          command: test
          args: --all-features

  # ---------------------------------------------------------------------------

  rs-check-wasm:
    name: Check Rust web build (wasm32 + wasm-bindgen)
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.1
      env:
        RUSTFLAGS: ${{env.RUSTFLAGS}}
        RUSTDOCFLAGS: ${{env.RUSTDOCFLAGS}}
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: 1.65.0
          target: wasm32-unknown-unknown
          override: true

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST CACHE_KEY
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Check re_viewer wasm32
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --all-features --lib --target wasm32-unknown-unknown -p re_viewer

      - name: Check re_renderer examples wasm32
        uses: actions-rs/cargo@v1
        with:
          command: check
          args: --locked --target wasm32-unknown-unknown -p re_renderer --examples

      - run: ./scripts/wasm_bindgen_check.sh --skip-setup

  # ---------------------------------------------------------------------------

  rs-cargo-deny:
    name: Check Rust dependencies (cargo-deny)
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.1
      env:
        RUSTFLAGS: ${{env.RUSTFLAGS}}
        RUSTDOCFLAGS: ${{env.RUSTDOCFLAGS}}
    steps:
      - uses: actions/checkout@v2

      - name: cargo deny
        uses: actions-rs/cargo@v1
        with:
          command: deny
          args: --log-level=error check

  # ---------------------------------------------------------------------------

  rs-maturin-linux:
    name: Build Rust SDK Maturin Wheel (Linux)
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.1
    steps:
      - uses: actions/checkout@v2

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          env-vars: CARGO CC CFLAGS CXX CMAKE RUST CACHE_KEY
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Build wheels
        run: maturin build -m rerun_py/Cargo.toml -o dist

  # ---------------------------------------------------------------------------

  rs-maturin-windows:
    name: Build Rust SDK Maturin Wheel (Windows)
    runs-on: windows-latest-8-cores
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Setup python for building wheel
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          # Caching pip packages is broken for some reason
          # cache: "pip"

      - uses: messense/maturin-action@v1
        with:
          maturin-version: "0.13.5"
          command: build
          args: -m rerun_py/Cargo.toml -o dist

  # ---------------------------------------------------------------------------

  rs-maturin-macos:
    name: Build Rust SDK Maturin Wheel (macOS)
    runs-on: macos-latest
    if: "startsWith(github.ref, 'refs/tags/')" # slow and uses up a lot of CI minutes (charged 10x of ubuntu!)
    steps:
      - uses: actions/checkout@v3

      - name: Set up cargo cache
        uses: Swatinem/rust-cache@v2
        with:
          # See: https://github.com/rerun-io/rerun/pull/497
          save-if: ${{ github.event_name == 'push'}}

      - name: Setup python for building wheel
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"
          cache: "pip"

      - uses: messense/maturin-action@v1
        with:
          maturin-version: "0.13.5"
          command: build
          args: -m rerun_py/Cargo.toml  -o dist --universal2
