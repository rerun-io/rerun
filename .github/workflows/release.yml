name: Release

on:
  workflow_dispatch:
    inputs:
      release-type:
        description: "Is this a pre-release or a final release?"
        type: choice
        options:
          - prerelease
          - release
        required: true

concurrency:
  group: ${{ github.ref_name }}
  cancel-in-progress: true

permissions: # wants to push commits and create a PR
  contents: write
  id-token: write

jobs:
  # Re-entrancy:
  # - `version` is re-entrant because it doesn't commit/create PR if the version doesn't change,
  #   and the version doesn't change if we're already on the final version specified by the branch name.
  # - `update-docs` is re-entrant because it overwrites history of the `gh-pages` branch, so any
  #   previous partial update will just be overwritten by the next successful run.
  # - `publish-crates` is re-entrant because the `crates.py` script correctly handles publish failures
  #   by first checking if a crate has already been published before attempting to publish it.
  # - `build-and-publish-wheels` is re-entrant because all the uploaded artifacts will be overwritten
  #   by any subsequent runs, and the final upload to PyPI has the `--skip-existing` flag, which ignores
  #   any wheels already uploaded.
  version:
    name: "Versioning"
    runs-on: ubuntu-latest

    outputs:
      previous: ${{ steps.versioning.outputs.previous }}
      current: ${{ steps.versioning.outputs.current }}
      final: ${{ steps.versioning.outputs.final }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install deps
        run: |
          python3 -m pip install -r ./scripts/ci/requirements.txt

      - name: Update crate versions
        id: versioning
        run: |
          release_version=$(echo ${{ github.ref_name }} | grep -oP '^release-\K\d+\.\d+\.\d+$')

          previous=$(python3 scripts/ci/crates.py get-version)

          if [ $(python3 scripts/ci/crates.py get-version --finalize) != $release_version ]; then
            python3 scripts/ci/crates.py version --exact $release_version
          fi

          if [ ${{ inputs.release-type }} = "prerelease" ]; then
            python3 scripts/ci/crates.py version --bump prerelease --pre-id=rc
          fi

          current=$(python3 scripts/ci/crates.py get-version)
          final=$(python3 scripts/ci/crates.py get-version --finalize)

          echo "previous=$previous" >> "$GITHUB_OUTPUT"
          echo "current=$current"   >> "$GITHUB_OUTPUT"
          echo "final=$final"       >> "$GITHUB_OUTPUT"

      - name: Create pull request
        uses: peter-evans/create-pull-request@v5.0.2
        if: steps.versioning.outputs.previous != steps.versioning.outputs.current
        with:
          token: ${{ secrets.RERUN_BOT_TOKEN }}
          base: main
          branch: ${{ github.ref_name }}
          commit-message: "Bump crate versions to `${{ steps.versioning.outputs.final }}`"
          title: "Release ${{ steps.versioning.outputs.final }}"
          labels: "â›´ release"
          committer: "Rerun Bot <bot@rerun.io>"
          author: "Rerun Bot <bot@rerun.io>"
          body: |
            # Release ${{ steps.versioning.outputs.final }}

            ### Next steps
            - [Test the release](#testing)
            - For any added commits, run the release workflow in `prerelease` mode
            - After testing, run the release workflow in `release` mode
            - Once the final release workflow finishes, [create a GitHub release](https://github.com/rerun-io/rerun/releases/new)

            ### Testing
            - [ ] Docs
              - NOTE: wait for docs deploy + [`docs.rs` build](https://docs.rs/releases/queue)
              - [ ] [ref.rerun.io](https://ref.rerun.io/docs/rust/prerelease/rerun/) (Rust)
              - [ ] [ref.rerun.io](https://ref.rerun.io/docs/python/prerelease/common/) (Python)
              - [ ] [rerun.io/docs](https://rerun.io/preview/{{ "pr:%s"|format(pr.branch)|encode_uri_component }}/docs)
              - [ ] [rerun.io/examples](https://rerun.io/preview/{{ "pr:%s"|format(pr.branch)|encode_uri_component }}/examples)
              - [ ] [docs.rs](https://docs.rs/rerun/${{ steps.versioning.outputs.current }}/rerun/)
            - Web (TODO(jprochazk): publish web + add links for these)
              - Demo
              - App
            - [ ] Windows
              - [ ] Python Wheel
                - [ ] Web
                - [ ] Native
              - [ ] Rust crate
                - [ ] Web
                - [ ] Native
              - [ ] Rust install
                - [ ] Web
                - [ ] Native
            - [ ] Linux
              - [ ] Python Wheel
                - [ ] Web
                - [ ] Native
              - [ ] Rust crate
                - [ ] Web
                - [ ] Native
              - [ ] Rust install
                - [ ] Web
                - [ ] Native
            - [ ] Mac
              - [ ] Python Wheel
                - [ ] Web
                - [ ] Native
              - [ ] Rust crate
                - [ ] Web
                - [ ] Native
              - [ ] Rust install
                - [ ] Web
                - [ ] Native

  update-docs:
    name: "Update Docs"
    needs: [version]
    uses: ./.github/workflows/reusable_deploy_docs.yml
    # TEMP: disabled
    if: false
    with:
      CONCURRENCY: ${{ github.ref_name }}
      PY_DOCS_VERSION_NAME: ${{ inputs.release-type == 'prerelease' && 'prerelease' || needs.version.outputs.final }}
      RS_DOCS_VERSION_NAME: ${{ inputs.release-type == 'prerelease' && 'prerelease' || 'head' }}
      # TODO(jprochazk): set `rerun.io` target commit if `UPDATE_LATEST`
      UPDATE_LATEST: ${{ inputs.release-type == 'release' }}
    secrets: inherit

  publish-crates:
    name: "Publish Crates"
    needs: [version]
    uses: ./.github/workflows/reusable_release_crates.yml
    # TEMP: disabled
    if: false
    with:
      CONCURRENCY: ${{ github.ref_name }}
    secrets: inherit

  build-and-publish-wheels:
    name: "Build and Publish Wheels"
    needs: [version]
    uses: ./.github/workflows/reusable_build_and_publish_wheels.yml
    # TEMP: disabled
    if: false
    with:
      release-version: ${{ needs.version.outputs.current }}
      concurrency: ${{ github.ref_name }}
      linux-wheel-name: linux-wheel
      linux-rrd-name: linux-rrd
    secrets: inherit

  build-and-publish-web:
    name: "Build and Publish Web"
    needs: [version, build-and-publish-wheels]
    uses: ./.github/workflows/reusable_build_and_publish_web.yml
    # TEMP: disabled
    if: false
    with:
      release-version: ${{ needs.version.outputs.current }}
      concurrency: ${{ github.ref_name }}
      wheel-artifact-name: linux-wheel
      rrd-artifact-name: linux-rrd
      update-latest: ${{ inputs.release-type == 'release' }}

  update-latest-branch:
    name: "Update Latest Branch"
    # only update the latest branch in `release`
    # and after every other step has finished
    # TEMP: disabled
    if: false || inputs.release-type == 'release'
    needs: [update-docs, publish-crates, build-and-publish-wheels]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Update latest branch
        run: |
          git fetch
          git checkout ${{ github.ref_name }}
          git push --force origin ${{ github.ref_name }}:latest
          git commit -m "Update docs for ${GITHUB_SHA}"
          git push origin gh-pages-orphan:gh-pages -f

