name: Reusable Build and Test Wheels (contrib)

on:
  workflow_call:
    inputs:
      CONCURRENCY:
        required: true
        type: string
      MATURIN_FEATURE_FLAGS:
        required: false
        type: string
        default: "--no-default-features --features pypi"

concurrency:
  group: ${{ inputs.CONCURRENCY }}-build-wheels
  cancel-in-progress: true

env:
  PYTHON_VERSION: "3.8"

  # web_sys_unstable_apis is required to enable the web_sys clipboard API which egui_web uses
  # https://rustwasm.github.io/wasm-bindgen/api/web_sys/struct.Clipboard.html
  # https://rustwasm.github.io/docs/wasm-bindgen/web-sys/unstable-apis.html

  # TODO(jleibs) --deny warnings causes installation of wasm-bindgen to fail on mac
  # RUSTFLAGS: --cfg=web_sys_unstable_apis --deny warnings
  RUSTFLAGS: --cfg=web_sys_unstable_apis

  RUSTDOCFLAGS: --deny warnings

  # Do *not* use sscache since on contributor ci we don't have access to the gcloud stored cache.
  #RUSTC_WRAPPER: "sccache"

  # Not only `sccache` cannot cache incremental builds, it's counter-productive to generate all
  # these incremental artifacts when running on CI.
  CARGO_INCREMENTAL: "0"

defaults:
  run:
    shell: bash

permissions:
  contents: "read"

jobs:
  build-wheels:
    name: Build Wheels
    runs-on: ubuntu-latest-16-cores
    container:
      image: rerunio/ci_docker:0.14.0
    steps:
      - uses: actions/checkout@v4

      - uses: prefix-dev/setup-pixi@v0.8.1
        with:
          pixi-version: v0.25.0
          environments: wheel-test-min

      - name: Build rerun-cli
        env:
          # this stops `re_web_viewer_server/build.rs` from running
          RERUN_IS_PUBLISHING: true
        run: |
          pixi run cargo build \
            --locked \
            -p rerun-cli \
            --no-default-features \
            --features release \
            --release \
            --target x86_64-unknown-linux-gnu

      - name: Copy rerun-cli to wheel foldcer
        run: |
          cp target/release/rerun rerun_py/rerun_sdk/rerun_cli

      - name: Build the wheel
        run: |
          pixi run python scripts/ci/build_and_upload_wheels.py \
            --mode pr \
            --target x86_64-unknown-linux-gnu \
            --dir unused \
            --compat manylinux_2_34

      - name: Install built wheel
        run: |
          pixi run python scripts/ci/pixi_install_wheel.py --feature python-pypi --package rerun-sdk --dir dist/x86_64-unknown-linux-gnu

      - name: Run e2e test
        run: pixi run -e wheel-test-min RUST_LOG=debug scripts/run_python_e2e_test.py --no-build # rerun-sdk is already built and installed

      - name: Run tests/roundtrips.py
        # --release so we can inherit from some of the artifacts that maturin has just built before
        # --target x86_64-unknown-linux-gnu because otherwise cargo loses the target cache… even though this is the target anyhow…
        # --no-py-build because rerun-sdk is already built and installed
        run: |
          pixi run -e wheel-test-min RUST_LOG=debug tests/roundtrips.py --release --target x86_64-unknown-linux-gnu --no-py-build

      - name: Run docs/snippets/compare_snippet_output.py
        # --release so we can inherit from some of the artifacts that maturin has just built before
        # --target x86_64-unknown-linux-gnu because otherwise cargo loses the target cache… even though this is the target anyhow…
        # --no-py-build because rerun-sdk is already built and installed
        run: |
          pixi run -e wheel-test-min RUST_LOG=debug docs/snippets/compare_snippet_output.py --release --target x86_64-unknown-linux-gnu --no-py-build
