name: Build and publish wheels

on:
  workflow_call:
    inputs:
      concurrency:
        type: string
        required: true
      release-version:
        description: "Release Version Number (Must match Cargo.toml)"
        type: string
        required: true
      linux-wheel-name:
        description: "Name of the wheel built for linux"
        type: string
        required: true
      linux-rrd-name:
        description: "Name of the .rrd file built for linux"
        type: string
        required: true

jobs:
  get-commit-sha:
    name: Get Commit Sha
    runs-on: ubuntu-latest
    outputs:
      short-sha: ${{ steps.get-short-sha.outputs.short-sha }}
      full-sha: ${{ steps.get-full-sha.outputs.full-sha }}
    steps:
      - name: "Set short-sha"
        id: get-short-sha
        run: echo "short-sha=$(echo ${{ github.sha }} | cut -c1-7)" >> $GITHUB_OUTPUT

      - name: "Set full-sha"
        id: get-full-sha
        run: echo "full-sha=${{ github.sha }}" >> $GITHUB_OUTPUT

  ### Linux
  build-linux:
    name: "Linux: Build/Test Wheels"
    needs: [get-commit-sha]
    uses: ./.github/workflows/reusable_build_and_test_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      PLATFORM: linux
      WHEEL_ARTIFACT_NAME: ${{ inputs.linux-wheel-name }}
      RRD_ARTIFACT_NAME: ${{ inputs.linux-rrd-name }}
      RELEASE_VERSION: ${{ inputs.release-version }}
    secrets: inherit

  upload-wheels-linux:
    name: "Linux: Upload Wheels"
    needs: [build-linux]
    uses: ./.github/workflows/reusable_upload_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      WHEEL_ARTIFACT_NAME: ${{ inputs.linux-wheel-name }}
      RRD_ARTIFACT_NAME: ${{ inputs.linux-rrd-name }}
    secrets: inherit

  ### Windows
  build-windows:
    name: "Windows: Build/Test Wheels"
    needs: [get-commit-sha]
    uses: ./.github/workflows/reusable_build_and_test_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      PLATFORM: windows
      WHEEL_ARTIFACT_NAME: windows-wheel
      RRD_ARTIFACT_NAME: ""
      RELEASE_VERSION: ${{ inputs.release-version }}
    secrets: inherit

  upload-wheels-windows:
    name: "Windows: Upload Wheels"
    needs: [build-linux, build-windows]
    uses: ./.github/workflows/reusable_upload_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      WHEEL_ARTIFACT_NAME: windows-wheel
      RRD_ARTIFACT_NAME: ${{ inputs.linux-rrd-name }}
    secrets: inherit

  ### macOS (arm)
  build-macos-arm:
    name: "Macos-Arm: Build/Test Wheels"
    needs: [get-commit-sha]
    uses: ./.github/workflows/reusable_build_and_test_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      PLATFORM: macos-arm
      WHEEL_ARTIFACT_NAME: macos-arm-wheel
      RRD_ARTIFACT_NAME: ""
      RELEASE_VERSION: ${{ inputs.release-version }}
    secrets: inherit

  upload-wheels-macos-arm:
    name: "Macos-Arm: Upload Wheels"
    needs: [build-linux, build-macos-arm]
    uses: ./.github/workflows/reusable_upload_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      WHEEL_ARTIFACT_NAME: macos-arm-wheel
      RRD_ARTIFACT_NAME: ${{ inputs.linux-rrd-name }}
    secrets: inherit

  ### macOS (intel)
  build-macos-intel:
    name: "Macos-Intel: Build/Test Wheels"
    needs: [get-commit-sha]
    uses: ./.github/workflows/reusable_build_and_test_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      PLATFORM: macos-intel
      WHEEL_ARTIFACT_NAME: "macos-intel-wheel"
      RRD_ARTIFACT_NAME: ""
      RELEASE_VERSION: ${{ inputs.release-version }}
    secrets: inherit

  upload-wheels-macos-intel:
    name: "Macos-Intel: Upload Wheels"
    needs: [build-linux, build-macos-intel]
    uses: ./.github/workflows/reusable_upload_wheels.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
      WHEEL_ARTIFACT_NAME: macos-intel-wheel
      RRD_ARTIFACT_NAME: ${{ inputs.linux-rrd-name }}
    secrets: inherit

  generate-wheel-index:
    name: "Generate Pip Index"
    needs:
      [
        upload-wheels-linux,
        upload-wheels-windows,
        upload-wheels-macos-arm,
        upload-wheels-macos-intel,
      ]
    uses: ./.github/workflows/reusable_pip_index.yml
    with:
      CONCURRENCY: ${{ inputs.concurrency }}
    secrets: inherit

  publish-wheels:
    name: "Publish Wheels"
    needs: [get-commit-sha, generate-wheel-index]
    runs-on: ubuntu-latest-16-cores
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Don't do a shallow clone since we need it for finding the full commit hash

      - id: "auth"
        uses: google-github-actions/auth@v1
        with:
          workload_identity_provider: ${{ secrets.GOOGLE_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GOOGLE_SERVICE_ACCOUNT }}

      - name: "Set up Cloud SDK"
        uses: "google-github-actions/setup-gcloud@v1"
        with:
          version: ">= 363.0.0"

      - name: Install packaging
        run: |
          python3 -m pip install packaging google-cloud-storage

      - name: Download wheels from Google Cloud Storage
        run: |
          mkdir wheels
          gsutil cp "gs://rerun-builds/commit/${{ needs.get-commit-sha.outputs.short-sha }}/wheels/*.whl" wheels/

      - name: Verify wheels match the expected release
        run: |
          python3 scripts/ci/verify_wheels.py --folder wheels --version ${{ inputs.release-version }}

      - name: Publish to PyPI
        uses: PyO3/maturin-action@v1
        env:
          # These are both set in the GitHub project configuration
          MATURIN_REPOSITORY: ${{ vars.PYPI_REPOSITORY }}
          MATURIN_PYPI_TOKEN: ${{ secrets.MATURIN_PYPI_TOKEN }}
        with:
          command: upload
          args: --skip-existing wheels/*

