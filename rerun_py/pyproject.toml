[build-system]
build-backend = "maturin"
requires = ["maturin>=0.14.0,<0.15"]

[project]
classifiers = [
  "Programming Language :: Rust",
  "Programming Language :: Python :: Implementation :: CPython",
  "Programming Language :: Python :: Implementation :: PyPy",
  "Development Status :: 3 - Alpha",
  "Topic :: Scientific/Engineering :: Artificial Intelligence",
  "Topic :: Scientific/Engineering :: Visualization",
]
dependencies = [
  # Must match list in `.github/workflows/reusable_build_and_test_wheels.yml`
  "attrs>=23.1.0",
  "deprecated",
  "numpy>=1.23",
  "pillow",          # Used for JPEG encoding
  "pyarrow==10.0.1",
]
description = "The Rerun Logging SDK"
keywords = ["computer-vision", "logging", "rerun"]
name = "rerun-sdk"
requires-python = ">=3.8"

[[project.authors]]
email = "opensource@rerun.io"
name = "Rerun.io"

[project.license]
text = "MIT OR Apache-2.0"

[project.optional-dependencies]
tests = ["pytest==7.1.2"]

[project.urls]
documentation = "https://www.rerun.io/docs"
homepage = "https://www.rerun.io"
repository = "https://github.com/rerun-io/rerun"

[project.scripts]
rerun = "rerun.__main__:main"

[tool.black]
line-length = 120
target-version = ["py38"]

[tool.ruff]
# https://beta.ruff.rs/docs/configuration/

# target-version = "py38"  # inferred from requires-python, see https://beta.ruff.rs/docs/settings/#target-version

extend-exclude = [
  # Automatically generated test artifacts
  "venv/",
  "target/",

  # generated
  "examples/python/objectron/proto/objectron/proto.py",

  # Copied from https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/pipeline_stable_diffusion_depth2img.py
  "examples/python/depth_guided_stable_diffusion/huggingface_pipeline.py",

  # Copied from https://github.com/colmap/colmap/blob/bf3e19140f491c3042bfd85b7192ef7d249808ec/scripts/python/read_write_model.py
  "examples/python/structure_from_motion/read_write_model.py",
]

ignore = [
  # Missing docstring in public function - TODO(emilk): enable for SDK but not for examples
  "D1",

  # No blank lines allowed after function docstring.
  "D202",

  # npydocstyle: http://www.pydocstyle.org/en/stable/error_codes.html
  # numpy convention with a few additional lints
  "D107",
  "D203",
  "D212",
  "D401",
  "D402",
  "D415",
  "D416",

  # Black is going to handle this for us, and ruff can't fix this error on its own (yet)
  # Having ruff check this causes errors that prevent the code-formatting process from
  # completing.
  "E501",

  # allow relative imports
  "TID252",
]

line-length = 120
select = [
  "D",   # pydocstyle codes https://www.pydocstyle.org/en/latest/error_codes.html
  "E",   # pycodestyle error codes: https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
  "F",   # Flake8 error codes https://flake8.pycqa.org/en/latest/user/error-codes.html
  "I",   # Isort
  "TID", # flake8-tidy-imports
  "W",   # pycodestyle warning codes: https://pycodestyle.pycqa.org/en/latest/intro.html#error-codes
  "UP",  # pyupgrade (ensures idomatic code for supported python version)
]

[tool.ruff.per-file-ignores]
"docs/code-examples/*" = ["I002"]
"docs/code-examples/extension-components/example.py" = ["F821"]
"__init__.py" = ["F401", "F403"]

[tool.ruff.isort]
required-imports = ["from __future__ import annotations"]

[tool.maturin]
# We use a python package from inside the rerun_sdk folder to avoid conflicting
# with the other `rerun` pypi package. The rerun_sdk.pth adds this to the pythonpath
# which then allows `import rerun` to work as expected.
# See https://github.com/rerun-io/rerun/pull/1085 for more details
include = ["rerun_sdk.pth", "rerun_sdk/rerun_demo/colmap_fiat.rrd"]
locked = true
python-packages = ["rerun_sdk/rerun", "rerun_sdk/rerun_demo"]
