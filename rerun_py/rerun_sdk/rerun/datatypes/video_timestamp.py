# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/video_timestamp.fbs".

# You can extend this class by creating a "VideoTimestampExt" class in "video_timestamp_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = [
    "VideoTimestamp",
    "VideoTimestampArrayLike",
    "VideoTimestampBatch",
    "VideoTimestampLike",
    "VideoTimestampType",
]


def _video_timestamp__time_mode__special_field_converter_override(
    x: datatypes.VideoTimeModeLike,
) -> datatypes.VideoTimeMode:
    if isinstance(x, datatypes.VideoTimeMode):
        return x
    else:
        return datatypes.VideoTimeMode(x)


@define(init=False)
class VideoTimestamp:
    """
    **Datatype**: Timestamp inside a [`archetypes.AssetVideo`][rerun.archetypes.AssetVideo].

    ⚠️ **This is an experimental API! It is not fully supported, and is likely to change significantly in future versions.**
    """

    def __init__(self: Any, video_time: int, time_mode: datatypes.VideoTimeModeLike):
        """
        Create a new instance of the VideoTimestamp datatype.

        Parameters
        ----------
        video_time:
            Timestamp value, type defined by `time_mode`.
        time_mode:
            How to interpret `video_time`.

        """

        # You can define your own __init__ function as a member of VideoTimestampExt in video_timestamp_ext.py
        self.__attrs_init__(video_time=video_time, time_mode=time_mode)

    video_time: int = field(converter=int)
    # Timestamp value, type defined by `time_mode`.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    time_mode: datatypes.VideoTimeMode = field(converter=_video_timestamp__time_mode__special_field_converter_override)
    # How to interpret `video_time`.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


VideoTimestampLike = VideoTimestamp
VideoTimestampArrayLike = Union[
    VideoTimestamp,
    Sequence[VideoTimestampLike],
]


class VideoTimestampType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.VideoTimestamp"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field("video_time", pa.int64(), nullable=False, metadata={}),
                pa.field("time_mode", pa.uint8(), nullable=False, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class VideoTimestampBatch(BaseBatch[VideoTimestampArrayLike]):
    _ARROW_TYPE = VideoTimestampType()

    @staticmethod
    def _native_to_pa_array(data: VideoTimestampArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import VideoTimeModeBatch

        if isinstance(data, VideoTimestamp):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                pa.array(np.asarray([x.video_time for x in data], dtype=np.int64)),
                VideoTimeModeBatch([x.time_mode for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
