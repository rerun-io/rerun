# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/dvec2d.fbs".

# You can extend this class by creating a "DVec2DExt" class in "dvec2d_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)
from .._converters import (
    to_np_float64,
)
from .dvec2d_ext import DVec2DExt

__all__ = ["DVec2D", "DVec2DArrayLike", "DVec2DBatch", "DVec2DLike", "DVec2DType"]


@define(init=False)
class DVec2D(DVec2DExt):
    """**Datatype**: A double-precision vector in 2D space."""

    def __init__(self: Any, xy: DVec2DLike):
        """Create a new instance of the DVec2D datatype."""

        # You can define your own __init__ function as a member of DVec2DExt in dvec2d_ext.py
        self.__attrs_init__(xy=xy)

    xy: npt.NDArray[np.float64] = field(converter=to_np_float64)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of DVec2DExt in dvec2d_ext.py
        return np.asarray(self.xy, dtype=dtype)


if TYPE_CHECKING:
    DVec2DLike = Union[DVec2D, npt.NDArray[Any], npt.ArrayLike, Sequence[float]]
else:
    DVec2DLike = Any

DVec2DArrayLike = Union[
    DVec2D, Sequence[DVec2DLike], npt.NDArray[Any], npt.ArrayLike, Sequence[Sequence[float]], Sequence[float]
]


class DVec2DType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.DVec2D"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self, pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={}), 2), self._TYPE_NAME
        )


class DVec2DBatch(BaseBatch[DVec2DArrayLike]):
    _ARROW_TYPE = DVec2DType()

    @staticmethod
    def _native_to_pa_array(data: DVec2DArrayLike, data_type: pa.DataType) -> pa.Array:
        return DVec2DExt.native_to_pa_array_override(data, data_type)
