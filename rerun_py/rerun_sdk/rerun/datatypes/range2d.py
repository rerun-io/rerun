# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/range2d.fbs".

# You can extend this class by creating a "Range2DExt" class in "range2d_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["Range2D", "Range2DArrayLike", "Range2DBatch", "Range2DLike", "Range2DType"]


def _range2d__x_range__special_field_converter_override(x: datatypes.Range1DLike) -> datatypes.Range1D:
    if isinstance(x, datatypes.Range1D):
        return x
    else:
        return datatypes.Range1D(x)


def _range2d__y_range__special_field_converter_override(x: datatypes.Range1DLike) -> datatypes.Range1D:
    if isinstance(x, datatypes.Range1D):
        return x
    else:
        return datatypes.Range1D(x)


@define(init=False)
class Range2D:
    """**Datatype**: An Axis-Aligned Bounding Box in 2D space, implemented as the minimum and maximum corners."""

    def __init__(self: Any, x_range: datatypes.Range1DLike, y_range: datatypes.Range1DLike):
        """
        Create a new instance of the Range2D datatype.

        Parameters
        ----------
        x_range:
            The range of the X-axis (usually left and right bounds).
        y_range:
            The range of the Y-axis (usually top and bottom bounds).

        """

        # You can define your own __init__ function as a member of Range2DExt in range2d_ext.py
        self.__attrs_init__(x_range=x_range, y_range=y_range)

    x_range: datatypes.Range1D = field(converter=_range2d__x_range__special_field_converter_override)
    # The range of the X-axis (usually left and right bounds).
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    y_range: datatypes.Range1D = field(converter=_range2d__y_range__special_field_converter_override)
    # The range of the Y-axis (usually top and bottom bounds).
    #
    # (Docstring intentionally commented out to hide this field from the docs)


Range2DLike = Range2D
Range2DArrayLike = Union[
    Range2D,
    Sequence[Range2DLike],
]


class Range2DType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.Range2D"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field(
                    "x_range",
                    pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={}), 2),
                    nullable=False,
                    metadata={},
                ),
                pa.field(
                    "y_range",
                    pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={}), 2),
                    nullable=False,
                    metadata={},
                ),
            ]),
            self._TYPE_NAME,
        )


class Range2DBatch(BaseBatch[Range2DArrayLike]):
    _ARROW_TYPE = Range2DType()

    @staticmethod
    def _native_to_pa_array(data: Range2DArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import Range1DBatch

        if isinstance(data, Range2D):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                Range1DBatch([x.x_range for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
                Range1DBatch([x.y_range for x in data]).as_arrow_array().storage,  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
