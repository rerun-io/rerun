# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/channel_id.fbs".

# You can extend this class by creating a "ChannelIdExt" class in "channel_id_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import TYPE_CHECKING, Any, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
)

__all__ = ["ChannelId", "ChannelIdArrayLike", "ChannelIdBatch", "ChannelIdLike"]


@define(init=False)
class ChannelId:
    """
    **Datatype**: A 16-bit ID representing an MCAP channel.

    Used to identify specific channels within an MCAP file.
    """

    def __init__(self: Any, id: ChannelIdLike) -> None:
        """Create a new instance of the ChannelId datatype."""

        # You can define your own __init__ function as a member of ChannelIdExt in channel_id_ext.py
        self.__attrs_init__(id=id)

    id: int = field(converter=int)

    def __array__(self, dtype: npt.DTypeLike = None, copy: bool | None = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of ChannelIdExt in channel_id_ext.py
        return np.asarray(self.id, dtype=dtype, copy=copy)

    def __int__(self) -> int:
        return int(self.id)

    def __hash__(self) -> int:
        return hash(self.id)


if TYPE_CHECKING:
    ChannelIdLike = Union[ChannelId, int]
else:
    ChannelIdLike = Any

ChannelIdArrayLike = Union[ChannelId, Sequence[ChannelIdLike], int, npt.ArrayLike]


class ChannelIdBatch(BaseBatch[ChannelIdArrayLike]):
    _ARROW_DATATYPE = pa.uint16()

    @staticmethod
    def _native_to_pa_array(data: ChannelIdArrayLike, data_type: pa.DataType) -> pa.Array:
        array = np.asarray(data, dtype=np.uint16).flatten()
        return pa.array(array, type=data_type)
