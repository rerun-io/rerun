# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/datatypes/material.fbs".

# You can extend this class by creating a "MaterialExt" class in "material_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import BaseBatch, BaseExtensionType
from .material_ext import MaterialExt

__all__ = ["Material", "MaterialArrayLike", "MaterialBatch", "MaterialLike", "MaterialType"]


def _material__albedo_factor__special_field_converter_override(
    x: datatypes.Rgba32Like | None
) -> datatypes.Rgba32 | None:
    if x is None:
        return None
    elif isinstance(x, datatypes.Rgba32):
        return x
    else:
        return datatypes.Rgba32(x)


@define(init=False)
class Material(MaterialExt):
    """**Datatype**: Material properties of a mesh."""

    def __init__(
        self: Any,
        albedo_factor: datatypes.Rgba32Like | None = None,
        albedo_texture: datatypes.TensorDataLike | None = None,
    ):
        """
        Create a new instance of the Material datatype.

        Parameters
        ----------
        albedo_factor:
            Optional color multiplier.
        albedo_texture:
            Optional albedo texture.

            Used with `vertex_texcoords` on `Mesh3D`.
            Currently supports only sRGB(A) textures, ignoring alpha.
            (meaning that the tensor must have 3 or 4 channels and use the `u8` format)
        """

        # You can define your own __init__ function as a member of MaterialExt in material_ext.py
        self.__attrs_init__(albedo_factor=albedo_factor, albedo_texture=albedo_texture)

    albedo_factor: datatypes.Rgba32 | None = field(
        default=None, converter=_material__albedo_factor__special_field_converter_override
    )
    # Optional color multiplier.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    albedo_texture: datatypes.TensorData | None = field(default=None)
    # Optional albedo texture.
    #
    # Used with `vertex_texcoords` on `Mesh3D`.
    # Currently supports only sRGB(A) textures, ignoring alpha.
    # (meaning that the tensor must have 3 or 4 channels and use the `u8` format)
    #
    # (Docstring intentionally commented out to hide this field from the docs)


MaterialLike = Material
MaterialArrayLike = Union[
    Material,
    Sequence[MaterialLike],
]


class MaterialType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.Material"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field("albedo_factor", pa.uint32(), nullable=True, metadata={}),
                    pa.field(
                        "albedo_texture",
                        pa.struct(
                            [
                                pa.field(
                                    "shape",
                                    pa.list_(
                                        pa.field(
                                            "item",
                                            pa.struct(
                                                [
                                                    pa.field("size", pa.uint64(), nullable=False, metadata={}),
                                                    pa.field("name", pa.utf8(), nullable=True, metadata={}),
                                                ]
                                            ),
                                            nullable=False,
                                            metadata={},
                                        )
                                    ),
                                    nullable=False,
                                    metadata={},
                                ),
                                pa.field(
                                    "buffer",
                                    pa.dense_union(
                                        [
                                            pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                                            pa.field(
                                                "U8",
                                                pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "U16",
                                                pa.list_(pa.field("item", pa.uint16(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "U32",
                                                pa.list_(pa.field("item", pa.uint32(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "U64",
                                                pa.list_(pa.field("item", pa.uint64(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "I8",
                                                pa.list_(pa.field("item", pa.int8(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "I16",
                                                pa.list_(pa.field("item", pa.int16(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "I32",
                                                pa.list_(pa.field("item", pa.int32(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "I64",
                                                pa.list_(pa.field("item", pa.int64(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "F16",
                                                pa.list_(pa.field("item", pa.float16(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "F32",
                                                pa.list_(pa.field("item", pa.float32(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "F64",
                                                pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "JPEG",
                                                pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                            pa.field(
                                                "NV12",
                                                pa.list_(pa.field("item", pa.uint8(), nullable=False, metadata={})),
                                                nullable=False,
                                                metadata={},
                                            ),
                                        ]
                                    ),
                                    nullable=False,
                                    metadata={},
                                ),
                            ]
                        ),
                        nullable=True,
                        metadata={},
                    ),
                ]
            ),
            self._TYPE_NAME,
        )


class MaterialBatch(BaseBatch[MaterialArrayLike]):
    _ARROW_TYPE = MaterialType()

    @staticmethod
    def _native_to_pa_array(data: MaterialArrayLike, data_type: pa.DataType) -> pa.Array:
        return MaterialExt.native_to_pa_array_override(data, data_type)
