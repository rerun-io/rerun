# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/channel_count_pair.fbs".

# You can extend this class by creating a "ChannelCountPairExt" class in "channel_count_pair_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import TYPE_CHECKING, Any, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
)
from .channel_count_pair_ext import ChannelCountPairExt

__all__ = ["ChannelCountPair", "ChannelCountPairArrayLike", "ChannelCountPairBatch", "ChannelCountPairLike"]


def _channel_count_pair__channel_id__special_field_converter_override(x: datatypes.UInt16Like) -> datatypes.UInt16:
    if isinstance(x, datatypes.UInt16):
        return x
    else:
        return datatypes.UInt16(x)


def _channel_count_pair__message_count__special_field_converter_override(x: datatypes.UInt64Like) -> datatypes.UInt64:
    if isinstance(x, datatypes.UInt64):
        return x
    else:
        return datatypes.UInt64(x)


@define(init=False)
class ChannelCountPair(ChannelCountPairExt):
    """**Datatype**: A pair representing a channel ID and its associated message count."""

    def __init__(self: Any, channel_id: datatypes.UInt16Like, message_count: datatypes.UInt64Like) -> None:
        """
        Create a new instance of the ChannelCountPair datatype.

        Parameters
        ----------
        channel_id:
            The channel ID.
        message_count:
            The message count for this channel.

        """

        # You can define your own __init__ function as a member of ChannelCountPairExt in channel_count_pair_ext.py
        self.__attrs_init__(channel_id=channel_id, message_count=message_count)

    channel_id: datatypes.UInt16 = field(converter=_channel_count_pair__channel_id__special_field_converter_override)
    # The channel ID.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    message_count: datatypes.UInt64 = field(
        converter=_channel_count_pair__message_count__special_field_converter_override
    )
    # The message count for this channel.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


if TYPE_CHECKING:
    ChannelCountPairLike = Union[ChannelCountPair, tuple[datatypes.UInt16Like, datatypes.UInt64Like]]
else:
    ChannelCountPairLike = Any

ChannelCountPairArrayLike = Union[
    ChannelCountPair,
    Sequence[ChannelCountPairLike],
]


class ChannelCountPairBatch(BaseBatch[ChannelCountPairArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("channel_id", pa.uint16(), nullable=False, metadata={}),
        pa.field("message_count", pa.uint64(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: ChannelCountPairArrayLike, data_type: pa.DataType) -> pa.Array:
        return ChannelCountPairExt.native_to_pa_array_override(data, data_type)
