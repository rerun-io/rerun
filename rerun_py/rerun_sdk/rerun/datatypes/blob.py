# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/blob.fbs".

# You can extend this class by creating a "BlobExt" class in "blob_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import TYPE_CHECKING, Any, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
)
from .blob_ext import BlobExt

__all__ = ["Blob", "BlobArrayLike", "BlobBatch", "BlobLike"]


@define(init=False)
class Blob(BlobExt):
    """**Datatype**: A binary blob of data."""

    def __init__(self: Any, data: BlobLike) -> None:
        """Create a new instance of the Blob datatype."""

        # You can define your own __init__ function as a member of BlobExt in blob_ext.py
        self.__attrs_init__(data=data)

    data: bytes = field(converter=bytes)


if TYPE_CHECKING:
    BlobLike = Union[Blob, bytes, npt.NDArray[np.uint8]]
else:
    BlobLike = Any

BlobArrayLike = Union[Blob, Sequence[BlobLike], bytes, npt.NDArray[np.uint8]]


class BlobBatch(BaseBatch[BlobArrayLike]):
    _ARROW_DATATYPE = pa.binary()

    @staticmethod
    def _native_to_pa_array(data: BlobArrayLike, data_type: pa.DataType) -> pa.Array:
        return BlobExt.native_to_pa_array_override(data, data_type)
