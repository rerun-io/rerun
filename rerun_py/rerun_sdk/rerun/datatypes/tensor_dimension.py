# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/datatypes/tensor_dimension.fbs".

# You can extend this class by creating a "TensorDimensionExt" class in "tensor_dimension_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType
from .._converters import (
    str_or_none,
)

__all__ = [
    "TensorDimension",
    "TensorDimensionArrayLike",
    "TensorDimensionBatch",
    "TensorDimensionLike",
    "TensorDimensionType",
]


@define(init=False)
class TensorDimension:
    """**Datatype**: A single dimension within a multi-dimensional tensor."""

    def __init__(self: Any, size: int, name: str | None = None):
        """
        Create a new instance of the TensorDimension datatype.

        Parameters
        ----------
        size:
             The length of this dimension.
        name:
             The name of this dimension, e.g. "width", "height", "channel", "batch', ….
        """

        # You can define your own __init__ function as a member of TensorDimensionExt in tensor_dimension_ext.py
        self.__attrs_init__(size=size, name=name)

    size: int = field(converter=int)
    # The length of this dimension.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    name: str | None = field(default=None, converter=str_or_none)
    # The name of this dimension, e.g. "width", "height", "channel", "batch', ….
    #
    # (Docstring intentionally commented out to hide this field from the docs)


TensorDimensionLike = TensorDimension
TensorDimensionArrayLike = Union[
    TensorDimension,
    Sequence[TensorDimensionLike],
]


class TensorDimensionType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.TensorDimension"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field("size", pa.uint64(), nullable=False, metadata={}),
                    pa.field("name", pa.utf8(), nullable=True, metadata={}),
                ]
            ),
            self._TYPE_NAME,
        )


class TensorDimensionBatch(BaseBatch[TensorDimensionArrayLike]):
    _ARROW_TYPE = TensorDimensionType()

    @staticmethod
    def _native_to_pa_array(data: TensorDimensionArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in tensor_dimension_ext.py
