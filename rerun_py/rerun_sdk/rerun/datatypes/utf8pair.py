# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/utf8_pair.fbs".

# You can extend this class by creating a "Utf8PairExt" class in "utf8pair_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Tuple, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
)
from .utf8pair_ext import Utf8PairExt

__all__ = ["Utf8Pair", "Utf8PairArrayLike", "Utf8PairBatch", "Utf8PairLike"]


def _utf8pair__first__special_field_converter_override(x: datatypes.Utf8Like) -> datatypes.Utf8:
    if isinstance(x, datatypes.Utf8):
        return x
    else:
        return datatypes.Utf8(x)


def _utf8pair__second__special_field_converter_override(x: datatypes.Utf8Like) -> datatypes.Utf8:
    if isinstance(x, datatypes.Utf8):
        return x
    else:
        return datatypes.Utf8(x)


@define(init=False)
class Utf8Pair(Utf8PairExt):
    """**Datatype**: Stores a tuple of UTF-8 strings."""

    def __init__(self: Any, first: datatypes.Utf8Like, second: datatypes.Utf8Like):
        """
        Create a new instance of the Utf8Pair datatype.

        Parameters
        ----------
        first:
            The first string.
        second:
            The second string.

        """

        # You can define your own __init__ function as a member of Utf8PairExt in utf8pair_ext.py
        self.__attrs_init__(first=first, second=second)

    first: datatypes.Utf8 = field(converter=_utf8pair__first__special_field_converter_override)
    # The first string.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    second: datatypes.Utf8 = field(converter=_utf8pair__second__special_field_converter_override)
    # The second string.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


if TYPE_CHECKING:
    Utf8PairLike = Union[Utf8Pair, Tuple[datatypes.Utf8Like, datatypes.Utf8Like]]
else:
    Utf8PairLike = Any

Utf8PairArrayLike = Union[Utf8Pair, Sequence[Utf8PairLike], npt.NDArray[np.str_]]


class Utf8PairBatch(BaseBatch[Utf8PairArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("first", pa.utf8(), nullable=False, metadata={}),
        pa.field("second", pa.utf8(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: Utf8PairArrayLike, data_type: pa.DataType) -> pa.Array:
        return Utf8PairExt.native_to_pa_array_override(data, data_type)
