# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/time_range.fbs".

# You can extend this class by creating a "AbsoluteTimeRangeExt" class in "absolute_time_range_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import TYPE_CHECKING

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
)
from .absolute_time_range_ext import AbsoluteTimeRangeExt

if TYPE_CHECKING:
    from .. import datatypes

__all__ = ["AbsoluteTimeRange", "AbsoluteTimeRangeArrayLike", "AbsoluteTimeRangeBatch", "AbsoluteTimeRangeLike"]


@define(init=False)
class AbsoluteTimeRange(AbsoluteTimeRangeExt):
    """**Datatype**: Two [`datatypes.TimeInt`][rerun.datatypes.TimeInt] describing a range of time."""

    # __init__ can be found in absolute_time_range_ext.py

    min: datatypes.TimeInt = field()
    # Start of the range.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    max: datatypes.TimeInt = field()
    # End of the range (inclusive).
    #
    # (Docstring intentionally commented out to hide this field from the docs)


AbsoluteTimeRangeLike = AbsoluteTimeRange
AbsoluteTimeRangeArrayLike = AbsoluteTimeRange | Sequence[AbsoluteTimeRangeLike]


class AbsoluteTimeRangeBatch(BaseBatch[AbsoluteTimeRangeArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("min", pa.int64(), nullable=False, metadata={}),
        pa.field("max", pa.int64(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: AbsoluteTimeRangeArrayLike, data_type: pa.DataType) -> pa.Array:
        from rerun.datatypes import TimeIntBatch

        if isinstance(data, AbsoluteTimeRange):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                TimeIntBatch([x.min for x in data]).as_arrow_array(),  # type: ignore[misc, arg-type]
                TimeIntBatch([x.max for x in data]).as_arrow_array(),  # type: ignore[misc, arg-type]
            ],
            fields=list(data_type),
        )
