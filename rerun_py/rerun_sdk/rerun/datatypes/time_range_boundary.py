# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/datatypes/visible_time_range.fbs".

# You can extend this class by creating a "TimeRangeBoundaryExt" class in "time_range_boundary_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Literal, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)
from .time_range_boundary_ext import TimeRangeBoundaryExt

__all__ = [
    "TimeRangeBoundary",
    "TimeRangeBoundaryArrayLike",
    "TimeRangeBoundaryBatch",
    "TimeRangeBoundaryLike",
    "TimeRangeBoundaryType",
]


@define
class TimeRangeBoundary(TimeRangeBoundaryExt):
    """**Datatype**: Left or right boundary of a time range."""

    # You can define your own __init__ function as a member of TimeRangeBoundaryExt in time_range_boundary_ext.py

    inner: Union[None, datatypes.TimeInt] = field()
    """
    Must be one of:

    * CursorRelative (datatypes.TimeInt):
        Boundary is a value relative to the time cursor.

    * Absolute (datatypes.TimeInt):
        Boundary is an absolute value.

    * Infinite (None):
        The boundary extends to infinity.
    """

    kind: Literal["cursor_relative", "absolute", "infinite"] = field(default="cursor_relative")
    """
    Possible values:

    * "cursor_relative":
        Boundary is a value relative to the time cursor.

    * "absolute":
        Boundary is an absolute value.

    * "infinite":
        The boundary extends to infinity.
    """


if TYPE_CHECKING:
    TimeRangeBoundaryLike = Union[
        TimeRangeBoundary,
        None,
        datatypes.TimeInt,
    ]
    TimeRangeBoundaryArrayLike = Union[
        TimeRangeBoundary,
        None,
        datatypes.TimeInt,
        Sequence[TimeRangeBoundaryLike],
    ]
else:
    TimeRangeBoundaryLike = Any
    TimeRangeBoundaryArrayLike = Any


class TimeRangeBoundaryType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.TimeRangeBoundary"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.dense_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("CursorRelative", pa.int64(), nullable=False, metadata={}),
                pa.field("Absolute", pa.int64(), nullable=False, metadata={}),
                pa.field("Infinite", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class TimeRangeBoundaryBatch(BaseBatch[TimeRangeBoundaryArrayLike]):
    _ARROW_TYPE = TimeRangeBoundaryType()

    @staticmethod
    def _native_to_pa_array(data: TimeRangeBoundaryArrayLike, data_type: pa.DataType) -> pa.Array:
        from typing import cast

        from rerun.datatypes import TimeIntBatch

        # TODO(#2623): There should be a separate overridable `coerce_to_array` method that can be overridden.
        # If we can call iter, it may be that one of the variants implements __iter__.
        if not hasattr(data, "__iter__") or isinstance(data, (type(None), TimeRangeBoundary, datatypes.TimeInt)):  # type: ignore[arg-type]
            data = [data]  # type: ignore[list-item]
        data = cast(Sequence[TimeRangeBoundaryLike], data)  # type: ignore[redundant-cast]

        types: list[int] = []
        value_offsets: list[int] = []

        num_nulls = 0
        variant_cursor_relative: list[datatypes.TimeInt] = []
        variant_absolute: list[datatypes.TimeInt] = []
        variant_infinite: int = 0

        for value in data:
            if value is None:
                value_offsets.append(num_nulls)
                num_nulls += 1
                types.append(0)
            else:
                if not isinstance(value, TimeRangeBoundary):
                    value = TimeRangeBoundary(value)
                if value.kind == "cursor_relative":
                    value_offsets.append(len(variant_cursor_relative))
                    variant_cursor_relative.append(value.inner)  # type: ignore[arg-type]
                    types.append(1)
                elif value.kind == "absolute":
                    value_offsets.append(len(variant_absolute))
                    variant_absolute.append(value.inner)  # type: ignore[arg-type]
                    types.append(2)
                elif value.kind == "infinite":
                    value_offsets.append(variant_infinite)
                    variant_infinite += 1
                    types.append(3)

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
            pa.array(value_offsets, type=pa.int32()).buffers()[1],
        ]
        children = [
            pa.nulls(num_nulls),
            TimeIntBatch(variant_cursor_relative).as_arrow_array().storage,
            TimeIntBatch(variant_absolute).as_arrow_array().storage,
            pa.nulls(variant_infinite),
        ]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
