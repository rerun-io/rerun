# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/datatypes/range1d.fbs".

# You can extend this class by creating a "Range1DExt" class in "range1d_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType
from .._converters import (
    to_np_float64,
)
from .range1d_ext import Range1DExt

__all__ = ["Range1D", "Range1DArrayLike", "Range1DBatch", "Range1DLike", "Range1DType"]


@define(init=False)
class Range1D(Range1DExt):
    """**Datatype**: A 1D range, specifying a lower and upper bound."""

    def __init__(self: Any, range: Range1DLike):
        """Create a new instance of the Range1D datatype."""

        # You can define your own __init__ function as a member of Range1DExt in range1d_ext.py
        self.__attrs_init__(range=range)

    range: npt.NDArray[np.float64] = field(converter=to_np_float64)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of Range1DExt in range1d_ext.py
        return np.asarray(self.range, dtype=dtype)


if TYPE_CHECKING:
    Range1DLike = Union[Range1D, npt.NDArray[Any], npt.ArrayLike, Sequence[float], slice]
else:
    Range1DLike = Any

Range1DArrayLike = Union[
    Range1D, Sequence[Range1DLike], npt.NDArray[Any], npt.ArrayLike, Sequence[Sequence[float]], Sequence[float]
]


class Range1DType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.Range1D"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self, pa.list_(pa.field("item", pa.float64(), nullable=False, metadata={}), 2), self._TYPE_NAME
        )


class Range1DBatch(BaseBatch[Range1DArrayLike]):
    _ARROW_TYPE = Range1DType()

    @staticmethod
    def _native_to_pa_array(data: Range1DArrayLike, data_type: pa.DataType) -> pa.Array:
        return Range1DExt.native_to_pa_array_override(data, data_type)
