# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/datatypes/tensor_dimension_selection.fbs".

# You can extend this class by creating a "TensorDimensionSelectionExt" class in "tensor_dimension_selection_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = [
    "TensorDimensionSelection",
    "TensorDimensionSelectionArrayLike",
    "TensorDimensionSelectionBatch",
    "TensorDimensionSelectionLike",
    "TensorDimensionSelectionType",
]


@define(init=False)
class TensorDimensionSelection:
    """**Datatype**: Selection of a single tensor dimension."""

    def __init__(self: Any, dimension: int, invert: bool):
        """
        Create a new instance of the TensorDimensionSelection datatype.

        Parameters
        ----------
        dimension:
            The index of the dimension to select for height.
        invert:
            Invert the direction of the dimension.

        """

        # You can define your own __init__ function as a member of TensorDimensionSelectionExt in tensor_dimension_selection_ext.py
        self.__attrs_init__(dimension=dimension, invert=invert)

    dimension: int = field(converter=int)
    # The index of the dimension to select for height.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    invert: bool = field(converter=bool)
    # Invert the direction of the dimension.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


TensorDimensionSelectionLike = TensorDimensionSelection
TensorDimensionSelectionArrayLike = Union[
    TensorDimensionSelection,
    Sequence[TensorDimensionSelectionLike],
]


class TensorDimensionSelectionType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.datatypes.TensorDimensionSelection"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([
                pa.field("dimension", pa.uint32(), nullable=False, metadata={}),
                pa.field("invert", pa.bool_(), nullable=False, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class TensorDimensionSelectionBatch(BaseBatch[TensorDimensionSelectionArrayLike]):
    _ARROW_TYPE = TensorDimensionSelectionType()

    @staticmethod
    def _native_to_pa_array(data: TensorDimensionSelectionArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError(
            "Arrow serialization of TensorDimensionSelection not implemented: We lack codegen for arrow-serialization of general structs"
        )  # You need to implement native_to_pa_array_override in tensor_dimension_selection_ext.py
