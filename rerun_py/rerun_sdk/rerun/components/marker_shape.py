# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/components/marker_shape.fbs".

# You can extend this class by creating a "MarkerShapeExt" class in "marker_shape_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin
from .marker_shape_ext import MarkerShapeExt

__all__ = ["MarkerShape", "MarkerShapeArrayLike", "MarkerShapeBatch", "MarkerShapeLike", "MarkerShapeType"]


@define(init=False)
class MarkerShape(MarkerShapeExt):
    """**Component**: Shape of a marker."""

    def __init__(self: Any, shape: MarkerShapeLike):
        """Create a new instance of the MarkerShape component."""

        # You can define your own __init__ function as a member of MarkerShapeExt in marker_shape_ext.py
        self.__attrs_init__(shape=shape)

    shape: int = field(
        converter=MarkerShapeExt.shape__field_converter_override,  # type: ignore[misc]
    )

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of MarkerShapeExt in marker_shape_ext.py
        return np.asarray(self.shape, dtype=dtype)

    def __int__(self) -> int:
        return int(self.shape)


if TYPE_CHECKING:
    MarkerShapeLike = Union[MarkerShape, int, str]
else:
    MarkerShapeLike = Any

MarkerShapeArrayLike = Union[MarkerShape, Sequence[MarkerShapeLike], int, str]


class MarkerShapeType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.components.MarkerShape"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class MarkerShapeBatch(BaseBatch[MarkerShapeArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = MarkerShapeType()

    @staticmethod
    def _native_to_pa_array(data: MarkerShapeArrayLike, data_type: pa.DataType) -> pa.Array:
        return MarkerShapeExt.native_to_pa_array_override(data, data_type)


MarkerShapeExt.deferred_patch_class(MarkerShape)
