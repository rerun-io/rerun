# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/components/video_codec.fbs".

# You can extend this class by creating a "VideoCodecExt" class in "video_codec_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import Literal, Union

import pyarrow as pa

from .._baseclasses import (
    BaseBatch,
    ComponentBatchMixin,
)

__all__ = ["VideoCodec", "VideoCodecArrayLike", "VideoCodecBatch", "VideoCodecLike"]


from enum import Enum


class VideoCodec(Enum):
    """
    **Component**: The codec used to encode video stored in [`components.VideoSample`][rerun.components.VideoSample].

    Support of these codecs by the Rerun Viewer is platform dependent.
    For more details see check the [video reference](https://rerun.io/docs/reference/video).

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    H264 = 0x61766331
    """
    Advanced Video Coding (AVC/H.264)

    See <https://en.wikipedia.org/wiki/Advanced_Video_Coding>

    [`components.VideoSample`][rerun.components.VideoSample]s using this codec should be formatted according to Annex B specification.
    (Note that this is different from AVCC format found in MP4 files.
    To learn more about Annex B, check for instance <https://membrane.stream/learn/h264/3>)
    Key frames (IDR) require inclusion of a SPS (Sequence Parameter Set)

    Enum value is the fourcc for 'avc1' (the WebCodec string assigned to this codec) in big endian.
    """

    @classmethod
    def auto(cls, val: str | int | VideoCodec) -> VideoCodec:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, VideoCodec):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


VideoCodecLike = Union[VideoCodec, Literal["H264", "h264"], int]
VideoCodecArrayLike = Union[VideoCodecLike, Sequence[VideoCodecLike]]


class VideoCodecBatch(BaseBatch[VideoCodecArrayLike], ComponentBatchMixin):
    _ARROW_DATATYPE = pa.uint32()
    _COMPONENT_TYPE: str = "rerun.components.VideoCodec"

    @staticmethod
    def _native_to_pa_array(data: VideoCodecArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (VideoCodec, int, str)):
            data = [data]

        pa_data = [VideoCodec.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
