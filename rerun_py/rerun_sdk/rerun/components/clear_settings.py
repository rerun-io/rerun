# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/components/clear_settings.fbs".

# You can extend this class by creating a "ClearSettingsExt" class in "clear_settings_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin
from .clear_settings_ext import ClearSettingsExt

__all__ = ["ClearSettings", "ClearSettingsArrayLike", "ClearSettingsBatch", "ClearSettingsLike", "ClearSettingsType"]


@define
class ClearSettings(ClearSettingsExt):
    """Configures how a clear operation should behave."""

    # You can define your own __init__ function as a member of ClearSettingsExt in clear_settings_ext.py

    recursive: bool = field(converter=bool)
    """
    If true, also clears all recursive children entities.
    """


if TYPE_CHECKING:
    ClearSettingsLike = Union[ClearSettings, bool]
else:
    ClearSettingsLike = Any

ClearSettingsArrayLike = Union[ClearSettings, Sequence[ClearSettingsLike], bool, npt.NDArray[np.bool_]]


class ClearSettingsType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.components.ClearSettings"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.bool_(), self._TYPE_NAME)


class ClearSettingsBatch(BaseBatch[ClearSettingsArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = ClearSettingsType()

    @staticmethod
    def _native_to_pa_array(data: ClearSettingsArrayLike, data_type: pa.DataType) -> pa.Array:
        return ClearSettingsExt.native_to_pa_array_override(data, data_type)


# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(ClearSettingsType())


if hasattr(ClearSettingsExt, "deferred_patch_class"):
    ClearSettingsExt.deferred_patch_class(ClearSettings)
