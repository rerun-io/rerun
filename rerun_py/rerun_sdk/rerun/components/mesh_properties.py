# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/components/mesh_properties.fbs".

# You can extend this class by creating a "MeshPropertiesExt" class in "mesh_properties_ext.py".

from __future__ import annotations

from typing import Any

import numpy.typing as npt
from attrs import define

from .. import datatypes
from .._baseclasses import ComponentBatchMixin

__all__ = ["MeshProperties", "MeshPropertiesBatch", "MeshPropertiesType"]


@define(init=False)
class MeshProperties(datatypes.MeshProperties):
    def __init__(self: Any, vertex_indices: npt.ArrayLike | None = None):
        """
        Create a new instance of the MeshProperties component.

        Parameters
        ----------
        vertex_indices:
             If specified, is a flattened array of indices that describe the mesh's triangles,
             i.e. its length must be divisible by 3.
        """

        # You can define your own __init__ function as a member of MeshPropertiesExt in mesh_properties_ext.py
        self.__attrs_init__(vertex_indices=vertex_indices)

    # Note: there are no fields here because MeshProperties delegates to datatypes.MeshProperties


class MeshPropertiesType(datatypes.MeshPropertiesType):
    _TYPE_NAME: str = "rerun.components.MeshProperties"


class MeshPropertiesBatch(datatypes.MeshPropertiesBatch, ComponentBatchMixin):
    _ARROW_TYPE = MeshPropertiesType()


# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(MeshPropertiesType())
