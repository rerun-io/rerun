# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/components/key_value_pairs.fbs".

# You can extend this class by creating a "KeyValuePairsExt" class in "key_value_pairs_ext.py".

from __future__ import annotations

from collections.abc import Dict, Sequence
from typing import TYPE_CHECKING, Any, Union

import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseBatch,
    ComponentBatchMixin,
    ComponentMixin,
)

if TYPE_CHECKING:
    from .. import datatypes

__all__ = ["KeyValuePairs", "KeyValuePairsArrayLike", "KeyValuePairsBatch", "KeyValuePairsLike"]


@define(init=False)
class KeyValuePairs(ComponentMixin):
    """
    **Component**: A map of string keys to string values.

    This component can be used to attach arbitrary metadata or annotations to entities.
    Each key-value pair is stored as a UTF-8 string mapping.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    _BATCH_TYPE = None

    def __init__(self: Any, pairs: KeyValuePairsLike) -> None:
        """
        Create a new instance of the KeyValuePairs component.

        Parameters
        ----------
        pairs:
            The key-value pairs that make up this string map.

        """

        # You can define your own __init__ function as a member of KeyValuePairsExt in key_value_pairs_ext.py
        self.__attrs_init__(pairs=pairs)

    pairs: list[datatypes.Utf8Pair] = field()
    # The key-value pairs that make up this string map.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    def __len__(self) -> int:
        # You can define your own __len__ function as a member of KeyValuePairsExt in key_value_pairs_ext.py
        return len(self.pairs)


if TYPE_CHECKING:
    KeyValuePairsLike = Union[KeyValuePairs, Dict[str, str]]
else:
    KeyValuePairsLike = Any

KeyValuePairsArrayLike = Union[KeyValuePairs, Sequence[KeyValuePairsLike], Dict[str, str], Sequence[Dict[str, str]]]


class KeyValuePairsBatch(BaseBatch[KeyValuePairsArrayLike], ComponentBatchMixin):
    _ARROW_DATATYPE = pa.list_(
        pa.field(
            "item",
            pa.struct([
                pa.field("first", pa.utf8(), nullable=False, metadata={}),
                pa.field("second", pa.utf8(), nullable=False, metadata={}),
            ]),
            nullable=False,
            metadata={},
        )
    )
    _COMPONENT_TYPE: str = "rerun.components.KeyValuePairs"

    @staticmethod
    def _native_to_pa_array(data: KeyValuePairsArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError(
            "Arrow serialization of KeyValuePairs not implemented: We lack codegen for arrow-serialization of general structs"
        )  # You need to implement native_to_pa_array_override in key_value_pairs_ext.py


# This is patched in late to avoid circular dependencies.
KeyValuePairs._BATCH_TYPE = KeyValuePairsBatch  # type: ignore[assignment]
