# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/components/text.fbs".

# You can extend this class by creating a "TextExt" class in "text_ext.py".

from __future__ import annotations

from typing import Any

from .. import datatypes
from .._baseclasses import ComponentBatchMixin

__all__ = ["Text", "TextBatch", "TextType"]


class Text(datatypes.Utf8):
    """A string of text, e.g. for labels and text documents."""

    def __init__(self: Any, value: datatypes.Utf8Like):
        """Create a new instance of the Text component."""

        # You can define your own __init__ function as a member of TextExt in text_ext.py
        self.__attrs_init__(value=value)

    # Note: there are no fields here because Text delegates to datatypes.Utf8


class TextType(datatypes.Utf8Type):
    _TYPE_NAME: str = "rerun.components.Text"


class TextBatch(datatypes.Utf8Batch, ComponentBatchMixin):
    _ARROW_TYPE = TextType()


# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TextType())
