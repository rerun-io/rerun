# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/components/marker_size.fbs".

# You can extend this class by creating a "MarkerSizeExt" class in "marker_size_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin
from .marker_size_ext import MarkerSizeExt

__all__ = ["MarkerSize", "MarkerSizeArrayLike", "MarkerSizeBatch", "MarkerSizeLike", "MarkerSizeType"]


@define(init=False)
class MarkerSize(MarkerSizeExt):
    """**Component**: Size of a marker in UI points."""

    def __init__(self: Any, value: MarkerSizeLike):
        """Create a new instance of the MarkerSize component."""

        # You can define your own __init__ function as a member of MarkerSizeExt in marker_size_ext.py
        self.__attrs_init__(value=value)

    value: float = field(converter=float)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of MarkerSizeExt in marker_size_ext.py
        return np.asarray(self.value, dtype=dtype)

    def __float__(self) -> float:
        return float(self.value)


if TYPE_CHECKING:
    MarkerSizeLike = Union[MarkerSize, float]
else:
    MarkerSizeLike = Any

MarkerSizeArrayLike = Union[MarkerSize, Sequence[MarkerSizeLike], float, npt.ArrayLike]


class MarkerSizeType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.components.MarkerSize"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.float32(), self._TYPE_NAME)


class MarkerSizeBatch(BaseBatch[MarkerSizeArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = MarkerSizeType()

    @staticmethod
    def _native_to_pa_array(data: MarkerSizeArrayLike, data_type: pa.DataType) -> pa.Array:
        return MarkerSizeExt.native_to_pa_array_override(data, data_type)
