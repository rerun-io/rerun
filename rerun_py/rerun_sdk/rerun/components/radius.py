# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/components/radius.fbs".

# You can extend this class by creating a "RadiusExt" class in "radius_ext.py".

from __future__ import annotations

from .. import datatypes
from .._baseclasses import (
    ComponentBatchMixin,
    ComponentMixin,
)
from .radius_ext import RadiusExt

__all__ = ["Radius", "RadiusBatch", "RadiusType"]


class Radius(RadiusExt, datatypes.Float32, ComponentMixin):
    """
    **Component**: The radius of something, e.g. a point.

    Internally, positive values indicate scene units, whereas negative values
    are interpreted as UI points.

    UI points are independent of zooming in Views, but are sensitive to the application UI scaling.
    at 100% UI scaling, UI points are equal to pixels
    The Viewer's UI scaling defaults to the OS scaling which typically is 100% for full HD screens and 200% for 4k screens.
    """

    _BATCH_TYPE = None
    # You can define your own __init__ function as a member of RadiusExt in radius_ext.py

    # Note: there are no fields here because Radius delegates to datatypes.Float32
    pass


class RadiusType(datatypes.Float32Type):
    _TYPE_NAME: str = "rerun.components.Radius"


class RadiusBatch(datatypes.Float32Batch, ComponentBatchMixin):
    _ARROW_TYPE = RadiusType()


# This is patched in late to avoid circular dependencies.
Radius._BATCH_TYPE = RadiusBatch  # type: ignore[assignment]
