# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/components/text_log_level.fbs".

# You can extend this class by creating a "TextLogLevelExt" class in "text_log_level_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define

from .. import datatypes
from .._baseclasses import ComponentBatchMixin
from .text_log_level_ext import TextLogLevelExt

__all__ = ["TextLogLevel", "TextLogLevelBatch", "TextLogLevelType"]


@define(init=False)
class TextLogLevel(TextLogLevelExt, datatypes.Utf8):
    """
    The severity level of a text log message.

    Recommended to be one of:
    * `"CRITICAL"`
    * `"ERROR"`
    * `"WARN"`
    * `"INFO"`
    * `"DEBUG"`
    * `"TRACE"`
    """

    def __init__(self: Any, value: datatypes.Utf8Like):
        """Create a new instance of the TextLogLevel component."""

        # You can define your own __init__ function as a member of TextLogLevelExt in text_log_level_ext.py
        self.__attrs_init__(value=value)

    # Note: there are no fields here because TextLogLevel delegates to datatypes.Utf8


class TextLogLevelType(datatypes.Utf8Type):
    _TYPE_NAME: str = "rerun.components.TextLogLevel"


class TextLogLevelBatch(datatypes.Utf8Batch, ComponentBatchMixin):
    _ARROW_TYPE = TextLogLevelType()


# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TextLogLevelType())


if hasattr(TextLogLevelExt, "deferred_patch_class"):
    TextLogLevelExt.deferred_patch_class(TextLogLevel)
