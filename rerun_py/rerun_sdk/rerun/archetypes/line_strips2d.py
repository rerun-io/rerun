# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/archetypes/line_strips2d.fbs".

# You can extend this class by creating a "LineStrips2DExt" class in "line_strips2d_ext.py".

from __future__ import annotations

from attrs import define, field

from .. import components
from .._baseclasses import Archetype

__all__ = ["LineStrips2D"]


@define(str=False, repr=False)
class LineStrips2D(Archetype):
    """
    A batch of line strips with positions and optional colors, radii, labels, etc.

    Examples
    --------
    Many strips:
    ```python
    import rerun as rr

    rr.init("rerun_example_line_strip2d", spawn=True)

    rr.log(
        "strips",
        rr.LineStrips2D(
            [
                [[0, 0], [2, 1], [4, -1], [6, 0]],
                [[0, 3], [1, 4], [2, 2], [3, 4], [4, 2], [5, 4], [6, 3]],
            ],
            colors=[[255, 0, 0], [0, 255, 0]],
            radii=[0.025, 0.005],
            labels=["one strip here", "and one strip there"],
        ),
    )

    # Log an extra rect to set the view bounds
    rr.log("bounds", rr.Boxes2D(centers=[3, 1.5], half_sizes=[4.0, 4.5]))
    ```

    Many individual segments:
    ```python
    import numpy as np
    import rerun as rr

    rr.init("rerun_example_line_segments2d", spawn=True)

    rr.log(
        "segments",
        rr.LineStrips2D(np.array([[[0, 0], [2, 1]], [[4, -1], [6, 0]]])),
    )

    # Log an extra rect to set the view bounds
    rr.log("bounds", rr.Boxes2D(centers=[3, 0], half_sizes=[4, 3]))
    ```
    """

    # You can define your own __init__ function as a member of LineStrips2DExt in line_strips2d_ext.py

    strips: components.LineStrip2DBatch = field(
        metadata={"component": "required"},
        converter=components.LineStrip2DBatch,  # type: ignore[misc]
    )
    """
    All the actual 2D line strips that make up the batch.
    """

    radii: components.RadiusBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.RadiusBatch._optional,  # type: ignore[misc]
    )
    """
    Optional radii for the line strips.
    """

    colors: components.ColorBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ColorBatch._optional,  # type: ignore[misc]
    )
    """
    Optional colors for the line strips.
    """

    labels: components.TextBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.TextBatch._optional,  # type: ignore[misc]
    )
    """
    Optional text labels for the line strips.
    """

    draw_order: components.DrawOrderBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.DrawOrderBatch._optional,  # type: ignore[misc]
    )
    """
    An optional floating point value that specifies the 2D drawing order of each line strip.
    Objects with higher values are drawn on top of those with lower values.
    """

    class_ids: components.ClassIdBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ClassIdBatch._optional,  # type: ignore[misc]
    )
    """
    Optional `ClassId`s for the lines.

    The class ID provides colors and labels if not specified explicitly.
    """

    instance_keys: components.InstanceKeyBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.InstanceKeyBatch._optional,  # type: ignore[misc]
    )
    """
    Unique identifiers for each individual line strip in the batch.
    """

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__
