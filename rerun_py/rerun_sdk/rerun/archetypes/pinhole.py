# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/archetypes/pinhole.fbs".

# You can extend this class by creating a "PinholeExt" class in "pinhole_ext.py".

from __future__ import annotations

from attrs import define, field

from .. import components
from .._baseclasses import Archetype
from .pinhole_ext import PinholeExt

__all__ = ["Pinhole"]


@define(str=False, repr=False, init=False)
class Pinhole(PinholeExt, Archetype):
    """
    **Archetype**: Camera perspective projection (a.k.a. intrinsics).

    Example
    -------
    ```python
    import numpy as np
    import rerun as rr

    rr.init("rerun_example_pinhole", spawn=True)
    rng = np.random.default_rng(12345)

    image = rng.uniform(0, 255, size=[3, 3, 3])
    rr.log("world/image", rr.Pinhole(focal_length=3, width=3, height=3))
    rr.log("world/image", rr.Image(image))
    ```
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/pinhole_simple/9af9441a94bcd9fd54e1fea44fb0c59ff381a7f2/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/pinhole_simple/9af9441a94bcd9fd54e1fea44fb0c59ff381a7f2/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/pinhole_simple/9af9441a94bcd9fd54e1fea44fb0c59ff381a7f2/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/pinhole_simple/9af9441a94bcd9fd54e1fea44fb0c59ff381a7f2/1200w.png">
      <img src="https://static.rerun.io/pinhole_simple/9af9441a94bcd9fd54e1fea44fb0c59ff381a7f2/full.png">
    </picture>
    """

    # __init__ can be found in pinhole_ext.py

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            image_from_camera=None,  # type: ignore[arg-type]
            resolution=None,  # type: ignore[arg-type]
            camera_xyz=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> Pinhole:
        """Produce an empty Pinhole, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    image_from_camera: components.PinholeProjectionBatch = field(
        metadata={"component": "required"},
        converter=components.PinholeProjectionBatch._required,  # type: ignore[misc]
    )
    # Docstring intentionally omitted to hide this field from the docs. See the docs for the __init__ method instead.

    resolution: components.ResolutionBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ResolutionBatch._optional,  # type: ignore[misc]
    )
    # Docstring intentionally omitted to hide this field from the docs. See the docs for the __init__ method instead.

    camera_xyz: components.ViewCoordinatesBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ViewCoordinatesBatch._optional,  # type: ignore[misc]
    )
    # Docstring intentionally omitted to hide this field from the docs. See the docs for the __init__ method instead.

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__


if hasattr(PinholeExt, "deferred_patch_class"):
    PinholeExt.deferred_patch_class(Pinhole)
