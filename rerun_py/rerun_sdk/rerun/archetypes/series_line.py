# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/archetypes/series_line.fbs".

# You can extend this class by creating a "SeriesLineExt" class in "series_line_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from .. import components, datatypes
from .._baseclasses import Archetype
from ..error_utils import catch_and_log_exceptions

__all__ = ["SeriesLine"]


@define(str=False, repr=False, init=False)
class SeriesLine(Archetype):
    """**Archetype**: Define the style properties for a line series in a chart."""

    def __init__(
        self: Any,
        *,
        color: datatypes.Rgba32Like | None = None,
        width: components.StrokeWidthLike | None = None,
        name: datatypes.Utf8Like | None = None,
    ):
        """
        Create a new instance of the SeriesLine archetype.

        Parameters
        ----------
        color:
            Color for the corresponding series.
        width:
            Stroke width for the corresponding series.
        name:
            Display name of the series.

            Used in the legend.
        """

        # You can define your own __init__ function as a member of SeriesLineExt in series_line_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(color=color, width=width, name=name)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            color=None,  # type: ignore[arg-type]
            width=None,  # type: ignore[arg-type]
            name=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> SeriesLine:
        """Produce an empty SeriesLine, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    color: components.ColorBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ColorBatch._optional,  # type: ignore[misc]
    )
    # Color for the corresponding series.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    width: components.StrokeWidthBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.StrokeWidthBatch._optional,  # type: ignore[misc]
    )
    # Stroke width for the corresponding series.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    name: components.NameBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.NameBatch._optional,  # type: ignore[misc]
    )
    # Display name of the series.
    #
    # Used in the legend.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__
