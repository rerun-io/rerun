# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/mcap_message.fbs".

# You can extend this class by creating a "McapMessageExt" class in "mcap_message_ext.py".

from __future__ import annotations

from typing import Any

import numpy as np
import pyarrow as pa
from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
    ComponentColumnList,
)
from ..error_utils import catch_and_log_exceptions

__all__ = ["McapMessage"]


@define(str=False, repr=False, init=False)
class McapMessage(Archetype):
    """
    **Archetype**: The binary payload of a single MCAP message, without metadata.

    This archetype represents only the raw message data from an MCAP file. It does not include
    MCAP message metadata such as timestamps, channel IDs, sequence numbers, or publication times.
    The binary payload represents sensor data, commands, or other information encoded according
    to the format specified by the associated channel.

    See [`archetypes.McapChannel`][rerun.archetypes.McapChannel] for channel definitions that specify message encoding,
    [`archetypes.McapSchema`][rerun.archetypes.McapSchema] for data structure definitions, and the
    [MCAP specification](https://mcap.dev/) for complete format details.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    def __init__(self: Any, data: datatypes.BlobLike) -> None:
        """
        Create a new instance of the McapMessage archetype.

        Parameters
        ----------
        data:
            The raw message payload as a binary blob.

            This contains the actual message data encoded according to the format specified
            by the associated channel's `message_encoding` field. The structure and interpretation
            of this binary data depends on the encoding format (e.g., ros1, cdr, protobuf)
            and the message schema defined for the channel.

        """

        # You can define your own __init__ function as a member of McapMessageExt in mcap_message_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(data=data)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            data=None,
        )

    @classmethod
    def _clear(cls) -> McapMessage:
        """Produce an empty McapMessage, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        data: datatypes.BlobLike | None = None,
    ) -> McapMessage:
        """
        Update only some specific fields of a `McapMessage`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        data:
            The raw message payload as a binary blob.

            This contains the actual message data encoded according to the format specified
            by the associated channel's `message_encoding` field. The structure and interpretation
            of this binary data depends on the encoding format (e.g., ros1, cdr, protobuf)
            and the message schema defined for the channel.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "data": data,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> McapMessage:
        """Clear all the fields of a `McapMessage`."""
        return cls.from_fields(clear_unset=True)

    @classmethod
    def columns(
        cls,
        *,
        data: datatypes.BlobArrayLike | None = None,
    ) -> ComponentColumnList:
        """
        Construct a new column-oriented component bundle.

        This makes it possible to use `rr.send_columns` to send columnar data directly into Rerun.

        The returned columns will be partitioned into unit-length sub-batches by default.
        Use `ComponentColumnList.partition` to repartition the data as needed.

        Parameters
        ----------
        data:
            The raw message payload as a binary blob.

            This contains the actual message data encoded according to the format specified
            by the associated channel's `message_encoding` field. The structure and interpretation
            of this binary data depends on the encoding format (e.g., ros1, cdr, protobuf)
            and the message schema defined for the channel.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            inst.__attrs_init__(
                data=data,
            )

        batches = inst.as_component_batches()
        if len(batches) == 0:
            return ComponentColumnList([])

        kwargs = {"McapMessage:data": data}
        columns = []

        for batch in batches:
            arrow_array = batch.as_arrow_array()

            # For primitive arrays and fixed size list arrays, we infer partition size from the input shape.
            if pa.types.is_primitive(arrow_array.type) or pa.types.is_fixed_size_list(arrow_array.type):
                param = kwargs[batch.component_descriptor().component]  # type: ignore[index]
                shape = np.shape(param)  # type: ignore[arg-type]
                elem_flat_len = int(np.prod(shape[1:])) if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]

                if pa.types.is_fixed_size_list(arrow_array.type) and arrow_array.type.list_size == elem_flat_len:
                    # If the product of the last dimensions of the shape are equal to the size of the fixed size list array,
                    # we have `num_rows` single element batches (each element is a fixed sized list).
                    # (This should have been already validated by conversion to the arrow_array)
                    batch_length = 1
                else:
                    batch_length = shape[1] if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]

                num_rows = shape[0] if len(shape) >= 1 else 1  # type: ignore[redundant-expr,misc]
                sizes = batch_length * np.ones(num_rows)
            else:
                # For non-primitive types, default to partitioning each element separately.
                sizes = np.ones(len(arrow_array))

            columns.append(batch.partition(sizes))

        return ComponentColumnList(columns)

    data: components.BlobBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.BlobBatch._converter,  # type: ignore[misc]
    )
    # The raw message payload as a binary blob.
    #
    # This contains the actual message data encoded according to the format specified
    # by the associated channel's `message_encoding` field. The structure and interpretation
    # of this binary data depends on the encoding format (e.g., ros1, cdr, protobuf)
    # and the message schema defined for the channel.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
