# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/coordinate_frame.fbs".

# You can extend this class by creating a "CoordinateFrameExt" class in "coordinate_frame_ext.py".

from __future__ import annotations

from typing import Any

import numpy as np
import pyarrow as pa
from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
    ComponentColumnList,
)
from ..error_utils import catch_and_log_exceptions

__all__ = ["CoordinateFrame"]


@define(str=False, repr=False, init=False)
class CoordinateFrame(Archetype):
    """
    **Archetype**: Specifies the coordinate frame for an entity.

    **Experimental:** Transform frames are still in early development!

    If not specified, the coordinate frame uses an implicit frame derived from the entity path.
    The implicit frame's name is `tf#/your/entity/path` and has an identity transform connection to its parent path.

    To learn more about transforms see [Spaces & Transforms](https://rerun.io/docs/concepts/spaces-and-transforms) in the reference.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**

    Example
    -------
    ### Change coordinate frame to different built-in frames:
    ```python
    # TODO(RR-2777): This is still an experimental feature.

    import rerun as rr

    rr.init("rerun_example_transform3d_hierarchy", spawn=True)

    rr.set_time("time", sequence=0)
    rr.log(
        "red_box",
        rr.Boxes3D(half_sizes=[0.5, 0.5, 0.5], colors=[255, 0, 0]),
        # Use Transform3D to place the box, so we actually change the underlying coordinate frame and not just the box's pose.
        rr.Transform3D(translation=[2.0, 0.0, 0.0]),
    )
    rr.log(
        "blue_box",
        rr.Boxes3D(half_sizes=[0.5, 0.5, 0.5], colors=[0, 0, 255]),
        # Use Transform3D to place the box, so we actually change the underlying coordinate frame and not just the box's pose.
        rr.Transform3D(translation=[-2.0, 0.0, 0.0]),
    )
    rr.log("point", rr.Points3D([0.0, 0.0, 0.0], radii=0.5))

    # Change where the point is located by cycling through its coordinate frame.
    for t, frame_id in enumerate(["tf#/red_box", "tf#/blue_box"]):
        rr.set_time("time", sequence=t + 1)  # leave it untouched at t==0.
        rr.log("point", rr.CoordinateFrame(frame_id))
    ```
    <center>
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/1200w.png">
      <img src="https://static.rerun.io/coordinate_frame_builtin_frame/71f941f35cf73c299c6ea7fbc4487a140db8e8f8/full.png" width="640">
    </picture>
    </center>

    """

    def __init__(self: Any, frame_id: datatypes.Utf8Like) -> None:
        """
        Create a new instance of the CoordinateFrame archetype.

        Parameters
        ----------
        frame_id:
            The coordinate frame to use for the current entity.

        """

        # You can define your own __init__ function as a member of CoordinateFrameExt in coordinate_frame_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(frame_id=frame_id)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            frame_id=None,
        )

    @classmethod
    def _clear(cls) -> CoordinateFrame:
        """Produce an empty CoordinateFrame, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        frame_id: datatypes.Utf8Like | None = None,
    ) -> CoordinateFrame:
        """
        Update only some specific fields of a `CoordinateFrame`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        frame_id:
            The coordinate frame to use for the current entity.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "frame_id": frame_id,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> CoordinateFrame:
        """Clear all the fields of a `CoordinateFrame`."""
        return cls.from_fields(clear_unset=True)

    @classmethod
    def columns(
        cls,
        *,
        frame_id: datatypes.Utf8ArrayLike | None = None,
    ) -> ComponentColumnList:
        """
        Construct a new column-oriented component bundle.

        This makes it possible to use `rr.send_columns` to send columnar data directly into Rerun.

        The returned columns will be partitioned into unit-length sub-batches by default.
        Use `ComponentColumnList.partition` to repartition the data as needed.

        Parameters
        ----------
        frame_id:
            The coordinate frame to use for the current entity.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            inst.__attrs_init__(
                frame_id=frame_id,
            )

        batches = inst.as_component_batches()
        if len(batches) == 0:
            return ComponentColumnList([])

        kwargs = {"CoordinateFrame:frame_id": frame_id}
        columns = []

        for batch in batches:
            arrow_array = batch.as_arrow_array()

            # For primitive arrays and fixed size list arrays, we infer partition size from the input shape.
            if pa.types.is_primitive(arrow_array.type) or pa.types.is_fixed_size_list(arrow_array.type):
                param = kwargs[batch.component_descriptor().component]  # type: ignore[index]
                shape = np.shape(param)  # type: ignore[arg-type]
                elem_flat_len = int(np.prod(shape[1:])) if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]

                if pa.types.is_fixed_size_list(arrow_array.type) and arrow_array.type.list_size == elem_flat_len:
                    # If the product of the last dimensions of the shape are equal to the size of the fixed size list array,
                    # we have `num_rows` single element batches (each element is a fixed sized list).
                    # (This should have been already validated by conversion to the arrow_array)
                    batch_length = 1
                else:
                    batch_length = shape[1] if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]

                num_rows = shape[0] if len(shape) >= 1 else 1  # type: ignore[redundant-expr,misc]
                sizes = batch_length * np.ones(num_rows)
            else:
                # For non-primitive types, default to partitioning each element separately.
                sizes = np.ones(len(arrow_array))

            columns.append(batch.partition(sizes))

        return ComponentColumnList(columns)

    frame_id: components.TransformFrameIdBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.TransformFrameIdBatch._converter,  # type: ignore[misc]
    )
    # The coordinate frame to use for the current entity.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
