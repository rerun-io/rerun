# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/archetypes/view_coordinates.fbs".

# You can extend this class by creating a "ViewCoordinatesExt" class in "view_coordinates_ext.py".

from __future__ import annotations

from attrs import define, field

from .. import components
from .._baseclasses import (
    Archetype,
)
from .view_coordinates_ext import ViewCoordinatesExt

__all__ = ["ViewCoordinates"]


@define(str=False, repr=False)
class ViewCoordinates(ViewCoordinatesExt, Archetype):
    """
    How we interpret the coordinate system of an entity/space.

    For instance: What is "up"? What does the Z axis mean? Is this right-handed or left-handed?

    The three coordinates are always ordered as [x, y, z].

    For example [Right, Down, Forward] means that the X axis points to the right, the Y axis points
    down, and the Z axis points forward.

    If no `ViewCoordinates` are provided:
     - The default for 3D spaces is a right-handed coordinate system with the Z axis pointing up.
     - The default for 2D spaces is an RDF coordinate system.

    Example
    -------
    ```python

    import rerun as rr
    import rerun.experimental as rr2

    rr.init("rerun_example_view_coordinates", spawn=True)

    rr2.log("/", rr2.ViewCoordinates.ULB)
    rr2.log(
        "xyz",
        rr2.Arrows3D(
            vectors=[[1, 0, 0], [0, 1, 0], [0, 0, 1]],
            colors=[[255, 0, 0], [0, 255, 0], [0, 0, 255]],
        ),
    )
    ```
    """

    # You can define your own __init__ function as a member of ViewCoordinatesExt in view_coordinates_ext.py

    coordinates: components.ViewCoordinatesArray = field(
        metadata={"component": "required"},
        converter=components.ViewCoordinatesArray.from_similar,  # type: ignore[misc]
    )
    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__
