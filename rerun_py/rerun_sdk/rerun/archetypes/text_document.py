# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/text_document.fbs".

# You can extend this class by creating a "TextDocumentExt" class in "text_document_ext.py".

from __future__ import annotations

from typing import Any

import numpy as np
from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
    ComponentColumnList,
)
from ..error_utils import catch_and_log_exceptions

__all__ = ["TextDocument"]


@define(str=False, repr=False, init=False)
class TextDocument(Archetype):
    """
    **Archetype**: A text element intended to be displayed in its own text box.

    Supports raw text and markdown.

    Example
    -------
    ### Markdown text document:
    ```python
    import rerun as rr

    rr.init("rerun_example_text_document", spawn=True)

    rr.log("text_document", rr.TextDocument("Hello, TextDocument!"))

    rr.log(
        "markdown",
        rr.TextDocument(
            '''
    # Hello Markdown!
    [Click here to see the raw text](recording://markdown:Text).

    Basic formatting:

    | **Feature**       | **Alternative** |
    | ----------------- | --------------- |
    | Plain             |                 |
    | *italics*         | _italics_       |
    | **bold**          | __bold__        |
    | ~~strikethrough~~ |                 |
    | `inline code`     |                 |

    ----------------------------------

    ## Support
    - [x] [Commonmark](https://commonmark.org/help/) support
    - [x] GitHub-style strikethrough, tables, and checkboxes
    - Basic syntax highlighting for:
      - [x] C and C++
      - [x] Python
      - [x] Rust
      - [ ] Other languages

    ## Links
    You can link to [an entity](recording://markdown),
    a [specific instance of an entity](recording://markdown[#0]),
    or a [specific component](recording://markdown:Text).

    Of course you can also have [normal https links](https://github.com/rerun-io/rerun), e.g. <https://rerun.io>.

    ## Image
    ![A random image](https://picsum.photos/640/480)
    '''.strip(),
            media_type=rr.MediaType.MARKDOWN,
        ),
    )
    ```
    <center>
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/textdocument/babda19558ee32ed8d730495b595aee7a5e2c174/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/textdocument/babda19558ee32ed8d730495b595aee7a5e2c174/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/textdocument/babda19558ee32ed8d730495b595aee7a5e2c174/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/textdocument/babda19558ee32ed8d730495b595aee7a5e2c174/1200w.png">
      <img src="https://static.rerun.io/textdocument/babda19558ee32ed8d730495b595aee7a5e2c174/full.png" width="640">
    </picture>
    </center>

    """

    def __init__(self: Any, text: datatypes.Utf8Like, *, media_type: datatypes.Utf8Like | None = None):
        """
        Create a new instance of the TextDocument archetype.

        Parameters
        ----------
        text:
            Contents of the text document.
        media_type:
            The Media Type of the text.

            For instance:
            * `text/plain`
            * `text/markdown`

            If omitted, `text/plain` is assumed.

        """

        # You can define your own __init__ function as a member of TextDocumentExt in text_document_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(text=text, media_type=media_type)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            text=None,
            media_type=None,
        )

    @classmethod
    def _clear(cls) -> TextDocument:
        """Produce an empty TextDocument, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        text: datatypes.Utf8Like | None = None,
        media_type: datatypes.Utf8Like | None = None,
    ) -> TextDocument:
        """
        Update only some specific fields of a `TextDocument`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        text:
            Contents of the text document.
        media_type:
            The Media Type of the text.

            For instance:
            * `text/plain`
            * `text/markdown`

            If omitted, `text/plain` is assumed.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "text": text,
                "media_type": media_type,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> TextDocument:
        """Clear all the fields of a `TextDocument`."""
        return cls.from_fields(clear_unset=True)

    @classmethod
    def columns(
        cls,
        *,
        text: datatypes.Utf8ArrayLike | None = None,
        media_type: datatypes.Utf8ArrayLike | None = None,
    ) -> ComponentColumnList:
        """
        Construct a new column-oriented component bundle.

        This makes it possible to use `rr.send_columns` to send columnar data directly into Rerun.

        The returned columns will be partitioned into unit-length sub-batches by default.
        Use `ComponentColumnList.partition` to repartition the data as needed.

        Parameters
        ----------
        text:
            Contents of the text document.
        media_type:
            The Media Type of the text.

            For instance:
            * `text/plain`
            * `text/markdown`

            If omitted, `text/plain` is assumed.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            inst.__attrs_init__(
                text=text,
                media_type=media_type,
            )

        batches = inst.as_component_batches(include_indicators=False)
        if len(batches) == 0:
            return ComponentColumnList([])

        lengths = np.ones(len(batches[0]._batch.as_arrow_array()))
        columns = [batch.partition(lengths) for batch in batches]

        indicator_column = cls.indicator().partition(np.zeros(len(lengths)))

        return ComponentColumnList([indicator_column] + columns)

    text: components.TextBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.TextBatch._converter,  # type: ignore[misc]
    )
    # Contents of the text document.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    media_type: components.MediaTypeBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.MediaTypeBatch._converter,  # type: ignore[misc]
    )
    # The Media Type of the text.
    #
    # For instance:
    # * `text/plain`
    # * `text/markdown`
    #
    # If omitted, `text/plain` is assumed.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
