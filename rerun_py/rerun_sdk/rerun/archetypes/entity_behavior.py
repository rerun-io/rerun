# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/entity_behavior.fbs".

# You can extend this class by creating a "EntityBehaviorExt" class in "entity_behavior_ext.py".

from __future__ import annotations

from typing import Any

import numpy as np
import pyarrow as pa
from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
    ComponentColumnList,
)
from ..error_utils import catch_and_log_exceptions

__all__ = ["EntityBehavior"]


@define(str=False, repr=False, init=False)
class EntityBehavior(Archetype):
    """
    **Archetype**: General visualization behavior of an entity.

    TODO(#6541): Fields of this archetype currently only have an effect when logged in the blueprint store.
    """

    def __init__(
        self: Any, *, interactive: datatypes.BoolLike | None = None, visible: datatypes.BoolLike | None = None
    ) -> None:
        """
        Create a new instance of the EntityBehavior archetype.

        Parameters
        ----------
        interactive:
            Whether the entity can be interacted with.

            This property is propagated down the entity hierarchy until another child entity
            sets `interactive` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `interactive` value or true if there is no parent.
        visible:
            Whether the entity is visible.

            This property is propagated down the entity hierarchy until another child entity
            sets `visible` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `visible` value or true if there is no parent.

        """

        # You can define your own __init__ function as a member of EntityBehaviorExt in entity_behavior_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(interactive=interactive, visible=visible)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            interactive=None,
            visible=None,
        )

    @classmethod
    def _clear(cls) -> EntityBehavior:
        """Produce an empty EntityBehavior, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        interactive: datatypes.BoolLike | None = None,
        visible: datatypes.BoolLike | None = None,
    ) -> EntityBehavior:
        """
        Update only some specific fields of a `EntityBehavior`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        interactive:
            Whether the entity can be interacted with.

            This property is propagated down the entity hierarchy until another child entity
            sets `interactive` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `interactive` value or true if there is no parent.
        visible:
            Whether the entity is visible.

            This property is propagated down the entity hierarchy until another child entity
            sets `visible` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `visible` value or true if there is no parent.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "interactive": interactive,
                "visible": visible,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> EntityBehavior:
        """Clear all the fields of a `EntityBehavior`."""
        return cls.from_fields(clear_unset=True)

    @classmethod
    def columns(
        cls,
        *,
        interactive: datatypes.BoolArrayLike | None = None,
        visible: datatypes.BoolArrayLike | None = None,
    ) -> ComponentColumnList:
        """
        Construct a new column-oriented component bundle.

        This makes it possible to use `rr.send_columns` to send columnar data directly into Rerun.

        The returned columns will be partitioned into unit-length sub-batches by default.
        Use `ComponentColumnList.partition` to repartition the data as needed.

        Parameters
        ----------
        interactive:
            Whether the entity can be interacted with.

            This property is propagated down the entity hierarchy until another child entity
            sets `interactive` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `interactive` value or true if there is no parent.
        visible:
            Whether the entity is visible.

            This property is propagated down the entity hierarchy until another child entity
            sets `visible` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `visible` value or true if there is no parent.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            inst.__attrs_init__(
                interactive=interactive,
                visible=visible,
            )

        batches = inst.as_component_batches(include_indicators=False)
        if len(batches) == 0:
            return ComponentColumnList([])

        kwargs = {"interactive": interactive, "visible": visible}
        columns = []

        for batch in batches:
            arrow_array = batch.as_arrow_array()

            # For primitive arrays, we infer partition size from the input shape.
            if pa.types.is_primitive(arrow_array.type):
                param = kwargs[batch.component_descriptor().archetype_field_name]  # type: ignore[index]
                shape = np.shape(param)  # type: ignore[arg-type]

                batch_length = shape[1] if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]
                num_rows = shape[0] if len(shape) >= 1 else 1  # type: ignore[redundant-expr,misc]
                sizes = batch_length * np.ones(num_rows)
            else:
                # For non-primitive types, default to partitioning each element separately.
                sizes = np.ones(len(arrow_array))

            columns.append(batch.partition(sizes))

        indicator_column = cls.indicator().partition(np.zeros(len(sizes)))
        return ComponentColumnList([indicator_column] + columns)

    interactive: components.InteractiveBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.InteractiveBatch._converter,  # type: ignore[misc]
    )
    # Whether the entity can be interacted with.
    #
    # This property is propagated down the entity hierarchy until another child entity
    # sets `interactive` to a different value at which point propagation continues with that value instead.
    #
    # Defaults to parent's `interactive` value or true if there is no parent.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    visible: components.VisibleBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.VisibleBatch._converter,  # type: ignore[misc]
    )
    # Whether the entity is visible.
    #
    # This property is propagated down the entity hierarchy until another child entity
    # sets `visible` to a different value at which point propagation continues with that value instead.
    #
    # Defaults to parent's `visible` value or true if there is no parent.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
