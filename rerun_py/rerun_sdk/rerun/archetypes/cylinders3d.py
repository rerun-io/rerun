# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/archetypes/cylinders3d.fbs".

# You can extend this class by creating a "Cylinders3DExt" class in "cylinders3d_ext.py".

from __future__ import annotations

import numpy as np
import pyarrow as pa
from attrs import define, field

from .. import components, datatypes
from .._baseclasses import (
    Archetype,
    ComponentColumnList,
)
from ..error_utils import catch_and_log_exceptions
from .cylinders3d_ext import Cylinders3DExt

__all__ = ["Cylinders3D"]


@define(str=False, repr=False, init=False)
class Cylinders3D(Cylinders3DExt, Archetype):
    """
    **Archetype**: 3D cylinders with flat caps.

    This archetype is for cylinder primitives defined by their axial length and radius.
    For points whose radii are for visualization purposes, use [`archetypes.Points3D`][rerun.archetypes.Points3D] instead.

    Orienting and placing cylinders forms a separate transform that is applied prior to [`archetypes.InstancePoses3D`][rerun.archetypes.InstancePoses3D] and [`archetypes.Transform3D`][rerun.archetypes.Transform3D].

    Example
    -------
    ### Batch of cylinders:
    ```python
    import rerun as rr

    rr.init("rerun_example_cylinders3d_batch", spawn=True)

    rr.log(
        "cylinders",
        rr.Cylinders3D(
            lengths=[0.0, 2.0, 4.0, 6.0, 8.0],
            radii=[1.0, 0.5, 0.5, 0.5, 1.0],
            colors=[
                (255, 0, 0),
                (188, 188, 0),
                (0, 255, 0),
                (0, 188, 188),
                (0, 0, 255),
            ],
            centers=[
                (0.0, 0.0, 0.0),
                (2.0, 0.0, 0.0),
                (4.0, 0.0, 0.0),
                (6.0, 0.0, 0.0),
                (8.0, 0.0, 0.0),
            ],
            rotation_axis_angles=[
                rr.RotationAxisAngle(
                    [1.0, 0.0, 0.0],
                    rr.Angle(deg=float(i) * -22.5),
                )
                for i in range(5)
            ],
        ),
    )
    ```
    <center>
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/cylinders3d_batch/ef642dede2bef23704eaff0f22aa48284d482b23/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/cylinders3d_batch/ef642dede2bef23704eaff0f22aa48284d482b23/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/cylinders3d_batch/ef642dede2bef23704eaff0f22aa48284d482b23/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/cylinders3d_batch/ef642dede2bef23704eaff0f22aa48284d482b23/1200w.png">
      <img src="https://static.rerun.io/cylinders3d_batch/ef642dede2bef23704eaff0f22aa48284d482b23/full.png" width="640">
    </picture>
    </center>

    """

    # __init__ can be found in cylinders3d_ext.py

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            lengths=None,
            radii=None,
            centers=None,
            rotation_axis_angles=None,
            quaternions=None,
            colors=None,
            line_radii=None,
            fill_mode=None,
            labels=None,
            show_labels=None,
            class_ids=None,
        )

    @classmethod
    def _clear(cls) -> Cylinders3D:
        """Produce an empty Cylinders3D, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        lengths: datatypes.Float32ArrayLike | None = None,
        radii: datatypes.Float32ArrayLike | None = None,
        centers: datatypes.Vec3DArrayLike | None = None,
        rotation_axis_angles: datatypes.RotationAxisAngleArrayLike | None = None,
        quaternions: datatypes.QuaternionArrayLike | None = None,
        colors: datatypes.Rgba32ArrayLike | None = None,
        line_radii: datatypes.Float32ArrayLike | None = None,
        fill_mode: components.FillModeLike | None = None,
        labels: datatypes.Utf8ArrayLike | None = None,
        show_labels: datatypes.BoolLike | None = None,
        class_ids: datatypes.ClassIdArrayLike | None = None,
    ) -> Cylinders3D:
        """
        Update only some specific fields of a `Cylinders3D`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        lengths:
            The total axial length of the cylinder, measured as the straight-line distance between the centers of its two endcaps.
        radii:
            Radii of the cylinders.
        centers:
            Optional centers of the cylinders.

            If not specified, each cylinder will be centered at (0, 0, 0).
        rotation_axis_angles:
            Rotations via axis + angle.

            If no rotation is specified, the cylinders align with the +Z axis of the local coordinate system.
        quaternions:
            Rotations via quaternion.

            If no rotation is specified, the cylinders align with the +Z axis of the local coordinate system.
        colors:
            Optional colors for the cylinders.
        line_radii:
            Optional radii for the lines used when the cylinder is rendered as a wireframe.
        fill_mode:
            Optionally choose whether the cylinders are drawn with lines or solid.
        labels:
            Optional text labels for the cylinders, which will be located at their centers.
        show_labels:
            Whether the text labels should be shown.

            If not set, labels will automatically appear when there is exactly one label for this entity
            or the number of instances on this entity is under a certain threshold.
        class_ids:
            Optional class ID for the ellipsoids.

            The class ID provides colors and labels if not specified explicitly.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "lengths": lengths,
                "radii": radii,
                "centers": centers,
                "rotation_axis_angles": rotation_axis_angles,
                "quaternions": quaternions,
                "colors": colors,
                "line_radii": line_radii,
                "fill_mode": fill_mode,
                "labels": labels,
                "show_labels": show_labels,
                "class_ids": class_ids,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> Cylinders3D:
        """Clear all the fields of a `Cylinders3D`."""
        return cls.from_fields(clear_unset=True)

    @classmethod
    def columns(
        cls,
        *,
        lengths: datatypes.Float32ArrayLike | None = None,
        radii: datatypes.Float32ArrayLike | None = None,
        centers: datatypes.Vec3DArrayLike | None = None,
        rotation_axis_angles: datatypes.RotationAxisAngleArrayLike | None = None,
        quaternions: datatypes.QuaternionArrayLike | None = None,
        colors: datatypes.Rgba32ArrayLike | None = None,
        line_radii: datatypes.Float32ArrayLike | None = None,
        fill_mode: components.FillModeArrayLike | None = None,
        labels: datatypes.Utf8ArrayLike | None = None,
        show_labels: datatypes.BoolArrayLike | None = None,
        class_ids: datatypes.ClassIdArrayLike | None = None,
    ) -> ComponentColumnList:
        """
        Construct a new column-oriented component bundle.

        This makes it possible to use `rr.send_columns` to send columnar data directly into Rerun.

        The returned columns will be partitioned into unit-length sub-batches by default.
        Use `ComponentColumnList.partition` to repartition the data as needed.

        Parameters
        ----------
        lengths:
            The total axial length of the cylinder, measured as the straight-line distance between the centers of its two endcaps.
        radii:
            Radii of the cylinders.
        centers:
            Optional centers of the cylinders.

            If not specified, each cylinder will be centered at (0, 0, 0).
        rotation_axis_angles:
            Rotations via axis + angle.

            If no rotation is specified, the cylinders align with the +Z axis of the local coordinate system.
        quaternions:
            Rotations via quaternion.

            If no rotation is specified, the cylinders align with the +Z axis of the local coordinate system.
        colors:
            Optional colors for the cylinders.
        line_radii:
            Optional radii for the lines used when the cylinder is rendered as a wireframe.
        fill_mode:
            Optionally choose whether the cylinders are drawn with lines or solid.
        labels:
            Optional text labels for the cylinders, which will be located at their centers.
        show_labels:
            Whether the text labels should be shown.

            If not set, labels will automatically appear when there is exactly one label for this entity
            or the number of instances on this entity is under a certain threshold.
        class_ids:
            Optional class ID for the ellipsoids.

            The class ID provides colors and labels if not specified explicitly.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            inst.__attrs_init__(
                lengths=lengths,
                radii=radii,
                centers=centers,
                rotation_axis_angles=rotation_axis_angles,
                quaternions=quaternions,
                colors=colors,
                line_radii=line_radii,
                fill_mode=fill_mode,
                labels=labels,
                show_labels=show_labels,
                class_ids=class_ids,
            )

        batches = inst.as_component_batches(include_indicators=False)
        if len(batches) == 0:
            return ComponentColumnList([])

        kwargs = {
            "Cylinders3D:lengths": lengths,
            "Cylinders3D:radii": radii,
            "Cylinders3D:centers": centers,
            "Cylinders3D:rotation_axis_angles": rotation_axis_angles,
            "Cylinders3D:quaternions": quaternions,
            "Cylinders3D:colors": colors,
            "Cylinders3D:line_radii": line_radii,
            "Cylinders3D:fill_mode": fill_mode,
            "Cylinders3D:labels": labels,
            "Cylinders3D:show_labels": show_labels,
            "Cylinders3D:class_ids": class_ids,
        }
        columns = []

        for batch in batches:
            arrow_array = batch.as_arrow_array()

            # For primitive arrays and fixed size list arrays, we infer partition size from the input shape.
            if pa.types.is_primitive(arrow_array.type) or pa.types.is_fixed_size_list(arrow_array.type):
                param = kwargs[batch.component_descriptor().component]  # type: ignore[index]
                shape = np.shape(param)  # type: ignore[arg-type]
                elem_flat_len = int(np.prod(shape[1:])) if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]

                if pa.types.is_fixed_size_list(arrow_array.type) and arrow_array.type.list_size == elem_flat_len:
                    # If the product of the last dimensions of the shape are equal to the size of the fixed size list array,
                    # we have `num_rows` single element batches (each element is a fixed sized list).
                    # (This should have been already validated by conversion to the arrow_array)
                    batch_length = 1
                else:
                    batch_length = shape[1] if len(shape) > 1 else 1  # type: ignore[redundant-expr,misc]

                num_rows = shape[0] if len(shape) >= 1 else 1  # type: ignore[redundant-expr,misc]
                sizes = batch_length * np.ones(num_rows)
            else:
                # For non-primitive types, default to partitioning each element separately.
                sizes = np.ones(len(arrow_array))

            columns.append(batch.partition(sizes))

        indicator_column = cls.indicator().partition(np.zeros(len(sizes)))
        return ComponentColumnList([indicator_column] + columns)

    lengths: components.LengthBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.LengthBatch._converter,  # type: ignore[misc]
    )
    # The total axial length of the cylinder, measured as the straight-line distance between the centers of its two endcaps.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    radii: components.RadiusBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.RadiusBatch._converter,  # type: ignore[misc]
    )
    # Radii of the cylinders.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    centers: components.PoseTranslation3DBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.PoseTranslation3DBatch._converter,  # type: ignore[misc]
    )
    # Optional centers of the cylinders.
    #
    # If not specified, each cylinder will be centered at (0, 0, 0).
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    rotation_axis_angles: components.PoseRotationAxisAngleBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.PoseRotationAxisAngleBatch._converter,  # type: ignore[misc]
    )
    # Rotations via axis + angle.
    #
    # If no rotation is specified, the cylinders align with the +Z axis of the local coordinate system.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    quaternions: components.PoseRotationQuatBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.PoseRotationQuatBatch._converter,  # type: ignore[misc]
    )
    # Rotations via quaternion.
    #
    # If no rotation is specified, the cylinders align with the +Z axis of the local coordinate system.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    colors: components.ColorBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.ColorBatch._converter,  # type: ignore[misc]
    )
    # Optional colors for the cylinders.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    line_radii: components.RadiusBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.RadiusBatch._converter,  # type: ignore[misc]
    )
    # Optional radii for the lines used when the cylinder is rendered as a wireframe.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    fill_mode: components.FillModeBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.FillModeBatch._converter,  # type: ignore[misc]
    )
    # Optionally choose whether the cylinders are drawn with lines or solid.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    labels: components.TextBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.TextBatch._converter,  # type: ignore[misc]
    )
    # Optional text labels for the cylinders, which will be located at their centers.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    show_labels: components.ShowLabelsBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.ShowLabelsBatch._converter,  # type: ignore[misc]
    )
    # Whether the text labels should be shown.
    #
    # If not set, labels will automatically appear when there is exactly one label for this entity
    # or the number of instances on this entity is under a certain threshold.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    class_ids: components.ClassIdBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.ClassIdBatch._converter,  # type: ignore[misc]
    )
    # Optional class ID for the ellipsoids.
    #
    # The class ID provides colors and labels if not specified explicitly.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
