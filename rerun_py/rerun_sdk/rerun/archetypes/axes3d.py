# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/archetypes/axes3d.fbs".

# You can extend this class by creating a "Axes3DExt" class in "axes3d_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from .. import components, datatypes
from .._baseclasses import Archetype
from ..error_utils import catch_and_log_exceptions

__all__ = ["Axes3D"]


@define(str=False, repr=False, init=False)
class Axes3D(Archetype):
    """
    **Archetype**: This archetype shows a set of orthogonal coordinate axes such as for representing a transform.

    See [`Transform3D`][rerun.archetypes.Transform3D]

    Example
    -------
    ### Transform with axes:
    ```python
    import rerun as rr

    rr.init("rerun_example_transform3d_axes", spawn=True)

    # Make the base axes longer
    # Log all axes markers as static first
    rr.log("base", rr.Axes3D(length=1), static=True)
    rr.log("base/rotated", rr.Axes3D(length=0.5), static=True)
    rr.log("base/rotated/translated", rr.Axes3D(length=0.5), static=True)

    # Now sweep out a rotation relative to the base
    for deg in range(360):
        rr.set_time_sequence("step", deg)
        rr.log(
            "base/rotated",
            rr.Transform3D(
                rotation=rr.RotationAxisAngle(
                    axis=[1.0, 1.0, 1.0],
                    degrees=deg,
                )
            ),
        )
        rr.log(
            "base/rotated/translated",
            rr.Transform3D(
                translation=[2.0, 0, 0],
            ),
        )
    ```
    <center>
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/transform3d_axes/35cd6a68cce0cd582231984be4e2628d1627540b/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/transform3d_axes/35cd6a68cce0cd582231984be4e2628d1627540b/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/transform3d_axes/35cd6a68cce0cd582231984be4e2628d1627540b/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/transform3d_axes/35cd6a68cce0cd582231984be4e2628d1627540b/1200w.png">
      <img src="https://static.rerun.io/transform3d_axes/35cd6a68cce0cd582231984be4e2628d1627540b/full.png" width="640">
    </picture>
    </center>

    """

    def __init__(self: Any, *, length: datatypes.Float32Like | None = None):
        """
        Create a new instance of the Axes3D archetype.

        Parameters
        ----------
        length:
            Length of the 3 axes.

        """

        # You can define your own __init__ function as a member of Axes3DExt in axes3d_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(length=length)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            length=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> Axes3D:
        """Produce an empty Axes3D, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    length: components.AxisLengthBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AxisLengthBatch._optional,  # type: ignore[misc]
    )
    # Length of the 3 axes.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
