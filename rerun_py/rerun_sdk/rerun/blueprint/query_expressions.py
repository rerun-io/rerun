# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/query_expressions.fbs".

# You can extend this class by creating a "QueryExpressionsExt" class in "query_expressions_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType

__all__ = [
    "QueryExpressions",
    "QueryExpressionsArrayLike",
    "QueryExpressionsBatch",
    "QueryExpressionsLike",
    "QueryExpressionsType",
]


@define(init=False)
class QueryExpressions:
    """
    **Blueprint**: A set of expressions used for a `DataQueryBlueprint`.

    Unstable. Used for the ongoing blueprint experimentations.
    """

    def __init__(self: Any, expressions: QueryExpressionsLike):
        """
        Create a new instance of the QueryExpressions blueprint.

        Parameters
        ----------
        expressions:
            A set of strings that can be parsed as `EntityPathExpression`s.
        """

        # You can define your own __init__ function as a member of QueryExpressionsExt in query_expressions_ext.py
        self.__attrs_init__(expressions=expressions)

    expressions: list[str] = field()
    # A set of strings that can be parsed as `EntityPathExpression`s.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


QueryExpressionsLike = QueryExpressions
QueryExpressionsArrayLike = Union[
    QueryExpressions,
    Sequence[QueryExpressionsLike],
]


class QueryExpressionsType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.QueryExpressions"


class QueryExpressionsBatch(BaseBatch[QueryExpressionsArrayLike]):
    _ARROW_TYPE = QueryExpressionsType()
