# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/force_position_x.fbs".

# You can extend this class by creating a "ForcePositionXExt" class in "force_position_x_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import (
    BaseBatch,
)

__all__ = ["ForcePositionX", "ForcePositionXArrayLike", "ForcePositionXBatch", "ForcePositionXLike"]


@define(init=False)
class ForcePositionX:
    """**Datatype**: Defines a force that pulls nodes towards an `x` position."""

    def __init__(self: Any, enabled: bool, x: float, strength: float):
        """
        Create a new instance of the ForcePositionX datatype.

        Parameters
        ----------
        enabled:
            Whether the force is enabled.
        x:
            The `x` position to pull nodes towards.
        strength:
            The strength of the force.

        """

        # You can define your own __init__ function as a member of ForcePositionXExt in force_position_x_ext.py
        self.__attrs_init__(enabled=enabled, x=x, strength=strength)

    enabled: bool = field(converter=bool)
    # Whether the force is enabled.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    x: float = field(converter=float)
    # The `x` position to pull nodes towards.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    strength: float = field(converter=float)
    # The strength of the force.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


ForcePositionXLike = ForcePositionX
ForcePositionXArrayLike = Union[
    ForcePositionX,
    Sequence[ForcePositionXLike],
]


class ForcePositionXBatch(BaseBatch[ForcePositionXArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("enabled", pa.bool_(), nullable=False, metadata={}),
        pa.field("x", pa.float64(), nullable=False, metadata={}),
        pa.field("strength", pa.float64(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: ForcePositionXArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, ForcePositionX):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                pa.array(np.asarray([x.enabled for x in data], dtype=np.bool_)),
                pa.array(np.asarray([x.x for x in data], dtype=np.float64)),
                pa.array(np.asarray([x.strength for x in data], dtype=np.float64)),
            ],
            fields=list(data_type),
        )
