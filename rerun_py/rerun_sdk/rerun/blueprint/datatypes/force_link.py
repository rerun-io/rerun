# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/force_link.fbs".

# You can extend this class by creating a "ForceLinkExt" class in "force_link_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import (
    BaseBatch,
)

__all__ = ["ForceLink", "ForceLinkArrayLike", "ForceLinkBatch", "ForceLinkLike"]


@define(init=False)
class ForceLink:
    """**Datatype**: Defines a force that acts similar to a spring between nodes."""

    def __init__(self: Any, enabled: bool, iterations: int, distance: float, strength: float):
        """
        Create a new instance of the ForceLink datatype.

        Parameters
        ----------
        enabled:
            Whether the force is enabled.
        iterations:
            The number of iterations.
        distance:
            The distance between nodes at which the force is zero.
        strength:
            The strength of the force.

        """

        # You can define your own __init__ function as a member of ForceLinkExt in force_link_ext.py
        self.__attrs_init__(enabled=enabled, iterations=iterations, distance=distance, strength=strength)

    enabled: bool = field(converter=bool)
    # Whether the force is enabled.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    iterations: int = field(converter=int)
    # The number of iterations.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    distance: float = field(converter=float)
    # The distance between nodes at which the force is zero.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    strength: float = field(converter=float)
    # The strength of the force.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


ForceLinkLike = ForceLink
ForceLinkArrayLike = Union[
    ForceLink,
    Sequence[ForceLinkLike],
]


class ForceLinkBatch(BaseBatch[ForceLinkArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("enabled", pa.bool_(), nullable=False, metadata={}),
        pa.field("iterations", pa.uint32(), nullable=False, metadata={}),
        pa.field("distance", pa.float64(), nullable=False, metadata={}),
        pa.field("strength", pa.float64(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: ForceLinkArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, ForceLink):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                pa.array(np.asarray([x.enabled for x in data], dtype=np.bool_)),
                pa.array(np.asarray([x.iterations for x in data], dtype=np.uint32)),
                pa.array(np.asarray([x.distance for x in data], dtype=np.float64)),
                pa.array(np.asarray([x.strength for x in data], dtype=np.float64)),
            ],
            fields=list(data_type),
        )
