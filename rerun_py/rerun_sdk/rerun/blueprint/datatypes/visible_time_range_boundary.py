# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/datatypes/visible_time_range.fbs".

# You can extend this class by creating a "VisibleTimeRangeBoundaryExt" class in "visible_time_range_boundary_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from ... import datatypes
from ..._baseclasses import BaseBatch, BaseExtensionType
from ...blueprint import datatypes as blueprint_datatypes

__all__ = [
    "VisibleTimeRangeBoundary",
    "VisibleTimeRangeBoundaryArrayLike",
    "VisibleTimeRangeBoundaryBatch",
    "VisibleTimeRangeBoundaryLike",
    "VisibleTimeRangeBoundaryType",
]


def _visible_time_range_boundary__time__special_field_converter_override(x: datatypes.TimeIntLike) -> datatypes.TimeInt:
    if isinstance(x, datatypes.TimeInt):
        return x
    else:
        return datatypes.TimeInt(x)


@define(init=False)
class VisibleTimeRangeBoundary:
    """**Datatype**: Type of boundary for visible history."""

    def __init__(self: Any, kind: blueprint_datatypes.VisibleTimeRangeBoundaryKindLike, time: datatypes.TimeIntLike):
        """
        Create a new instance of the VisibleTimeRangeBoundary datatype.

        Parameters
        ----------
        kind:
            Type of the boundary.
        time:
            Value of the boundary (ignored for `Infinite` type).

        """

        # You can define your own __init__ function as a member of VisibleTimeRangeBoundaryExt in visible_time_range_boundary_ext.py
        self.__attrs_init__(kind=kind, time=time)

    kind: blueprint_datatypes.VisibleTimeRangeBoundaryKind = field()
    # Type of the boundary.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    time: datatypes.TimeInt = field(converter=_visible_time_range_boundary__time__special_field_converter_override)
    # Value of the boundary (ignored for `Infinite` type).
    #
    # (Docstring intentionally commented out to hide this field from the docs)


VisibleTimeRangeBoundaryLike = VisibleTimeRangeBoundary
VisibleTimeRangeBoundaryArrayLike = Union[
    VisibleTimeRangeBoundary,
    Sequence[VisibleTimeRangeBoundaryLike],
]


class VisibleTimeRangeBoundaryType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.datatypes.VisibleTimeRangeBoundary"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field(
                        "kind",
                        pa.sparse_union(
                            [
                                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                                pa.field("RelativeToTimeCursor", pa.null(), nullable=True, metadata={}),
                                pa.field("Absolute", pa.null(), nullable=True, metadata={}),
                                pa.field("Infinite", pa.null(), nullable=True, metadata={}),
                            ]
                        ),
                        nullable=False,
                        metadata={},
                    ),
                    pa.field("time", pa.int64(), nullable=False, metadata={}),
                ]
            ),
            self._TYPE_NAME,
        )


class VisibleTimeRangeBoundaryBatch(BaseBatch[VisibleTimeRangeBoundaryArrayLike]):
    _ARROW_TYPE = VisibleTimeRangeBoundaryType()

    @staticmethod
    def _native_to_pa_array(data: VisibleTimeRangeBoundaryArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in visible_time_range_boundary_ext.py
