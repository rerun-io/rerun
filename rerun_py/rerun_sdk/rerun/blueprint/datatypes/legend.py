# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/datatypes/legend.fbs".

# You can extend this class by creating a "LegendExt" class in "legend_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from ..._baseclasses import BaseBatch, BaseExtensionType
from ..._converters import (
    int_or_none,
)

__all__ = ["Legend", "LegendArrayLike", "LegendBatch", "LegendLike", "LegendType"]


@define(init=False)
class Legend:
    """**Datatype**: Configuration for the legend of a plot."""

    def __init__(self: Any, visible: bool, location: int | None = None):
        """
        Create a new instance of the Legend datatype.

        Parameters
        ----------
        visible:
            Whether or not the legend should be displayed.
        location:
            Where should the legend be located.

            Allowed values:
             - LeftTop = 1,
             - RightTop = 2,
             - LeftBottom = 3,
             - RightBottom = 4

        """

        # You can define your own __init__ function as a member of LegendExt in legend_ext.py
        self.__attrs_init__(visible=visible, location=location)

    visible: bool = field(converter=bool)
    # Whether or not the legend should be displayed.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    location: int | None = field(default=None, converter=int_or_none)
    # Where should the legend be located.
    #
    # Allowed values:
    #  - LeftTop = 1,
    #  - RightTop = 2,
    #  - LeftBottom = 3,
    #  - RightBottom = 4
    #
    # (Docstring intentionally commented out to hide this field from the docs)


LegendLike = Legend
LegendArrayLike = Union[
    Legend,
    Sequence[LegendLike],
]


class LegendType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.datatypes.Legend"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field("visible", pa.bool_(), nullable=False, metadata={}),
                    pa.field("location", pa.uint8(), nullable=True, metadata={}),
                ]
            ),
            self._TYPE_NAME,
        )


class LegendBatch(BaseBatch[LegendArrayLike]):
    _ARROW_TYPE = LegendType()

    @staticmethod
    def _native_to_pa_array(data: LegendArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in legend_ext.py
