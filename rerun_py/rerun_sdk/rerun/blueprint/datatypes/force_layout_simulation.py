# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/force_layout_simulation.fbs".

# You can extend this class by creating a "ForceLayoutSimulationExt" class in "force_layout_simulation_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import (
    BaseBatch,
)

__all__ = [
    "ForceLayoutSimulation",
    "ForceLayoutSimulationArrayLike",
    "ForceLayoutSimulationBatch",
    "ForceLayoutSimulationLike",
]


@define(init=False)
class ForceLayoutSimulation:
    """**Datatype**: The parameters for a force layout simulation."""

    def __init__(
        self: Any, alpha: float, alpha_min: float, alpha_decay: float, alpha_target: float, velocity_decay: float
    ):
        """
        Create a new instance of the ForceLayoutSimulation datatype.

        Parameters
        ----------
        alpha:
            Similar to the the temperature in a simulated annealing algorithm.
        alpha_min:
            If `alpha` drops below this value, the simulation stops.
        alpha_decay:
            The rate at which `alpha` decreases after each iteration.
        alpha_target:
            The target value for `alpha`, must be in the range `[0, 1]`.
        velocity_decay:
            Acts as a damping factor for the velocity of nodes.

        """

        # You can define your own __init__ function as a member of ForceLayoutSimulationExt in force_layout_simulation_ext.py
        self.__attrs_init__(
            alpha=alpha,
            alpha_min=alpha_min,
            alpha_decay=alpha_decay,
            alpha_target=alpha_target,
            velocity_decay=velocity_decay,
        )

    alpha: float = field(converter=float)
    # Similar to the the temperature in a simulated annealing algorithm.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    alpha_min: float = field(converter=float)
    # If `alpha` drops below this value, the simulation stops.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    alpha_decay: float = field(converter=float)
    # The rate at which `alpha` decreases after each iteration.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    alpha_target: float = field(converter=float)
    # The target value for `alpha`, must be in the range `[0, 1]`.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    velocity_decay: float = field(converter=float)
    # Acts as a damping factor for the velocity of nodes.
    #
    # (Docstring intentionally commented out to hide this field from the docs)


ForceLayoutSimulationLike = ForceLayoutSimulation
ForceLayoutSimulationArrayLike = Union[
    ForceLayoutSimulation,
    Sequence[ForceLayoutSimulationLike],
]


class ForceLayoutSimulationBatch(BaseBatch[ForceLayoutSimulationArrayLike]):
    _ARROW_DATATYPE = pa.struct([
        pa.field("alpha", pa.float64(), nullable=False, metadata={}),
        pa.field("alpha_min", pa.float64(), nullable=False, metadata={}),
        pa.field("alpha_decay", pa.float64(), nullable=False, metadata={}),
        pa.field("alpha_target", pa.float64(), nullable=False, metadata={}),
        pa.field("velocity_decay", pa.float64(), nullable=False, metadata={}),
    ])

    @staticmethod
    def _native_to_pa_array(data: ForceLayoutSimulationArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, ForceLayoutSimulation):
            data = [data]

        return pa.StructArray.from_arrays(
            [
                pa.array(np.asarray([x.alpha for x in data], dtype=np.float64)),
                pa.array(np.asarray([x.alpha_min for x in data], dtype=np.float64)),
                pa.array(np.asarray([x.alpha_decay for x in data], dtype=np.float64)),
                pa.array(np.asarray([x.alpha_target for x in data], dtype=np.float64)),
                pa.array(np.asarray([x.velocity_decay for x in data], dtype=np.float64)),
            ],
            fields=list(data_type),
        )
