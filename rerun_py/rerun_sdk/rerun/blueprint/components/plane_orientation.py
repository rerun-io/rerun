# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/plane_orientation.fbs".

# You can extend this class by creating a "PlaneOrientationExt" class in "plane_orientation_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    ComponentBatchMixin,
)

__all__ = ["PlaneOrientation", "PlaneOrientationArrayLike", "PlaneOrientationBatch", "PlaneOrientationLike"]


from enum import Enum


class PlaneOrientation(Enum):
    """**Component**: Orientation of a 3D axis aligned plane."""

    Xz = 1
    """Plane spanned by X and Z axis."""

    Yz = 2
    """Plane spanned by Y and Z axis."""

    Xy = 3
    """Plane spanned by X and Y axis."""

    @classmethod
    def auto(cls, val: str | int | PlaneOrientation) -> PlaneOrientation:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, PlaneOrientation):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


PlaneOrientationLike = Union[PlaneOrientation, Literal["Xy", "Xz", "Yz", "xy", "xz", "yz"], int]
PlaneOrientationArrayLike = Union[PlaneOrientationLike, Sequence[PlaneOrientationLike]]


class PlaneOrientationBatch(BaseBatch[PlaneOrientationArrayLike], ComponentBatchMixin):
    _ARROW_DATATYPE = pa.uint8()
    _COMPONENT_NAME: str = "rerun.blueprint.components.PlaneOrientation"

    @staticmethod
    def _native_to_pa_array(data: PlaneOrientationArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (PlaneOrientation, int, str)):
            data = [data]

        pa_data = [PlaneOrientation.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
