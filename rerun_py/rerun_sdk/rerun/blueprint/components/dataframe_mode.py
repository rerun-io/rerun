# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/dataframe_mode.fbs".

# You can extend this class by creating a "DataframeModeExt" class in "dataframe_mode_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["DataframeMode", "DataframeModeArrayLike", "DataframeModeBatch", "DataframeModeLike", "DataframeModeType"]


from enum import Enum


class DataframeMode(Enum):
    """**Component**: The kind of table displayed by the dataframe view."""

    LatestAt = 1
    """
    Display the "latest at" value of each view entities.

    In this mode, rows are entity instances, and columns are components.
    """

    TimeRange = 2
    """
    Display data according to the view entities visible time range setting.attribute

    In this mode, rows are combination of entity path, timestamp, and row id, and columsna re components.
    """


DataframeModeLike = Union[DataframeMode, Literal["latestat", "timerange"]]
DataframeModeArrayLike = Union[DataframeModeLike, Sequence[DataframeModeLike]]


class DataframeModeType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.DataframeMode"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("LatestAt", pa.null(), nullable=True, metadata={}),
                pa.field("TimeRange", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class DataframeModeBatch(BaseBatch[DataframeModeArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = DataframeModeType()

    @staticmethod
    def _native_to_pa_array(data: DataframeModeArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (DataframeMode, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, DataframeMode):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(DataframeMode, value):
                    types.append(DataframeMode[value].value)  # fast path
                elif value.lower() == "latestat":
                    types.append(DataframeMode.LatestAt.value)
                elif value.lower() == "timerange":
                    types.append(DataframeMode.TimeRange.value)
                else:
                    raise ValueError(f"Unknown DataframeMode kind: {value}")
            else:
                raise ValueError(f"Unknown DataframeMode kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 2) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
