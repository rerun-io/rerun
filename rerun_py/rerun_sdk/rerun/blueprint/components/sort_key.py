# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/sort_key.fbs".

# You can extend this class by creating a "SortKeyExt" class in "sort_key_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["SortKey", "SortKeyArrayLike", "SortKeyBatch", "SortKeyLike", "SortKeyType"]


from enum import Enum


class SortKey(Enum):
    """**Component**: Primary element by which to group by in a temporal data table."""

    Entity = 0
    """Group by entity."""

    Time = 1
    """Group by instance."""

    def __str__(self) -> str:
        """Returns the variant name."""
        if self == SortKey.Entity:
            return "Entity"
        elif self == SortKey.Time:
            return "Time"
        else:
            raise ValueError("Unknown enum variant")


SortKeyLike = Union[SortKey, Literal["Entity", "Time", "entity", "time"]]
SortKeyArrayLike = Union[SortKeyLike, Sequence[SortKeyLike]]


class SortKeyType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.SortKey"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class SortKeyBatch(BaseBatch[SortKeyArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = SortKeyType()

    @staticmethod
    def _native_to_pa_array(data: SortKeyArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (SortKey, int, str)):
            data = [data]

        data = [SortKey(v) if isinstance(v, int) else v for v in data]
        data = [SortKey[v.upper()] if isinstance(v, str) else v for v in data]
        pa_data = [v.value for v in data]

        return pa.array(pa_data, type=data_type)
