# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/sort_key.fbs".

# You can extend this class by creating a "SortKeyExt" class in "sort_key_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["SortKey", "SortKeyArrayLike", "SortKeyBatch", "SortKeyLike", "SortKeyType"]


from enum import Enum


class SortKey(Enum):
    """**Component**: Primary element by which to group by in a temporal data table."""

    Entity = 1
    """Group by entity."""

    Time = 2
    """Group by instance."""

    def __str__(self) -> str:
        """Returns the variant name."""
        if self == SortKey.Entity:
            return "Entity"
        elif self == SortKey.Time:
            return "Time"
        else:
            raise ValueError("Unknown enum variant")


SortKeyLike = Union[SortKey, Literal["Entity", "Time", "entity", "time"]]
SortKeyArrayLike = Union[SortKeyLike, Sequence[SortKeyLike]]


class SortKeyType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.SortKey"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("Entity", pa.null(), nullable=True, metadata={}),
                pa.field("Time", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class SortKeyBatch(BaseBatch[SortKeyArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = SortKeyType()

    @staticmethod
    def _native_to_pa_array(data: SortKeyArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (SortKey, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, SortKey):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(SortKey, value):
                    types.append(SortKey[value].value)  # fast path
                elif value.lower() == "entity":
                    types.append(SortKey.Entity.value)
                elif value.lower() == "time":
                    types.append(SortKey.Time.value)
                else:
                    raise ValueError(f"Unknown SortKey kind: {value}")
            else:
                raise ValueError(f"Unknown SortKey kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 2) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
