# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/corner_2d.fbs".

# You can extend this class by creating a "Corner2DExt" class in "corner2d_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin

__all__ = ["Corner2D", "Corner2DArrayLike", "Corner2DBatch", "Corner2DLike", "Corner2DType"]


from enum import Enum


class Corner2D(Enum):
    """**Component**: One of four 2D corners, typically used to align objects."""

    LeftTop = 1
    """Left top corner."""

    RightTop = 2
    """Right top corner."""

    LeftBottom = 3
    """Left bottom corner."""

    RightBottom = 4
    """Right bottom corner."""


Corner2DLike = Union[
    Corner2D, Literal["lefttop"] | Literal["righttop"] | Literal["leftbottom"] | Literal["rightbottom"]
]
Corner2DArrayLike = Union[Corner2DLike, Sequence[Corner2DLike]]


class Corner2DType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.Corner2D"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("LeftTop", pa.null(), nullable=True, metadata={}),
                pa.field("RightTop", pa.null(), nullable=True, metadata={}),
                pa.field("LeftBottom", pa.null(), nullable=True, metadata={}),
                pa.field("RightBottom", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class Corner2DBatch(BaseBatch[Corner2DArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = Corner2DType()

    @staticmethod
    def _native_to_pa_array(data: Corner2DArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (Corner2D, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, Corner2D):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(Corner2D, value):
                    types.append(Corner2D[value].value)  # fast path
                elif value.lower() == "lefttop":
                    types.append(Corner2D.LeftTop.value)
                elif value.lower() == "righttop":
                    types.append(Corner2D.RightTop.value)
                elif value.lower() == "leftbottom":
                    types.append(Corner2D.LeftBottom.value)
                elif value.lower() == "rightbottom":
                    types.append(Corner2D.RightBottom.value)
                else:
                    raise ValueError(f"Unknown Corner2D kind: {value}")
            else:
                raise ValueError(f"Unknown Corner2D kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 4) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
