# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/corner_2d.fbs".

# You can extend this class by creating a "Corner2DExt" class in "corner2d_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["Corner2D", "Corner2DArrayLike", "Corner2DBatch", "Corner2DLike", "Corner2DType"]


from enum import Enum


class Corner2D(Enum):
    """**Component**: One of four 2D corners, typically used to align objects."""

    LeftTop = 0
    """Left top corner."""

    RightTop = 1
    """Right top corner."""

    LeftBottom = 2
    """Left bottom corner."""

    RightBottom = 3
    """Right bottom corner."""

    def __str__(self) -> str:
        """Returns the variant name."""
        if self == Corner2D.LeftTop:
            return "LeftTop"
        elif self == Corner2D.RightTop:
            return "RightTop"
        elif self == Corner2D.LeftBottom:
            return "LeftBottom"
        elif self == Corner2D.RightBottom:
            return "RightBottom"
        else:
            raise ValueError("Unknown enum variant")


Corner2DLike = Union[
    Corner2D,
    Literal["LeftBottom", "LeftTop", "RightBottom", "RightTop", "leftbottom", "lefttop", "rightbottom", "righttop"],
]
Corner2DArrayLike = Union[Corner2DLike, Sequence[Corner2DLike]]


class Corner2DType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.Corner2D"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class Corner2DBatch(BaseBatch[Corner2DArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = Corner2DType()

    @staticmethod
    def _native_to_pa_array(data: Corner2DArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (Corner2D, int, str)):
            data = [data]

        data = [Corner2D(v) if isinstance(v, int) else v for v in data]
        data = [Corner2D[v.upper()] if isinstance(v, str) else v for v in data]
        pa_data = [v.value for v in data]

        return pa.array(pa_data, type=data_type)
