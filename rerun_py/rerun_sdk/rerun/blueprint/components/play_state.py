# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/play_state.fbs".

# You can extend this class by creating a "PlayStateExt" class in "play_state_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import Literal

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    ComponentBatchMixin,
)

__all__ = ["PlayState", "PlayStateArrayLike", "PlayStateBatch", "PlayStateLike"]


from enum import Enum


class PlayState(Enum):
    """**Component**: The current play state."""

    Paused = 1
    """Time doesn't move."""

    Playing = 2
    """Time move steadily."""

    Following = 3
    """Follow the latest available data."""

    @classmethod
    def auto(cls, val: str | int | PlayState) -> PlayState:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, PlayState):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


PlayStateLike = PlayState | Literal["Following", "Paused", "Playing", "following", "paused", "playing"] | int
PlayStateArrayLike = (
    PlayState
    | Literal["Following", "Paused", "Playing", "following", "paused", "playing"]
    | int
    | Sequence[PlayStateLike]
)


class PlayStateBatch(BaseBatch[PlayStateArrayLike], ComponentBatchMixin):
    _ARROW_DATATYPE = pa.uint8()
    _COMPONENT_TYPE: str = "rerun.blueprint.components.PlayState"

    @staticmethod
    def _native_to_pa_array(data: PlayStateArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (PlayState, int, str)):
            data = [data]

        pa_data = [PlayState.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
