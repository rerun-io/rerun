# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/loop_mode.fbs".

# You can extend this class by creating a "LoopModeExt" class in "loop_mode_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import Literal

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    ComponentBatchMixin,
)

__all__ = ["LoopMode", "LoopModeArrayLike", "LoopModeBatch", "LoopModeLike"]


from enum import Enum


class LoopMode(Enum):
    """**Component**: If playing, whether and how the playback time should loop."""

    Off = 1
    """Looping is off."""

    Selection = 2
    """We are looping within the current loop selection."""

    All = 3
    """
    We are looping the entire recording.

    The loop selection is ignored.
    """

    @classmethod
    def auto(cls, val: str | int | LoopMode) -> LoopMode:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, LoopMode):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


LoopModeLike = LoopMode | Literal["All", "Off", "Selection", "all", "off", "selection"] | int
LoopModeArrayLike = (
    LoopMode | Literal["All", "Off", "Selection", "all", "off", "selection"] | int | Sequence[LoopModeLike]
)


class LoopModeBatch(BaseBatch[LoopModeArrayLike], ComponentBatchMixin):
    _ARROW_DATATYPE = pa.uint8()
    _COMPONENT_TYPE: str = "rerun.blueprint.components.LoopMode"

    @staticmethod
    def _native_to_pa_array(data: LoopModeArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (LoopMode, int, str)):
            data = [data]

        pa_data = [LoopMode.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
