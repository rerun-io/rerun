# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/container_kind.fbs".

# You can extend this class by creating a "ContainerKindExt" class in "container_kind_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["ContainerKind", "ContainerKindArrayLike", "ContainerKindBatch", "ContainerKindLike", "ContainerKindType"]


from enum import Enum


class ContainerKind(Enum):
    """**Component**: The kind of a blueprint container (tabs, grid, â€¦)."""

    Tabs = 0
    """Put children in separate tabs"""

    Horizontal = 1
    """Order the children left to right"""

    Vertical = 2
    """Order the children top to bottom"""

    Grid = 3
    """Organize children in a grid layout"""

    def __str__(self) -> str:
        """Returns the variant name."""
        if self == ContainerKind.Tabs:
            return "Tabs"
        elif self == ContainerKind.Horizontal:
            return "Horizontal"
        elif self == ContainerKind.Vertical:
            return "Vertical"
        elif self == ContainerKind.Grid:
            return "Grid"
        else:
            raise ValueError("Unknown enum variant")


ContainerKindLike = Union[
    ContainerKind, Literal["Grid", "Horizontal", "Tabs", "Vertical", "grid", "horizontal", "tabs", "vertical"]
]
ContainerKindArrayLike = Union[ContainerKindLike, Sequence[ContainerKindLike]]


class ContainerKindType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.ContainerKind"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class ContainerKindBatch(BaseBatch[ContainerKindArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = ContainerKindType()

    @staticmethod
    def _native_to_pa_array(data: ContainerKindArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (ContainerKind, int, str)):
            data = [data]

        data = [ContainerKind(v) if isinstance(v, int) else v for v in data]
        data = [ContainerKind[v.upper()] if isinstance(v, str) else v for v in data]
        pa_data = [v.value for v in data]

        return pa.array(pa_data, type=data_type)
