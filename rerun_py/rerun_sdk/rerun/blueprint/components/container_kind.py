# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/container_kind.fbs".

# You can extend this class by creating a "ContainerKindExt" class in "container_kind_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin

__all__ = ["ContainerKind", "ContainerKindArrayLike", "ContainerKindBatch", "ContainerKindLike", "ContainerKindType"]


from enum import Enum


class ContainerKind(Enum):
    """**Component**: The kind of a blueprint container (tabs, grid, â€¦)."""

    Tabs = 1
    Horizontal = 2
    Vertical = 3
    Grid = 4


ContainerKindLike = Union[
    ContainerKind, Literal["tabs"] | Literal["horizontal"] | Literal["vertical"] | Literal["grid"]
]
ContainerKindArrayLike = Union[ContainerKindLike, Sequence[ContainerKindLike]]


class ContainerKindType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.ContainerKind"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union([
                pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                pa.field("Tabs", pa.null(), nullable=True, metadata={}),
                pa.field("Horizontal", pa.null(), nullable=True, metadata={}),
                pa.field("Vertical", pa.null(), nullable=True, metadata={}),
                pa.field("Grid", pa.null(), nullable=True, metadata={}),
            ]),
            self._TYPE_NAME,
        )


class ContainerKindBatch(BaseBatch[ContainerKindArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = ContainerKindType()

    @staticmethod
    def _native_to_pa_array(data: ContainerKindArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (ContainerKind, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, ContainerKind):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(ContainerKind, value):
                    types.append(ContainerKind[value].value)  # fast path
                elif value.lower() == "tabs":
                    types.append(ContainerKind.Tabs.value)
                elif value.lower() == "horizontal":
                    types.append(ContainerKind.Horizontal.value)
                elif value.lower() == "vertical":
                    types.append(ContainerKind.Vertical.value)
                elif value.lower() == "grid":
                    types.append(ContainerKind.Grid.value)
                else:
                    raise ValueError(f"Unknown ContainerKind kind: {value}")
            else:
                raise ValueError(f"Unknown ContainerKind kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 4) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
