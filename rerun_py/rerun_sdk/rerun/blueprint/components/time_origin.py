# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/time_origin.fbs".

# You can extend this class by creating a "TimeOriginExt" class in "time_origin_ext.py".

from __future__ import annotations

from collections.abc import Sequence
from typing import Literal, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    ComponentBatchMixin,
)

__all__ = ["TimeOrigin", "TimeOriginArrayLike", "TimeOriginBatch", "TimeOriginLike"]


from enum import Enum


class TimeOrigin(Enum):
    """**Component**: Describes how a time view should be aligned with respect to data or time cursor."""

    Left = 1
    """Align to the left all data, i.e the start."""

    Right = 2
    """Align to the right of all data, i.e Following."""

    TimeCursor = 3
    """Align center of the view with the time cursor."""

    @classmethod
    def auto(cls, val: str | int | TimeOrigin) -> TimeOrigin:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, TimeOrigin):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


TimeOriginLike = Union[TimeOrigin, Literal["Left", "Right", "TimeCursor", "left", "right", "timecursor"], int]
TimeOriginArrayLike = Union[TimeOriginLike, Sequence[TimeOriginLike]]


class TimeOriginBatch(BaseBatch[TimeOriginArrayLike], ComponentBatchMixin):
    _ARROW_DATATYPE = pa.uint8()
    _COMPONENT_TYPE: str = "rerun.blueprint.components.TimeOrigin"

    @staticmethod
    def _native_to_pa_array(data: TimeOriginArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (TimeOrigin, int, str)):
            data = [data]

        pa_data = [TimeOrigin.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
