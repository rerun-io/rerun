# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/zoom_behavior.fbs".

# You can extend this class by creating a "ZoomBehaviorExt" class in "zoom_behavior_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin

__all__ = ["ZoomBehavior", "ZoomBehaviorArrayLike", "ZoomBehaviorBatch", "ZoomBehaviorLike", "ZoomBehaviorType"]


@define(init=False)
class ZoomBehavior:
    """**Component**: How the axis behaves when the user zooms."""

    def __init__(self: Any, behavior: ZoomBehaviorLike):
        """Create a new instance of the ZoomBehavior component."""

        # You can define your own __init__ function as a member of ZoomBehaviorExt in zoom_behavior_ext.py
        self.__attrs_init__(behavior=behavior)

    behavior: int = field(converter=int)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of ZoomBehaviorExt in zoom_behavior_ext.py
        return np.asarray(self.behavior, dtype=dtype)

    def __int__(self) -> int:
        return int(self.behavior)


ZoomBehaviorLike = ZoomBehavior
ZoomBehaviorArrayLike = Union[
    ZoomBehavior,
    Sequence[ZoomBehaviorLike],
]


class ZoomBehaviorType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.ZoomBehavior"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class ZoomBehaviorBatch(BaseBatch[ZoomBehaviorArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = ZoomBehaviorType()

    @staticmethod
    def _native_to_pa_array(data: ZoomBehaviorArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError  # You need to implement native_to_pa_array_override in zoom_behavior_ext.py
