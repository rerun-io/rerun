# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/panel_state.fbs".

# You can extend this class by creating a "PanelStateExt" class in "panel_state_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["PanelState", "PanelStateArrayLike", "PanelStateBatch", "PanelStateLike", "PanelStateType"]


from enum import Enum


class PanelState(Enum):
    """**Component**: Tri-state for panel controls."""

    Hidden = 1
    """Completely hidden."""

    Collapsed = 2
    """Visible, but as small as possible on its shorter axis."""

    Expanded = 3
    """Fully expanded."""

    @classmethod
    def auto(cls, val: str | int | PanelState) -> PanelState:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, PanelState):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


PanelStateLike = Union[PanelState, Literal["Collapsed", "Expanded", "Hidden", "collapsed", "expanded", "hidden"], int]
PanelStateArrayLike = Union[PanelStateLike, Sequence[PanelStateLike]]


class PanelStateType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.PanelState"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class PanelStateBatch(BaseBatch[PanelStateArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = PanelStateType()

    @staticmethod
    def _native_to_pa_array(data: PanelStateArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (PanelState, int, str)):
            data = [data]

        pa_data = [PanelState.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
