# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/components/row_share.fbs".

# You can extend this class by creating a "RowShareExt" class in "row_share_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from ..._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin
from .row_share_ext import RowShareExt

__all__ = ["RowShare", "RowShareArrayLike", "RowShareBatch", "RowShareLike", "RowShareType"]


@define(init=False)
class RowShare(RowShareExt):
    """**Component**: The layout share of a row in the container."""

    def __init__(self: Any, share: RowShareLike):
        """
        Create a new instance of the RowShare component.

        Parameters
        ----------
        share:
            The layout share of a row in the container.

        """

        # You can define your own __init__ function as a member of RowShareExt in row_share_ext.py
        self.__attrs_init__(share=share)

    share: float = field(converter=float)
    # The layout share of a row in the container.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of RowShareExt in row_share_ext.py
        return np.asarray(self.share, dtype=dtype)

    def __float__(self) -> float:
        return float(self.share)


if TYPE_CHECKING:
    RowShareLike = Union[RowShare, float]
else:
    RowShareLike = Any

RowShareArrayLike = Union[RowShare, Sequence[RowShareLike], npt.ArrayLike]


class RowShareType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.RowShare"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.float32(), self._TYPE_NAME)


class RowShareBatch(BaseBatch[RowShareArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = RowShareType()

    @staticmethod
    def _native_to_pa_array(data: RowShareArrayLike, data_type: pa.DataType) -> pa.Array:
        return RowShareExt.native_to_pa_array_override(data, data_type)
