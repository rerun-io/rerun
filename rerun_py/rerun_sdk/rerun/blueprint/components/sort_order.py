# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/components/sort_order.fbs".

# You can extend this class by creating a "SortOrderExt" class in "sort_order_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa

from ..._baseclasses import (
    BaseBatch,
    BaseExtensionType,
    ComponentBatchMixin,
)

__all__ = ["SortOrder", "SortOrderArrayLike", "SortOrderBatch", "SortOrderLike", "SortOrderType"]


from enum import Enum


class SortOrder(Enum):
    """**Component**: Sort order for data table."""

    Ascending = 0
    """Ascending"""

    Descending = 1
    """Descending"""

    def __str__(self) -> str:
        """Returns the variant name."""
        if self == SortOrder.Ascending:
            return "Ascending"
        elif self == SortOrder.Descending:
            return "Descending"
        else:
            raise ValueError("Unknown enum variant")


SortOrderLike = Union[SortOrder, Literal["Ascending", "Descending", "ascending", "descending"]]
SortOrderArrayLike = Union[SortOrderLike, Sequence[SortOrderLike]]


class SortOrderType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.components.SortOrder"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class SortOrderBatch(BaseBatch[SortOrderArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = SortOrderType()

    @staticmethod
    def _native_to_pa_array(data: SortOrderArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (SortOrder, int, str)):
            data = [data]

        data = [SortOrder(v) if isinstance(v, int) else v for v in data]
        data = [SortOrder[v.upper()] if isinstance(v, str) else v for v in data]
        pa_data = [v.value for v in data]

        return pa.array(pa_data, type=data_type)
