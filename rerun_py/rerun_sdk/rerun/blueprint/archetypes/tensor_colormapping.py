# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/archetypes/tensor_colormapping.fbs".

# You can extend this class by creating a "TensorColormappingExt" class in "tensor_colormapping_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ... import components, datatypes
from ..._baseclasses import (
    Archetype,
)
from ...error_utils import catch_and_log_exceptions

__all__ = ["TensorColormapping"]


@define(str=False, repr=False, init=False)
class TensorColormapping(Archetype):
    """**Archetype**: Configures the tensor view's color mapping.1."""

    def __init__(
        self: Any, *, colormap: components.ColormapLike | None = None, gamma: datatypes.Float32Like | None = None
    ):
        """
        Create a new instance of the TensorColormapping archetype.

        Parameters
        ----------
        colormap:
            How scalar values map to colors.
        gamma:
            Gamma curve applied to normalized scalar before mapping to color.

            Raiuses the normalized values to the power of this value before mapping to color.
            Acts like an inverse brightness. Defaults to 1.0.

        """

        # You can define your own __init__ function as a member of TensorColormappingExt in tensor_colormapping_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(colormap=colormap, gamma=gamma)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            colormap=None,  # type: ignore[arg-type]
            gamma=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> TensorColormapping:
        """Produce an empty TensorColormapping, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    colormap: components.ColormapBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ColormapBatch._optional,  # type: ignore[misc]
    )
    # How scalar values map to colors.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    gamma: components.GammaCorrectionBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.GammaCorrectionBatch._optional,  # type: ignore[misc]
    )
    # Gamma curve applied to normalized scalar before mapping to color.
    #
    # Raiuses the normalized values to the power of this value before mapping to color.
    # Acts like an inverse brightness. Defaults to 1.0.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
