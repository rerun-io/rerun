# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/archetypes/time_series.fbs".

# You can extend this class by creating a "TimeSeriesExt" class in "time_series_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ..._baseclasses import Archetype
from ...error_utils import catch_and_log_exceptions
from .. import components, datatypes

__all__ = ["TimeSeries"]


@define(str=False, repr=False, init=False)
class TimeSeries(Archetype):
    """**Archetype**: The configuration options for a `TimeSeries` `SpaceView`."""

    def __init__(self: Any, legend: datatypes.LegendLike):
        """
        Create a new instance of the TimeSeries archetype.

        Parameters
        ----------
        legend:
            Configuration information for the legend
        """

        # You can define your own __init__ function as a member of TimeSeriesExt in time_series_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(legend=legend)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            legend=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> TimeSeries:
        """Produce an empty TimeSeries, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    legend: components.LegendBatch = field(
        metadata={"component": "required"},
        converter=components.LegendBatch._required,  # type: ignore[misc]
    )
    # Configuration information for the legend
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__
