# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/panel_blueprint.fbs".

# You can extend this class by creating a "TimePanelBlueprintExt" class in "time_panel_blueprint_ext.py".

from __future__ import annotations

from typing import TYPE_CHECKING, Any

from attrs import define, field

from ..._baseclasses import (
    Archetype,
)
from ...blueprint import components as blueprint_components
from ...error_utils import catch_and_log_exceptions

if TYPE_CHECKING:
    from ... import datatypes

__all__ = ["TimePanelBlueprint"]


@define(str=False, repr=False, init=False)
class TimePanelBlueprint(Archetype):
    """
    **Archetype**: Time panel specific state.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    def __init__(
        self: Any,
        *,
        state: blueprint_components.PanelStateLike | None = None,
        timeline: datatypes.Utf8Like | None = None,
        time: datatypes.TimeIntLike | None = None,
        playback_speed: datatypes.Float64Like | None = None,
        fps: datatypes.Float64Like | None = None,
    ) -> None:
        """
        Create a new instance of the TimePanelBlueprint archetype.

        Parameters
        ----------
        state:
            Current state of the panel.
        timeline:
            What timeline the panel is on.
        time:
            What time the time cursor should be on.
        playback_speed:
            A time playback speed multiplier.
        fps:
            Frames per second. Only applicable for sequence timelines.

        """

        # You can define your own __init__ function as a member of TimePanelBlueprintExt in time_panel_blueprint_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(state=state, timeline=timeline, time=time, playback_speed=playback_speed, fps=fps)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            state=None,
            timeline=None,
            time=None,
            playback_speed=None,
            fps=None,
        )

    @classmethod
    def _clear(cls) -> TimePanelBlueprint:
        """Produce an empty TimePanelBlueprint, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        state: blueprint_components.PanelStateLike | None = None,
        timeline: datatypes.Utf8Like | None = None,
        time: datatypes.TimeIntLike | None = None,
        playback_speed: datatypes.Float64Like | None = None,
        fps: datatypes.Float64Like | None = None,
    ) -> TimePanelBlueprint:
        """
        Update only some specific fields of a `TimePanelBlueprint`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        state:
            Current state of the panel.
        timeline:
            What timeline the panel is on.
        time:
            What time the time cursor should be on.
        playback_speed:
            A time playback speed multiplier.
        fps:
            Frames per second. Only applicable for sequence timelines.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "state": state,
                "timeline": timeline,
                "time": time,
                "playback_speed": playback_speed,
                "fps": fps,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> TimePanelBlueprint:
        """Clear all the fields of a `TimePanelBlueprint`."""
        return cls.from_fields(clear_unset=True)

    state: blueprint_components.PanelStateBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.PanelStateBatch._converter,  # type: ignore[misc]
    )
    # Current state of the panel.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    timeline: blueprint_components.TimelineNameBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.TimelineNameBatch._converter,  # type: ignore[misc]
    )
    # What timeline the panel is on.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    time: blueprint_components.TimeIntBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.TimeIntBatch._converter,  # type: ignore[misc]
    )
    # What time the time cursor should be on.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    playback_speed: blueprint_components.PlaybackSpeedBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.PlaybackSpeedBatch._converter,  # type: ignore[misc]
    )
    # A time playback speed multiplier.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    fps: blueprint_components.FpsBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.FpsBatch._converter,  # type: ignore[misc]
    )
    # Frames per second. Only applicable for sequence timelines.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
