# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/archetypes/tensor_slice_filter.fbs".

# You can extend this class by creating a "TensorSliceFilterExt" class in "tensor_slice_filter_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ... import components
from ..._baseclasses import (
    Archetype,
)
from ...error_utils import catch_and_log_exceptions

__all__ = ["TensorSliceFilter"]


@define(str=False, repr=False, init=False)
class TensorSliceFilter(Archetype):
    """**Archetype**: Configures how a selected tensor slice is shown on screen."""

    def __init__(
        self: Any,
        *,
        scaling: components.ImageScalingModeLike | None = None,
        mag_filter: components.MagnificationFilterLike | None = None,
    ):
        """
        Create a new instance of the TensorSliceFilter archetype.

        Parameters
        ----------
        scaling:
            How the image is scaled to fit the view.
        mag_filter:
            Filter used when zooming in on the tensor.

        """

        # You can define your own __init__ function as a member of TensorSliceFilterExt in tensor_slice_filter_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(scaling=scaling, mag_filter=mag_filter)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            scaling=None,  # type: ignore[arg-type]
            mag_filter=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> TensorSliceFilter:
        """Produce an empty TensorSliceFilter, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    scaling: components.ImageScalingModeBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.ImageScalingModeBatch._optional,  # type: ignore[misc]
    )
    # How the image is scaled to fit the view.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    mag_filter: components.MagnificationFilterBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.MagnificationFilterBatch._optional,  # type: ignore[misc]
    )
    # Filter used when zooming in on the tensor.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
