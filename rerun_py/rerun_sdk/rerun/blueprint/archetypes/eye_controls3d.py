# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/eye_controls3d.fbs".

# You can extend this class by creating a "EyeControls3DExt" class in "eye_controls3d_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ... import components, datatypes
from ..._baseclasses import (
    Archetype,
)
from ...blueprint import components as blueprint_components
from ...error_utils import catch_and_log_exceptions

__all__ = ["EyeControls3D"]


@define(str=False, repr=False, init=False)
class EyeControls3D(Archetype):
    """
    **Archetype**: The controls for the 3D eye in a spatial 3D view.

    This configures the camera through which the 3D scene is viewed.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    def __init__(
        self: Any, *, kind: blueprint_components.Eye3DKindLike | None = None, speed: datatypes.Float64Like | None = None
    ) -> None:
        """
        Create a new instance of the EyeControls3D archetype.

        Parameters
        ----------
        kind:
            The kind of the eye for the spatial 3D view.

            This controls how the eye movement behaves when the user interact with the view.
            Defaults to orbital.
        speed:
            Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene).

            The default depends on the control kind.
            For orbit cameras it is derived from the distance to the orbit center.
            For first person cameras it is derived from the scene size.

        """

        # You can define your own __init__ function as a member of EyeControls3DExt in eye_controls3d_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(kind=kind, speed=speed)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            kind=None,
            speed=None,
        )

    @classmethod
    def _clear(cls) -> EyeControls3D:
        """Produce an empty EyeControls3D, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        kind: blueprint_components.Eye3DKindLike | None = None,
        speed: datatypes.Float64Like | None = None,
    ) -> EyeControls3D:
        """
        Update only some specific fields of a `EyeControls3D`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        kind:
            The kind of the eye for the spatial 3D view.

            This controls how the eye movement behaves when the user interact with the view.
            Defaults to orbital.
        speed:
            Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene).

            The default depends on the control kind.
            For orbit cameras it is derived from the distance to the orbit center.
            For first person cameras it is derived from the scene size.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "kind": kind,
                "speed": speed,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> EyeControls3D:
        """Clear all the fields of a `EyeControls3D`."""
        return cls.from_fields(clear_unset=True)

    kind: blueprint_components.Eye3DKindBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.Eye3DKindBatch._converter,  # type: ignore[misc]
    )
    # The kind of the eye for the spatial 3D view.
    #
    # This controls how the eye movement behaves when the user interact with the view.
    # Defaults to orbital.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    speed: components.LinearSpeedBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.LinearSpeedBatch._converter,  # type: ignore[misc]
    )
    # Translation speed of the eye in the view (when using WASDQE keys to move in the 3D scene).
    #
    # The default depends on the control kind.
    # For orbit cameras it is derived from the distance to the orbit center.
    # For first person cameras it is derived from the scene size.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
