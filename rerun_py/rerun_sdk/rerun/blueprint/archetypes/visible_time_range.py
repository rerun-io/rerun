# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/blueprint/archetypes/visible_time_range.fbs".

# You can extend this class by creating a "VisibleTimeRangeExt" class in "visible_time_range_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ..._baseclasses import Archetype
from ...blueprint import components as blueprint_components
from ...blueprint import datatypes as blueprint_datatypes
from ...error_utils import catch_and_log_exceptions

__all__ = ["VisibleTimeRange"]


@define(str=False, repr=False, init=False)
class VisibleTimeRange(Archetype):
    """
    **Archetype**: Configures what range of the timeline is shown on a view.

    Whenever no visual time range applies, queries are done with "latest at" semantics.
    This means that the view will, starting from the time cursor position,
    query the latest data available for each component type.

    The default visual time range depends on the type of view this property applies to:
    - For time series views, the default is to show the entire timeline.
    - For any other view, the default is to apply latest-at semantics.

    The visual time range can be overridden also individually per entity.
    """

    def __init__(
        self: Any,
        *,
        sequence: blueprint_datatypes.VisibleTimeRangeLike | None = None,
        time: blueprint_datatypes.VisibleTimeRangeLike | None = None,
    ):
        """
        Create a new instance of the VisibleTimeRange archetype.

        Parameters
        ----------
        sequence:
            The range of time to show for timelines based on sequence numbers.
        time:
            The range of time to show for timelines based on time.

        """

        # You can define your own __init__ function as a member of VisibleTimeRangeExt in visible_time_range_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(sequence=sequence, time=time)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            sequence=None,  # type: ignore[arg-type]
            time=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> VisibleTimeRange:
        """Produce an empty VisibleTimeRange, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    sequence: blueprint_components.VisibleTimeRangeSequenceBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=blueprint_components.VisibleTimeRangeSequenceBatch._optional,  # type: ignore[misc]
    )
    # The range of time to show for timelines based on sequence numbers.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    time: blueprint_components.VisibleTimeRangeTimeBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=blueprint_components.VisibleTimeRangeTimeBatch._optional,  # type: ignore[misc]
    )
    # The range of time to show for timelines based on time.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
