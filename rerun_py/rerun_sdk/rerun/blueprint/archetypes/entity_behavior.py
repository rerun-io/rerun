# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/entity_behavior.fbs".

# You can extend this class by creating a "EntityBehaviorExt" class in "entity_behavior_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ... import components, datatypes
from ..._baseclasses import (
    Archetype,
)
from ...error_utils import catch_and_log_exceptions

__all__ = ["EntityBehavior"]


@define(str=False, repr=False, init=False)
class EntityBehavior(Archetype):
    """
    **Archetype**: General visualization behavior of an entity.

    TODO(#6541): Fields of this archetype currently only have an effect when logged in the blueprint store.

    Example
    -------
    ### `entity_behavior`:
    ```python
    import rerun as rr
    import rerun.blueprint as rrb

    rr.init("rerun_example_entity_behavior", spawn=True)

    # Use `EntityBehavior` to override visibility & interactivity of entities in the blueprint.
    rr.send_blueprint(
        rrb.Spatial2DView(
            overrides={
                "hidden_subtree": rrb.EntityBehavior(visible=False),
                "hidden_subtree/not_hidden": rrb.EntityBehavior(visible=True),
                "non_interactive_subtree": rrb.EntityBehavior(interactive=False),
            }
        )
    )

    rr.log("hidden_subtree", rr.Points2D(positions=(0, 0), radii=0.5))
    rr.log("hidden_subtree/also_hidden", rr.LineStrips2D(strips=[(-1, 1), (1, -1)]))
    rr.log("hidden_subtree/not_hidden", rr.LineStrips2D(strips=[(1, 1), (-1, -1)]))
    rr.log("non_interactive_subtree", rr.Boxes2D(centers=(0, 0), half_sizes=(1, 1)))
    rr.log("non_interactive_subtree/also_non_interactive", rr.Boxes2D(centers=(0, 0), half_sizes=(0.5, 0.5)))
    ```
    <center>
    <picture>
      <source media="(max-width: 480px)" srcset="https://static.rerun.io/entity_behavior/831ccdaba769608408edb5edbfaaecf604b53d69/480w.png">
      <source media="(max-width: 768px)" srcset="https://static.rerun.io/entity_behavior/831ccdaba769608408edb5edbfaaecf604b53d69/768w.png">
      <source media="(max-width: 1024px)" srcset="https://static.rerun.io/entity_behavior/831ccdaba769608408edb5edbfaaecf604b53d69/1024w.png">
      <source media="(max-width: 1200px)" srcset="https://static.rerun.io/entity_behavior/831ccdaba769608408edb5edbfaaecf604b53d69/1200w.png">
      <img src="https://static.rerun.io/entity_behavior/831ccdaba769608408edb5edbfaaecf604b53d69/full.png" width="640">
    </picture>
    </center>

    """

    def __init__(
        self: Any, *, interactive: datatypes.BoolLike | None = None, visible: datatypes.BoolLike | None = None
    ) -> None:
        """
        Create a new instance of the EntityBehavior archetype.

        Parameters
        ----------
        interactive:
            Whether the entity can be interacted with.

            This property is propagated down the entity hierarchy until another child entity
            sets `interactive` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `interactive` value or true if there is no parent.
        visible:
            Whether the entity is visible.

            This property is propagated down the entity hierarchy until another child entity
            sets `visible` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `visible` value or true if there is no parent.

        """

        # You can define your own __init__ function as a member of EntityBehaviorExt in entity_behavior_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(interactive=interactive, visible=visible)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            interactive=None,
            visible=None,
        )

    @classmethod
    def _clear(cls) -> EntityBehavior:
        """Produce an empty EntityBehavior, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        interactive: datatypes.BoolLike | None = None,
        visible: datatypes.BoolLike | None = None,
    ) -> EntityBehavior:
        """
        Update only some specific fields of a `EntityBehavior`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        interactive:
            Whether the entity can be interacted with.

            This property is propagated down the entity hierarchy until another child entity
            sets `interactive` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `interactive` value or true if there is no parent.
        visible:
            Whether the entity is visible.

            This property is propagated down the entity hierarchy until another child entity
            sets `visible` to a different value at which point propagation continues with that value instead.

            Defaults to parent's `visible` value or true if there is no parent.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "interactive": interactive,
                "visible": visible,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> EntityBehavior:
        """Clear all the fields of a `EntityBehavior`."""
        return cls.from_fields(clear_unset=True)

    interactive: components.InteractiveBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.InteractiveBatch._converter,  # type: ignore[misc]
    )
    # Whether the entity can be interacted with.
    #
    # This property is propagated down the entity hierarchy until another child entity
    # sets `interactive` to a different value at which point propagation continues with that value instead.
    #
    # Defaults to parent's `interactive` value or true if there is no parent.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    visible: components.VisibleBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.VisibleBatch._converter,  # type: ignore[misc]
    )
    # Whether the entity is visible.
    #
    # This property is propagated down the entity hierarchy until another child entity
    # sets `visible` to a different value at which point propagation continues with that value instead.
    #
    # Defaults to parent's `visible` value or true if there is no parent.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
