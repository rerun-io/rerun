# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/background.fbs".

# You can extend this class by creating a "PlotBackgroundExt" class in "plot_background_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ... import components, datatypes
from ..._baseclasses import (
    Archetype,
)
from ...blueprint import components as blueprint_components
from ...error_utils import catch_and_log_exceptions

__all__ = ["PlotBackground"]


@define(str=False, repr=False, init=False)
class PlotBackground(Archetype):
    """
    **Archetype**: Configuration of a background in a plot view.

    ⚠️ **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    """

    def __init__(
        self: Any, *, color: datatypes.Rgba32Like | None = None, show_grid: datatypes.BoolLike | None = None
    ) -> None:
        """
        Create a new instance of the PlotBackground archetype.

        Parameters
        ----------
        color:
            Color used for the background.
        show_grid:
            Should the grid be drawn?

        """

        # You can define your own __init__ function as a member of PlotBackgroundExt in plot_background_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(color=color, show_grid=show_grid)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            color=None,
            show_grid=None,
        )

    @classmethod
    def _clear(cls) -> PlotBackground:
        """Produce an empty PlotBackground, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def from_fields(
        cls,
        *,
        clear_unset: bool = False,
        color: datatypes.Rgba32Like | None = None,
        show_grid: datatypes.BoolLike | None = None,
    ) -> PlotBackground:
        """
        Update only some specific fields of a `PlotBackground`.

        Parameters
        ----------
        clear_unset:
            If true, all unspecified fields will be explicitly cleared.
        color:
            Color used for the background.
        show_grid:
            Should the grid be drawn?

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "color": color,
                "show_grid": show_grid,
            }

            if clear_unset:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def cleared(cls) -> PlotBackground:
        """Clear all the fields of a `PlotBackground`."""
        return cls.from_fields(clear_unset=True)

    color: components.ColorBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=components.ColorBatch._converter,  # type: ignore[misc]
    )
    # Color used for the background.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    show_grid: blueprint_components.EnabledBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.EnabledBatch._converter,  # type: ignore[misc]
    )
    # Should the grid be drawn?
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
