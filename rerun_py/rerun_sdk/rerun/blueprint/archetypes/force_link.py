# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/force_link.fbs".

# You can extend this class by creating a "ForceLinkExt" class in "force_link_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ..._baseclasses import (
    Archetype,
)
from ...blueprint import components as blueprint_components, datatypes as blueprint_datatypes
from ...error_utils import catch_and_log_exceptions

__all__ = ["ForceLink"]


@define(str=False, repr=False, init=False)
class ForceLink(Archetype):
    def __init__(self: Any, force: blueprint_datatypes.ForceLinkLike):
        """Create a new instance of the ForceLink archetype."""

        # You can define your own __init__ function as a member of ForceLinkExt in force_link_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(force=force)
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            force=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> ForceLink:
        """Produce an empty ForceLink, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    force: blueprint_components.ForceLinkBatch = field(
        metadata={"component": "required"},
        converter=blueprint_components.ForceLinkBatch._required,  # type: ignore[misc]
    )
    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
