# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/visible_time_ranges.fbs".

# You can extend this class by creating a "VisibleTimeRangesExt" class in "visible_time_ranges_ext.py".

from __future__ import annotations

from attrs import define, field

from ... import datatypes
from ..._baseclasses import (
    Archetype,
)
from ...blueprint import components as blueprint_components
from ...error_utils import catch_and_log_exceptions
from .visible_time_ranges_ext import VisibleTimeRangesExt

__all__ = ["VisibleTimeRanges"]


@define(str=False, repr=False, init=False)
class VisibleTimeRanges(VisibleTimeRangesExt, Archetype):
    """
    **Archetype**: Configures what range of each timeline is shown on a view.

    Whenever no visual time range applies, queries are done with "latest-at" semantics.
    This means that the view will, starting from the time cursor position,
    query the latest data available for each component type.

    The default visual time range depends on the type of view this property applies to:
    - For time series views, the default is to show the entire timeline.
    - For any other view, the default is to apply latest-at semantics.
    """

    # __init__ can be found in visible_time_ranges_ext.py

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            ranges=None,
        )

    @classmethod
    def _clear(cls) -> VisibleTimeRanges:
        """Produce an empty VisibleTimeRanges, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    @classmethod
    def update_fields(
        cls,
        *,
        clear: bool = False,
        ranges: datatypes.VisibleTimeRangeArrayLike | None = None,
    ) -> VisibleTimeRanges:
        """
        Update only some specific fields of a `VisibleTimeRanges`.

        Parameters
        ----------
        clear:
            If true, all unspecified fields will be explicitly cleared.
        ranges:
            The time ranges to show for each timeline unless specified otherwise on a per-entity basis.

            If a timeline is specified more than once, the first entry will be used.

        """

        inst = cls.__new__(cls)
        with catch_and_log_exceptions(context=cls.__name__):
            kwargs = {
                "ranges": ranges,
            }

            if clear:
                kwargs = {k: v if v is not None else [] for k, v in kwargs.items()}  # type: ignore[misc]

            inst.__attrs_init__(**kwargs)
            return inst

        inst.__attrs_clear__()
        return inst

    @classmethod
    def clear_fields(cls) -> VisibleTimeRanges:
        """Clear all the fields of a `VisibleTimeRanges`."""
        inst = cls.__new__(cls)
        inst.__attrs_init__(
            ranges=[],
        )
        return inst

    ranges: blueprint_components.VisibleTimeRangeBatch | None = field(
        metadata={"component": True},
        default=None,
        converter=blueprint_components.VisibleTimeRangeBatch._converter,  # type: ignore[misc]
    )
    # The time ranges to show for each timeline unless specified otherwise on a per-entity basis.
    #
    # If a timeline is specified more than once, the first entry will be used.
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
