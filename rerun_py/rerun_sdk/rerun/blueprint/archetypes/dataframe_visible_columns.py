# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/dataframe_visible_columns.fbs".

# You can extend this class by creating a "DataframeVisibleColumnsExt" class in "dataframe_visible_columns_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field

from ... import datatypes
from ..._baseclasses import (
    Archetype,
)
from ...blueprint import components as blueprint_components, datatypes as blueprint_datatypes
from ...error_utils import catch_and_log_exceptions

__all__ = ["DataframeVisibleColumns"]


@define(str=False, repr=False, init=False)
class DataframeVisibleColumns(Archetype):
    """**Archetype**: Which columns should be displayed by the dataframe view."""

    def __init__(
        self: Any,
        *,
        selection_mode: blueprint_components.ColumnSelectionModeLike | None = None,
        time_columns: datatypes.Utf8ArrayLike | None = None,
        component_columns: blueprint_datatypes.ComponentColumnSelectorArrayLike | None = None,
    ):
        """
        Create a new instance of the DataframeVisibleColumns archetype.

        Parameters
        ----------
        selection_mode:
            Are all column selected, or only those specified by the user?
        time_columns:
            The time columns to include (if mode is set to "Selected").
        component_columns:
            The component columns to include (if mode is set to "Selected").

        """

        # You can define your own __init__ function as a member of DataframeVisibleColumnsExt in dataframe_visible_columns_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(
                selection_mode=selection_mode, time_columns=time_columns, component_columns=component_columns
            )
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            selection_mode=None,  # type: ignore[arg-type]
            time_columns=None,  # type: ignore[arg-type]
            component_columns=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> DataframeVisibleColumns:
        """Produce an empty DataframeVisibleColumns, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    selection_mode: blueprint_components.ColumnSelectionModeBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=blueprint_components.ColumnSelectionModeBatch._optional,  # type: ignore[misc]
    )
    # Are all column selected, or only those specified by the user?
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    time_columns: blueprint_components.TimelineNameBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=blueprint_components.TimelineNameBatch._optional,  # type: ignore[misc]
    )
    # The time columns to include (if mode is set to "Selected").
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    component_columns: blueprint_components.ComponentColumnSelectorBatch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=blueprint_components.ComponentColumnSelectorBatch._optional,  # type: ignore[misc]
    )
    # The component columns to include (if mode is set to "Selected").
    #
    # (Docstring intentionally commented out to hide this field from the docs)

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__  # type: ignore[assignment]
