# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/blueprint/space_view_component.fbs".

# You can extend this class by creating a "SpaceViewComponentExt" class in "space_view_component_ext.py".

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import numpy.typing as npt
from attrs import define, field

from .._baseclasses import BaseBatch, BaseExtensionType
from .._converters import (
    to_np_uint8,
)

__all__ = [
    "SpaceViewComponent",
    "SpaceViewComponentArrayLike",
    "SpaceViewComponentBatch",
    "SpaceViewComponentLike",
    "SpaceViewComponentType",
]


@define(init=False)
class SpaceViewComponent:
    """
    **Blueprint**: A view of a space.

    Unstable. Used for the ongoing blueprint experimentations.
    """

    def __init__(self: Any, space_view: SpaceViewComponentLike):
        """Create a new instance of the SpaceViewComponent blueprint."""

        # You can define your own __init__ function as a member of SpaceViewComponentExt in space_view_component_ext.py
        self.__attrs_init__(space_view=space_view)

    space_view: npt.NDArray[np.uint8] = field(converter=to_np_uint8)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        # You can define your own __array__ function as a member of SpaceViewComponentExt in space_view_component_ext.py
        return np.asarray(self.space_view, dtype=dtype)


SpaceViewComponentLike = SpaceViewComponent
SpaceViewComponentArrayLike = Union[
    SpaceViewComponent,
    Sequence[SpaceViewComponentLike],
]


class SpaceViewComponentType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.blueprint.SpaceViewComponent"


class SpaceViewComponentBatch(BaseBatch[SpaceViewComponentArrayLike]):
    _ARROW_TYPE = SpaceViewComponentType()
