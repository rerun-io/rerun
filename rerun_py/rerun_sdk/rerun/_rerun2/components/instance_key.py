# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)
from ._overrides import instancekey_native_to_pa_array  # noqa: F401

__all__ = ["InstanceKey", "InstanceKeyArray", "InstanceKeyArrayLike", "InstanceKeyLike", "InstanceKeyType"]


@define
class InstanceKey:
    """A unique numeric identifier for each individual instance within a batch."""

    value: int = field(converter=int)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        return np.asarray(self.value, dtype=dtype)

    def __int__(self) -> int:
        return int(self.value)


InstanceKeyLike = Union[InstanceKey, int]

InstanceKeyArrayLike = Union[InstanceKey, Sequence[InstanceKeyLike], int, npt.NDArray[np.uint64]]


# --- Arrow support ---


class InstanceKeyType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint64(), "rerun.instance_key")


class InstanceKeyArray(BaseExtensionArray[InstanceKeyArrayLike]):
    _EXTENSION_NAME = "rerun.instance_key"
    _EXTENSION_TYPE = InstanceKeyType

    @staticmethod
    def _native_to_pa_array(data: InstanceKeyArrayLike, data_type: pa.DataType) -> pa.Array:
        return instancekey_native_to_pa_array(data, data_type)


InstanceKeyType._ARRAY_TYPE = InstanceKeyArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(InstanceKeyType())
