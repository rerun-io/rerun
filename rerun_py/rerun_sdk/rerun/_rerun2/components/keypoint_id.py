# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/components/keypoint_id.fbs".

# You can extend this class by creating a "KeypointIdExt" class in "keypoint_id_ext.py".

from __future__ import annotations

from .. import datatypes
from .._baseclasses import (
    BaseDelegatingExtensionArray,
    BaseDelegatingExtensionType,
)

__all__ = ["KeypointId", "KeypointIdArray", "KeypointIdType"]


class KeypointId(datatypes.KeypointId):
    """
    A 16-bit ID representing a type of semantic keypoint within a class.

    `KeypointId`s are only meaningful within the context of a [`rerun.components.ClassDescription`][].

    Used to look up an [`rerun.components.AnnotationInfo`][] for a Keypoint within the
    [`rerun.components.AnnotationContext`].
    """

    # You can define your own __init__ function as a member of KeypointIdExt in keypoint_id_ext.py

    # Note: there are no fields here because KeypointId delegates to datatypes.KeypointId
    pass


class KeypointIdType(BaseDelegatingExtensionType):
    _TYPE_NAME = "rerun.components.KeypointId"
    _DELEGATED_EXTENSION_TYPE = datatypes.KeypointIdType


class KeypointIdArray(BaseDelegatingExtensionArray[datatypes.KeypointIdArrayLike]):
    _EXTENSION_NAME = "rerun.components.KeypointId"
    _EXTENSION_TYPE = KeypointIdType
    _DELEGATED_ARRAY_TYPE = datatypes.KeypointIdArray


KeypointIdType._ARRAY_TYPE = KeypointIdArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(KeypointIdType())
