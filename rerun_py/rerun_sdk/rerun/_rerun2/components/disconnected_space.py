# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import (Any, Dict, Iterable, Optional, Sequence, Set, Tuple, Union,
    TYPE_CHECKING, SupportsFloat, Literal)

from attrs import define, field
import numpy as np
import numpy.typing as npt
import pyarrow as pa

from .._baseclasses import (
    Archetype,
    BaseExtensionType,
    BaseExtensionArray,
    BaseDelegatingExtensionType,
    BaseDelegatingExtensionArray
)
from .._converters import (
    int_or_none,
    float_or_none,
    bool_or_none,
    str_or_none,
    to_np_uint8,
    to_np_uint16,
    to_np_uint32,
    to_np_uint64,
    to_np_int8,
    to_np_int16,
    to_np_int32,
    to_np_int64,
    to_np_bool,
    to_np_float16,
    to_np_float32,
    to_np_float64
)
from ._overrides import disconnectedspace_native_to_pa_array  # noqa: F401
__all__ = ["DisconnectedSpace", "DisconnectedSpaceArray", "DisconnectedSpaceArrayLike", "DisconnectedSpaceLike", "DisconnectedSpaceType"]


@define
class DisconnectedSpace:
    """
    Specifies that the entity path at which this is logged is disconnected from its parent.

    This is useful for specifying that a subgraph is independent of the rest of the scene.

    If a transform or pinhole is logged on the same path, this component will be ignored.
    """

    is_disconnected: bool = field(converter=bool)


if TYPE_CHECKING:
    DisconnectedSpaceLike = Union[
        DisconnectedSpace,
        bool
    ]
else:
    DisconnectedSpaceLike = Any

DisconnectedSpaceArrayLike = Union[
    DisconnectedSpace,
    Sequence[DisconnectedSpaceLike],
    bool, npt.NDArray[np.bool_]
]


# --- Arrow support ---

class DisconnectedSpaceType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self, pa.bool_(), "rerun.disconnected_space"
        )

class DisconnectedSpaceArray(BaseExtensionArray[DisconnectedSpaceArrayLike]):
    _EXTENSION_NAME = "rerun.disconnected_space"
    _EXTENSION_TYPE = DisconnectedSpaceType

    @staticmethod
    def _native_to_pa_array(data: DisconnectedSpaceArrayLike, data_type: pa.DataType) -> pa.Array:
        return disconnectedspace_native_to_pa_array(data, data_type)

DisconnectedSpaceType._ARRAY_TYPE = DisconnectedSpaceArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(DisconnectedSpaceType())


