# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import (Any, Dict, Iterable, Optional, Sequence, Set, Tuple, Union,
    TYPE_CHECKING, SupportsFloat, Literal)

from attrs import define, field
import numpy as np
import numpy.typing as npt
import pyarrow as pa

from .._baseclasses import (
    Archetype,
    BaseExtensionType,
    BaseExtensionArray,
    BaseDelegatingExtensionType,
    BaseDelegatingExtensionArray
)
from .._converters import (
    int_or_none,
    float_or_none,
    bool_or_none,
    str_or_none,
    to_np_uint8,
    to_np_uint16,
    to_np_uint32,
    to_np_uint64,
    to_np_int8,
    to_np_int16,
    to_np_int32,
    to_np_int64,
    to_np_bool,
    to_np_float16,
    to_np_float32,
    to_np_float64
)
from .. import components
__all__ = ["Points3D"]

@define(str=False, repr=False)
class Points3D(Archetype):
    """
    A 3D point cloud with positions and optional colors, radii, labels, etc.

    Example
    -------

    ```python
    import rerun as rr
    import rerun.experimental as rr2

    rr.init("rerun_example_points3d_simple", spawn=True)

    rr2.log("simple", rr2.Points3D([[0, 0, 0], [1, 1, 1]]))
    ```
    """

    points: components.Point3DArray = field(
    metadata={'component': 'primary'}, converter=components.Point3DArray.from_similar, # type: ignore[misc]
    )
    """
    All the actual 3D points that make up the point cloud.
    """

    radii: components.RadiusArray | None = field(
    metadata={'component': 'secondary'}, default=None, converter=components.RadiusArray.from_similar, # type: ignore[misc]
    )
    """
    Optional radii for the points, effectively turning them into circles.
    """

    colors: components.ColorArray | None = field(
    metadata={'component': 'secondary'}, default=None, converter=components.ColorArray.from_similar, # type: ignore[misc]
    )
    """
    Optional colors for the points.

    The colors are interpreted as RGB or RGBA in sRGB gamma-space,
    As either 0-1 floats or 0-255 integers, with separate alpha.
    """

    labels: components.LabelArray | None = field(
    metadata={'component': 'secondary'}, default=None, converter=components.LabelArray.from_similar, # type: ignore[misc]
    )
    """
    Optional text labels for the points.
    """

    class_ids: components.ClassIdArray | None = field(
    metadata={'component': 'secondary'}, default=None, converter=components.ClassIdArray.from_similar, # type: ignore[misc]
    )
    """
    Optional class Ids for the points.

    The class ID provides colors and labels if not specified explicitly.
    """

    keypoint_ids: components.KeypointIdArray | None = field(
    metadata={'component': 'secondary'}, default=None, converter=components.KeypointIdArray.from_similar, # type: ignore[misc]
    )
    """
    Optional keypoint IDs for the points, identifying them within a class.

    If keypoint IDs are passed in but no class IDs were specified, the class ID will
    default to 0.
    This is useful to identify points within a single classification (which is identified
    with `class_id`).
    E.g. the classification might be 'Person' and the keypoints refer to joints on a
    detected skeleton.
    """

    instance_keys: components.InstanceKeyArray | None = field(
    metadata={'component': 'secondary'}, default=None, converter=components.InstanceKeyArray.from_similar, # type: ignore[misc]
    )
    """
    Unique identifiers for each individual point in the batch.
    """

    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__



