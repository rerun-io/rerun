# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import numpy as np
import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = ["TensorData", "TensorDataArray", "TensorDataArrayLike", "TensorDataLike", "TensorDataType"]


@define
class TensorData:
    """Storage for a `Tensor`."""

    inner: npt.NDArray[np.uint16] | npt.NDArray[np.uint8] = field()
    """
    U8 (npt.NDArray[np.uint8]):

    U16 (npt.NDArray[np.uint16]):
    """


if TYPE_CHECKING:
    TensorDataLike = Union[
        TensorData,
        npt.NDArray[np.uint16],
        npt.NDArray[np.uint8],
    ]
    TensorDataArrayLike = Union[
        TensorData,
        npt.NDArray[np.uint16],
        npt.NDArray[np.uint8],
        Sequence[TensorDataLike],
    ]
else:
    TensorDataLike = Any
    TensorDataArrayLike = Any

# --- Arrow support ---


class TensorDataType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.dense_union(
                [
                    pa.field("_null_markers", pa.null(), True, {}),
                    pa.field("U8", pa.list_(pa.field("item", pa.uint8(), False, {})), False, {}),
                    pa.field("U16", pa.list_(pa.field("item", pa.uint16(), False, {})), False, {}),
                ]
            ),
            "rerun.datatypes.TensorData",
        )


class TensorDataArray(BaseExtensionArray[TensorDataArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.TensorData"
    _EXTENSION_TYPE = TensorDataType

    @staticmethod
    def _native_to_pa_array(data: TensorDataArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError


TensorDataType._ARRAY_TYPE = TensorDataArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TensorDataType())
