# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)
from ._overrides import transform3d_native_to_pa_array  # noqa: F401

__all__ = ["Transform3D", "Transform3DArray", "Transform3DArrayLike", "Transform3DLike", "Transform3DType"]


@define
class Transform3D:
    """Representation of a 3D affine transform."""

    inner: datatypes.TranslationAndMat3x3 | datatypes.TranslationRotationScale3D = field()
    """
    TranslationAndMat3x3 (datatypes.TranslationAndMat3x3):

    TranslationRotationScale (datatypes.TranslationRotationScale3D):
    """


if TYPE_CHECKING:
    Transform3DLike = Union[
        Transform3D,
        datatypes.TranslationAndMat3x3,
        datatypes.TranslationRotationScale3D,
    ]
    Transform3DArrayLike = Union[
        Transform3D,
        datatypes.TranslationAndMat3x3,
        datatypes.TranslationRotationScale3D,
        Sequence[Transform3DLike],
    ]
else:
    Transform3DLike = Any
    Transform3DArrayLike = Any

# --- Arrow support ---


class Transform3DType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.dense_union(
                [
                    pa.field("_null_markers", pa.null(), True, {}),
                    pa.field(
                        "TranslationAndMat3x3",
                        pa.struct(
                            [
                                pa.field(
                                    "translation", pa.list_(pa.field("item", pa.float32(), False, {}), 3), True, {}
                                ),
                                pa.field("matrix", pa.list_(pa.field("item", pa.float32(), False, {}), 9), True, {}),
                                pa.field("from_parent", pa.bool_(), False, {}),
                            ]
                        ),
                        False,
                        {},
                    ),
                    pa.field(
                        "TranslationRotationScale",
                        pa.struct(
                            [
                                pa.field(
                                    "translation", pa.list_(pa.field("item", pa.float32(), False, {}), 3), True, {}
                                ),
                                pa.field(
                                    "rotation",
                                    pa.dense_union(
                                        [
                                            pa.field("_null_markers", pa.null(), True, {}),
                                            pa.field(
                                                "Quaternion",
                                                pa.list_(pa.field("item", pa.float32(), False, {}), 4),
                                                False,
                                                {},
                                            ),
                                            pa.field(
                                                "AxisAngle",
                                                pa.struct(
                                                    [
                                                        pa.field(
                                                            "axis",
                                                            pa.list_(pa.field("item", pa.float32(), False, {}), 3),
                                                            False,
                                                            {},
                                                        ),
                                                        pa.field(
                                                            "angle",
                                                            pa.dense_union(
                                                                [
                                                                    pa.field("_null_markers", pa.null(), True, {}),
                                                                    pa.field("Radians", pa.float32(), False, {}),
                                                                    pa.field("Degrees", pa.float32(), False, {}),
                                                                ]
                                                            ),
                                                            False,
                                                            {},
                                                        ),
                                                    ]
                                                ),
                                                False,
                                                {},
                                            ),
                                        ]
                                    ),
                                    True,
                                    {},
                                ),
                                pa.field(
                                    "scale",
                                    pa.dense_union(
                                        [
                                            pa.field("_null_markers", pa.null(), True, {}),
                                            pa.field(
                                                "ThreeD",
                                                pa.list_(pa.field("item", pa.float32(), False, {}), 3),
                                                False,
                                                {},
                                            ),
                                            pa.field("Uniform", pa.float32(), False, {}),
                                        ]
                                    ),
                                    True,
                                    {},
                                ),
                                pa.field("from_parent", pa.bool_(), False, {}),
                            ]
                        ),
                        False,
                        {},
                    ),
                ]
            ),
            "rerun.datatypes.Transform3D",
        )


class Transform3DArray(BaseExtensionArray[Transform3DArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.Transform3D"
    _EXTENSION_TYPE = Transform3DType

    @staticmethod
    def _native_to_pa_array(data: Transform3DArrayLike, data_type: pa.DataType) -> pa.Array:
        return transform3d_native_to_pa_array(data, data_type)


Transform3DType._ARRAY_TYPE = Transform3DArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(Transform3DType())
