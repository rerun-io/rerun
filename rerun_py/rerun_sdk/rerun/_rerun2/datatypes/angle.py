# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import pyarrow as pa
from attrs import define

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = ["Angle", "AngleArray", "AngleArrayLike", "AngleLike", "AngleType"]


@define
class Angle:
    """Angle in either radians or degrees."""

    Radians: float | None = None
    """
    3D rotation angle in radians. Only one of `degrees` or `radians` should be set.
    """

    Degrees: float | None = None
    """
    3D rotation angle in degrees. Only one of `degrees` or `radians` should be set.
    """


if TYPE_CHECKING:
    AngleLike = Angle

    AngleArrayLike = Union[
        Angle,
        Sequence[AngleLike],
    ]
else:
    AngleLike = Any
    AngleArrayLike = Any


# --- Arrow support ---


class AngleType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.dense_union(
                [pa.field("Radians", pa.float32(), False, {}), pa.field("Degrees", pa.float32(), False, {})]
            ),
            "rerun.datatypes.Angle",
        )


class AngleArray(BaseExtensionArray[AngleArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.Angle"
    _EXTENSION_TYPE = AngleType

    @staticmethod
    def _native_to_pa_array(data: AngleArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError


AngleType._ARRAY_TYPE = AngleArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(AngleType())
