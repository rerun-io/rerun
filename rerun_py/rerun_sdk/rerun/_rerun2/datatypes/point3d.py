# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import Any, Sequence, Tuple, Union

import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)
from ._overrides import point3d_as_array, point3d_native_to_pa_array  # noqa: F401

__all__ = ["Point3D", "Point3DArray", "Point3DArrayLike", "Point3DLike", "Point3DType"]


@define
class Point3D:
    """A point in 3D space."""

    x: float = field(converter=float)
    y: float = field(converter=float)
    z: float = field(converter=float)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        return point3d_as_array(self, dtype=dtype)


Point3DLike = Union[Point3D, Sequence[float]]

Point3DArrayLike = Union[
    Point3D,
    Sequence[Point3DLike],
    npt.NDArray[Any],
    Sequence[npt.NDArray[Any]],
    Sequence[Tuple[float, float]],
    Sequence[float],
]


# --- Arrow support ---


class Point3DType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field("x", pa.float32(), False, {}),
                    pa.field("y", pa.float32(), False, {}),
                    pa.field("z", pa.float32(), False, {}),
                ]
            ),
            "rerun.datatypes.Point3D",
        )


class Point3DArray(BaseExtensionArray[Point3DArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.Point3D"
    _EXTENSION_TYPE = Point3DType

    @staticmethod
    def _native_to_pa_array(data: Point3DArrayLike, data_type: pa.DataType) -> pa.Array:
        return point3d_native_to_pa_array(data, data_type)


Point3DType._ARRAY_TYPE = Point3DArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(Point3DType())
