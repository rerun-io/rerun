# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import TYPE_CHECKING, Any, Sequence, Union

import pyarrow as pa
from attrs import define, field

from .. import datatypes
from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)

__all__ = [
    "TranslationAndMat3x3",
    "TranslationAndMat3x3Array",
    "TranslationAndMat3x3ArrayLike",
    "TranslationAndMat3x3Like",
    "TranslationAndMat3x3Type",
]


@define
class TranslationAndMat3x3:
    """
    Representation of an affine transform via a 3x3 affine matrix paired with a translation.

    First applies the matrix, then the translation.
    """

    translation: datatypes.Vec3D | None = field(default=None)
    """
    3D translation, applied after the matrix.
    """

    matrix: datatypes.Mat3x3 | None = field(default=None)
    """
    3x3 matrix for scale, rotation & shear.
    """

    from_parent: bool | None = field(default=None)
    """
    If true, the transform maps from the parent space to the space where the transform was logged.
    Otherwise, the transform maps from the space to its parent.
    """


if TYPE_CHECKING:
    TranslationAndMat3x3Like = TranslationAndMat3x3

    TranslationAndMat3x3ArrayLike = Union[
        TranslationAndMat3x3,
        Sequence[TranslationAndMat3x3Like],
    ]
else:
    TranslationAndMat3x3Like = Any
    TranslationAndMat3x3ArrayLike = Any


# --- Arrow support ---


class TranslationAndMat3x3Type(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct(
                [
                    pa.field("translation", pa.list_(pa.field("item", pa.float32(), False, {}), 3), True, {}),
                    pa.field("matrix", pa.list_(pa.field("item", pa.float32(), False, {}), 9), True, {}),
                    pa.field("from_parent", pa.bool_(), True, {}),
                ]
            ),
            "rerun.datatypes.TranslationAndMat3x3",
        )


class TranslationAndMat3x3Array(BaseExtensionArray[TranslationAndMat3x3ArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.TranslationAndMat3x3"
    _EXTENSION_TYPE = TranslationAndMat3x3Type

    @staticmethod
    def _native_to_pa_array(data: TranslationAndMat3x3ArrayLike, data_type: pa.DataType) -> pa.Array:
        raise NotImplementedError


TranslationAndMat3x3Type._ARRAY_TYPE = TranslationAndMat3x3Array

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(TranslationAndMat3x3Type())
