# NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.

from __future__ import annotations

from typing import Any, Sequence, Tuple, Union

import numpy.typing as npt
import pyarrow as pa
from attrs import define, field

from .._baseclasses import (
    BaseExtensionArray,
    BaseExtensionType,
)
from ._overrides import point2d_as_array, point2d_native_to_pa_array  # noqa: F401

__all__ = ["Point2D", "Point2DArray", "Point2DArrayLike", "Point2DLike", "Point2DType"]


@define
class Point2D:
    """A point in 2D space."""

    x: float = field(converter=float)
    y: float = field(converter=float)

    def __array__(self, dtype: npt.DTypeLike = None) -> npt.NDArray[Any]:
        return point2d_as_array(self, dtype=dtype)


Point2DLike = Union[Point2D, Sequence[float]]

Point2DArrayLike = Union[
    Point2D,
    Sequence[Point2DLike],
    npt.NDArray[Any],
    Sequence[npt.NDArray[Any]],
    Sequence[Tuple[float, float]],
    Sequence[float],
]


# --- Arrow support ---


class Point2DType(BaseExtensionType):
    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.struct([pa.field("x", pa.float32(), False, {}), pa.field("y", pa.float32(), False, {})]),
            "rerun.datatypes.Point2D",
        )


class Point2DArray(BaseExtensionArray[Point2DArrayLike]):
    _EXTENSION_NAME = "rerun.datatypes.Point2D"
    _EXTENSION_TYPE = Point2DType

    @staticmethod
    def _native_to_pa_array(data: Point2DArrayLike, data_type: pa.DataType) -> pa.Array:
        return point2d_native_to_pa_array(data, data_type)


Point2DType._ARRAY_TYPE = Point2DArray

# TODO(cmc): bring back registration to pyarrow once legacy types are gone
# pa.register_extension_type(Point2DType())
