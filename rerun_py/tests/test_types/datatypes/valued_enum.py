# DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/store/re_types/definitions/rerun/testing/components/enum_test.fbs".

# You can extend this class by creating a "ValuedEnumExt" class in "valued_enum_ext.py".

from __future__ import annotations

from typing import Literal, Sequence, Union

import pyarrow as pa
from rerun._baseclasses import (
    BaseBatch,
    BaseExtensionType,
)

__all__ = ["ValuedEnum", "ValuedEnumArrayLike", "ValuedEnumBatch", "ValuedEnumLike", "ValuedEnumType"]


from enum import Enum


class ValuedEnum(Enum):
    """**Datatype**: A test of an enumate with specified values."""

    One = 1
    """One."""

    Two = 2
    """Two."""

    Three = 3
    """Three."""

    TheAnswer = 42
    """The answer to life, the universe, and everything."""

    @classmethod
    def auto(cls, val: str | int | ValuedEnum) -> ValuedEnum:
        """Best-effort converter, including a case-insensitive string matcher."""
        if isinstance(val, ValuedEnum):
            return val
        if isinstance(val, int):
            return cls(val)
        try:
            return cls[val]
        except KeyError:
            val_lower = val.lower()
            for variant in cls:
                if variant.name.lower() == val_lower:
                    return variant
        raise ValueError(f"Cannot convert {val} to {cls.__name__}")

    def __str__(self) -> str:
        """Returns the variant name."""
        return self.name


ValuedEnumLike = Union[ValuedEnum, Literal["One", "TheAnswer", "Three", "Two", "one", "theanswer", "three", "two"], int]
ValuedEnumArrayLike = Union[ValuedEnumLike, Sequence[ValuedEnumLike]]


class ValuedEnumType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.testing.datatypes.ValuedEnum"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(self, pa.uint8(), self._TYPE_NAME)


class ValuedEnumBatch(BaseBatch[ValuedEnumArrayLike]):
    _ARROW_TYPE = ValuedEnumType()

    @staticmethod
    def _native_to_pa_array(data: ValuedEnumArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (ValuedEnum, int, str)):
            data = [data]

        pa_data = [ValuedEnum.auto(v).value if v is not None else None for v in data]  # type: ignore[redundant-expr]

        return pa.array(pa_data, type=data_type)
