# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python/mod.rs
# Based on "crates/re_types/definitions/rerun/testing/components/enum_test.fbs".

# You can extend this class by creating a "EnumTestExt" class in "enum_test_ext.py".

from __future__ import annotations

from typing import Sequence, Union

import pyarrow as pa
from rerun._baseclasses import BaseBatch, BaseExtensionType, ComponentBatchMixin

__all__ = ["EnumTest", "EnumTestArrayLike", "EnumTestBatch", "EnumTestLike", "EnumTestType"]


from enum import Enum


class EnumTest(Enum):
    """**Component**: A test of the enum type."""

    Up = 1
    """Great film."""

    Down = 2
    """Feeling blue."""

    Right = 3
    """Correct."""

    Left = 4
    """It's what's remaining."""

    Forward = 5
    """It's the only way to go."""

    Back = 6
    """Baby's got it."""


EnumTestLike = Union[EnumTest, str]
EnumTestArrayLike = Union[EnumTestLike, Sequence[EnumTestLike]]


class EnumTestType(BaseExtensionType):
    _TYPE_NAME: str = "rerun.testing.components.EnumTest"

    def __init__(self) -> None:
        pa.ExtensionType.__init__(
            self,
            pa.sparse_union(
                [
                    pa.field("_null_markers", pa.null(), nullable=True, metadata={}),
                    pa.field("Up", pa.null(), nullable=True, metadata={}),
                    pa.field("Down", pa.null(), nullable=True, metadata={}),
                    pa.field("Right", pa.null(), nullable=True, metadata={}),
                    pa.field("Left", pa.null(), nullable=True, metadata={}),
                    pa.field("Forward", pa.null(), nullable=True, metadata={}),
                    pa.field("Back", pa.null(), nullable=True, metadata={}),
                ]
            ),
            self._TYPE_NAME,
        )


class EnumTestBatch(BaseBatch[EnumTestArrayLike], ComponentBatchMixin):
    _ARROW_TYPE = EnumTestType()

    @staticmethod
    def _native_to_pa_array(data: EnumTestArrayLike, data_type: pa.DataType) -> pa.Array:
        if isinstance(data, (EnumTest, int, str)):
            data = [data]

        types: list[int] = []

        for value in data:
            if value is None:
                types.append(0)
            elif isinstance(value, EnumTest):
                types.append(value.value)  # Actual enum value
            elif isinstance(value, int):
                types.append(value)  # By number
            elif isinstance(value, str):
                if hasattr(EnumTest, value):
                    types.append(EnumTest[value].value)  # fast path
                elif value.lower() == "up":
                    types.append(EnumTest.Up.value)
                elif value.lower() == "down":
                    types.append(EnumTest.Down.value)
                elif value.lower() == "right":
                    types.append(EnumTest.Right.value)
                elif value.lower() == "left":
                    types.append(EnumTest.Left.value)
                elif value.lower() == "forward":
                    types.append(EnumTest.Forward.value)
                elif value.lower() == "back":
                    types.append(EnumTest.Back.value)
                else:
                    raise ValueError(f"Unknown EnumTest kind: {value}")
            else:
                raise ValueError(f"Unknown EnumTest kind: {value}")

        buffers = [
            None,
            pa.array(types, type=pa.int8()).buffers()[1],
        ]
        children = (1 + 6) * [pa.nulls(len(data))]

        return pa.UnionArray.from_buffers(
            type=data_type,
            length=len(data),
            buffers=buffers,
            children=children,
        )
