# DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/python.rs
# Based on "crates/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

# You can extend this class by creating a "AffixFuzzer3Ext" class in "affix_fuzzer3_ext.py".

from __future__ import annotations

from typing import Any

from attrs import define, field
from rerun._baseclasses import Archetype
from rerun.error_utils import catch_and_log_exceptions

from .. import components, datatypes

__all__ = ["AffixFuzzer3"]


@define(str=False, repr=False, init=False)
class AffixFuzzer3(Archetype):
    def __init__(
        self: Any,
        *,
        fuzz2001: datatypes.AffixFuzzer1Like | None = None,
        fuzz2002: datatypes.AffixFuzzer1Like | None = None,
        fuzz2003: datatypes.AffixFuzzer1Like | None = None,
        fuzz2004: datatypes.AffixFuzzer1Like | None = None,
        fuzz2005: datatypes.AffixFuzzer1Like | None = None,
        fuzz2006: datatypes.AffixFuzzer1Like | None = None,
        fuzz2007: components.AffixFuzzer7Like | None = None,
        fuzz2008: components.AffixFuzzer8Like | None = None,
        fuzz2009: components.AffixFuzzer9Like | None = None,
        fuzz2010: components.AffixFuzzer10Like | None = None,
        fuzz2011: components.AffixFuzzer11Like | None = None,
        fuzz2012: components.AffixFuzzer12Like | None = None,
        fuzz2013: components.AffixFuzzer13Like | None = None,
        fuzz2014: datatypes.AffixFuzzer3Like | None = None,
        fuzz2015: datatypes.AffixFuzzer3Like | None = None,
        fuzz2016: components.AffixFuzzer16Like | None = None,
        fuzz2017: components.AffixFuzzer17Like | None = None,
        fuzz2018: components.AffixFuzzer18Like | None = None,
    ):
        """Create a new instance of the AffixFuzzer3 archetype."""

        # You can define your own __init__ function as a member of AffixFuzzer3Ext in affix_fuzzer3_ext.py
        with catch_and_log_exceptions(context=self.__class__.__name__):
            self.__attrs_init__(
                fuzz2001=fuzz2001,
                fuzz2002=fuzz2002,
                fuzz2003=fuzz2003,
                fuzz2004=fuzz2004,
                fuzz2005=fuzz2005,
                fuzz2006=fuzz2006,
                fuzz2007=fuzz2007,
                fuzz2008=fuzz2008,
                fuzz2009=fuzz2009,
                fuzz2010=fuzz2010,
                fuzz2011=fuzz2011,
                fuzz2012=fuzz2012,
                fuzz2013=fuzz2013,
                fuzz2014=fuzz2014,
                fuzz2015=fuzz2015,
                fuzz2016=fuzz2016,
                fuzz2017=fuzz2017,
                fuzz2018=fuzz2018,
            )
            return
        self.__attrs_clear__()

    def __attrs_clear__(self) -> None:
        """Convenience method for calling `__attrs_init__` with all `None`s."""
        self.__attrs_init__(
            fuzz2001=None,  # type: ignore[arg-type]
            fuzz2002=None,  # type: ignore[arg-type]
            fuzz2003=None,  # type: ignore[arg-type]
            fuzz2004=None,  # type: ignore[arg-type]
            fuzz2005=None,  # type: ignore[arg-type]
            fuzz2006=None,  # type: ignore[arg-type]
            fuzz2007=None,  # type: ignore[arg-type]
            fuzz2008=None,  # type: ignore[arg-type]
            fuzz2009=None,  # type: ignore[arg-type]
            fuzz2010=None,  # type: ignore[arg-type]
            fuzz2011=None,  # type: ignore[arg-type]
            fuzz2012=None,  # type: ignore[arg-type]
            fuzz2013=None,  # type: ignore[arg-type]
            fuzz2014=None,  # type: ignore[arg-type]
            fuzz2015=None,  # type: ignore[arg-type]
            fuzz2016=None,  # type: ignore[arg-type]
            fuzz2017=None,  # type: ignore[arg-type]
            fuzz2018=None,  # type: ignore[arg-type]
        )

    @classmethod
    def _clear(cls) -> AffixFuzzer3:
        """Produce an empty AffixFuzzer3, bypassing `__init__`."""
        inst = cls.__new__(cls)
        inst.__attrs_clear__()
        return inst

    fuzz2001: components.AffixFuzzer1Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer1Batch._optional,  # type: ignore[misc]
    )
    fuzz2002: components.AffixFuzzer2Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer2Batch._optional,  # type: ignore[misc]
    )
    fuzz2003: components.AffixFuzzer3Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer3Batch._optional,  # type: ignore[misc]
    )
    fuzz2004: components.AffixFuzzer4Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer4Batch._optional,  # type: ignore[misc]
    )
    fuzz2005: components.AffixFuzzer5Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer5Batch._optional,  # type: ignore[misc]
    )
    fuzz2006: components.AffixFuzzer6Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer6Batch._optional,  # type: ignore[misc]
    )
    fuzz2007: components.AffixFuzzer7Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer7Batch._optional,  # type: ignore[misc]
    )
    fuzz2008: components.AffixFuzzer8Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer8Batch._optional,  # type: ignore[misc]
    )
    fuzz2009: components.AffixFuzzer9Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer9Batch._optional,  # type: ignore[misc]
    )
    fuzz2010: components.AffixFuzzer10Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer10Batch._optional,  # type: ignore[misc]
    )
    fuzz2011: components.AffixFuzzer11Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer11Batch._optional,  # type: ignore[misc]
    )
    fuzz2012: components.AffixFuzzer12Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer12Batch._optional,  # type: ignore[misc]
    )
    fuzz2013: components.AffixFuzzer13Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer13Batch._optional,  # type: ignore[misc]
    )
    fuzz2014: components.AffixFuzzer14Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer14Batch._optional,  # type: ignore[misc]
    )
    fuzz2015: components.AffixFuzzer15Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer15Batch._optional,  # type: ignore[misc]
    )
    fuzz2016: components.AffixFuzzer16Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer16Batch._optional,  # type: ignore[misc]
    )
    fuzz2017: components.AffixFuzzer17Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer17Batch._optional,  # type: ignore[misc]
    )
    fuzz2018: components.AffixFuzzer18Batch | None = field(
        metadata={"component": "optional"},
        default=None,
        converter=components.AffixFuzzer18Batch._optional,  # type: ignore[misc]
    )
    __str__ = Archetype.__str__
    __repr__ = Archetype.__repr__
