//! Finds all the `*.rs` files in `docs/code-examples/all`,
//! copies them to `src` (with slight modifications), and generate a `lib.rs` for them.
//!
//! The reason we combine all the examples into a single binary
//! is to reduce the amount of binaries in our workspace.
//!
//! Motivation: <https://github.com/rerun-io/rerun/issues/4623>

use std::{fs, path::Path};

use itertools::Itertools as _;
use rust_format::Formatter as _;

fn main() {
    let manifest_path =
        Path::new(&re_build_tools::get_and_track_env_var("CARGO_MANIFEST_DIR").unwrap()).to_owned();
    let path = manifest_path.join("all");

    assert!(path.exists() && path.is_dir(), "Failed to find {path:?}");

    let mut examples = Vec::new();

    for entry in fs::read_dir(path).unwrap().flatten() {
        let path = entry.path();
        if let Some(extension) = path.extension() {
            if extension == "rs" {
                let example_name = path.file_stem().unwrap().to_str().unwrap().to_owned();

                let contents = fs::read_to_string(&path).unwrap();

                // some examples lack a main, see https://github.com/rerun-io/landing/issues/515
                if contents.contains("fn main()") {
                    // Patch the source code so we can call into `main` and pass arguments to it:
                    let contents = contents.replace("fn main()", "pub fn main(_args: &[String])");
                    let contents = contents.replace(
                        "let args = std::env::args().collect::<Vec<_>>();",
                        "let args = _args;",
                    );

                    let target_path = format!("src/{example_name}.rs");
                    re_build_tools::write_file_if_necessary(target_path, contents.as_bytes())
                        .unwrap();

                    examples.push(example_name);
                }
            }
        }
    }

    let source = r#"
    //! DO NOT EDIT! Code generated by ${FILE}.

    ${MODS}

    pub fn run() {
        let args: Vec<String> = std::env::args().skip(1).collect();

        if args.is_empty() {
            eprintln!("Usage: {} <example-name>\n", std::env::args().next().unwrap());
            eprintln!("Available examples ${EXAMPLES}:\n");
            std::process::exit(1);
        }

        let example_name = args[0].as_str();

        match example_name {
            ${MATCH_EXAMPLES}
            _ => {
                eprintln!("Unknown example: {example_name}");
                std::process::exit(1);
            }
        }
    }
    "#
    .trim()
    .replace("${FILE}", file!())
    .replace(
        "${MODS}",
        &examples.iter().map(|m| format!("mod {m};")).join("\n"),
    )
    .replace("${EXAMPLES}", &examples.iter().join(" "))
    .replace(
        "${MATCH_EXAMPLES}",
        &examples
            .iter()
            .map(|m| {
                format!(
                    r#"{m:?} => {{
                        if let Err(err) = {m}::main(&args) {{
                            panic!("Failed to run '{m}': {{err}}");
                        }}
                    }}"#
                )
            })
            .join(",\n"),
    );

    let source = rust_format::RustFmt::default()
        .format_str(source)
        .expect("Failed to format");

    re_build_tools::write_file_if_necessary("src/lib.rs", source.as_bytes()).unwrap();
}
