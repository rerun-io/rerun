// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/archetypes/arrows3d.fbs"

#include "arrows3d.hpp"

#include "../components/class_id.hpp"
#include "../components/color.hpp"
#include "../components/instance_key.hpp"
#include "../components/label.hpp"
#include "../components/origin3d.hpp"
#include "../components/radius.hpp"
#include "../components/vector3d.hpp"

#include <arrow/api.h>

namespace rr {
    namespace archetypes {
        arrow::Result<std::vector<rr::DataCell>> Arrows3D::to_data_cells() const {
            std::vector<rr::DataCell> cells;
            cells.reserve(7);

            {
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::Vector3D::to_data_cell(vectors.data(), vectors.size())
                );
                cells.push_back(cell);
            }
            if (origins.has_value()) {
                const auto& value = origins.value();
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::Origin3D::to_data_cell(value.data(), value.size())
                );
                cells.push_back(cell);
            }
            if (radii.has_value()) {
                const auto& value = radii.value();
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::Radius::to_data_cell(value.data(), value.size())
                );
                cells.push_back(cell);
            }
            if (colors.has_value()) {
                const auto& value = colors.value();
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::Color::to_data_cell(value.data(), value.size())
                );
                cells.push_back(cell);
            }
            if (labels.has_value()) {
                const auto& value = labels.value();
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::Label::to_data_cell(value.data(), value.size())
                );
                cells.push_back(cell);
            }
            if (class_ids.has_value()) {
                const auto& value = class_ids.value();
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::ClassId::to_data_cell(value.data(), value.size())
                );
                cells.push_back(cell);
            }
            if (instance_keys.has_value()) {
                const auto& value = instance_keys.value();
                ARROW_ASSIGN_OR_RAISE(
                    const auto cell,
                    rr::components::InstanceKey::to_data_cell(value.data(), value.size())
                );
                cells.push_back(cell);
            }

            return cells;
        }
    } // namespace archetypes
} // namespace rr
