// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/radius.fbs".

#pragma once

#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    /// \private
    template <typename T>
    class NumericBuilder;

    class Array;
    class DataType;
    class FloatType;
    using FloatBuilder = NumericBuilder<FloatType>;
} // namespace arrow

namespace rerun::components {
    /// **Component**: The radius of something, e.g. a point.
    ///
    /// Internally, positive values indicate scene units, whereas negative values
    /// are interpreted as UI points.
    ///
    /// UI points are independent of zooming in Views, but are sensitive to the application UI scaling.
    /// at 100% UI scaling, UI points are equal to pixels
    /// The Viewer's UI scaling defaults to the OS scaling which typically is 100% for full HD screens and 200% for 4k screens.
    struct Radius {
        float value;

      public:
        // Extensions to generated type defined in 'radius_ext.cpp'

        /// Creates a new radius in scene units.
        ///
        /// Values passed must be finite positive.
        static Radius scene_units(float radius_in_scene_units) {
            return Radius(radius_in_scene_units);
        }

        /// Creates a new radius in ui points.
        ///
        /// Values passed must be finite positive.
        static Radius ui_points(float radius_in_ui_points) {
            return Radius(-radius_in_ui_points);
        }

      public:
        Radius() = default;

        Radius(float value_) : value(value_) {}

        Radius& operator=(float value_) {
            value = value_;
            return *this;
        }
    };
} // namespace rerun::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<components::Radius> {
        static constexpr const char Name[] = "rerun.components.Radius";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::components::Radius` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::Radius* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::FloatBuilder* builder, const components::Radius* elements, size_t num_elements
        );
    };
} // namespace rerun
