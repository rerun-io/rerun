// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/origin2d.fbs".

#pragma once

#include "../data_cell.hpp"
#include "../datatypes/vec2d.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>

namespace arrow {
    class DataType;
    class FixedSizeListBuilder;
    class MemoryPool;
} // namespace arrow

namespace rerun {
    namespace components {
        /// A point of origin in 2D space.
        struct Origin2D {
            rerun::datatypes::Vec2D origin;

            /// Name of the component, used for serialization.
            static const char NAME[];

          public:
            // Extensions to generated type defined in 'origin2d_ext.cpp'

            /// Construct Origin2D from x/y/z values.
            Origin2D(float x, float y) : origin{x, y} {}

            float x() const {
                return origin.x();
            }

            float y() const {
                return origin.y();
            }

          public:
            Origin2D() = default;

            Origin2D(rerun::datatypes::Vec2D _origin) : origin(std::move(_origin)) {}

            Origin2D& operator=(rerun::datatypes::Vec2D _origin) {
                origin = std::move(_origin);
                return *this;
            }

            Origin2D(const float (&arg)[2]) : origin(arg) {}

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static Result<std::shared_ptr<arrow::FixedSizeListBuilder>> new_arrow_array_builder(
                arrow::MemoryPool* memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static Error fill_arrow_array_builder(
                arrow::FixedSizeListBuilder* builder, const Origin2D* elements, size_t num_elements
            );

            /// Creates a Rerun DataCell from an array of Origin2D components.
            static Result<rerun::DataCell> to_data_cell(
                const Origin2D* instances, size_t num_instances
            );
        };
    } // namespace components
} // namespace rerun
