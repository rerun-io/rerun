// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/image_scaling_mode.fbs".

#pragma once

#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class SparseUnionBuilder;
} // namespace arrow

namespace rerun::components {
    /// **Component**: Determines whether an image or texture should be scaled to fit the viewport.
    enum class ImageScalingMode : uint8_t {

        /// No scaling, pixel size will match the image's width/height dimensions in pixels.
        Original = 1,

        /// Scale the image for the largest possible fit in the view's container.
        Fill = 2,

        /// Scale the image for the largest possible fit in the view's container, but keep the original aspect ratio.
        FillKeepAspectRatio = 3,
    };
} // namespace rerun::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<components::ImageScalingMode> {
        static constexpr const char Name[] = "rerun.components.ImageScalingMode";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::components::ImageScalingMode` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::ImageScalingMode* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::SparseUnionBuilder* builder, const components::ImageScalingMode* elements,
            size_t num_elements
        );
    };
} // namespace rerun
