// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/recording_started_timestamp.fbs".

#pragma once

#include "../component_descriptor.hpp"
#include "../datatypes/time_int.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: When the recording started.
    ///
    /// Should be an absolute time, i.e. relative to Unix Epoch.
    struct RecordingStartedTimestamp {
        rerun::datatypes::TimeInt timestamp;

      public:
        RecordingStartedTimestamp() = default;

        RecordingStartedTimestamp(rerun::datatypes::TimeInt timestamp_) : timestamp(timestamp_) {}

        RecordingStartedTimestamp& operator=(rerun::datatypes::TimeInt timestamp_) {
            timestamp = timestamp_;
            return *this;
        }

        RecordingStartedTimestamp(int64_t value_) : timestamp(value_) {}

        RecordingStartedTimestamp& operator=(int64_t value_) {
            timestamp = value_;
            return *this;
        }

        /// Cast to the underlying TimeInt datatype
        operator rerun::datatypes::TimeInt() const {
            return timestamp;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(
        sizeof(rerun::datatypes::TimeInt) == sizeof(components::RecordingStartedTimestamp)
    );

    /// \private
    template <>
    struct Loggable<components::RecordingStartedTimestamp> {
        static constexpr ComponentDescriptor Descriptor =
            "rerun.components.RecordingStartedTimestamp";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::TimeInt>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::RecordingStartedTimestamp` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::RecordingStartedTimestamp* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::TimeInt>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::TimeInt>::to_arrow(
                    &instances->timestamp,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
