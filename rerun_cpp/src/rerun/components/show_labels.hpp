// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/show_labels.fbs".

#pragma once

#include "../datatypes/bool.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: Whether the entity's `components::Text` label is shown.
    ///
    /// The main purpose of this component existing separately from the labels themselves
    /// is to be overridden when desired, to allow hiding and showing from the viewer and
    /// blueprints.
    struct ShowLabels {
        /// Whether the entity's `components::Text` label is shown.
        rerun::datatypes::Bool show_labels;

      public:
        ShowLabels() = default;

        ShowLabels(rerun::datatypes::Bool show_labels_) : show_labels(show_labels_) {}

        ShowLabels& operator=(rerun::datatypes::Bool show_labels_) {
            show_labels = show_labels_;
            return *this;
        }

        ShowLabels(bool value_) : show_labels(value_) {}

        ShowLabels& operator=(bool value_) {
            show_labels = value_;
            return *this;
        }

        /// Cast to the underlying Bool datatype
        operator rerun::datatypes::Bool() const {
            return show_labels;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Bool) == sizeof(components::ShowLabels));

    /// \private
    template <>
    struct Loggable<components::ShowLabels> {
        static constexpr const char Name[] = "rerun.components.ShowLabels";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Bool>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::ShowLabels` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::ShowLabels* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Bool>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Bool>::to_arrow(
                    &instances->show_labels,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
