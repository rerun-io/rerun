// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/transform3d.fbs".

#pragma once

#include "../datatypes/transform3d.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class DenseUnionBuilder;
} // namespace arrow

namespace rerun::components {
    /// **Component**: An affine transform between two 3D spaces, represented in a given direction.
    struct Transform3D {
        /// Representation of the transform.
        rerun::datatypes::Transform3D repr;

      public:
        Transform3D() = default;

        Transform3D(rerun::datatypes::Transform3D repr_) : repr(repr_) {}

        Transform3D& operator=(rerun::datatypes::Transform3D repr_) {
            repr = repr_;
            return *this;
        }

        /// Cast to the underlying Transform3D datatype
        operator rerun::datatypes::Transform3D() const {
            return repr;
        }
    };
} // namespace rerun::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<components::Transform3D> {
        static constexpr const char Name[] = "rerun.components.Transform3D";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::DenseUnionBuilder* builder, const components::Transform3D* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::components::Transform3D` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::Transform3D* instances, size_t num_instances
        );
    };
} // namespace rerun
