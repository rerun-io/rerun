// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/view_coordinates.fbs".

#pragma once

#include "../data_cell.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class DataType;
    class FixedSizeListBuilder;
    class MemoryPool;
} // namespace arrow

namespace rerun {
    namespace components {
        /// How we interpret the coordinate system of an entity/space.
        ///
        /// For instance: What is "up"? What does the Z axis mean? Is this right-handed or
        /// left-handed?
        ///
        /// The three coordinates are always ordered as [x, y, z].
        ///
        /// For example [Right, Down, Forward] means that the X axis points to the right, the Y axis
        /// points down, and the Z axis points forward.
        ///
        /// The following constants are used to represent the different directions.
        ///  Up = 1
        ///  Down = 2
        ///  Right = 3
        ///  Left = 4
        ///  Forward = 5
        ///  Back = 6
        struct ViewCoordinates {
            /// The directions of the [x, y, z] axes.
            uint8_t coordinates[3];

            /// Name of the component, used for serialization.
            static const char NAME[];

          public:
            // Extensions to generated type defined in 'view_coordinates_ext.cpp'

            enum ViewDir : uint8_t {
                Up = 1,
                Down = 2,
                Right = 3,
                Left = 4,
                Forward = 5,
                Back = 6,
            };

            /// Construct Vec3D from x/y/z values.
            constexpr ViewCoordinates(uint8_t axis0, uint8_t axis1, uint8_t axis2)
                : coordinates{axis0, axis1, axis2} {}

            /// Construct Vec3D from x/y/z values.
            constexpr ViewCoordinates(ViewDir axis0, ViewDir axis1, ViewDir axis2)
                : coordinates{axis0, axis1, axis2} {}

          public:
            ViewCoordinates() = default;

            ViewCoordinates(const uint8_t (&_coordinates)[3])
                : coordinates{_coordinates[0], _coordinates[1], _coordinates[2]} {}

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static Result<std::shared_ptr<arrow::FixedSizeListBuilder>> new_arrow_array_builder(
                arrow::MemoryPool* memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static Error fill_arrow_array_builder(
                arrow::FixedSizeListBuilder* builder, const ViewCoordinates* elements,
                size_t num_elements
            );

            /// Creates a Rerun DataCell from an array of ViewCoordinates components.
            static Result<rerun::DataCell> to_data_cell(
                const ViewCoordinates* instances, size_t num_instances
            );
        };
    } // namespace components
} // namespace rerun
