// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/visible_recursive.fbs".

#pragma once

#include "../component_descriptor.hpp"
#include "../datatypes/bool.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: Whether the container, view, entity or instance and its children are currently visible.
    struct VisibleRecursive {
        rerun::datatypes::Bool visible;

      public:
        VisibleRecursive() = default;

        VisibleRecursive(rerun::datatypes::Bool visible_) : visible(visible_) {}

        VisibleRecursive& operator=(rerun::datatypes::Bool visible_) {
            visible = visible_;
            return *this;
        }

        VisibleRecursive(bool value_) : visible(value_) {}

        VisibleRecursive& operator=(bool value_) {
            visible = value_;
            return *this;
        }

        /// Cast to the underlying Bool datatype
        operator rerun::datatypes::Bool() const {
            return visible;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Bool) == sizeof(components::VisibleRecursive));

    /// \private
    template <>
    struct Loggable<components::VisibleRecursive> {
        static constexpr ComponentDescriptor Descriptor = "rerun.components.VisibleRecursive";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Bool>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::VisibleRecursive` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::VisibleRecursive* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Bool>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Bool>::to_arrow(
                    &instances->visible,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
