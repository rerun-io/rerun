// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/rotation_axis_angle.fbs".

#pragma once

#include "../datatypes/rotation_axis_angle.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: 3D rotation represented by a rotation around a given axis.
    struct RotationAxisAngle {
        rerun::datatypes::RotationAxisAngle rotation;

      public:
        RotationAxisAngle() = default;

        RotationAxisAngle(rerun::datatypes::RotationAxisAngle rotation_) : rotation(rotation_) {}

        RotationAxisAngle& operator=(rerun::datatypes::RotationAxisAngle rotation_) {
            rotation = rotation_;
            return *this;
        }

        /// Cast to the underlying RotationAxisAngle datatype
        operator rerun::datatypes::RotationAxisAngle() const {
            return rotation;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(
        sizeof(rerun::datatypes::RotationAxisAngle) == sizeof(components::RotationAxisAngle)
    );

    /// \private
    template <>
    struct Loggable<components::RotationAxisAngle> {
        static constexpr const char Name[] = "rerun.components.RotationAxisAngle";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::RotationAxisAngle>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::RotationAxisAngle` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::RotationAxisAngle* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::RotationAxisAngle>::to_arrow(
                &instances->rotation,
                num_instances
            );
        }
    };
} // namespace rerun
