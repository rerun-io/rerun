// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/components/range1d.fbs".

#pragma once

#include "../result.hpp"

#include <array>
#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class FixedSizeListBuilder;
} // namespace arrow

namespace rerun::components {
    /// **Component**: A 1D range, specifying a lower and upper bound.
    struct Range1D {
        std::array<double, 2> range;

      public:
        Range1D() = default;

        Range1D(std::array<double, 2> range_) : range(range_) {}

        Range1D& operator=(std::array<double, 2> range_) {
            range = range_;
            return *this;
        }
    };
} // namespace rerun::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<components::Range1D> {
        static constexpr const char Name[] = "rerun.components.Range1D";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::components::Range1D` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::Range1D* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::FixedSizeListBuilder* builder, const components::Range1D* elements,
            size_t num_elements
        );
    };
} // namespace rerun
