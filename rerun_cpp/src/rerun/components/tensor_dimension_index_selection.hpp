// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/tensor_dimension_selection.fbs".

#pragma once

#include "../datatypes/tensor_dimension_index_selection.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: Specifies a concrete index on a tensor dimension.
    struct TensorDimensionIndexSelection {
        rerun::datatypes::TensorDimensionIndexSelection selection;

      public:
        TensorDimensionIndexSelection() = default;

        TensorDimensionIndexSelection(rerun::datatypes::TensorDimensionIndexSelection selection_)
            : selection(selection_) {}

        TensorDimensionIndexSelection& operator=(
            rerun::datatypes::TensorDimensionIndexSelection selection_
        ) {
            selection = selection_;
            return *this;
        }

        /// Cast to the underlying TensorDimensionIndexSelection datatype
        operator rerun::datatypes::TensorDimensionIndexSelection() const {
            return selection;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(
        sizeof(rerun::datatypes::TensorDimensionIndexSelection) ==
        sizeof(components::TensorDimensionIndexSelection)
    );

    /// \private
    template <>
    struct Loggable<components::TensorDimensionIndexSelection> {
        static constexpr const char Name[] = "rerun.components.TensorDimensionIndexSelection";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::TensorDimensionIndexSelection>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::TensorDimensionIndexSelection` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::TensorDimensionIndexSelection* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::TensorDimensionIndexSelection>::to_arrow(
                &instances->selection,
                num_instances
            );
        }
    };
} // namespace rerun
