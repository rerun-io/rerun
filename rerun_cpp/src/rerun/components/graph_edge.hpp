// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/graph_edge.fbs".

#pragma once

#include "../datatypes/utf8pair.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>

namespace rerun::components {
    /// **Component**: An edge in a graph connecting two nodes.
    struct GraphEdge {
        rerun::datatypes::Utf8Pair edge;

      public: // START of extensions from graph_edge_ext.cpp:
        /// Create a new graph edge from a pair of strings.
        GraphEdge(rerun::datatypes::Utf8 first_, rerun::datatypes::Utf8 second_)
            : edge(std::move(first_), std::move(second_)) {}

        // END of extensions from graph_edge_ext.cpp, start of generated code:

      public:
        GraphEdge() = default;

        GraphEdge(rerun::datatypes::Utf8Pair edge_) : edge(std::move(edge_)) {}

        GraphEdge& operator=(rerun::datatypes::Utf8Pair edge_) {
            edge = std::move(edge_);
            return *this;
        }

        /// Cast to the underlying Utf8Pair datatype
        operator rerun::datatypes::Utf8Pair() const {
            return edge;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Utf8Pair) == sizeof(components::GraphEdge));

    /// \private
    template <>
    struct Loggable<components::GraphEdge> {
        static constexpr const char Name[] = "rerun.components.GraphEdge";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Utf8Pair>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::GraphEdge` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::GraphEdge* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Utf8Pair>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Utf8Pair>::to_arrow(
                    &instances->edge,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
