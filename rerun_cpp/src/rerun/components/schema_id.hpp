// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/schema_id.fbs".

#pragma once

#include "../datatypes/uint16.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: A 16-bit unique identifier for a schema within the MCAP file.
    struct SchemaId {
        rerun::datatypes::UInt16 id;

      public:
        SchemaId() = default;

        SchemaId(rerun::datatypes::UInt16 id_) : id(id_) {}

        SchemaId& operator=(rerun::datatypes::UInt16 id_) {
            id = id_;
            return *this;
        }

        SchemaId(uint16_t value_) : id(value_) {}

        SchemaId& operator=(uint16_t value_) {
            id = value_;
            return *this;
        }

        /// Cast to the underlying UInt16 datatype
        operator rerun::datatypes::UInt16() const {
            return id;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::UInt16) == sizeof(components::SchemaId));

    /// \private
    template <>
    struct Loggable<components::SchemaId> {
        static constexpr std::string_view ComponentType = "rerun.components.SchemaId";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::UInt16>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::SchemaId` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::SchemaId* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::UInt16>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::UInt16>::to_arrow(&instances->id, num_instances);
            }
        }
    };
} // namespace rerun
