// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/components/linear_speed.fbs".

#pragma once

#include "../datatypes/float64.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::components {
    /// **Component**: Linear speed, used for translation speed for example.
    struct LinearSpeed {
        /// Speed value in units of length per unit of time.
        rerun::datatypes::Float64 speed;

      public:
        LinearSpeed() = default;

        LinearSpeed(rerun::datatypes::Float64 speed_) : speed(speed_) {}

        LinearSpeed& operator=(rerun::datatypes::Float64 speed_) {
            speed = speed_;
            return *this;
        }

        LinearSpeed(double value_) : speed(value_) {}

        LinearSpeed& operator=(double value_) {
            speed = value_;
            return *this;
        }

        /// Cast to the underlying Float64 datatype
        operator rerun::datatypes::Float64() const {
            return speed;
        }
    };
} // namespace rerun::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Float64) == sizeof(components::LinearSpeed));

    /// \private
    template <>
    struct Loggable<components::LinearSpeed> {
        static constexpr std::string_view ComponentType = "rerun.components.LinearSpeed";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Float64>::arrow_datatype();
        }

        /// Serializes an array of `rerun::components::LinearSpeed` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const components::LinearSpeed* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Float64>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Float64>::to_arrow(
                    &instances->speed,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
