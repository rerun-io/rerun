// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/asset_video.fbs".

#pragma once

#include "../collection.hpp"
#include "../compiler_utils.hpp"
#include "../component_batch.hpp"
#include "../components/blob.hpp"
#include "../components/media_type.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <filesystem>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: A video binary.
    ///
    /// NOTE: Videos can only be viewed in the Rerun web viewer.
    /// Only MP4 containers with a limited number of codecs are currently supported, and not in all browsers.
    /// Follow <https://github.com/rerun-io/rerun/issues/7298> for updates on the native support.
    ///
    /// In order to display a video, you need to log a `archetypes::VideoFrameReference` for each frame.
    ///
    /// ## Example
    ///
    /// ### Video with explicit frames
    /// ![image](https://static.rerun.io/video_manual_frames/320a44e1e06b8b3a3161ecbbeae3e04d1ccb9589/full.png)
    ///
    /// ```cpp
    /// #include <rerun.hpp>
    ///
    /// #include <iostream>
    ///
    /// using namespace std::chrono_literals;
    ///
    /// int main(int argc, char* argv[]) {
    ///     if (argc <2) {
    ///         // TODO(#7354): Only mp4 is supported for now.
    ///         std::cerr <<"Usage: " <<argv[0] <<" <path_to_video.[mp4]>" <<std::endl;
    ///         return 1;
    ///     }
    ///
    ///     const auto path = argv[1];
    ///
    ///     const auto rec = rerun::RecordingStream("rerun_example_asset_video_manual_frames");
    ///     rec.spawn().exit_on_failure();
    ///
    ///     // Log video asset which is referred to by frame references.
    ///     // Make sure it's available on the timeline used for the frame references.
    ///     rec.set_time_seconds("video_time", 0.0);
    ///     rec.log("video", rerun::AssetVideo::from_file(path).value_or_throw());
    ///
    ///     // Send frame references for every 0.1 seconds over a total of 10 seconds.
    ///     // Naturally, this will result in a choppy playback and only makes sense if the video is 10 seconds or longer.
    ///     // TODO(#7368): Point to example using `send_video_frames`.
    ///     //
    ///     // Use `send_columns` to send all frame references in a single call.
    ///     std::vector<std::chrono::milliseconds> times(10 * 10);
    ///     std::vector<rerun::components::VideoTimestamp> video_timestamps(10 * 10);
    ///     for (size_t i = 0; i <times.size(); i++) {
    ///         times[i] = 100ms * i;
    ///         video_timestamps[i] = rerun::components::VideoTimestamp(times[i]);
    ///     }
    ///     auto video_frame_reference_indicators =
    ///         rerun::ComponentColumn::from_indicators<rerun::VideoFrameReference>(
    ///             static_cast<uint32_t>(times.size())
    ///         );
    ///     rec.send_columns(
    ///         "video",
    ///         rerun::TimeColumn::from_times("video_time", rerun::borrow(times)),
    ///         {
    ///             video_frame_reference_indicators.value_or_throw(),
    ///             rerun::ComponentColumn::from_loggable(rerun::borrow(video_timestamps)).value_or_throw(),
    ///         }
    ///     );
    /// }
    /// ```
    ///
    /// âš  **This is an experimental API! It is not fully supported, and is likely to change significantly in future versions.**
    struct AssetVideo {
        /// The asset's bytes.
        rerun::components::Blob blob;

        /// The Media Type of the asset.
        ///
        /// Supported values:
        /// * `video/mp4`
        ///
        /// If omitted, the viewer will try to guess from the data blob.
        /// If it cannot guess, it won't be able to render the asset.
        std::optional<rerun::components::MediaType> media_type;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.components.AssetVideoIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public: // START of extensions from asset_video_ext.cpp:
        /// Creates a new `AssetVideo` from the file contents at `path`.
        ///
        /// The `MediaType` will be guessed from the file extension.
        ///
        /// If no `MediaType` can be guessed at the moment, the Rerun Viewer will try to guess one
        /// from the data at render-time. If it can't, rendering will fail with an error.
        static Result<AssetVideo> from_file(const std::filesystem::path& path);

        /// Creates a new `AssetVideo` from the given `bytes`.
        ///
        /// If no `MediaType` is specified, the Rerun Viewer will try to guess one from the data
        /// at render-time. If it can't, rendering will fail with an error.
        static AssetVideo from_bytes(
            rerun::Collection<uint8_t> bytes,
            std::optional<rerun::components::MediaType> media_type = {}
        ) {
            // TODO(jan): we could try and guess using magic bytes here, like rust does.
            AssetVideo asset = AssetVideo(std::move(bytes));
            asset.media_type = media_type;
            return asset;
        }

        // END of extensions from asset_video_ext.cpp, start of generated code:

      public:
        AssetVideo() = default;
        AssetVideo(AssetVideo&& other) = default;

        explicit AssetVideo(rerun::components::Blob _blob) : blob(std::move(_blob)) {}

        /// The Media Type of the asset.
        ///
        /// Supported values:
        /// * `video/mp4`
        ///
        /// If omitted, the viewer will try to guess from the data blob.
        /// If it cannot guess, it won't be able to render the asset.
        AssetVideo with_media_type(rerun::components::MediaType _media_type) && {
            media_type = std::move(_media_type);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::AssetVideo> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(const archetypes::AssetVideo& archetype
        );
    };
} // namespace rerun
