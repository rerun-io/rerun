// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/instance_poses3d.fbs".

#include "instance_poses3d.hpp"

#include "../collection_adapter_builtins.hpp"

namespace rerun::archetypes {
    InstancePoses3D InstancePoses3D::clear_fields() {
        auto archetype = InstancePoses3D();
        archetype.translations =
            ComponentBatch::empty<rerun::components::PoseTranslation3D>(Descriptor_translations)
                .value_or_throw();
        archetype.rotation_axis_angles =
            ComponentBatch::empty<rerun::components::PoseRotationAxisAngle>(
                Descriptor_rotation_axis_angles
            )
                .value_or_throw();
        archetype.quaternions =
            ComponentBatch::empty<rerun::components::PoseRotationQuat>(Descriptor_quaternions)
                .value_or_throw();
        archetype.scales = ComponentBatch::empty<rerun::components::PoseScale3D>(Descriptor_scales)
                               .value_or_throw();
        archetype.mat3x3 =
            ComponentBatch::empty<rerun::components::PoseTransformMat3x3>(Descriptor_mat3x3)
                .value_or_throw();
        return archetype;
    }
} // namespace rerun::archetypes

namespace rerun {

    Result<std::vector<ComponentBatch>> AsComponents<archetypes::InstancePoses3D>::serialize(
        const archetypes::InstancePoses3D& archetype
    ) {
        using namespace archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(6);

        if (archetype.translations.has_value()) {
            cells.push_back(archetype.translations.value());
        }
        if (archetype.rotation_axis_angles.has_value()) {
            cells.push_back(archetype.rotation_axis_angles.value());
        }
        if (archetype.quaternions.has_value()) {
            cells.push_back(archetype.quaternions.value());
        }
        if (archetype.scales.has_value()) {
            cells.push_back(archetype.scales.value());
        }
        if (archetype.mat3x3.has_value()) {
            cells.push_back(archetype.mat3x3.value());
        }
        {
            auto indicator = InstancePoses3D::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
