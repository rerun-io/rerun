// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/capsules3d.fbs".

#pragma once

#include "../collection.hpp"
#include "../compiler_utils.hpp"
#include "../component_batch.hpp"
#include "../components/class_id.hpp"
#include "../components/color.hpp"
#include "../components/length.hpp"
#include "../components/pose_rotation_axis_angle.hpp"
#include "../components/pose_rotation_quat.hpp"
#include "../components/pose_translation3d.hpp"
#include "../components/radius.hpp"
#include "../components/show_labels.hpp"
#include "../components/text.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: 3D capsules; cylinders with hemispherical caps.
    ///
    /// Capsules are defined by two endpoints (the centers of their end cap spheres), which are located
    /// at (0, 0, 0) and (0, 0, length), that is, extending along the positive direction of the Z axis.
    /// Capsules in other orientations may be produced by applying a rotation to the entity or
    /// instances.
    ///
    /// ## Example
    ///
    /// ### Batch of capsules
    /// ![image](https://static.rerun.io/capsule3d_batch/6e6a4acafcf528359372147d7247f85d84434101/full.png)
    ///
    /// ```cpp
    /// #include <rerun.hpp>
    ///
    /// int main() {
    ///     const auto rec = rerun::RecordingStream("rerun_example_capsule3d_batch");
    ///     rec.spawn().exit_on_failure();
    ///
    ///     rec.log(
    ///         "capsules",
    ///         rerun::Capsules3D::from_lengths_and_radii(
    ///             {0.0f, 2.0f, 4.0f, 6.0f, 8.0f},
    ///             {1.0f, 0.5f, 0.5f, 0.5f, 1.0f}
    ///         )
    ///             .with_colors({
    ///                 rerun::Rgba32(255, 0, 0),
    ///                 rerun::Rgba32(188, 188, 0),
    ///                 rerun::Rgba32(0, 255, 0),
    ///                 rerun::Rgba32(0, 188, 188),
    ///                 rerun::Rgba32(0, 0, 255),
    ///             })
    ///             .with_translations({
    ///                 {0.0f, 0.0f, 0.0f},
    ///                 {2.0f, 0.0f, 0.0f},
    ///                 {4.0f, 0.0f, 0.0f},
    ///                 {6.0f, 0.0f, 0.0f},
    ///                 {8.0f, 0.0f, 0.0f},
    ///             })
    ///             .with_rotation_axis_angles({
    ///                 rerun::RotationAxisAngle(),
    ///                 rerun::RotationAxisAngle({1.0f, 0.0f, 0.0f}, rerun::Angle::degrees(-22.5)),
    ///                 rerun::RotationAxisAngle({1.0f, 0.0f, 0.0f}, rerun::Angle::degrees(-45.0)),
    ///                 rerun::RotationAxisAngle({1.0f, 0.0f, 0.0f}, rerun::Angle::degrees(-67.5)),
    ///                 rerun::RotationAxisAngle({1.0f, 0.0f, 0.0f}, rerun::Angle::degrees(-90.0)),
    ///             })
    ///     );
    /// }
    /// ```
    struct Capsules3D {
        /// Lengths of the capsules, defined as the distance between the centers of the endcaps.
        Collection<rerun::components::Length> lengths;

        /// Radii of the capsules.
        Collection<rerun::components::Radius> radii;

        /// Optional translations of the capsules.
        ///
        /// If not specified, one end of each capsule will be at (0, 0, 0).
        /// Note that this uses a `components::PoseTranslation3D` which is also used by `archetypes::InstancePoses3D`.
        std::optional<Collection<rerun::components::PoseTranslation3D>> translations;

        /// Rotations via axis + angle.
        ///
        /// If no rotation is specified, the capsules align with the +Z axis of the local coordinate system.
        /// Note that this uses a `components::PoseRotationAxisAngle` which is also used by `archetypes::InstancePoses3D`.
        std::optional<Collection<rerun::components::PoseRotationAxisAngle>> rotation_axis_angles;

        /// Rotations via quaternion.
        ///
        /// If no rotation is specified, the capsules align with the +Z axis of the local coordinate system.
        /// Note that this uses a `components::PoseRotationQuat` which is also used by `archetypes::InstancePoses3D`.
        std::optional<Collection<rerun::components::PoseRotationQuat>> quaternions;

        /// Optional colors for the capsules.
        std::optional<Collection<rerun::components::Color>> colors;

        /// Optional text labels for the capsules, which will be located at their centers.
        std::optional<Collection<rerun::components::Text>> labels;

        /// Optional choice of whether the text labels should be shown by default.
        std::optional<rerun::components::ShowLabels> show_labels;

        /// Optional class ID for the ellipsoids.
        ///
        /// The class ID provides colors and labels if not specified explicitly.
        std::optional<Collection<rerun::components::ClassId>> class_ids;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.components.Capsules3DIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public: // START of extensions from capsules3d_ext.cpp:
        /// Creates a new `Capsules3D` with the given axis-aligned lengths and radii.
        ///
        /// For multiple capsules, you should generally follow this with
        /// `Capsules3D::with_translations()` and one of the rotation methods, in order to move them
        /// apart from each other.
        //
        // TODO(andreas): This should not take an std::vector.
        static Capsules3D from_lengths_and_radii(
            const std::vector<float>& lengths, const std::vector<float>& radii
        );

        /* TODO(kpreid): This should exist for parity with Rust, but actually implementing this
           needs a bit of quaternion math.

        /// Creates a new `Capsules3D` where each capsule extends between the given pairs of points.
        //
        // TODO(andreas): This should not take an std::vector.
        //
        static Capsules3D from_endpoints_and_radii(
            const std::vector<datatypes::Vec3D>& start_points,
            const std::vector<datatypes::Vec3D>& end_points,
            const std::vector<float>& radii
        );
        */

        // END of extensions from capsules3d_ext.cpp, start of generated code:

      public:
        Capsules3D() = default;
        Capsules3D(Capsules3D&& other) = default;

        /// Optional translations of the capsules.
        ///
        /// If not specified, one end of each capsule will be at (0, 0, 0).
        /// Note that this uses a `components::PoseTranslation3D` which is also used by `archetypes::InstancePoses3D`.
        Capsules3D with_translations(Collection<rerun::components::PoseTranslation3D> _translations
        ) && {
            translations = std::move(_translations);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Rotations via axis + angle.
        ///
        /// If no rotation is specified, the capsules align with the +Z axis of the local coordinate system.
        /// Note that this uses a `components::PoseRotationAxisAngle` which is also used by `archetypes::InstancePoses3D`.
        Capsules3D with_rotation_axis_angles(
            Collection<rerun::components::PoseRotationAxisAngle> _rotation_axis_angles
        ) && {
            rotation_axis_angles = std::move(_rotation_axis_angles);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Rotations via quaternion.
        ///
        /// If no rotation is specified, the capsules align with the +Z axis of the local coordinate system.
        /// Note that this uses a `components::PoseRotationQuat` which is also used by `archetypes::InstancePoses3D`.
        Capsules3D with_quaternions(Collection<rerun::components::PoseRotationQuat> _quaternions
        ) && {
            quaternions = std::move(_quaternions);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Optional colors for the capsules.
        Capsules3D with_colors(Collection<rerun::components::Color> _colors) && {
            colors = std::move(_colors);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Optional text labels for the capsules, which will be located at their centers.
        Capsules3D with_labels(Collection<rerun::components::Text> _labels) && {
            labels = std::move(_labels);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Optional choice of whether the text labels should be shown by default.
        Capsules3D with_show_labels(rerun::components::ShowLabels _show_labels) && {
            show_labels = std::move(_show_labels);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Optional class ID for the ellipsoids.
        ///
        /// The class ID provides colors and labels if not specified explicitly.
        Capsules3D with_class_ids(Collection<rerun::components::ClassId> _class_ids) && {
            class_ids = std::move(_class_ids);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::Capsules3D> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(const archetypes::Capsules3D& archetype
        );
    };
} // namespace rerun
