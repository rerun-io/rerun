// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/archetypes/clear.fbs".

#pragma once

#include "../arrow.hpp"
#include "../component_batch.hpp"
#include "../components/clear_is_recursive.hpp"
#include "../data_cell.hpp"
#include "../result.hpp"

#include <cstdint>
#include <utility>
#include <vector>

namespace rerun {
    namespace archetypes {
        /// **Archetype**: Empties all the components of an entity.
        ///
        /// ## Example
        ///
        /// ### Flat
        /// ```cpp,ignore
        /// // Log a batch of 3D arrows.
        ///
        /// #include <rerun.hpp>
        ///
        /// #include <cmath>
        /// #include <numeric>
        ///
        /// namespace rr = rerun;
        ///
        /// int main() {
        ///     auto rec = rr::RecordingStream("rerun_example_clear_simple");
        ///     rec.connect("127.0.0.1:9876").throw_on_failure();
        ///
        ///     std::vector<rr::components::Vector3D> vectors = {
        ///         {1.0, 0.0, 0.0},
        ///         {0.0, -1.0, 0.0},
        ///         {-1.0, 0.0, 0.0},
        ///         {0.0, 1.0, 0.0},
        ///     };
        ///     std::vector<rr::components::Position3D> origins = {
        ///         {-0.5, 0.5, 0.0},
        ///         {0.5, 0.5, 0.0},
        ///         {0.5, -0.5, 0.0},
        ///         {-0.5, -0.5, 0.0},
        ///     };
        ///     std::vector<rr::components::Color> colors = {
        ///         {200, 0, 0},
        ///         {0, 200, 0},
        ///         {0, 0, 200},
        ///         {200, 0, 200}};
        ///
        ///     // Log a handful of arrows.
        ///     for (int i = 0; i <vectors.size(); ++i) {
        ///         auto entity_path = "arrows/" + std::to_string(i);
        ///         rec.log(
        ///             entity_path.c_str(),
        ///             rr::Arrows3D::from_vectors(vectors[i]).with_origins(origins[i]).with_colors(colors[i])
        ///         );
        ///     }
        ///
        ///     // Now clear them, one by one on each tick.
        ///     for (int i = 0; i <vectors.size(); ++i) {
        ///         auto entity_path = "arrows/" + std::to_string(i);
        ///         rec.log(entity_path.c_str(), rr::Clear::FLAT);
        ///     }
        /// }
        /// ```
        struct Clear {
            rerun::components::ClearIsRecursive is_recursive;

            /// Name of the indicator component, used to identify the archetype when converting to a
            /// list of components.
            static const char INDICATOR_COMPONENT_NAME[];

          public:
            // Extensions to generated type defined in 'clear_ext.cpp'

            static const Clear FLAT;

            static const Clear RECURSIVE;

            Clear(bool _is_recursive = false)
                : Clear(components::ClearIsRecursive(_is_recursive)) {}

          public:
            Clear() = default;

            Clear(rerun::components::ClearIsRecursive _is_recursive)
                : is_recursive(std::move(_is_recursive)) {}

            /// Returns the number of primary instances of this archetype.
            size_t num_instances() const {
                return 1;
            }

            /// Creates an `AnonymousComponentBatch` out of the associated indicator component. This
            /// allows for associating arbitrary indicator components with arbitrary data. Check out
            /// the `manual_indicator` API example to see what's possible.
            static AnonymousComponentBatch indicator();

            /// Collections all component lists into a list of component collections. *Attention:*
            /// The returned vector references this instance and does not take ownership of any
            /// data. Adding any new components to this archetype will invalidate the returned
            /// component lists!
            std::vector<AnonymousComponentBatch> as_component_batches() const;
        };
    } // namespace archetypes
} // namespace rerun
