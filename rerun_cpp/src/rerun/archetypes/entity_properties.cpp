// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/entity_properties.fbs".

#include "entity_properties.hpp"

#include "../collection_adapter_builtins.hpp"

namespace rerun::archetypes {
    EntityProperties EntityProperties::clear_fields() {
        auto archetype = EntityProperties();
        archetype.interactive =
            ComponentBatch::empty<rerun::components::Interactive>(Descriptor_interactive)
                .value_or_throw();
        archetype.visible =
            ComponentBatch::empty<rerun::components::Visible>(Descriptor_visible).value_or_throw();
        archetype.visible_recursive =
            ComponentBatch::empty<rerun::components::VisibleRecursive>(Descriptor_visible_recursive)
                .value_or_throw();
        return archetype;
    }

    Collection<ComponentColumn> EntityProperties::columns(const Collection<uint32_t>& lengths_) {
        std::vector<ComponentColumn> columns;
        columns.reserve(4);
        if (interactive.has_value()) {
            columns.push_back(interactive.value().partitioned(lengths_).value_or_throw());
        }
        if (visible.has_value()) {
            columns.push_back(visible.value().partitioned(lengths_).value_or_throw());
        }
        if (visible_recursive.has_value()) {
            columns.push_back(visible_recursive.value().partitioned(lengths_).value_or_throw());
        }
        columns.push_back(ComponentColumn::from_indicators<EntityProperties>(
                              static_cast<uint32_t>(lengths_.size())
        )
                              .value_or_throw());
        return columns;
    }

    Collection<ComponentColumn> EntityProperties::columns() {
        if (interactive.has_value()) {
            return columns(std::vector<uint32_t>(interactive.value().length(), 1));
        }
        if (visible.has_value()) {
            return columns(std::vector<uint32_t>(visible.value().length(), 1));
        }
        if (visible_recursive.has_value()) {
            return columns(std::vector<uint32_t>(visible_recursive.value().length(), 1));
        }
        return Collection<ComponentColumn>();
    }
} // namespace rerun::archetypes

namespace rerun {

    Result<Collection<ComponentBatch>> AsComponents<archetypes::EntityProperties>::as_batches(
        const archetypes::EntityProperties& archetype
    ) {
        using namespace archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(4);

        if (archetype.interactive.has_value()) {
            cells.push_back(archetype.interactive.value());
        }
        if (archetype.visible.has_value()) {
            cells.push_back(archetype.visible.value());
        }
        if (archetype.visible_recursive.has_value()) {
            cells.push_back(archetype.visible_recursive.value());
        }
        {
            auto result = ComponentBatch::from_indicator<EntityProperties>();
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return rerun::take_ownership(std::move(cells));
    }
} // namespace rerun
