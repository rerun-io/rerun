// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/archetypes/mesh3d.fbs".

#include "mesh3d.hpp"

namespace rerun {
    namespace archetypes {
        const char Mesh3D::INDICATOR_COMPONENT_NAME[] = "rerun.components.Mesh3DIndicator";

        Result<std::vector<SerializedComponentBatch>> Mesh3D::serialize() const {
            std::vector<SerializedComponentBatch> cells;
            cells.reserve(7);

            {
                auto result = vertex_positions.serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (mesh_properties.has_value()) {
                auto result =
                    ComponentBatch<rerun::components::MeshProperties>(mesh_properties.value())
                        .serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (vertex_normals.has_value()) {
                auto result = vertex_normals.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (vertex_colors.has_value()) {
                auto result = vertex_colors.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (mesh_material.has_value()) {
                auto result =
                    ComponentBatch<rerun::components::Material>(mesh_material.value()).serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (class_ids.has_value()) {
                auto result = class_ids.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (instance_keys.has_value()) {
                auto result = instance_keys.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            {
                auto result = ComponentBatch<IndicatorComponent>(IndicatorComponent()).serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }

            return cells;
        }
    } // namespace archetypes
} // namespace rerun
