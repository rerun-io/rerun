// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/archetypes/transform3d.fbs".

#pragma once

#include "../component_batch.hpp"
#include "../components/transform3d.hpp"
#include "../data_cell.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <utility>
#include <vector>

namespace rerun {
    namespace archetypes {
        /// **Archetype**: A 3D transform.
        ///
        /// ## Example
        ///
        /// ### Variety of 3D transforms
        /// ![image](https://static.rerun.io/transform3d_simple/141368b07360ce3fcb1553079258ae3f42bdb9ac/full.png)
        ///
        /// ```cpp
        /// #include <rerun.hpp>
        ///
        /// constexpr float TAU = 6.28318530717958647692528676655900577f;
        ///
        /// int main() {
        ///     const auto rec = rerun::RecordingStream("rerun_example_transform3d");
        ///     rec.spawn().exit_on_failure();
        ///
        ///     auto arrow =
        ///         rerun::Arrows3D::from_vectors({{0.0f, 1.0f, 0.0f}}).with_origins({{0.0f, 0.0f, 0.0f}});
        ///
        ///     rec.log("base", arrow);
        ///
        ///     rec.log("base/translated", rerun::Transform3D({1.0f, 0.0f, 0.0f}));
        ///     rec.log("base/translated", arrow);
        ///
        ///     rec.log(
        ///         "base/rotated_scaled",
        ///         rerun::Transform3D(
        ///             rerun::RotationAxisAngle({0.0f, 0.0f, 1.0f}, rerun::Angle::radians(TAU / 8.0f)),
        ///             2.0f
        ///         )
        ///     );
        ///     rec.log("base/rotated_scaled", arrow);
        /// }
        /// ```
        struct Transform3D {
            /// The transform
            rerun::components::Transform3D transform;

            /// Name of the indicator component, used to identify the archetype when converting to a list of components.
            static const char INDICATOR_COMPONENT_NAME[];
            /// Indicator component, used to identify the archetype when converting to a list of components.
            using IndicatorComponent = components::IndicatorComponent<INDICATOR_COMPONENT_NAME>;

          public:
            // Extensions to generated type defined in 'transform3d_ext.cpp'

          public:
            Transform3D() = default;
            Transform3D(Transform3D&& other) = default;

            explicit Transform3D(rerun::components::Transform3D _transform)
                : transform(std::move(_transform)) {}

            /// Returns the number of primary instances of this archetype.
            size_t num_instances() const {
                return 1;
            }
        };

    } // namespace archetypes

    template <typename T>
    struct AsComponents;

    template <>
    struct AsComponents<archetypes::Transform3D> {
        /// Serialize all set component batches.
        static Result<std::vector<SerializedComponentBatch>> serialize(
            const archetypes::Transform3D& archetype
        );
    };
} // namespace rerun
