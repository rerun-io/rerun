// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/coordinate_frame.fbs".

#pragma once

#include "../collection.hpp"
#include "../component_batch.hpp"
#include "../component_column.hpp"
#include "../components/transform_frame_id.hpp"
#include "../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: Specifies the coordinate frame for an entity.
    ///
    /// **Experimental:** Transform frames are still in early development!
    ///
    /// If not specified, the coordinate frame uses an implicit frame derived from the entity path.
    /// TODO(RR-2698): Explain implicit coordinate frames in more detail.
    ///
    /// TODO: Why is this useful, how does it relate to ROS? etc.
    ///
    /// TODO: Add preliminary example
    ///
    /// âš  **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    ///
    struct CoordinateFrame {
        /// The coordinate frame to use for the current entity.
        std::optional<ComponentBatch> frame_id;

      public:
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] = "rerun.archetypes.CoordinateFrame";

        /// `ComponentDescriptor` for the `frame_id` field.
        static constexpr auto Descriptor_frame_id = ComponentDescriptor(
            ArchetypeName, "CoordinateFrame:frame_id",
            Loggable<rerun::components::TransformFrameId>::ComponentType
        );

      public:
        CoordinateFrame() = default;
        CoordinateFrame(CoordinateFrame&& other) = default;
        CoordinateFrame(const CoordinateFrame& other) = default;
        CoordinateFrame& operator=(const CoordinateFrame& other) = default;
        CoordinateFrame& operator=(CoordinateFrame&& other) = default;

        explicit CoordinateFrame(rerun::components::TransformFrameId _frame_id)
            : frame_id(ComponentBatch::from_loggable(std::move(_frame_id), Descriptor_frame_id)
                           .value_or_throw()) {}

        /// Update only some specific fields of a `CoordinateFrame`.
        static CoordinateFrame update_fields() {
            return CoordinateFrame();
        }

        /// Clear all the fields of a `CoordinateFrame`.
        static CoordinateFrame clear_fields();

        /// The coordinate frame to use for the current entity.
        CoordinateFrame with_frame_id(const rerun::components::TransformFrameId& _frame_id) && {
            frame_id =
                ComponentBatch::from_loggable(_frame_id, Descriptor_frame_id).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `frame_id` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_frame_id` should
        /// be used when logging a single row's worth of data.
        CoordinateFrame with_many_frame_id(
            const Collection<rerun::components::TransformFrameId>& _frame_id
        ) && {
            frame_id =
                ComponentBatch::from_loggable(_frame_id, Descriptor_frame_id).value_or_throw();
            return std::move(*this);
        }

        /// Partitions the component data into multiple sub-batches.
        ///
        /// Specifically, this transforms the existing `ComponentBatch` data into `ComponentColumn`s
        /// instead, via `ComponentBatch::partitioned`.
        ///
        /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
        ///
        /// The specified `lengths` must sum to the total length of the component batch.
        Collection<ComponentColumn> columns(const Collection<uint32_t>& lengths_);

        /// Partitions the component data into unit-length sub-batches.
        ///
        /// This is semantically similar to calling `columns` with `std::vector<uint32_t>(n, 1)`,
        /// where `n` is automatically guessed.
        Collection<ComponentColumn> columns();
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::CoordinateFrame> {
        /// Serialize all set component batches.
        static Result<Collection<ComponentBatch>> as_batches(
            const archetypes::CoordinateFrame& archetype
        );
    };
} // namespace rerun
