// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/pinhole.fbs".

#include "pinhole.hpp"

#include "../collection_adapter_builtins.hpp"

namespace rerun::archetypes {
    Pinhole Pinhole::clear_fields() {
        auto archetype = Pinhole();
        archetype.image_from_camera =
            ComponentBatch::empty<rerun::components::PinholeProjection>(Descriptor_image_from_camera
            )
                .value_or_throw();
        archetype.resolution =
            ComponentBatch::empty<rerun::components::Resolution>(Descriptor_resolution)
                .value_or_throw();
        archetype.camera_xyz =
            ComponentBatch::empty<rerun::components::ViewCoordinates>(Descriptor_camera_xyz)
                .value_or_throw();
        archetype.image_plane_distance =
            ComponentBatch::empty<rerun::components::ImagePlaneDistance>(
                Descriptor_image_plane_distance
            )
                .value_or_throw();
        return archetype;
    }
} // namespace rerun::archetypes

namespace rerun {

    Result<std::vector<ComponentBatch>> AsComponents<archetypes::Pinhole>::serialize(
        const archetypes::Pinhole& archetype
    ) {
        using namespace archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(5);

        if (archetype.image_from_camera.has_value()) {
            cells.push_back(archetype.image_from_camera.value());
        }
        if (archetype.resolution.has_value()) {
            cells.push_back(archetype.resolution.value());
        }
        if (archetype.camera_xyz.has_value()) {
            cells.push_back(archetype.camera_xyz.value());
        }
        if (archetype.image_plane_distance.has_value()) {
            cells.push_back(archetype.image_plane_distance.value());
        }
        {
            auto indicator = Pinhole::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
