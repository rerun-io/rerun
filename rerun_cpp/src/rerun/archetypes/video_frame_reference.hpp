// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/video_frame_reference.fbs".

#pragma once

#include "../collection.hpp"
#include "../compiler_utils.hpp"
#include "../component_batch.hpp"
#include "../components/entity_path.hpp"
#include "../components/video_timestamp.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: References a single video frame.
    ///
    /// Used to display video frames from a `archetypes::AssetVideo`.
    ///
    /// âš  **This is an experimental API! It is not fully supported, and is likely to change significantly in future versions.**
    struct VideoFrameReference {
        /// References the closest video frame to this timestamp.
        ///
        /// Note that this uses the closest video frame instead of the latest at this timestamp
        /// in order to be more forgiving of rounding errors for inprecise timestamp types.
        rerun::components::VideoTimestamp timestamp;

        /// Optional reference to an entity with a `archetypes::AssetVideo`.
        ///
        /// If none is specified, the video is assumed to be at the same entity.
        /// Note that blueprint overrides on the referenced video will be ignored regardless,
        /// as this is always interpreted as a reference to the data store.
        std::optional<rerun::components::EntityPath> video_reference;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.components.VideoFrameReferenceIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        VideoFrameReference() = default;
        VideoFrameReference(VideoFrameReference&& other) = default;

        explicit VideoFrameReference(rerun::components::VideoTimestamp _timestamp)
            : timestamp(std::move(_timestamp)) {}

        /// Optional reference to an entity with a `archetypes::AssetVideo`.
        ///
        /// If none is specified, the video is assumed to be at the same entity.
        /// Note that blueprint overrides on the referenced video will be ignored regardless,
        /// as this is always interpreted as a reference to the data store.
        VideoFrameReference with_video_reference(rerun::components::EntityPath _video_reference
        ) && {
            video_reference = std::move(_video_reference);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::VideoFrameReference> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(
            const archetypes::VideoFrameReference& archetype
        );
    };
} // namespace rerun
