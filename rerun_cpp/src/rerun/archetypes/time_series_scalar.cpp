// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/archetypes/time_series_scalar.fbs".

#include "time_series_scalar.hpp"

#include "../collection_adapter_builtins.hpp"

namespace rerun::archetypes {}

namespace rerun {

    Result<std::vector<DataCell>> AsComponents<archetypes::TimeSeriesScalar>::serialize(
        const archetypes::TimeSeriesScalar& archetype
    ) {
        using namespace archetypes;
        std::vector<DataCell> cells;
        cells.reserve(6);

        {
            auto result = Loggable<rerun::components::Scalar>::to_data_cell(&archetype.scalar, 1);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }
        if (archetype.radius.has_value()) {
            auto result =
                Loggable<rerun::components::Radius>::to_data_cell(&archetype.radius.value(), 1);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }
        if (archetype.color.has_value()) {
            auto result =
                Loggable<rerun::components::Color>::to_data_cell(&archetype.color.value(), 1);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }
        if (archetype.label.has_value()) {
            auto result =
                Loggable<rerun::components::Text>::to_data_cell(&archetype.label.value(), 1);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }
        if (archetype.scattered.has_value()) {
            auto result = Loggable<rerun::components::ScalarScattering>::to_data_cell(
                &archetype.scattered.value(),
                1
            );
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }
        {
            auto indicator = TimeSeriesScalar::IndicatorComponent();
            auto result =
                Loggable<TimeSeriesScalar::IndicatorComponent>::to_data_cell(&indicator, 1);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
