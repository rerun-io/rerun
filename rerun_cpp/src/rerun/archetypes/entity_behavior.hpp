// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/entity_behavior.fbs".

#pragma once

#include "../collection.hpp"
#include "../component_batch.hpp"
#include "../component_column.hpp"
#include "../components/interactive.hpp"
#include "../components/visible.hpp"
#include "../components/visible_recursive.hpp"
#include "../indicator_component.hpp"
#include "../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    /// **Archetype**: General visualization behavior of an entity.
    ///
    /// TODO(#6541): Fields of this archetype currently only have an effect when logged in the blueprint store.
    struct EntityBehavior {
        /// Whether the entity can be interacted with.
        ///
        /// Non interactive components may still be still visible, but mouse interactions in the view are disabled.
        ///
        /// Defaults to true.
        std::optional<ComponentBatch> interactive;

        /// Whether the entity is visible.
        ///
        /// If this is set, it will take precedence over the `visible_recursive` field
        /// and any `visible_recursive` setting further up in the hierarchy.
        ///
        /// Defaults to true.
        std::optional<ComponentBatch> visible;

        /// Whether the entity and its children are visible.
        ///
        /// This property is propagated down the entity hierarchy until another child entity
        /// sets `visible_recursive` to a different value at which point propagation continues with that value instead.
        ///
        /// `visible_recursive` is ignored on any individual entity that has the `visible` field set.
        /// (But this does not affect tree propagation of the property)
        ///
        /// Defaults to true.
        std::optional<ComponentBatch> visible_recursive;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.components.EntityBehaviorIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] = "rerun.archetypes.EntityBehavior";

        /// `ComponentDescriptor` for the `interactive` field.
        static constexpr auto Descriptor_interactive = ComponentDescriptor(
            ArchetypeName, "interactive",
            Loggable<rerun::components::Interactive>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `visible` field.
        static constexpr auto Descriptor_visible = ComponentDescriptor(
            ArchetypeName, "visible",
            Loggable<rerun::components::Visible>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `visible_recursive` field.
        static constexpr auto Descriptor_visible_recursive = ComponentDescriptor(
            ArchetypeName, "visible_recursive",
            Loggable<rerun::components::VisibleRecursive>::Descriptor.component_name
        );

      public:
        EntityBehavior() = default;
        EntityBehavior(EntityBehavior&& other) = default;
        EntityBehavior(const EntityBehavior& other) = default;
        EntityBehavior& operator=(const EntityBehavior& other) = default;
        EntityBehavior& operator=(EntityBehavior&& other) = default;

        /// Update only some specific fields of a `EntityBehavior`.
        static EntityBehavior update_fields() {
            return EntityBehavior();
        }

        /// Clear all the fields of a `EntityBehavior`.
        static EntityBehavior clear_fields();

        /// Whether the entity can be interacted with.
        ///
        /// Non interactive components may still be still visible, but mouse interactions in the view are disabled.
        ///
        /// Defaults to true.
        EntityBehavior with_interactive(const rerun::components::Interactive& _interactive) && {
            interactive = ComponentBatch::from_loggable(_interactive, Descriptor_interactive)
                              .value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `interactive` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_interactive` should
        /// be used when logging a single row's worth of data.
        EntityBehavior with_many_interactive(
            const Collection<rerun::components::Interactive>& _interactive
        ) && {
            interactive = ComponentBatch::from_loggable(_interactive, Descriptor_interactive)
                              .value_or_throw();
            return std::move(*this);
        }

        /// Whether the entity is visible.
        ///
        /// If this is set, it will take precedence over the `visible_recursive` field
        /// and any `visible_recursive` setting further up in the hierarchy.
        ///
        /// Defaults to true.
        EntityBehavior with_visible(const rerun::components::Visible& _visible) && {
            visible = ComponentBatch::from_loggable(_visible, Descriptor_visible).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `visible` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_visible` should
        /// be used when logging a single row's worth of data.
        EntityBehavior with_many_visible(const Collection<rerun::components::Visible>& _visible
        ) && {
            visible = ComponentBatch::from_loggable(_visible, Descriptor_visible).value_or_throw();
            return std::move(*this);
        }

        /// Whether the entity and its children are visible.
        ///
        /// This property is propagated down the entity hierarchy until another child entity
        /// sets `visible_recursive` to a different value at which point propagation continues with that value instead.
        ///
        /// `visible_recursive` is ignored on any individual entity that has the `visible` field set.
        /// (But this does not affect tree propagation of the property)
        ///
        /// Defaults to true.
        EntityBehavior with_visible_recursive(
            const rerun::components::VisibleRecursive& _visible_recursive
        ) && {
            visible_recursive =
                ComponentBatch::from_loggable(_visible_recursive, Descriptor_visible_recursive)
                    .value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `visible_recursive` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_visible_recursive` should
        /// be used when logging a single row's worth of data.
        EntityBehavior with_many_visible_recursive(
            const Collection<rerun::components::VisibleRecursive>& _visible_recursive
        ) && {
            visible_recursive =
                ComponentBatch::from_loggable(_visible_recursive, Descriptor_visible_recursive)
                    .value_or_throw();
            return std::move(*this);
        }

        /// Partitions the component data into multiple sub-batches.
        ///
        /// Specifically, this transforms the existing `ComponentBatch` data into `ComponentColumn`s
        /// instead, via `ComponentBatch::partitioned`.
        ///
        /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
        ///
        /// The specified `lengths` must sum to the total length of the component batch.
        Collection<ComponentColumn> columns(const Collection<uint32_t>& lengths_);

        /// Partitions the component data into unit-length sub-batches.
        ///
        /// This is semantically similar to calling `columns` with `std::vector<uint32_t>(n, 1)`,
        /// where `n` is automatically guessed.
        Collection<ComponentColumn> columns();
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::EntityBehavior> {
        /// Serialize all set component batches.
        static Result<Collection<ComponentBatch>> as_batches(
            const archetypes::EntityBehavior& archetype
        );
    };
} // namespace rerun
