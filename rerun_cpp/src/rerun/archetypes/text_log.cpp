// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs.
// Based on "crates/re_types/definitions/rerun/archetypes/text_log.fbs".

#include "text_log.hpp"

#include "../components/color.hpp"
#include "../components/text.hpp"
#include "../components/text_log_level.hpp"

namespace rerun {
    namespace archetypes {
        Result<std::vector<rerun::DataCell>> TextLog::to_data_cells() const {
            std::vector<rerun::DataCell> cells;
            cells.reserve(3);

            {
                const auto result = rerun::components::Text::to_data_cell(&body, 1);
                if (result.is_err()) {
                    return result.error;
                }
                cells.emplace_back(std::move(result.value));
            }
            if (level.has_value()) {
                const auto& value = level.value();
                const auto result = rerun::components::TextLogLevel::to_data_cell(&value, 1);
                if (result.is_err()) {
                    return result.error;
                }
                cells.emplace_back(std::move(result.value));
            }
            if (color.has_value()) {
                const auto& value = color.value();
                const auto result = rerun::components::Color::to_data_cell(&value, 1);
                if (result.is_err()) {
                    return result.error;
                }
                cells.emplace_back(std::move(result.value));
            }
            {
                const auto result = create_indicator_component(
                    "rerun.components.TextLogIndicator",
                    num_instances()
                );
                if (result.is_err()) {
                    return result.error;
                }
                cells.emplace_back(std::move(result.value));
            }

            return cells;
        }
    } // namespace archetypes
} // namespace rerun
