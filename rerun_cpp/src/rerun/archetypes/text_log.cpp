// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/text_log.fbs".

#include "text_log.hpp"

#include "../collection_adapter_builtins.hpp"

namespace rerun::archetypes {}

namespace rerun {

    Result<std::vector<ComponentBatch>> AsComponents<archetypes::TextLog>::serialize(
        const archetypes::TextLog& archetype
    ) {
        using namespace archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(4);

        {
            auto result = ComponentBatch::from_loggable(
                archetype.text,
                ComponentDescriptor("rerun.archetypes.TextLog", "text", "rerun.components.Text")
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.level.has_value()) {
            auto result = ComponentBatch::from_loggable(
                archetype.level.value(),
                ComponentDescriptor(
                    "rerun.archetypes.TextLog",
                    "level",
                    "rerun.components.TextLogLevel"
                )
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.color.has_value()) {
            auto result = ComponentBatch::from_loggable(
                archetype.color.value(),
                ComponentDescriptor("rerun.archetypes.TextLog", "color", "rerun.components.Color")
            );
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto indicator = TextLog::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
