// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/archetypes/annotation_context.fbs".

#include "annotation_context.hpp"

#include "../collection_adapter_builtins.hpp"

namespace rerun::archetypes {
    AnnotationContext AnnotationContext::clear_fields() {
        auto archetype = AnnotationContext();
        archetype.context =
            ComponentBatch::empty<rerun::components::AnnotationContext>(Descriptor_context)
                .value_or_throw();
        return archetype;
    }
} // namespace rerun::archetypes

namespace rerun {

    Result<std::vector<ComponentBatch>> AsComponents<archetypes::AnnotationContext>::serialize(
        const archetypes::AnnotationContext& archetype
    ) {
        using namespace archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(2);

        if (archetype.context.has_value()) {
            cells.push_back(archetype.context.value());
        }
        {
            auto indicator = AnnotationContext::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
