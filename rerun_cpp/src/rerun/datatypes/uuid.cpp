// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/datatypes/uuid.fbs".

#include "uuid.hpp"

#include <arrow/builder.h>
#include <arrow/type_fwd.h>

namespace rerun::datatypes {
    const std::shared_ptr<arrow::DataType>& Uuid::arrow_datatype() {
        static const auto datatype =
            arrow::fixed_size_list(arrow::field("item", arrow::uint8(), false), 16);
        return datatype;
    }

    Result<std::shared_ptr<arrow::FixedSizeListBuilder>> Uuid::new_arrow_array_builder(
        arrow::MemoryPool* memory_pool
    ) {
        if (memory_pool == nullptr) {
            return rerun::Error(ErrorCode::UnexpectedNullArgument, "Memory pool is null.");
        }

        return Result(std::make_shared<arrow::FixedSizeListBuilder>(
            memory_pool,
            std::make_shared<arrow::UInt8Builder>(memory_pool),
            16
        ));
    }

    rerun::Error Uuid::fill_arrow_array_builder(
        arrow::FixedSizeListBuilder* builder, const Uuid* elements, size_t num_elements
    ) {
        if (builder == nullptr) {
            return rerun::Error(ErrorCode::UnexpectedNullArgument, "Passed array builder is null.");
        }
        if (elements == nullptr) {
            return rerun::Error(
                ErrorCode::UnexpectedNullArgument,
                "Cannot serialize null pointer to arrow array."
            );
        }

        auto value_builder = static_cast<arrow::UInt8Builder*>(builder->value_builder());

        ARROW_RETURN_NOT_OK(builder->AppendValues(static_cast<int64_t>(num_elements)));
        static_assert(sizeof(elements[0].bytes) == sizeof(elements[0]));
        ARROW_RETURN_NOT_OK(value_builder->AppendValues(
            elements[0].bytes.data(),
            static_cast<int64_t>(num_elements * 16),
            nullptr
        ));

        return Error::ok();
    }
} // namespace rerun::datatypes
