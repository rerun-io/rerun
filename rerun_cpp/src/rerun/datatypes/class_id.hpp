// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/datatypes/class_id.fbs".

#pragma once

#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    /// \private
    template <typename T>
    class NumericBuilder;

    class Array;
    class DataType;
    class UInt16Type;
    using UInt16Builder = NumericBuilder<UInt16Type>;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: A 16-bit ID representing a type of semantic class.
    struct ClassId {
        uint16_t id;

      public:
        ClassId() = default;

        ClassId(uint16_t id_) : id(id_) {}

        ClassId& operator=(uint16_t id_) {
            id = id_;
            return *this;
        }
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::ClassId> {
        static constexpr const char Name[] = "rerun.datatypes.ClassId";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::UInt16Builder* builder, const datatypes::ClassId* elements, size_t num_elements
        );

        /// Serializes an array of `rerun::datatypes::ClassId` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::ClassId* instances, size_t num_instances
        );
    };
} // namespace rerun
