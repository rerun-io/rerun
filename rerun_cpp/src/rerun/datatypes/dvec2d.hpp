// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/dvec2d.fbs".

#pragma once

#include "../result.hpp"

#include <array>
#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class FixedSizeListBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: A double-precision vector in 2D space.
    struct DVec2D {
        std::array<double, 2> xy;

      public: // START of extensions from dvec2d_ext.cpp:
        /// Construct DVec2D from x/y values.
        DVec2D(double x, double y) : xy{x, y} {}

        /// Construct DVec2D from x/y double pointer.
        explicit DVec2D(const double* xy_) : xy{xy_[0], xy_[1]} {}

        double x() const {
            return xy[0];
        }

        double y() const {
            return xy[1];
        }

        // END of extensions from dvec2d_ext.cpp, start of generated code:

      public:
        DVec2D() = default;

        DVec2D(std::array<double, 2> xy_) : xy(xy_) {}

        DVec2D& operator=(std::array<double, 2> xy_) {
            xy = xy_;
            return *this;
        }
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::DVec2D> {
        static constexpr const char Name[] = "rerun.datatypes.DVec2D";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::DVec2D` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::DVec2D* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::FixedSizeListBuilder* builder, const datatypes::DVec2D* elements,
            size_t num_elements
        );
    };
} // namespace rerun
