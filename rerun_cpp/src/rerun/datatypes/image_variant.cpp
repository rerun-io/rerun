// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/image_variant.fbs"

#include "image_variant.hpp"

#include <arrow/builder.h>
#include <arrow/type_fwd.h>

namespace rerun {
    namespace datatypes {
        const std::shared_ptr<arrow::DataType> &ImageVariant::arrow_datatype() {
            static const auto datatype = arrow::dense_union({
                arrow::field("_null_markers", arrow::null(), true, nullptr),
                arrow::field("Mono", arrow::boolean(), false),
                arrow::field("Rgb", arrow::boolean(), false),
                arrow::field("Rgba", arrow::boolean(), false),
                arrow::field("Segmentation", arrow::boolean(), false),
                arrow::field("Depth", arrow::boolean(), false),
            });
            return datatype;
        }

        Result<std::shared_ptr<arrow::DenseUnionBuilder>> ImageVariant::new_arrow_array_builder(
            arrow::MemoryPool *memory_pool
        ) {
            if (!memory_pool) {
                return Error(ErrorCode::UnexpectedNullArgument, "Memory pool is null.");
            }

            return Result(std::make_shared<arrow::DenseUnionBuilder>(
                memory_pool,
                std::vector<std::shared_ptr<arrow::ArrayBuilder>>({
                    std::make_shared<arrow::NullBuilder>(memory_pool),
                    std::make_shared<arrow::BooleanBuilder>(memory_pool),
                    std::make_shared<arrow::BooleanBuilder>(memory_pool),
                    std::make_shared<arrow::BooleanBuilder>(memory_pool),
                    std::make_shared<arrow::BooleanBuilder>(memory_pool),
                    std::make_shared<arrow::BooleanBuilder>(memory_pool),
                }),
                arrow_datatype()
            ));
        }

        Error ImageVariant::fill_arrow_array_builder(
            arrow::DenseUnionBuilder *builder, const ImageVariant *elements, size_t num_elements
        ) {
            if (!builder) {
                return Error(ErrorCode::UnexpectedNullArgument, "Passed array builder is null.");
            }
            if (!elements) {
                return Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Cannot serialize null pointer to arrow array."
                );
            }

            ARROW_RETURN_NOT_OK(builder->Reserve(static_cast<int64_t>(num_elements)));
            for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
                const auto &union_instance = elements[elem_idx];
                ARROW_RETURN_NOT_OK(builder->Append(static_cast<int8_t>(union_instance._tag)));

                auto variant_index = static_cast<int>(union_instance._tag);
                auto variant_builder_untyped = builder->child_builder(variant_index).get();

                switch (union_instance._tag) {
                    case detail::ImageVariantTag::NONE: {
                        ARROW_RETURN_NOT_OK(variant_builder_untyped->AppendNull());
                        break;
                    }
                    case detail::ImageVariantTag::Mono: {
                        auto variant_builder =
                            static_cast<arrow::BooleanBuilder *>(variant_builder_untyped);
                        ARROW_RETURN_NOT_OK(variant_builder->Append(union_instance._data.mono));
                        break;
                    }
                    case detail::ImageVariantTag::Rgb: {
                        auto variant_builder =
                            static_cast<arrow::BooleanBuilder *>(variant_builder_untyped);
                        ARROW_RETURN_NOT_OK(variant_builder->Append(union_instance._data.rgb));
                        break;
                    }
                    case detail::ImageVariantTag::Rgba: {
                        auto variant_builder =
                            static_cast<arrow::BooleanBuilder *>(variant_builder_untyped);
                        ARROW_RETURN_NOT_OK(variant_builder->Append(union_instance._data.rgba));
                        break;
                    }
                    case detail::ImageVariantTag::Segmentation: {
                        auto variant_builder =
                            static_cast<arrow::BooleanBuilder *>(variant_builder_untyped);
                        ARROW_RETURN_NOT_OK(
                            variant_builder->Append(union_instance._data.segmentation)
                        );
                        break;
                    }
                    case detail::ImageVariantTag::Depth: {
                        auto variant_builder =
                            static_cast<arrow::BooleanBuilder *>(variant_builder_untyped);
                        ARROW_RETURN_NOT_OK(variant_builder->Append(union_instance._data.depth));
                        break;
                    }
                }
            }

            return Error::ok();
        }
    } // namespace datatypes
} // namespace rerun
