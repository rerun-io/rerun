// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/tensor_data.fbs"

#pragma once

#include <arrow/type_fwd.h>
#include <cstdint>
#include <cstring>
#include <new>
#include <utility>
#include <vector>

namespace rerun {
    namespace datatypes {
        namespace detail {
            enum class TensorDataTag {
                /// Having a special empty state makes it possible to implement move-semantics. We
                /// need to be able to leave the object in a state which we can run the destructor
                /// on.
                NONE = 0,
                U8,
                U16,
            };

            union TensorDataData {
                std::vector<uint8_t> u8;

                std::vector<uint16_t> u16;

                TensorDataData() {}

                ~TensorDataData() {}

                void swap(TensorDataData& other) noexcept {
                    // This bitwise swap would fail for self-referential types, but we don't have
                    // any of those.
                    char temp[sizeof(TensorDataData)];
                    std::memcpy(temp, this, sizeof(TensorDataData));
                    std::memcpy(this, &other, sizeof(TensorDataData));
                    std::memcpy(&other, temp, sizeof(TensorDataData));
                }
            };
        } // namespace detail

        /// Storage for a `Tensor`
        struct TensorData {
            TensorData() : _tag(detail::TensorDataTag::NONE) {}

            TensorData(const TensorData& other) : _tag(other._tag) {
                switch (other._tag) {
                    case detail::TensorDataTag::U8: {
                        _data.u8 = other._data.u8;
                        break;
                    }
                    case detail::TensorDataTag::U16: {
                        _data.u16 = other._data.u16;
                        break;
                    }
                    default:
                        memcpy(&this->_data, &other._data, sizeof(detail::TensorDataData));
                        break;
                }
            }

            TensorData& operator=(const TensorData& other) noexcept {
                TensorData tmp(other);
                this->swap(tmp);
                return *this;
            }

            TensorData(TensorData&& other) noexcept : _tag(detail::TensorDataTag::NONE) {
                this->swap(other);
            }

            TensorData& operator=(TensorData&& other) noexcept {
                this->swap(other);
                return *this;
            }

            ~TensorData() {
                switch (this->_tag) {
                    case detail::TensorDataTag::NONE: {
                        break; // Nothing to destroy
                    }
                    case detail::TensorDataTag::U8: {
                        typedef std::vector<uint8_t> TypeAlias;
                        _data.u8.~TypeAlias();
                        break;
                    }
                    case detail::TensorDataTag::U16: {
                        typedef std::vector<uint16_t> TypeAlias;
                        _data.u16.~TypeAlias();
                        break;
                    }
                }
            }

            void swap(TensorData& other) noexcept {
                auto tag_temp = this->_tag;
                this->_tag = other._tag;
                other._tag = tag_temp;
                this->_data.swap(other._data);
            }

            static TensorData u8(std::vector<uint8_t> u8) {
                typedef std::vector<uint8_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::U8;
                new (&self._data.u8) TypeAlias(std::move(u8));
                return std::move(self);
            }

            static TensorData u16(std::vector<uint16_t> u16) {
                typedef std::vector<uint16_t> TypeAlias;
                TensorData self;
                self._tag = detail::TensorDataTag::U16;
                new (&self._data.u16) TypeAlias(std::move(u16));
                return std::move(self);
            }

            TensorData(std::vector<uint8_t> u8) {
                *this = TensorData::u8(std::move(u8));
            }

            TensorData(std::vector<uint16_t> u16) {
                *this = TensorData::u16(std::move(u16));
            }

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& to_arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static arrow::Result<std::shared_ptr<arrow::DenseUnionBuilder>> new_arrow_array_builder(
                arrow::MemoryPool* memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static arrow::Status fill_arrow_array_builder(
                arrow::DenseUnionBuilder* builder, const TensorData* elements, size_t num_elements
            );

          private:
            detail::TensorDataTag _tag;
            detail::TensorDataData _data;
        };
    } // namespace datatypes
} // namespace rerun
