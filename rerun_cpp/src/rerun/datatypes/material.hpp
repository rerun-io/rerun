// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/datatypes/material.fbs".

#pragma once

#include "../result.hpp"
#include "rgba32.hpp"
#include "tensor_data.hpp"

#include <cstdint>
#include <memory>
#include <optional>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: Material properties of a mesh.
    struct Material {
        /// Optional color multiplier.
        std::optional<rerun::datatypes::Rgba32> albedo_factor;

        /// Optional albedo texture.
        ///
        /// Used with `vertex_texcoords` on `Mesh3D`.
        /// Currently supports only sRGB(A) textures, ignoring alpha.
        /// (meaning that the tensor must have 3 or 4 channels and use the `u8` format)
        std::optional<rerun::datatypes::TensorData> albedo_texture;

      public:
        Material() = default;
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::Material> {
        static constexpr const char Name[] = "rerun.datatypes.Material";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder, const datatypes::Material* elements, size_t num_elements
        );

        /// Serializes an array of `rerun::datatypes::Material` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::Material* instances, size_t num_instances
        );
    };
} // namespace rerun
