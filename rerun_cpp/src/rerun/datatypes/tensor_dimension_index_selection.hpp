// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/datatypes/tensor_dimension_selection.fbs".

#pragma once

#include "../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: Indexing a specific tensor dimension.
    ///
    /// Selecting `dimension=2` and `index=42` is similar to doing `tensor[:, :, 42, :, :, â€¦]` in numpy.
    struct TensorDimensionIndexSelection {
        /// The dimension number to select.
        uint32_t dimension;

        /// The index along the dimension to use.
        uint64_t index;

      public:
        TensorDimensionIndexSelection() = default;
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::TensorDimensionIndexSelection> {
        static constexpr const char Name[] = "rerun.datatypes.TensorDimensionIndexSelection";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::TensorDimensionIndexSelection` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::TensorDimensionIndexSelection* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder, const datatypes::TensorDimensionIndexSelection* elements,
            size_t num_elements
        );
    };
} // namespace rerun
