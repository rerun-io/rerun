// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/viewport_blueprint.fbs".

#include "viewport_blueprint.hpp"

#include "../../collection_adapter_builtins.hpp"

namespace rerun::blueprint::archetypes {
    ViewportBlueprint ViewportBlueprint::clear_fields() {
        auto archetype = ViewportBlueprint();
        archetype.root_container =
            ComponentBatch::empty<rerun::blueprint::components::RootContainer>(
                Descriptor_root_container
            )
                .value_or_throw();
        archetype.maximized =
            ComponentBatch::empty<rerun::blueprint::components::ViewMaximized>(Descriptor_maximized)
                .value_or_throw();
        archetype.auto_layout =
            ComponentBatch::empty<rerun::blueprint::components::AutoLayout>(Descriptor_auto_layout)
                .value_or_throw();
        archetype.auto_views =
            ComponentBatch::empty<rerun::blueprint::components::AutoViews>(Descriptor_auto_views)
                .value_or_throw();
        archetype.past_viewer_recommendations =
            ComponentBatch::empty<rerun::blueprint::components::ViewerRecommendationHash>(
                Descriptor_past_viewer_recommendations
            )
                .value_or_throw();
        return archetype;
    }
} // namespace rerun::blueprint::archetypes

namespace rerun {

    Result<std::vector<ComponentBatch>>
        AsComponents<blueprint::archetypes::ViewportBlueprint>::serialize(
            const blueprint::archetypes::ViewportBlueprint& archetype
        ) {
        using namespace blueprint::archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(6);

        if (archetype.root_container.has_value()) {
            cells.push_back(archetype.root_container.value());
        }
        if (archetype.maximized.has_value()) {
            cells.push_back(archetype.maximized.value());
        }
        if (archetype.auto_layout.has_value()) {
            cells.push_back(archetype.auto_layout.value());
        }
        if (archetype.auto_views.has_value()) {
            cells.push_back(archetype.auto_views.value());
        }
        if (archetype.past_viewer_recommendations.has_value()) {
            cells.push_back(archetype.past_viewer_recommendations.value());
        }
        {
            auto indicator = ViewportBlueprint::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
