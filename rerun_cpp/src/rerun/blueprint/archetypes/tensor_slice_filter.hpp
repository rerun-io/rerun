// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/archetypes/tensor_slice_filter.fbs".

#pragma once

#include "../../collection.hpp"
#include "../../compiler_utils.hpp"
#include "../../components/image_scaling_mode.hpp"
#include "../../components/magnification_filter.hpp"
#include "../../data_cell.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: Configures how a selected tensor slice is shown on screen.
    struct TensorSliceFilter {
        /// How the image is scaled to fit the view.
        std::optional<rerun::components::ImageScalingMode> scaling;

        /// Filter used when zooming in on the tensor.
        std::optional<rerun::components::MagnificationFilter> mag_filter;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.blueprint.components.TensorSliceFilterIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        TensorSliceFilter() = default;
        TensorSliceFilter(TensorSliceFilter&& other) = default;

        /// How the image is scaled to fit the view.
        TensorSliceFilter with_scaling(rerun::components::ImageScalingMode _scaling) && {
            scaling = std::move(_scaling);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Filter used when zooming in on the tensor.
        TensorSliceFilter with_mag_filter(rerun::components::MagnificationFilter _mag_filter) && {
            mag_filter = std::move(_mag_filter);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::TensorSliceFilter> {
        /// Serialize all set component batches.
        static Result<std::vector<DataCell>> serialize(
            const blueprint::archetypes::TensorSliceFilter& archetype
        );
    };
} // namespace rerun
