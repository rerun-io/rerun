// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/panel_blueprint.fbs".

#include "time_panel_blueprint.hpp"

#include "../../collection_adapter_builtins.hpp"

namespace rerun::blueprint::archetypes {
    TimePanelBlueprint TimePanelBlueprint::clear_fields() {
        auto archetype = TimePanelBlueprint();
        archetype.state =
            ComponentBatch::empty<rerun::blueprint::components::PanelState>(Descriptor_state)
                .value_or_throw();
        archetype.timeline =
            ComponentBatch::empty<rerun::blueprint::components::TimelineName>(Descriptor_timeline)
                .value_or_throw();
        archetype.time =
            ComponentBatch::empty<rerun::blueprint::components::TimeInt>(Descriptor_time)
                .value_or_throw();
        return archetype;
    }

    Collection<ComponentColumn> TimePanelBlueprint::columns(const Collection<uint32_t>& lengths_) {
        std::vector<ComponentColumn> columns;
        columns.reserve(3);
        if (state.has_value()) {
            columns.push_back(state.value().partitioned(lengths_).value_or_throw());
        }
        if (timeline.has_value()) {
            columns.push_back(timeline.value().partitioned(lengths_).value_or_throw());
        }
        if (time.has_value()) {
            columns.push_back(time.value().partitioned(lengths_).value_or_throw());
        }
        return columns;
    }

    Collection<ComponentColumn> TimePanelBlueprint::columns() {
        if (state.has_value()) {
            return columns(std::vector<uint32_t>(state.value().length(), 1));
        }
        if (timeline.has_value()) {
            return columns(std::vector<uint32_t>(timeline.value().length(), 1));
        }
        if (time.has_value()) {
            return columns(std::vector<uint32_t>(time.value().length(), 1));
        }
        return Collection<ComponentColumn>();
    }
} // namespace rerun::blueprint::archetypes

namespace rerun {

    Result<Collection<ComponentBatch>>
        AsComponents<blueprint::archetypes::TimePanelBlueprint>::as_batches(
            const blueprint::archetypes::TimePanelBlueprint& archetype
        ) {
        using namespace blueprint::archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(3);

        if (archetype.state.has_value()) {
            cells.push_back(archetype.state.value());
        }
        if (archetype.timeline.has_value()) {
            cells.push_back(archetype.timeline.value());
        }
        if (archetype.time.has_value()) {
            cells.push_back(archetype.time.value());
        }

        return rerun::take_ownership(std::move(cells));
    }
} // namespace rerun
