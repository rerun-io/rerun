// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/panel_blueprint.fbs".

#pragma once

#include "../../blueprint/components/panel_state.hpp"
#include "../../blueprint/components/time_int.hpp"
#include "../../blueprint/components/timeline_name.hpp"
#include "../../collection.hpp"
#include "../../component_batch.hpp"
#include "../../component_column.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: Time panel specific state.
    ///
    /// âš  **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    ///
    struct TimePanelBlueprint {
        /// Current state of the panel.
        std::optional<ComponentBatch> state;

        /// What timeline the panel is on.
        std::optional<ComponentBatch> timeline;

        /// What time the time cursor should be on.
        std::optional<ComponentBatch> time;

      public:
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] =
            "rerun.blueprint.archetypes.TimePanelBlueprint";

        /// `ComponentDescriptor` for the `state` field.
        static constexpr auto Descriptor_state = ComponentDescriptor(
            ArchetypeName, "TimePanelBlueprint:state",
            Loggable<rerun::blueprint::components::PanelState>::ComponentType
        );
        /// `ComponentDescriptor` for the `timeline` field.
        static constexpr auto Descriptor_timeline = ComponentDescriptor(
            ArchetypeName, "TimePanelBlueprint:timeline",
            Loggable<rerun::blueprint::components::TimelineName>::ComponentType
        );
        /// `ComponentDescriptor` for the `time` field.
        static constexpr auto Descriptor_time = ComponentDescriptor(
            ArchetypeName, "TimePanelBlueprint:time",
            Loggable<rerun::blueprint::components::TimeInt>::ComponentType
        );

      public:
        TimePanelBlueprint() = default;
        TimePanelBlueprint(TimePanelBlueprint&& other) = default;
        TimePanelBlueprint(const TimePanelBlueprint& other) = default;
        TimePanelBlueprint& operator=(const TimePanelBlueprint& other) = default;
        TimePanelBlueprint& operator=(TimePanelBlueprint&& other) = default;

        /// Update only some specific fields of a `TimePanelBlueprint`.
        static TimePanelBlueprint update_fields() {
            return TimePanelBlueprint();
        }

        /// Clear all the fields of a `TimePanelBlueprint`.
        static TimePanelBlueprint clear_fields();

        /// Current state of the panel.
        TimePanelBlueprint with_state(const rerun::blueprint::components::PanelState& _state) && {
            state = ComponentBatch::from_loggable(_state, Descriptor_state).value_or_throw();
            return std::move(*this);
        }

        /// What timeline the panel is on.
        TimePanelBlueprint with_timeline(const rerun::blueprint::components::TimelineName& _timeline
        ) && {
            timeline =
                ComponentBatch::from_loggable(_timeline, Descriptor_timeline).value_or_throw();
            return std::move(*this);
        }

        /// What time the time cursor should be on.
        TimePanelBlueprint with_time(const rerun::blueprint::components::TimeInt& _time) && {
            time = ComponentBatch::from_loggable(_time, Descriptor_time).value_or_throw();
            return std::move(*this);
        }

        /// Partitions the component data into multiple sub-batches.
        ///
        /// Specifically, this transforms the existing `ComponentBatch` data into `ComponentColumn`s
        /// instead, via `ComponentBatch::partitioned`.
        ///
        /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
        ///
        /// The specified `lengths` must sum to the total length of the component batch.
        Collection<ComponentColumn> columns(const Collection<uint32_t>& lengths_);

        /// Partitions the component data into unit-length sub-batches.
        ///
        /// This is semantically similar to calling `columns` with `std::vector<uint32_t>(n, 1)`,
        /// where `n` is automatically guessed.
        Collection<ComponentColumn> columns();
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::TimePanelBlueprint> {
        /// Serialize all set component batches.
        static Result<Collection<ComponentBatch>> as_batches(
            const blueprint::archetypes::TimePanelBlueprint& archetype
        );
    };
} // namespace rerun
