// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/force_collision_radius.fbs".

#pragma once

#include "../../blueprint/components/enabled.hpp"
#include "../../blueprint/components/force_iterations.hpp"
#include "../../blueprint/components/force_strength.hpp"
#include "../../collection.hpp"
#include "../../compiler_utils.hpp"
#include "../../component_batch.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: Resolves collisions between the bounding circles, according to the radius of the nodes.
    struct ForceCollisionRadius {
        /// Whether the collision force is enabled.
        ///
        /// The collision force resolves collisions between nodes based on the bounding circle defined by their radius.
        std::optional<rerun::blueprint::components::Enabled> enabled;

        /// The strength of the force.
        std::optional<rerun::blueprint::components::ForceStrength> strength;

        /// Specifies how often this force should be applied per iteration.
        ///
        /// Increasing this parameter can lead to better results at the cost of longer computation time.
        std::optional<rerun::blueprint::components::ForceIterations> iterations;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.blueprint.components.ForceCollisionRadiusIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;
        static constexpr const char ArchetypeName[] =
            "rerun.blueprint.archetypes.ForceCollisionRadius";

      public:
        ForceCollisionRadius() = default;
        ForceCollisionRadius(ForceCollisionRadius&& other) = default;
        ForceCollisionRadius(const ForceCollisionRadius& other) = default;
        ForceCollisionRadius& operator=(const ForceCollisionRadius& other) = default;
        ForceCollisionRadius& operator=(ForceCollisionRadius&& other) = default;

        /// Whether the collision force is enabled.
        ///
        /// The collision force resolves collisions between nodes based on the bounding circle defined by their radius.
        ForceCollisionRadius with_enabled(rerun::blueprint::components::Enabled _enabled) && {
            enabled = std::move(_enabled);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// The strength of the force.
        ForceCollisionRadius with_strength(rerun::blueprint::components::ForceStrength _strength
        ) && {
            strength = std::move(_strength);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Specifies how often this force should be applied per iteration.
        ///
        /// Increasing this parameter can lead to better results at the cost of longer computation time.
        ForceCollisionRadius with_iterations(
            rerun::blueprint::components::ForceIterations _iterations
        ) && {
            iterations = std::move(_iterations);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::ForceCollisionRadius> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(
            const blueprint::archetypes::ForceCollisionRadius& archetype
        );
    };
} // namespace rerun
