// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/map_zoom.fbs".

#pragma once

#include "../../blueprint/components/zoom_level.hpp"
#include "../../collection.hpp"
#include "../../compiler_utils.hpp"
#include "../../component_batch.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: Configuration of the map view zoom level.
    struct MapZoom {
        /// Zoom level for the map.
        ///
        /// Zoom level follow the [`OpenStreetMap` definition](https://wiki.openstreetmap.org/wiki/Zoom_levels).
        std::optional<ComponentBatch> zoom;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.blueprint.components.MapZoomIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] = "rerun.blueprint.archetypes.MapZoom";

        /// `ComponentDescriptor` for the `zoom` field.
        static constexpr auto Descriptor_zoom = ComponentDescriptor(
            ArchetypeName, "zoom",
            Loggable<rerun::blueprint::components::ZoomLevel>::Descriptor.component_name
        );

      public:
        MapZoom() = default;
        MapZoom(MapZoom&& other) = default;
        MapZoom(const MapZoom& other) = default;
        MapZoom& operator=(const MapZoom& other) = default;
        MapZoom& operator=(MapZoom&& other) = default;

        explicit MapZoom(rerun::blueprint::components::ZoomLevel _zoom)
            : zoom(ComponentBatch::from_loggable(std::move(_zoom), Descriptor_zoom).value_or_throw()
              ) {}

        /// Update only some specific fields of a `MapZoom`.
        static MapZoom update_fields() {
            return MapZoom();
        }

        /// Clear all the fields of a `MapZoom`.
        static MapZoom clear_fields();

        /// Zoom level for the map.
        ///
        /// Zoom level follow the [`OpenStreetMap` definition](https://wiki.openstreetmap.org/wiki/Zoom_levels).
        MapZoom with_zoom(const rerun::blueprint::components::ZoomLevel& _zoom) && {
            zoom = ComponentBatch::from_loggable(_zoom, Descriptor_zoom).value_or_throw();
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::MapZoom> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(
            const blueprint::archetypes::MapZoom& archetype
        );
    };
} // namespace rerun
