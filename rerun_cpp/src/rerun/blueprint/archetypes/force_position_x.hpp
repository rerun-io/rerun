// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/force_position_x.fbs".

#pragma once

#include "../../blueprint/components/force_position_x.hpp"
#include "../../collection.hpp"
#include "../../component_batch.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    struct ForcePositionX {
        rerun::blueprint::components::ForcePositionX force;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.blueprint.components.ForcePositionXIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        ForcePositionX() = default;
        ForcePositionX(ForcePositionX&& other) = default;

        explicit ForcePositionX(rerun::blueprint::components::ForcePositionX _force)
            : force(std::move(_force)) {}
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::ForcePositionX> {
        /// Serialize all set component batches.
        static Result<std::vector<ComponentBatch>> serialize(
            const blueprint::archetypes::ForcePositionX& archetype
        );
    };
} // namespace rerun
