// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/archetypes/axis_y.fbs".

#pragma once

#include "../../blueprint/components/zoom_behavior.hpp"
#include "../../collection.hpp"
#include "../../compiler_utils.hpp"
#include "../../components/range1d.hpp"
#include "../../data_cell.hpp"
#include "../../indicator_component.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

namespace rerun::blueprint::archetypes {
    /// **Archetype**: Configuration for the legend of a plot.
    struct AxisY {
        /// The default range of the y-axis of the plot.
        std::optional<rerun::components::Range1D> range;

        /// How the axis should scale as the plot is zoomed.
        std::optional<rerun::blueprint::components::ZoomBehavior> zoom_behavior;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.blueprint.components.AxisYIndicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;

      public:
        AxisY() = default;
        AxisY(AxisY&& other) = default;

        /// The default range of the y-axis of the plot.
        AxisY with_range(rerun::components::Range1D _range) && {
            range = std::move(_range);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// How the axis should scale as the plot is zoomed.
        AxisY with_zoom_behavior(rerun::blueprint::components::ZoomBehavior _zoom_behavior) && {
            zoom_behavior = std::move(_zoom_behavior);
            // See: https://github.com/rerun-io/rerun/issues/4027
            RR_WITH_MAYBE_UNINITIALIZED_DISABLED(return std::move(*this);)
        }

        /// Returns the number of primary instances of this archetype.
        size_t num_instances() const {
            return 0;
        }
    };

} // namespace rerun::blueprint::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<blueprint::archetypes::AxisY> {
        /// Serialize all set component batches.
        static Result<std::vector<DataCell>> serialize(const blueprint::archetypes::AxisY& archetype
        );
    };
} // namespace rerun
