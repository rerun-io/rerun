// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/dataframe_query.fbs".

#include "dataframe_query.hpp"

#include "../../collection_adapter_builtins.hpp"

namespace rerun::blueprint::archetypes {
    DataframeQuery DataframeQuery::clear_fields() {
        auto archetype = DataframeQuery();
        archetype.timeline =
            ComponentBatch::empty<rerun::blueprint::components::TimelineName>(Descriptor_timeline)
                .value_or_throw();
        archetype.filter_by_range =
            ComponentBatch::empty<rerun::blueprint::components::FilterByRange>(
                Descriptor_filter_by_range
            )
                .value_or_throw();
        archetype.filter_is_not_null =
            ComponentBatch::empty<rerun::blueprint::components::FilterIsNotNull>(
                Descriptor_filter_is_not_null
            )
                .value_or_throw();
        archetype.apply_latest_at =
            ComponentBatch::empty<rerun::blueprint::components::ApplyLatestAt>(
                Descriptor_apply_latest_at
            )
                .value_or_throw();
        archetype.select =
            ComponentBatch::empty<rerun::blueprint::components::SelectedColumns>(Descriptor_select)
                .value_or_throw();
        return archetype;
    }
} // namespace rerun::blueprint::archetypes

namespace rerun {

    Result<std::vector<ComponentBatch>>
        AsComponents<blueprint::archetypes::DataframeQuery>::serialize(
            const blueprint::archetypes::DataframeQuery& archetype
        ) {
        using namespace blueprint::archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(6);

        if (archetype.timeline.has_value()) {
            cells.push_back(archetype.timeline.value());
        }
        if (archetype.filter_by_range.has_value()) {
            cells.push_back(archetype.filter_by_range.value());
        }
        if (archetype.filter_is_not_null.has_value()) {
            cells.push_back(archetype.filter_is_not_null.value());
        }
        if (archetype.apply_latest_at.has_value()) {
            cells.push_back(archetype.apply_latest_at.value());
        }
        if (archetype.select.has_value()) {
            cells.push_back(archetype.select.value());
        }
        {
            auto indicator = DataframeQuery::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
