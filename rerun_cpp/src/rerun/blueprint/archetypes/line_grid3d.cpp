// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/archetypes/line_grid3d.fbs".

#include "line_grid3d.hpp"

#include "../../collection_adapter_builtins.hpp"

namespace rerun::blueprint::archetypes {
    LineGrid3D LineGrid3D::clear_fields() {
        auto archetype = LineGrid3D();
        archetype.visible =
            ComponentBatch::empty<rerun::blueprint::components::Visible>(Descriptor_visible)
                .value_or_throw();
        archetype.spacing =
            ComponentBatch::empty<rerun::blueprint::components::GridSpacing>(Descriptor_spacing)
                .value_or_throw();
        archetype.plane =
            ComponentBatch::empty<rerun::components::Plane3D>(Descriptor_plane).value_or_throw();
        archetype.stroke_width =
            ComponentBatch::empty<rerun::components::StrokeWidth>(Descriptor_stroke_width)
                .value_or_throw();
        archetype.color =
            ComponentBatch::empty<rerun::components::Color>(Descriptor_color).value_or_throw();
        return archetype;
    }
} // namespace rerun::blueprint::archetypes

namespace rerun {

    Result<std::vector<ComponentBatch>> AsComponents<blueprint::archetypes::LineGrid3D>::serialize(
        const blueprint::archetypes::LineGrid3D& archetype
    ) {
        using namespace blueprint::archetypes;
        std::vector<ComponentBatch> cells;
        cells.reserve(6);

        if (archetype.visible.has_value()) {
            cells.push_back(archetype.visible.value());
        }
        if (archetype.spacing.has_value()) {
            cells.push_back(archetype.spacing.value());
        }
        if (archetype.plane.has_value()) {
            cells.push_back(archetype.plane.value());
        }
        if (archetype.stroke_width.has_value()) {
            cells.push_back(archetype.stroke_width.value());
        }
        if (archetype.color.has_value()) {
            cells.push_back(archetype.color.value());
        }
        {
            auto indicator = LineGrid3D::IndicatorComponent();
            auto result = ComponentBatch::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
