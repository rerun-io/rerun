// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/space_view_component.fbs".

#include "space_view_component.hpp"

#include "../datatypes/entity_path.hpp"
#include "../datatypes/uuid.hpp"

#include <arrow/builder.h>
#include <arrow/type_fwd.h>

namespace rerun::blueprint {}

namespace rerun {
    const std::shared_ptr<arrow::DataType>& Loggable<blueprint::SpaceViewComponent>::arrow_datatype(
    ) {
        static const auto datatype = arrow::struct_({
            arrow::field("display_name", arrow::utf8(), false),
            arrow::field("class_identifier", arrow::utf8(), false),
            arrow::field(
                "space_origin",
                Loggable<rerun::datatypes::EntityPath>::arrow_datatype(),
                false
            ),
            arrow::field("entities_determined_by_user", arrow::boolean(), false),
            arrow::field(
                "contents",
                arrow::list(
                    arrow::field("item", Loggable<rerun::datatypes::Uuid>::arrow_datatype(), false)
                ),
                false
            ),
        });
        return datatype;
    }

    rerun::Error Loggable<blueprint::SpaceViewComponent>::fill_arrow_array_builder(
        arrow::StructBuilder* builder, const blueprint::SpaceViewComponent* elements,
        size_t num_elements
    ) {
        if (builder == nullptr) {
            return rerun::Error(ErrorCode::UnexpectedNullArgument, "Passed array builder is null.");
        }
        if (elements == nullptr) {
            return rerun::Error(
                ErrorCode::UnexpectedNullArgument,
                "Cannot serialize null pointer to arrow array."
            );
        }

        {
            auto field_builder = static_cast<arrow::StringBuilder*>(builder->field_builder(0));
            ARROW_RETURN_NOT_OK(field_builder->Reserve(static_cast<int64_t>(num_elements)));
            for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
                ARROW_RETURN_NOT_OK(field_builder->Append(elements[elem_idx].display_name));
            }
        }
        {
            auto field_builder = static_cast<arrow::StringBuilder*>(builder->field_builder(1));
            ARROW_RETURN_NOT_OK(field_builder->Reserve(static_cast<int64_t>(num_elements)));
            for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
                ARROW_RETURN_NOT_OK(field_builder->Append(elements[elem_idx].class_identifier));
            }
        }
        {
            auto field_builder = static_cast<arrow::StringBuilder*>(builder->field_builder(2));
            ARROW_RETURN_NOT_OK(field_builder->Reserve(static_cast<int64_t>(num_elements)));
            for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
                RR_RETURN_NOT_OK(Loggable<rerun::datatypes::EntityPath>::fill_arrow_array_builder(
                    field_builder,
                    &elements[elem_idx].space_origin,
                    1
                ));
            }
        }
        {
            auto field_builder = static_cast<arrow::BooleanBuilder*>(builder->field_builder(3));
            ARROW_RETURN_NOT_OK(field_builder->Reserve(static_cast<int64_t>(num_elements)));
            for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
                ARROW_RETURN_NOT_OK(
                    field_builder->Append(elements[elem_idx].entities_determined_by_user)
                );
            }
        }
        {
            auto field_builder = static_cast<arrow::ListBuilder*>(builder->field_builder(4));
            auto value_builder = static_cast<arrow::StructBuilder*>(field_builder->value_builder());
            ARROW_RETURN_NOT_OK(field_builder->Reserve(static_cast<int64_t>(num_elements)));
            ARROW_RETURN_NOT_OK(value_builder->Reserve(static_cast<int64_t>(num_elements * 2)));

            for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
                const auto& element = elements[elem_idx];
                ARROW_RETURN_NOT_OK(field_builder->Append());
                if (element.contents.data()) {
                    RR_RETURN_NOT_OK(Loggable<rerun::datatypes::Uuid>::fill_arrow_array_builder(
                        value_builder,
                        element.contents.data(),
                        element.contents.size()
                    ));
                }
            }
        }
        ARROW_RETURN_NOT_OK(builder->AppendValues(static_cast<int64_t>(num_elements), nullptr));

        return Error::ok();
    }

    Result<std::shared_ptr<arrow::Array>> Loggable<blueprint::SpaceViewComponent>::to_arrow(
        const blueprint::SpaceViewComponent* instances, size_t num_instances
    ) {
        // TODO(andreas): Allow configuring the memory pool.
        arrow::MemoryPool* pool = arrow::default_memory_pool();
        auto datatype = arrow_datatype();

        ARROW_ASSIGN_OR_RAISE(auto builder, arrow::MakeBuilder(datatype, pool))
        if (instances && num_instances > 0) {
            RR_RETURN_NOT_OK(Loggable<blueprint::SpaceViewComponent>::fill_arrow_array_builder(
                static_cast<arrow::StructBuilder*>(builder.get()),
                instances,
                num_instances
            ));
        }
        std::shared_ptr<arrow::Array> array;
        ARROW_RETURN_NOT_OK(builder->Finish(&array));
        return array;
    }
} // namespace rerun
