// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/space_view_maximized.fbs".

#include "space_view_maximized.hpp"

#include <arrow/builder.h>
#include <arrow/type_fwd.h>

namespace rerun::blueprint {
    const std::shared_ptr<arrow::DataType>& SpaceViewMaximized::arrow_datatype() {
        static const auto datatype = arrow::list(arrow::field("item", arrow::uint8(), false));
        return datatype;
    }

    rerun::Error SpaceViewMaximized::fill_arrow_array_builder(
        arrow::ListBuilder* builder, const SpaceViewMaximized* elements, size_t num_elements
    ) {
        if (builder == nullptr) {
            return rerun::Error(ErrorCode::UnexpectedNullArgument, "Passed array builder is null.");
        }
        if (elements == nullptr) {
            return rerun::Error(
                ErrorCode::UnexpectedNullArgument,
                "Cannot serialize null pointer to arrow array."
            );
        }

        auto value_builder = static_cast<arrow::UInt8Builder*>(builder->value_builder());
        ARROW_RETURN_NOT_OK(builder->Reserve(static_cast<int64_t>(num_elements)));
        ARROW_RETURN_NOT_OK(value_builder->Reserve(static_cast<int64_t>(num_elements * 1)));

        for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
            const auto& element = elements[elem_idx];
            if (element.id.has_value()) {
                ARROW_RETURN_NOT_OK(builder->Append());
                ARROW_RETURN_NOT_OK(value_builder->AppendValues(
                    element.id.value().data(),
                    static_cast<int64_t>(element.id.value().size()),
                    nullptr
                ));
            } else {
                ARROW_RETURN_NOT_OK(builder->AppendNull());
            }
        }

        return Error::ok();
    }
} // namespace rerun::blueprint
