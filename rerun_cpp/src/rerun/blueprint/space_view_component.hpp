// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/space_view_component.fbs".

#pragma once

#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>
#include <vector>

namespace arrow {
    class DataType;
    class MemoryPool;
    class StructBuilder;
} // namespace arrow

namespace rerun {
    namespace blueprint {
        /// **Blueprint**: A view of a space.
        ///
        /// Unstable. Used for the ongoing blueprint experimentations.
        struct SpaceViewComponent {
            std::vector<uint8_t> space_view;

          public:
            SpaceViewComponent() = default;

            SpaceViewComponent(std::vector<uint8_t> _space_view)
                : space_view(std::move(_space_view)) {}

            SpaceViewComponent& operator=(std::vector<uint8_t> _space_view) {
                space_view = std::move(_space_view);
                return *this;
            }

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static Result<std::shared_ptr<arrow::StructBuilder>> new_arrow_array_builder(
                arrow::MemoryPool* memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static Error fill_arrow_array_builder(
                arrow::StructBuilder* builder, const SpaceViewComponent* elements,
                size_t num_elements
            );
        };
    } // namespace blueprint
} // namespace rerun
