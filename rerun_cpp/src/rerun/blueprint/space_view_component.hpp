// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/space_view_component.fbs".

#pragma once

#include "../collection.hpp"
#include "../datatypes/entity_path.hpp"
#include "../datatypes/uuid.hpp"
#include "../result.hpp"

#include <cstdint>
#include <memory>
#include <string>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::blueprint {
    /// **Blueprint**: A view of a space.
    ///
    /// Unstable. Used for the ongoing blueprint experimentations.
    struct SpaceViewComponent {
        /// The name of the view.
        std::string display_name;

        /// The class of the view.
        std::string class_identifier;

        /// The "anchor point" of this space view.
        ///
        /// The transform at this path forms the reference point for all scene->world transforms in this space view.
        /// I.e. the position of this entity path in space forms the origin of the coordinate system in this space view.
        /// Furthermore, this is the primary indicator for heuristics on what entities we show in this space view.
        rerun::datatypes::EntityPath space_origin;

        /// True if the user is expected to add entities themselves. False otherwise.
        bool entities_determined_by_user;

        /// `BlueprintId`s of the `DataQuery`s that make up this `SpaceView`.
        ///
        /// It determines which entities are part of the spaceview.
        rerun::Collection<rerun::datatypes::Uuid> contents;

      public:
        SpaceViewComponent() = default;
    };
} // namespace rerun::blueprint

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::SpaceViewComponent> {
        static constexpr const char Name[] = "rerun.blueprint.SpaceViewComponent";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder, const blueprint::SpaceViewComponent* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::blueprint::SpaceViewComponent` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::SpaceViewComponent* instances, size_t num_instances
        );
    };
} // namespace rerun
