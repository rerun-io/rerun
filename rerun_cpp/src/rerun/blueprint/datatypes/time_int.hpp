// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/datatypes/time_int.fbs".

#pragma once

#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    /// \private
    template <typename T>
    class NumericBuilder;

    class Array;
    class DataType;
    class Int64Type;
    using Int64Builder = NumericBuilder<Int64Type>;
} // namespace arrow

namespace rerun::blueprint::datatypes {
    /// **Datatype**: A 64-bit number describing either nanoseconds OR sequence numbers.
    struct TimeInt {
        int64_t value;

      public:
        TimeInt() = default;

        TimeInt(int64_t value_) : value(value_) {}

        TimeInt& operator=(int64_t value_) {
            value = value_;
            return *this;
        }
    };
} // namespace rerun::blueprint::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::datatypes::TimeInt> {
        static constexpr const char Name[] = "rerun.blueprint.datatypes.TimeInt";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::Int64Builder* builder, const blueprint::datatypes::TimeInt* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::blueprint:: datatypes::TimeInt` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::datatypes::TimeInt* instances, size_t num_instances
        );
    };
} // namespace rerun
