// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/force_layout_simulation.fbs".

#pragma once

#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace arrow {
    class Array;
    class DataType;
    class StructBuilder;
} // namespace arrow

namespace rerun::blueprint::datatypes {
    /// **Datatype**: The parameters for a force layout simulation.
    struct ForceLayoutSimulation {
        /// Similar to the the temperature in a simulated annealing algorithm.
        double alpha;

        /// If `alpha` drops below this value, the simulation stops.
        double alpha_min;

        /// The rate at which `alpha` decreases after each iteration.
        double alpha_decay;

        /// The target value for `alpha`, must be in the range `[0, 1]`.
        double alpha_target;

        /// Acts as a damping factor for the velocity of nodes.
        double velocity_decay;

      public:
        ForceLayoutSimulation() = default;
    };
} // namespace rerun::blueprint::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::datatypes::ForceLayoutSimulation> {
        static constexpr const char Name[] = "rerun.blueprint.datatypes.ForceLayoutSimulation";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::blueprint:: datatypes::ForceLayoutSimulation` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::datatypes::ForceLayoutSimulation* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StructBuilder* builder,
            const blueprint::datatypes::ForceLayoutSimulation* elements, size_t num_elements
        );
    };
} // namespace rerun
