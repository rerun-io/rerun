// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/datatypes/utf8_list.fbs".

#include "utf8list.hpp"

#include <arrow/builder.h>
#include <arrow/type_fwd.h>

namespace rerun::blueprint::datatypes {}

namespace rerun {
    const std::shared_ptr<arrow::DataType>&
        Loggable<blueprint::datatypes::Utf8List>::arrow_datatype() {
        static const auto datatype = arrow::list(arrow::field("item", arrow::utf8(), false));
        return datatype;
    }

    Result<std::shared_ptr<arrow::Array>> Loggable<blueprint::datatypes::Utf8List>::to_arrow(
        const blueprint::datatypes::Utf8List* instances, size_t num_instances
    ) {
        // TODO(andreas): Allow configuring the memory pool.
        arrow::MemoryPool* pool = arrow::default_memory_pool();
        auto datatype = arrow_datatype();

        ARROW_ASSIGN_OR_RAISE(auto builder, arrow::MakeBuilder(datatype, pool))
        if (instances && num_instances > 0) {
            RR_RETURN_NOT_OK(Loggable<blueprint::datatypes::Utf8List>::fill_arrow_array_builder(
                static_cast<arrow::ListBuilder*>(builder.get()),
                instances,
                num_instances
            ));
        }
        std::shared_ptr<arrow::Array> array;
        ARROW_RETURN_NOT_OK(builder->Finish(&array));
        return array;
    }

    rerun::Error Loggable<blueprint::datatypes::Utf8List>::fill_arrow_array_builder(
        arrow::ListBuilder* builder, const blueprint::datatypes::Utf8List* elements,
        size_t num_elements
    ) {
        if (builder == nullptr) {
            return rerun::Error(ErrorCode::UnexpectedNullArgument, "Passed array builder is null.");
        }
        if (elements == nullptr) {
            return rerun::Error(
                ErrorCode::UnexpectedNullArgument,
                "Cannot serialize null pointer to arrow array."
            );
        }

        auto value_builder = static_cast<arrow::StringBuilder*>(builder->value_builder());
        ARROW_RETURN_NOT_OK(builder->Reserve(static_cast<int64_t>(num_elements)));
        ARROW_RETURN_NOT_OK(value_builder->Reserve(static_cast<int64_t>(num_elements * 2)));

        for (size_t elem_idx = 0; elem_idx < num_elements; elem_idx += 1) {
            const auto& element = elements[elem_idx];
            ARROW_RETURN_NOT_OK(builder->Append());
            for (size_t item_idx = 0; item_idx < element.value.size(); item_idx += 1) {
                ARROW_RETURN_NOT_OK(value_builder->Append(element.value[item_idx]));
            }
        }

        return Error::ok();
    }
} // namespace rerun
