// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/row_shares.fbs".

#pragma once

#include "../../collection.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>

namespace arrow {
    class Array;
    class DataType;
    class ListBuilder;
} // namespace arrow

namespace rerun::blueprint::components {
    /// **Component**: The layout shares of each row in the container.
    struct RowShares {
        /// The layout shares of each row in the container.
        rerun::Collection<float> shares;

      public:
        RowShares() = default;

        RowShares(rerun::Collection<float> shares_) : shares(std::move(shares_)) {}

        RowShares& operator=(rerun::Collection<float> shares_) {
            shares = std::move(shares_);
            return *this;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::components::RowShares> {
        static constexpr const char Name[] = "rerun.blueprint.components.RowShares";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::ListBuilder* builder, const blueprint::components::RowShares* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::blueprint:: components::RowShares` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::RowShares* instances, size_t num_instances
        );
    };
} // namespace rerun
