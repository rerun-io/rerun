// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/filter_by_event_active.fbs".

#pragma once

#include "../../datatypes/bool.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Whether the filter by event feature of the dataframe view is active.
    struct FilterByEventActive {
        rerun::datatypes::Bool active;

      public:
        FilterByEventActive() = default;

        FilterByEventActive(rerun::datatypes::Bool active_) : active(active_) {}

        FilterByEventActive& operator=(rerun::datatypes::Bool active_) {
            active = active_;
            return *this;
        }

        FilterByEventActive(bool value_) : active(value_) {}

        FilterByEventActive& operator=(bool value_) {
            active = value_;
            return *this;
        }

        /// Cast to the underlying Bool datatype
        operator rerun::datatypes::Bool() const {
            return active;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(
        sizeof(rerun::datatypes::Bool) == sizeof(blueprint::components::FilterByEventActive)
    );

    /// \private
    template <>
    struct Loggable<blueprint::components::FilterByEventActive> {
        static constexpr const char Name[] = "rerun.blueprint.components.FilterByEventActive";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Bool>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::FilterByEventActive` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::FilterByEventActive* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Bool>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Bool>::to_arrow(
                    &instances->active,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
