// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/query_expression.fbs".

#pragma once

#include "../../datatypes/utf8.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>
#include <string>
#include <utility>

namespace arrow {
    class Array;
    class DataType;
    class StringBuilder;
} // namespace arrow

namespace rerun::blueprint::components {
    /// **Component**: A way to filter a set of `EntityPath`s.
    ///
    /// This implements as simple set of include/exclude rules:
    ///
    /// ```diff
    /// + /world/**           # add everything…
    /// - /world/roads/**     # …but remove all roads…
    /// + /world/roads/main   # …but show main road
    /// ```
    ///
    /// If there is multiple matching rules, the most specific rule wins.
    /// If there are multiple rules of the same specificity, the last one wins.
    /// If no rules match, the path is excluded.
    ///
    /// The `/**` suffix matches the whole subtree, i.e. self and any child, recursively
    /// (`/world/**` matches both `/world` and `/world/car/driver`).
    /// Other uses of `*` are not (yet) supported.
    ///
    /// Internally, `EntityPathFilter` sorts the rule by entity path, with recursive coming before non-recursive.
    /// This means the last matching rule is also the most specific one.
    /// For instance:
    ///
    /// ```diff
    /// + /world/**
    /// - /world
    /// - /world/car/**
    /// + /world/car/driver
    /// ```
    ///
    /// The last rule matching `/world/car/driver` is `+ /world/car/driver`, so it is included.
    /// The last rule matching `/world/car/hood` is `- /world/car/**`, so it is excluded.
    /// The last rule matching `/world` is `- /world`, so it is excluded.
    /// The last rule matching `/world/house` is `+ /world/**`, so it is included.
    ///
    /// Unstable. Used for the ongoing blueprint experimentations.
    struct QueryExpression {
        rerun::datatypes::Utf8 filter;

      public:
        QueryExpression() = default;

        QueryExpression(rerun::datatypes::Utf8 filter_) : filter(std::move(filter_)) {}

        QueryExpression& operator=(rerun::datatypes::Utf8 filter_) {
            filter = std::move(filter_);
            return *this;
        }

        QueryExpression(std::string value_) : filter(std::move(value_)) {}

        QueryExpression& operator=(std::string value_) {
            filter = std::move(value_);
            return *this;
        }

        /// Cast to the underlying Utf8 datatype
        operator rerun::datatypes::Utf8() const {
            return filter;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::components::QueryExpression> {
        static constexpr const char Name[] = "rerun.blueprint.components.QueryExpression";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StringBuilder* builder, const blueprint::components::QueryExpression* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::blueprint:: components::QueryExpression` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::QueryExpression* instances, size_t num_instances
        );
    };
} // namespace rerun
