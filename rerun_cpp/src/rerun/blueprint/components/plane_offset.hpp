// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/plane_offset.fbs".

#pragma once

#include "../../datatypes/float32.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Offset of a plane along its normal in scene units.
    struct PlaneOffset {
        /// Offset of a plane along its normal in scene units.
        rerun::datatypes::Float32 distance;

      public:
        PlaneOffset() = default;

        PlaneOffset(rerun::datatypes::Float32 distance_) : distance(distance_) {}

        PlaneOffset& operator=(rerun::datatypes::Float32 distance_) {
            distance = distance_;
            return *this;
        }

        PlaneOffset(float value_) : distance(value_) {}

        PlaneOffset& operator=(float value_) {
            distance = value_;
            return *this;
        }

        /// Cast to the underlying Float32 datatype
        operator rerun::datatypes::Float32() const {
            return distance;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Float32) == sizeof(blueprint::components::PlaneOffset));

    /// \private
    template <>
    struct Loggable<blueprint::components::PlaneOffset> {
        static constexpr const char Name[] = "rerun.blueprint.components.PlaneOffset";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Float32>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::PlaneOffset` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::PlaneOffset* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Float32>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Float32>::to_arrow(
                    &instances->distance,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
