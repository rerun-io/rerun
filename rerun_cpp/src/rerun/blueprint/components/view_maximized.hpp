// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/view_maximized.fbs".

#pragma once

#include "../../component_descriptor.hpp"
#include "../../datatypes/uuid.hpp"
#include "../../result.hpp"

#include <array>
#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Whether a view is maximized.
    struct ViewMaximized {
        rerun::datatypes::Uuid view_id;

      public:
        ViewMaximized() = default;

        ViewMaximized(rerun::datatypes::Uuid view_id_) : view_id(view_id_) {}

        ViewMaximized& operator=(rerun::datatypes::Uuid view_id_) {
            view_id = view_id_;
            return *this;
        }

        ViewMaximized(std::array<uint8_t, 16> bytes_) : view_id(bytes_) {}

        ViewMaximized& operator=(std::array<uint8_t, 16> bytes_) {
            view_id = bytes_;
            return *this;
        }

        /// Cast to the underlying Uuid datatype
        operator rerun::datatypes::Uuid() const {
            return view_id;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Uuid) == sizeof(blueprint::components::ViewMaximized));

    /// \private
    template <>
    struct Loggable<blueprint::components::ViewMaximized> {
        static constexpr ComponentDescriptor Descriptor =
            "rerun.blueprint.components.ViewMaximized";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Uuid>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::ViewMaximized` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::ViewMaximized* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Uuid>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Uuid>::to_arrow(
                    &instances->view_id,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
