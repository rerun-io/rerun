// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/force_position_y.fbs".

#pragma once

#include "../../blueprint/datatypes/force_position_y.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    struct ForcePositionY {
        rerun::blueprint::datatypes::ForcePositionY position_y;

      public:
        ForcePositionY() = default;

        ForcePositionY(rerun::blueprint::datatypes::ForcePositionY position_y_)
            : position_y(position_y_) {}

        ForcePositionY& operator=(rerun::blueprint::datatypes::ForcePositionY position_y_) {
            position_y = position_y_;
            return *this;
        }

        /// Cast to the underlying ForcePositionY datatype
        operator rerun::blueprint::datatypes::ForcePositionY() const {
            return position_y;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(
        sizeof(rerun::blueprint::datatypes::ForcePositionY) ==
        sizeof(blueprint::components::ForcePositionY)
    );

    /// \private
    template <>
    struct Loggable<blueprint::components::ForcePositionY> {
        static constexpr const char Name[] = "rerun.blueprint.components.ForcePositionY";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::blueprint::datatypes::ForcePositionY>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::ForcePositionY` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::ForcePositionY* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::blueprint::datatypes::ForcePositionY>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::blueprint::datatypes::ForcePositionY>::to_arrow(
                    &instances->position_y,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
