// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/link_axis.fbs".

#pragma once

#include "../../component_descriptor.hpp"
#include "../../datatypes/bool.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: If true, link the X/time axis to all other plots where this is enabled.
    ///
    /// âš  **This type is _unstable_ and may change significantly in a way that the data won't be backwards compatible.**
    ///
    struct LinkAxis {
        rerun::datatypes::Bool link_axis;

      public:
        LinkAxis() = default;

        LinkAxis(rerun::datatypes::Bool link_axis_) : link_axis(link_axis_) {}

        LinkAxis& operator=(rerun::datatypes::Bool link_axis_) {
            link_axis = link_axis_;
            return *this;
        }

        LinkAxis(bool value_) : link_axis(value_) {}

        LinkAxis& operator=(bool value_) {
            link_axis = value_;
            return *this;
        }

        /// Cast to the underlying Bool datatype
        operator rerun::datatypes::Bool() const {
            return link_axis;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Bool) == sizeof(blueprint::components::LinkAxis));

    /// \private
    template <>
    struct Loggable<blueprint::components::LinkAxis> {
        static constexpr ComponentDescriptor Descriptor = "rerun.blueprint.components.LinkAxis";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Bool>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::LinkAxis` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::LinkAxis* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::datatypes::Bool>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::datatypes::Bool>::to_arrow(
                    &instances->link_axis,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
