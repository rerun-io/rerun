// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/auto_space_views.fbs".

#pragma once

#include "../../datatypes/bool.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Whether or not space views should be created automatically.
    struct AutoSpaceViews {
        rerun::datatypes::Bool auto_space_views;

      public:
        AutoSpaceViews() = default;

        AutoSpaceViews(rerun::datatypes::Bool auto_space_views_)
            : auto_space_views(auto_space_views_) {}

        AutoSpaceViews& operator=(rerun::datatypes::Bool auto_space_views_) {
            auto_space_views = auto_space_views_;
            return *this;
        }

        AutoSpaceViews(bool value_) : auto_space_views(value_) {}

        AutoSpaceViews& operator=(bool value_) {
            auto_space_views = value_;
            return *this;
        }

        /// Cast to the underlying Bool datatype
        operator rerun::datatypes::Bool() const {
            return auto_space_views;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(sizeof(rerun::datatypes::Bool) == sizeof(blueprint::components::AutoSpaceViews));

    /// \private
    template <>
    struct Loggable<blueprint::components::AutoSpaceViews> {
        static constexpr const char Name[] = "rerun.blueprint.components.AutoSpaceViews";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Bool>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::AutoSpaceViews` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::AutoSpaceViews* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::Bool>::to_arrow(
                &instances->auto_space_views,
                num_instances
            );
        }
    };
} // namespace rerun
