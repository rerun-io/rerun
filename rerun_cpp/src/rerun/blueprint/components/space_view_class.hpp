// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/space_view_class.fbs".

#pragma once

#include "../../datatypes/utf8.hpp"
#include "../../result.hpp"
#include "space_view_class.hpp"

#include <cstdint>
#include <memory>
#include <string>
#include <utility>

namespace arrow {
    class StringBuilder;
}

namespace rerun::blueprint::components {
    /// **Component**: The class of a `SpaceView`.
    struct SpaceViewClass {
        rerun::datatypes::Utf8 value;

      public:
        SpaceViewClass() = default;

        SpaceViewClass(rerun::datatypes::Utf8 value_) : value(std::move(value_)) {}

        SpaceViewClass& operator=(rerun::datatypes::Utf8 value_) {
            value = std::move(value_);
            return *this;
        }

        SpaceViewClass(std::string value_) : value(std::move(value_)) {}

        SpaceViewClass& operator=(std::string value_) {
            value = std::move(value_);
            return *this;
        }

        /// Cast to the underlying Utf8 datatype
        operator rerun::datatypes::Utf8() const {
            return value;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(
        sizeof(rerun::datatypes::Utf8) == sizeof(rerun::blueprint::components::SpaceViewClass)
    );

    /// \private
    template <>
    struct Loggable<blueprint::components::SpaceViewClass> {
        static constexpr const char Name[] = "rerun.blueprint.components.SpaceViewClass";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::datatypes::Utf8>::arrow_datatype();
        }

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::StringBuilder* builder, const blueprint::components::SpaceViewClass* elements,
            size_t num_elements
        ) {
            return Loggable<rerun::datatypes::Utf8>::fill_arrow_array_builder(
                builder,
                reinterpret_cast<const rerun::datatypes::Utf8*>(elements),
                num_elements
            );
        }

        /// Serializes an array of `rerun::blueprint:: components::SpaceViewClass` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::SpaceViewClass* instances, size_t num_instances
        ) {
            return Loggable<rerun::datatypes::Utf8>::to_arrow(
                reinterpret_cast<const rerun::datatypes::Utf8*>(instances),
                num_instances
            );
        }
    };
} // namespace rerun
