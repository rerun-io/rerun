// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/included_space_views.fbs".

#pragma once

#include "../../collection.hpp"
#include "../../datatypes/uuid.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>

namespace arrow {
    class Array;
    class DataType;
    class ListBuilder;
} // namespace arrow

namespace rerun::blueprint::components {
    /// **Component**: The id of a `SpaceView`.
    ///
    /// Unstable. Used for the ongoing blueprint experimentations.
    struct IncludedSpaceViews {
        rerun::Collection<rerun::datatypes::Uuid> space_view_ids;

      public:
        IncludedSpaceViews() = default;

        IncludedSpaceViews(rerun::Collection<rerun::datatypes::Uuid> space_view_ids_)
            : space_view_ids(std::move(space_view_ids_)) {}

        IncludedSpaceViews& operator=(rerun::Collection<rerun::datatypes::Uuid> space_view_ids_) {
            space_view_ids = std::move(space_view_ids_);
            return *this;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::components::IncludedSpaceViews> {
        static constexpr const char Name[] = "rerun.blueprint.components.IncludedSpaceViews";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::ListBuilder* builder, const blueprint::components::IncludedSpaceViews* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::blueprint:: components::IncludedSpaceViews` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::IncludedSpaceViews* instances, size_t num_instances
        );
    };
} // namespace rerun
