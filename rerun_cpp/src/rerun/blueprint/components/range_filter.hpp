// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/range_filter.fbs".

#pragma once

#include "../../blueprint/datatypes/range_filter.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    /// **Component**: Describe a component column to be selected in the dataframe view.
    struct RangeFilter {
        rerun::blueprint::datatypes::RangeFilter selected_columns;

      public:
        RangeFilter() = default;

        RangeFilter(rerun::blueprint::datatypes::RangeFilter selected_columns_)
            : selected_columns(selected_columns_) {}

        RangeFilter& operator=(rerun::blueprint::datatypes::RangeFilter selected_columns_) {
            selected_columns = selected_columns_;
            return *this;
        }

        /// Cast to the underlying RangeFilter datatype
        operator rerun::blueprint::datatypes::RangeFilter() const {
            return selected_columns;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(
        sizeof(rerun::blueprint::datatypes::RangeFilter) ==
        sizeof(blueprint::components::RangeFilter)
    );

    /// \private
    template <>
    struct Loggable<blueprint::components::RangeFilter> {
        static constexpr const char Name[] = "rerun.blueprint.components.RangeFilter";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::blueprint::datatypes::RangeFilter>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::RangeFilter` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::RangeFilter* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::blueprint::datatypes::RangeFilter>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::blueprint::datatypes::RangeFilter>::to_arrow(
                    &instances->selected_columns,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
