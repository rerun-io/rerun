// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/included_contents.fbs".

#pragma once

#include "../../collection.hpp"
#include "../../datatypes/entity_path.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>
#include <utility>

namespace arrow {
    class Array;
    class DataType;
    class ListBuilder;
} // namespace arrow

namespace rerun::blueprint::components {
    /// **Component**: All the contents in the container.
    struct IncludedContents {
        /// List of the contents by EntityPath.
        ///
        /// This must be a path in the blueprint store.
        /// Typically structure as `<blueprint_registry>/<uuid>`.
        rerun::Collection<rerun::datatypes::EntityPath> contents;

      public:
        IncludedContents() = default;

        IncludedContents(rerun::Collection<rerun::datatypes::EntityPath> contents_)
            : contents(std::move(contents_)) {}

        IncludedContents& operator=(rerun::Collection<rerun::datatypes::EntityPath> contents_) {
            contents = std::move(contents_);
            return *this;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<blueprint::components::IncludedContents> {
        static constexpr const char Name[] = "rerun.blueprint.components.IncludedContents";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::ListBuilder* builder, const blueprint::components::IncludedContents* elements,
            size_t num_elements
        );

        /// Serializes an array of `rerun::blueprint:: components::IncludedContents` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::IncludedContents* instances, size_t num_instances
        );
    };
} // namespace rerun
