// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/blueprint/components/space_view_maximized.fbs".

#include "space_view_maximized.hpp"

#include "../../datatypes/uuid.hpp"

#include <arrow/builder.h>
#include <arrow/type_fwd.h>

namespace rerun::blueprint::components {}

namespace rerun {
    const std::shared_ptr<arrow::DataType>&
        Loggable<blueprint::components::SpaceViewMaximized>::arrow_datatype() {
        static const auto datatype = Loggable<rerun::datatypes::Uuid>::arrow_datatype();
        return datatype;
    }

    rerun::Error Loggable<blueprint::components::SpaceViewMaximized>::fill_arrow_array_builder(
        arrow::StructBuilder* builder, const blueprint::components::SpaceViewMaximized* elements,
        size_t num_elements
    ) {
        (void)builder;
        (void)elements;
        (void)num_elements;
        if (true) {
            return rerun::Error(
                ErrorCode::NotImplemented,
                "TODO(andreas) Handle nullable extensions"
            );
        }

        return Error::ok();
    }

    Result<std::shared_ptr<arrow::Array>>
        Loggable<blueprint::components::SpaceViewMaximized>::to_arrow(
            const blueprint::components::SpaceViewMaximized* instances, size_t num_instances
        ) {
        // TODO(andreas): Allow configuring the memory pool.
        arrow::MemoryPool* pool = arrow::default_memory_pool();
        auto datatype = arrow_datatype();

        ARROW_ASSIGN_OR_RAISE(auto builder, arrow::MakeBuilder(datatype, pool))
        if (instances && num_instances > 0) {
            RR_RETURN_NOT_OK(
                Loggable<blueprint::components::SpaceViewMaximized>::fill_arrow_array_builder(
                    static_cast<arrow::StructBuilder*>(builder.get()),
                    instances,
                    num_instances
                )
            );
        }
        std::shared_ptr<arrow::Array> array;
        ARROW_RETURN_NOT_OK(builder->Finish(&array));
        return array;
    }
} // namespace rerun
