// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/blueprint/components/force_link.fbs".

#pragma once

#include "../../blueprint/datatypes/force_link.hpp"
#include "../../result.hpp"

#include <cstdint>
#include <memory>

namespace rerun::blueprint::components {
    struct ForceLink {
        rerun::blueprint::datatypes::ForceLink center;

      public:
        ForceLink() = default;

        ForceLink(rerun::blueprint::datatypes::ForceLink center_) : center(center_) {}

        ForceLink& operator=(rerun::blueprint::datatypes::ForceLink center_) {
            center = center_;
            return *this;
        }

        /// Cast to the underlying ForceLink datatype
        operator rerun::blueprint::datatypes::ForceLink() const {
            return center;
        }
    };
} // namespace rerun::blueprint::components

namespace rerun {
    static_assert(
        sizeof(rerun::blueprint::datatypes::ForceLink) == sizeof(blueprint::components::ForceLink)
    );

    /// \private
    template <>
    struct Loggable<blueprint::components::ForceLink> {
        static constexpr const char Name[] = "rerun.blueprint.components.ForceLink";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype() {
            return Loggable<rerun::blueprint::datatypes::ForceLink>::arrow_datatype();
        }

        /// Serializes an array of `rerun::blueprint:: components::ForceLink` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const blueprint::components::ForceLink* instances, size_t num_instances
        ) {
            if (num_instances == 0) {
                return Loggable<rerun::blueprint::datatypes::ForceLink>::to_arrow(nullptr, 0);
            } else if (instances == nullptr) {
                return rerun::Error(
                    ErrorCode::UnexpectedNullArgument,
                    "Passed array instances is null when num_elements> 0."
                );
            } else {
                return Loggable<rerun::blueprint::datatypes::ForceLink>::to_arrow(
                    &instances->center,
                    num_instances
                );
            }
        }
    };
} // namespace rerun
