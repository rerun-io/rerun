// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/components/disconnected_space.fbs"

#pragma once

#include "../data_cell.hpp"

#include <arrow/type_fwd.h>
#include <cstdint>
#include <utility>

namespace rr {
    namespace components {
        /// Specifies that the entity path at which this is logged is disconnected from its parent.
        ///
        /// This is useful for specifying that a subgraph is independent of the rest of the scene.
        ///
        /// If a transform or pinhole is logged on the same path, this component will be ignored.
        struct DisconnectedSpace {
            bool is_disconnected;

            /// Name of the component, used for serialization.
            static const char* NAME;

          public:
            DisconnectedSpace(bool is_disconnected) : is_disconnected(std::move(is_disconnected)) {}

            /// Returns the arrow data type this type corresponds to.
            static const std::shared_ptr<arrow::DataType>& to_arrow_datatype();

            /// Creates a new array builder with an array of this type.
            static arrow::Result<std::shared_ptr<arrow::BooleanBuilder>> new_arrow_array_builder(
                arrow::MemoryPool* memory_pool
            );

            /// Fills an arrow array builder with an array of this type.
            static arrow::Status fill_arrow_array_builder(
                arrow::BooleanBuilder* builder, const DisconnectedSpace* elements,
                size_t num_elements
            );

            /// Creates a Rerun DataCell from an array of DisconnectedSpace components.
            static arrow::Result<rr::DataCell> to_data_cell(
                const DisconnectedSpace* instances, size_t num_instances
            );
        };
    } // namespace components
} // namespace rr
