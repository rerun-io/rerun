// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/scale3d.fbs"

#pragma once

#include <cstdint>
#include <utility>

#include "../datatypes/vec3d.hpp"

namespace rr {
    namespace datatypes {
        namespace detail {
            enum Scale3DTag {
                Tag_ThreeD,
                Tag_Uniform,
            };

            union Scale3DData {
                /// Individual scaling factors for each axis, distorting the original object.
                rr::datatypes::Vec3D three_d;

                /// Uniform scaling factor along all axis.
                float uniform;

                ~Scale3DData() {}
            };

        } // namespace detail

        /// 3D scaling factor, part of a transform representation.
        struct Scale3D {
          private:
            detail::Scale3DTag _tag;
            detail::Scale3DData _data;

          public:
            ~Scale3D() {
                switch (this->_tag) {
                    case detail::Tag_ThreeD: {
                        typedef rr::datatypes::Vec3D TypeAlias;
                        _data.three_d.~TypeAlias();
                        break;
                    }
                    case detail::Tag_Uniform: {
                        typedef float TypeAlias;
                        _data.uniform.~TypeAlias();
                        break;
                    }
                }
            }
        };
    } // namespace datatypes
} // namespace rr
