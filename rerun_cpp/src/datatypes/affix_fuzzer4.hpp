// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/testing/datatypes/fuzzy.fbs"

#pragma once

#include <cstdint>
#include <cstring>
#include <optional>
#include <utility>
#include <vector>

#include "../datatypes/affix_fuzzer3.hpp"

namespace rr {
    namespace datatypes {
        namespace detail {
            enum class AffixFuzzer4Tag {
                NONE = 0, // Makes it possible to implement move semantics
                single_required,
                many_required,
                many_optional,
            };

            union AffixFuzzer4Data {
                rr::datatypes::AffixFuzzer3 single_required;

                std::vector<rr::datatypes::AffixFuzzer3> many_required;

                std::optional<std::vector<rr::datatypes::AffixFuzzer3>> many_optional;

                AffixFuzzer4Data() {}

                ~AffixFuzzer4Data() {}

                void swap(AffixFuzzer4Data& other) noexcept {
                    char temp[sizeof(AffixFuzzer4Data)];
                    std::memcpy(temp, this, sizeof(AffixFuzzer4Data));
                    std::memcpy(this, &other, sizeof(AffixFuzzer4Data));
                    std::memcpy(&other, temp, sizeof(AffixFuzzer4Data));
                }
            };
        } // namespace detail

        struct AffixFuzzer4 {
          private:
            detail::AffixFuzzer4Tag _tag;
            detail::AffixFuzzer4Data _data;

            AffixFuzzer4() : _tag(detail::AffixFuzzer4Tag::NONE) {}

          public:
            AffixFuzzer4(AffixFuzzer4&& other) noexcept : _tag(detail::AffixFuzzer4Tag::NONE) {
                this->swap(other);
            }

            AffixFuzzer4& operator=(AffixFuzzer4&& other) noexcept {
                this->swap(other);
                return *this;
            }

            ~AffixFuzzer4() {
                switch (this->_tag) {
                    case detail::AffixFuzzer4Tag::NONE: {
                        break; // Nothing to destroy
                    }
                    case detail::AffixFuzzer4Tag::single_required: {
                        typedef rr::datatypes::AffixFuzzer3 TypeAlias;
                        _data.single_required.~TypeAlias();
                        break;
                    }
                    case detail::AffixFuzzer4Tag::many_required: {
                        typedef std::vector<rr::datatypes::AffixFuzzer3> TypeAlias;
                        _data.many_required.~TypeAlias();
                        break;
                    }
                    case detail::AffixFuzzer4Tag::many_optional: {
                        typedef std::optional<std::vector<rr::datatypes::AffixFuzzer3>> TypeAlias;
                        _data.many_optional.~TypeAlias();
                        break;
                    }
                }
            }

            void swap(AffixFuzzer4& other) noexcept {
                auto tag_temp = this->_tag;
                this->_tag = other._tag;
                other._tag = tag_temp;
                this->_data.swap(other._data);
            }
        };
    } // namespace datatypes
} // namespace rr
