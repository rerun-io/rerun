// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/testing/datatypes/fuzzy.fbs"

#pragma once

#include <cstdint>
#include <optional>
#include <utility>
#include <vector>

#include "../datatypes/affix_fuzzer3.hpp"

namespace rr {
    namespace datatypes {
        namespace detail {
            enum AffixFuzzer4Tag {
                Tag_single_required,
                Tag_many_required,
                Tag_many_optional,
            };

            union AffixFuzzer4Data {
                rr::datatypes::AffixFuzzer3 single_required;

                std::vector<rr::datatypes::AffixFuzzer3> many_required;

                std::optional<std::vector<rr::datatypes::AffixFuzzer3>> many_optional;

                ~AffixFuzzer4Data() {}
            };

        } // namespace detail

        struct AffixFuzzer4 {
          private:
            detail::AffixFuzzer4Tag _tag;
            detail::AffixFuzzer4Data _data;

          public:
            ~AffixFuzzer4() {
                switch (this->_tag) {
                    case detail::Tag_single_required: {
                        typedef rr::datatypes::AffixFuzzer3 TypeAlias;
                        _data.single_required.~TypeAlias();
                        break;
                    }
                    case detail::Tag_many_required: {
                        typedef std::vector<rr::datatypes::AffixFuzzer3> TypeAlias;
                        _data.many_required.~TypeAlias();
                        break;
                    }
                    case detail::Tag_many_optional: {
                        typedef std::optional<std::vector<rr::datatypes::AffixFuzzer3>> TypeAlias;
                        _data.many_optional.~TypeAlias();
                        break;
                    }
                }
            }
        };
    } // namespace datatypes
} // namespace rr
