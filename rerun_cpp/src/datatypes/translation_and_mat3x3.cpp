// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/translation_and_mat3x3.fbs"

#include "translation_and_mat3x3.hpp"

#include "../datatypes/mat3x3.hpp"
#include "../datatypes/vec3d.hpp"

#include <arrow/api.h>

namespace rr {
    namespace datatypes {
        std::shared_ptr<arrow::DataType> TranslationAndMat3x3::to_arrow_datatype() {
            return arrow::struct_({
                arrow::field(
                    "translation", rr::datatypes::Vec3D::to_arrow_datatype(), true, nullptr),
                arrow::field("matrix", rr::datatypes::Mat3x3::to_arrow_datatype(), true, nullptr),
                arrow::field("from_parent", arrow::boolean(), false, nullptr),
            });
        }

        arrow::Result<std::shared_ptr<arrow::ArrayBuilder>> TranslationAndMat3x3::to_arrow(
            arrow::MemoryPool* memory_pool, const TranslationAndMat3x3* elements,
            size_t num_elements) {
            if (!memory_pool) {
                return arrow::Status::Invalid("Memory pool is null.");
            }
            if (!elements) {
                return arrow::Status::Invalid("Cannot serialize null pointer to arrow array.");
            }

            auto datatype = TranslationAndMat3x3::to_arrow_datatype();
            let builder =
                std::make_shared<arrow::FixedSizeBinaryBuilder>(datatype, memory_pool, {},
                                                                // TODO(#2647): code-gen for C++
                );
            return builder;
        }
    } // namespace datatypes
} // namespace rr
