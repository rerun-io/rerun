// NOTE: This file was autogenerated by re_types_builder; DO NOT EDIT.
// Based on "crates/re_types/definitions/rerun/datatypes/transform3d.fbs"

#pragma once

#include <cstdint>
#include <cstring>

#include "../datatypes/translation_and_mat3x3.hpp"
#include "../datatypes/translation_rotation_scale3d.hpp"

namespace rr {
    namespace datatypes {
        namespace detail {
            enum class Transform3DTag {
                NONE = 0, // Makes it possible to implement move semantics
                TranslationAndMat3x3,
                TranslationRotationScale,
            };

            union Transform3DData {
                rr::datatypes::TranslationAndMat3x3 translation_and_mat3x3;

                rr::datatypes::TranslationRotationScale3D translation_rotation_scale;

                Transform3DData() {}

                ~Transform3DData() {}

                void swap(Transform3DData& other) noexcept {
                    char temp[sizeof(Transform3DData)];
                    std::memcpy(temp, this, sizeof(Transform3DData));
                    std::memcpy(this, &other, sizeof(Transform3DData));
                    std::memcpy(&other, temp, sizeof(Transform3DData));
                }
            };
        } // namespace detail

        /// Representation of a 3D affine transform.
        struct Transform3D {
          private:
            detail::Transform3DTag _tag;
            detail::Transform3DData _data;

            Transform3D() : _tag(detail::Transform3DTag::NONE) {}

          public:
            Transform3D(Transform3D&& other) noexcept : _tag(detail::Transform3DTag::NONE) {
                this->swap(other);
            }

            Transform3D& operator=(Transform3D&& other) noexcept {
                this->swap(other);
                return *this;
            }

            void swap(Transform3D& other) noexcept {
                auto tag_temp = this->_tag;
                this->_tag = other._tag;
                other._tag = tag_temp;
                this->_data.swap(other._data);
            }
        };
    } // namespace datatypes
} // namespace rr
