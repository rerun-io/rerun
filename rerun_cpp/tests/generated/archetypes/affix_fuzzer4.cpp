// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#include "affix_fuzzer4.hpp"

#include <rerun/indicator_component.hpp>

namespace rerun {
    namespace archetypes {
        const char AffixFuzzer4::INDICATOR_COMPONENT_NAME[] =
            "rerun.testing.components.AffixFuzzer4Indicator";

        Result<std::vector<SerializedComponentBatch>> AffixFuzzer4::serialize() const {
            std::vector<SerializedComponentBatch> cells;
            cells.reserve(18);

            if (fuzz2101.has_value()) {
                auto result = fuzz2101.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2102.has_value()) {
                auto result = fuzz2102.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2103.has_value()) {
                auto result = fuzz2103.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2104.has_value()) {
                auto result = fuzz2104.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2105.has_value()) {
                auto result = fuzz2105.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2106.has_value()) {
                auto result = fuzz2106.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2107.has_value()) {
                auto result = fuzz2107.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2108.has_value()) {
                auto result = fuzz2108.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2109.has_value()) {
                auto result = fuzz2109.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2110.has_value()) {
                auto result = fuzz2110.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2111.has_value()) {
                auto result = fuzz2111.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2112.has_value()) {
                auto result = fuzz2112.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2113.has_value()) {
                auto result = fuzz2113.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2114.has_value()) {
                auto result = fuzz2114.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2115.has_value()) {
                auto result = fuzz2115.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2116.has_value()) {
                auto result = fuzz2116.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2117.has_value()) {
                auto result = fuzz2117.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            if (fuzz2118.has_value()) {
                auto result = fuzz2118.value().serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }
            {
                components::IndicatorComponent<AffixFuzzer4::INDICATOR_COMPONENT_NAME> indicator;
                auto result = ComponentBatch(indicator).serialize();
                RR_RETURN_NOT_OK(result.error);
                cells.emplace_back(std::move(result.value));
            }

            return cells;
        }
    } // namespace archetypes
} // namespace rerun
