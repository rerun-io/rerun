// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#include "affix_fuzzer3.hpp"

#include <rerun/collection_adapter_builtins.hpp>

namespace rerun::archetypes {}

namespace rerun {

    Result<std::vector<DataCell>> AsComponents<archetypes::AffixFuzzer3>::serialize(
        const archetypes::AffixFuzzer3& archetype
    ) {
        using namespace archetypes;
        std::vector<DataCell> cells;
        cells.reserve(19);

        if (archetype.fuzz2001.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2001.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2002.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2002.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2003.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2003.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2004.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2004.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2005.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2005.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2006.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2006.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2007.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2007.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2008.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2008.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2009.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2009.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2010.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2010.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2011.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2011.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2012.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2012.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2013.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2013.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2014.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2014.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2015.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2015.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2016.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2016.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2017.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2017.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        if (archetype.fuzz2018.has_value()) {
            auto result = DataCell::from_loggable(archetype.fuzz2018.value());
            RR_RETURN_NOT_OK(result.error);
            cells.push_back(std::move(result.value));
        }
        {
            auto indicator = AffixFuzzer3::IndicatorComponent();
            auto result = DataCell::from_loggable(indicator);
            RR_RETURN_NOT_OK(result.error);
            cells.emplace_back(std::move(result.value));
        }

        return cells;
    }
} // namespace rerun
