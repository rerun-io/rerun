// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#include "affix_fuzzer3.hpp"

#include <rerun/indicator_component.hpp>

namespace rerun {
    namespace archetypes {
        const char AffixFuzzer3::INDICATOR_COMPONENT_NAME[] =
            "rerun.testing.components.AffixFuzzer3Indicator";

        AnonymousComponentBatch AffixFuzzer3::indicator() {
            return ComponentBatch<
                components::IndicatorComponent<AffixFuzzer3::INDICATOR_COMPONENT_NAME>>(nullptr, 1);
        }

        std::vector<AnonymousComponentBatch> AffixFuzzer3::as_component_batches() const {
            std::vector<AnonymousComponentBatch> comp_batches;
            comp_batches.reserve(18);

            if (fuzz2001.has_value()) {
                comp_batches.emplace_back(fuzz2001.value());
            }
            if (fuzz2002.has_value()) {
                comp_batches.emplace_back(fuzz2002.value());
            }
            if (fuzz2003.has_value()) {
                comp_batches.emplace_back(fuzz2003.value());
            }
            if (fuzz2004.has_value()) {
                comp_batches.emplace_back(fuzz2004.value());
            }
            if (fuzz2005.has_value()) {
                comp_batches.emplace_back(fuzz2005.value());
            }
            if (fuzz2006.has_value()) {
                comp_batches.emplace_back(fuzz2006.value());
            }
            if (fuzz2007.has_value()) {
                comp_batches.emplace_back(fuzz2007.value());
            }
            if (fuzz2008.has_value()) {
                comp_batches.emplace_back(fuzz2008.value());
            }
            if (fuzz2009.has_value()) {
                comp_batches.emplace_back(fuzz2009.value());
            }
            if (fuzz2010.has_value()) {
                comp_batches.emplace_back(fuzz2010.value());
            }
            if (fuzz2011.has_value()) {
                comp_batches.emplace_back(fuzz2011.value());
            }
            if (fuzz2012.has_value()) {
                comp_batches.emplace_back(fuzz2012.value());
            }
            if (fuzz2013.has_value()) {
                comp_batches.emplace_back(fuzz2013.value());
            }
            if (fuzz2014.has_value()) {
                comp_batches.emplace_back(fuzz2014.value());
            }
            if (fuzz2015.has_value()) {
                comp_batches.emplace_back(fuzz2015.value());
            }
            if (fuzz2016.has_value()) {
                comp_batches.emplace_back(fuzz2016.value());
            }
            if (fuzz2017.has_value()) {
                comp_batches.emplace_back(fuzz2017.value());
            }
            if (fuzz2018.has_value()) {
                comp_batches.emplace_back(fuzz2018.value());
            }
            comp_batches.emplace_back(AffixFuzzer3::indicator());

            return comp_batches;
        }
    } // namespace archetypes
} // namespace rerun
