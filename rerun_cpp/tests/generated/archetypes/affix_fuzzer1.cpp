// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#include "affix_fuzzer1.hpp"

#include <rerun/indicator_component.hpp>

namespace rerun {
    namespace archetypes {
        const char AffixFuzzer1::INDICATOR_COMPONENT_NAME[] =
            "rerun.testing.components.AffixFuzzer1Indicator";

        AnonymousComponentBatch AffixFuzzer1::indicator() {
            return ComponentBatch<
                components::IndicatorComponent<AffixFuzzer1::INDICATOR_COMPONENT_NAME>>(nullptr, 1);
        }

        std::vector<AnonymousComponentBatch> AffixFuzzer1::as_component_batches() const {
            std::vector<AnonymousComponentBatch> comp_batches;
            comp_batches.reserve(21);

            comp_batches.emplace_back(fuzz1001);
            comp_batches.emplace_back(fuzz1002);
            comp_batches.emplace_back(fuzz1003);
            comp_batches.emplace_back(fuzz1004);
            comp_batches.emplace_back(fuzz1005);
            comp_batches.emplace_back(fuzz1006);
            comp_batches.emplace_back(fuzz1007);
            comp_batches.emplace_back(fuzz1008);
            comp_batches.emplace_back(fuzz1009);
            comp_batches.emplace_back(fuzz1010);
            comp_batches.emplace_back(fuzz1011);
            comp_batches.emplace_back(fuzz1012);
            comp_batches.emplace_back(fuzz1013);
            comp_batches.emplace_back(fuzz1014);
            comp_batches.emplace_back(fuzz1015);
            comp_batches.emplace_back(fuzz1016);
            comp_batches.emplace_back(fuzz1017);
            comp_batches.emplace_back(fuzz1018);
            comp_batches.emplace_back(fuzz1019);
            comp_batches.emplace_back(fuzz1020);
            comp_batches.emplace_back(fuzz1021);
            comp_batches.emplace_back(AffixFuzzer1::indicator());

            return comp_batches;
        }
    } // namespace archetypes
} // namespace rerun
