// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#pragma once

#include "../components/affix_fuzzer1.hpp"
#include "../components/affix_fuzzer10.hpp"
#include "../components/affix_fuzzer11.hpp"
#include "../components/affix_fuzzer12.hpp"
#include "../components/affix_fuzzer13.hpp"
#include "../components/affix_fuzzer14.hpp"
#include "../components/affix_fuzzer15.hpp"
#include "../components/affix_fuzzer16.hpp"
#include "../components/affix_fuzzer17.hpp"
#include "../components/affix_fuzzer18.hpp"
#include "../components/affix_fuzzer2.hpp"
#include "../components/affix_fuzzer3.hpp"
#include "../components/affix_fuzzer4.hpp"
#include "../components/affix_fuzzer5.hpp"
#include "../components/affix_fuzzer6.hpp"
#include "../components/affix_fuzzer7.hpp"
#include "../components/affix_fuzzer8.hpp"
#include "../components/affix_fuzzer9.hpp"

#include <cstdint>
#include <optional>
#include <rerun/collection.hpp>
#include <rerun/component_batch.hpp>
#include <rerun/component_column.hpp>
#include <rerun/indicator_component.hpp>
#include <rerun/result.hpp>
#include <utility>
#include <vector>

namespace rerun::archetypes {
    struct AffixFuzzer3 {
        std::optional<ComponentBatch> fuzz2001;

        std::optional<ComponentBatch> fuzz2002;

        std::optional<ComponentBatch> fuzz2003;

        std::optional<ComponentBatch> fuzz2004;

        std::optional<ComponentBatch> fuzz2005;

        std::optional<ComponentBatch> fuzz2006;

        std::optional<ComponentBatch> fuzz2007;

        std::optional<ComponentBatch> fuzz2008;

        std::optional<ComponentBatch> fuzz2009;

        std::optional<ComponentBatch> fuzz2010;

        std::optional<ComponentBatch> fuzz2011;

        std::optional<ComponentBatch> fuzz2012;

        std::optional<ComponentBatch> fuzz2013;

        std::optional<ComponentBatch> fuzz2014;

        std::optional<ComponentBatch> fuzz2015;

        std::optional<ComponentBatch> fuzz2016;

        std::optional<ComponentBatch> fuzz2017;

        std::optional<ComponentBatch> fuzz2018;

      public:
        static constexpr const char IndicatorComponentName[] =
            "rerun.testing.components.AffixFuzzer3Indicator";

        /// Indicator component, used to identify the archetype when converting to a list of components.
        using IndicatorComponent = rerun::components::IndicatorComponent<IndicatorComponentName>;
        /// The name of the archetype as used in `ComponentDescriptor`s.
        static constexpr const char ArchetypeName[] = "rerun.testing.archetypes.AffixFuzzer3";

        /// `ComponentDescriptor` for the `fuzz2001` field.
        static constexpr auto Descriptor_fuzz2001 = ComponentDescriptor(
            ArchetypeName, "fuzz2001",
            Loggable<rerun::components::AffixFuzzer1>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2002` field.
        static constexpr auto Descriptor_fuzz2002 = ComponentDescriptor(
            ArchetypeName, "fuzz2002",
            Loggable<rerun::components::AffixFuzzer2>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2003` field.
        static constexpr auto Descriptor_fuzz2003 = ComponentDescriptor(
            ArchetypeName, "fuzz2003",
            Loggable<rerun::components::AffixFuzzer3>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2004` field.
        static constexpr auto Descriptor_fuzz2004 = ComponentDescriptor(
            ArchetypeName, "fuzz2004",
            Loggable<rerun::components::AffixFuzzer4>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2005` field.
        static constexpr auto Descriptor_fuzz2005 = ComponentDescriptor(
            ArchetypeName, "fuzz2005",
            Loggable<rerun::components::AffixFuzzer5>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2006` field.
        static constexpr auto Descriptor_fuzz2006 = ComponentDescriptor(
            ArchetypeName, "fuzz2006",
            Loggable<rerun::components::AffixFuzzer6>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2007` field.
        static constexpr auto Descriptor_fuzz2007 = ComponentDescriptor(
            ArchetypeName, "fuzz2007",
            Loggable<rerun::components::AffixFuzzer7>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2008` field.
        static constexpr auto Descriptor_fuzz2008 = ComponentDescriptor(
            ArchetypeName, "fuzz2008",
            Loggable<rerun::components::AffixFuzzer8>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2009` field.
        static constexpr auto Descriptor_fuzz2009 = ComponentDescriptor(
            ArchetypeName, "fuzz2009",
            Loggable<rerun::components::AffixFuzzer9>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2010` field.
        static constexpr auto Descriptor_fuzz2010 = ComponentDescriptor(
            ArchetypeName, "fuzz2010",
            Loggable<rerun::components::AffixFuzzer10>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2011` field.
        static constexpr auto Descriptor_fuzz2011 = ComponentDescriptor(
            ArchetypeName, "fuzz2011",
            Loggable<rerun::components::AffixFuzzer11>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2012` field.
        static constexpr auto Descriptor_fuzz2012 = ComponentDescriptor(
            ArchetypeName, "fuzz2012",
            Loggable<rerun::components::AffixFuzzer12>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2013` field.
        static constexpr auto Descriptor_fuzz2013 = ComponentDescriptor(
            ArchetypeName, "fuzz2013",
            Loggable<rerun::components::AffixFuzzer13>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2014` field.
        static constexpr auto Descriptor_fuzz2014 = ComponentDescriptor(
            ArchetypeName, "fuzz2014",
            Loggable<rerun::components::AffixFuzzer14>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2015` field.
        static constexpr auto Descriptor_fuzz2015 = ComponentDescriptor(
            ArchetypeName, "fuzz2015",
            Loggable<rerun::components::AffixFuzzer15>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2016` field.
        static constexpr auto Descriptor_fuzz2016 = ComponentDescriptor(
            ArchetypeName, "fuzz2016",
            Loggable<rerun::components::AffixFuzzer16>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2017` field.
        static constexpr auto Descriptor_fuzz2017 = ComponentDescriptor(
            ArchetypeName, "fuzz2017",
            Loggable<rerun::components::AffixFuzzer17>::Descriptor.component_name
        );
        /// `ComponentDescriptor` for the `fuzz2018` field.
        static constexpr auto Descriptor_fuzz2018 = ComponentDescriptor(
            ArchetypeName, "fuzz2018",
            Loggable<rerun::components::AffixFuzzer18>::Descriptor.component_name
        );

      public:
        AffixFuzzer3() = default;
        AffixFuzzer3(AffixFuzzer3&& other) = default;
        AffixFuzzer3(const AffixFuzzer3& other) = default;
        AffixFuzzer3& operator=(const AffixFuzzer3& other) = default;
        AffixFuzzer3& operator=(AffixFuzzer3&& other) = default;

        /// Update only some specific fields of a `AffixFuzzer3`.
        static AffixFuzzer3 update_fields() {
            return AffixFuzzer3();
        }

        /// Clear all the fields of a `AffixFuzzer3`.
        static AffixFuzzer3 clear_fields();

        AffixFuzzer3 with_fuzz2001(const rerun::components::AffixFuzzer1& _fuzz2001) && {
            fuzz2001 =
                ComponentBatch::from_loggable(_fuzz2001, Descriptor_fuzz2001).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2001` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2001` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2001(const Collection<rerun::components::AffixFuzzer1>& _fuzz2001
        ) && {
            fuzz2001 =
                ComponentBatch::from_loggable(_fuzz2001, Descriptor_fuzz2001).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2002(const rerun::components::AffixFuzzer2& _fuzz2002) && {
            fuzz2002 =
                ComponentBatch::from_loggable(_fuzz2002, Descriptor_fuzz2002).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2002` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2002` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2002(const Collection<rerun::components::AffixFuzzer2>& _fuzz2002
        ) && {
            fuzz2002 =
                ComponentBatch::from_loggable(_fuzz2002, Descriptor_fuzz2002).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2003(const rerun::components::AffixFuzzer3& _fuzz2003) && {
            fuzz2003 =
                ComponentBatch::from_loggable(_fuzz2003, Descriptor_fuzz2003).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2003` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2003` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2003(const Collection<rerun::components::AffixFuzzer3>& _fuzz2003
        ) && {
            fuzz2003 =
                ComponentBatch::from_loggable(_fuzz2003, Descriptor_fuzz2003).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2004(const rerun::components::AffixFuzzer4& _fuzz2004) && {
            fuzz2004 =
                ComponentBatch::from_loggable(_fuzz2004, Descriptor_fuzz2004).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2004` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2004` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2004(const Collection<rerun::components::AffixFuzzer4>& _fuzz2004
        ) && {
            fuzz2004 =
                ComponentBatch::from_loggable(_fuzz2004, Descriptor_fuzz2004).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2005(const rerun::components::AffixFuzzer5& _fuzz2005) && {
            fuzz2005 =
                ComponentBatch::from_loggable(_fuzz2005, Descriptor_fuzz2005).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2005` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2005` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2005(const Collection<rerun::components::AffixFuzzer5>& _fuzz2005
        ) && {
            fuzz2005 =
                ComponentBatch::from_loggable(_fuzz2005, Descriptor_fuzz2005).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2006(const rerun::components::AffixFuzzer6& _fuzz2006) && {
            fuzz2006 =
                ComponentBatch::from_loggable(_fuzz2006, Descriptor_fuzz2006).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2006` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2006` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2006(const Collection<rerun::components::AffixFuzzer6>& _fuzz2006
        ) && {
            fuzz2006 =
                ComponentBatch::from_loggable(_fuzz2006, Descriptor_fuzz2006).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2007(const rerun::components::AffixFuzzer7& _fuzz2007) && {
            fuzz2007 =
                ComponentBatch::from_loggable(_fuzz2007, Descriptor_fuzz2007).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2007` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2007` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2007(const Collection<rerun::components::AffixFuzzer7>& _fuzz2007
        ) && {
            fuzz2007 =
                ComponentBatch::from_loggable(_fuzz2007, Descriptor_fuzz2007).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2008(const rerun::components::AffixFuzzer8& _fuzz2008) && {
            fuzz2008 =
                ComponentBatch::from_loggable(_fuzz2008, Descriptor_fuzz2008).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2008` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2008` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2008(const Collection<rerun::components::AffixFuzzer8>& _fuzz2008
        ) && {
            fuzz2008 =
                ComponentBatch::from_loggable(_fuzz2008, Descriptor_fuzz2008).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2009(const rerun::components::AffixFuzzer9& _fuzz2009) && {
            fuzz2009 =
                ComponentBatch::from_loggable(_fuzz2009, Descriptor_fuzz2009).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2009` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2009` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2009(const Collection<rerun::components::AffixFuzzer9>& _fuzz2009
        ) && {
            fuzz2009 =
                ComponentBatch::from_loggable(_fuzz2009, Descriptor_fuzz2009).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2010(const rerun::components::AffixFuzzer10& _fuzz2010) && {
            fuzz2010 =
                ComponentBatch::from_loggable(_fuzz2010, Descriptor_fuzz2010).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2010` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2010` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2010(
            const Collection<rerun::components::AffixFuzzer10>& _fuzz2010
        ) && {
            fuzz2010 =
                ComponentBatch::from_loggable(_fuzz2010, Descriptor_fuzz2010).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2011(const rerun::components::AffixFuzzer11& _fuzz2011) && {
            fuzz2011 =
                ComponentBatch::from_loggable(_fuzz2011, Descriptor_fuzz2011).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2011` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2011` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2011(
            const Collection<rerun::components::AffixFuzzer11>& _fuzz2011
        ) && {
            fuzz2011 =
                ComponentBatch::from_loggable(_fuzz2011, Descriptor_fuzz2011).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2012(const rerun::components::AffixFuzzer12& _fuzz2012) && {
            fuzz2012 =
                ComponentBatch::from_loggable(_fuzz2012, Descriptor_fuzz2012).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2012` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2012` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2012(
            const Collection<rerun::components::AffixFuzzer12>& _fuzz2012
        ) && {
            fuzz2012 =
                ComponentBatch::from_loggable(_fuzz2012, Descriptor_fuzz2012).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2013(const rerun::components::AffixFuzzer13& _fuzz2013) && {
            fuzz2013 =
                ComponentBatch::from_loggable(_fuzz2013, Descriptor_fuzz2013).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2013` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2013` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2013(
            const Collection<rerun::components::AffixFuzzer13>& _fuzz2013
        ) && {
            fuzz2013 =
                ComponentBatch::from_loggable(_fuzz2013, Descriptor_fuzz2013).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2014(const rerun::components::AffixFuzzer14& _fuzz2014) && {
            fuzz2014 =
                ComponentBatch::from_loggable(_fuzz2014, Descriptor_fuzz2014).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2014` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2014` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2014(
            const Collection<rerun::components::AffixFuzzer14>& _fuzz2014
        ) && {
            fuzz2014 =
                ComponentBatch::from_loggable(_fuzz2014, Descriptor_fuzz2014).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2015(const rerun::components::AffixFuzzer15& _fuzz2015) && {
            fuzz2015 =
                ComponentBatch::from_loggable(_fuzz2015, Descriptor_fuzz2015).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2015` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2015` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2015(
            const Collection<rerun::components::AffixFuzzer15>& _fuzz2015
        ) && {
            fuzz2015 =
                ComponentBatch::from_loggable(_fuzz2015, Descriptor_fuzz2015).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2016(const rerun::components::AffixFuzzer16& _fuzz2016) && {
            fuzz2016 =
                ComponentBatch::from_loggable(_fuzz2016, Descriptor_fuzz2016).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2016` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2016` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2016(
            const Collection<rerun::components::AffixFuzzer16>& _fuzz2016
        ) && {
            fuzz2016 =
                ComponentBatch::from_loggable(_fuzz2016, Descriptor_fuzz2016).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2017(const rerun::components::AffixFuzzer17& _fuzz2017) && {
            fuzz2017 =
                ComponentBatch::from_loggable(_fuzz2017, Descriptor_fuzz2017).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2017` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2017` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2017(
            const Collection<rerun::components::AffixFuzzer17>& _fuzz2017
        ) && {
            fuzz2017 =
                ComponentBatch::from_loggable(_fuzz2017, Descriptor_fuzz2017).value_or_throw();
            return std::move(*this);
        }

        AffixFuzzer3 with_fuzz2018(const rerun::components::AffixFuzzer18& _fuzz2018) && {
            fuzz2018 =
                ComponentBatch::from_loggable(_fuzz2018, Descriptor_fuzz2018).value_or_throw();
            return std::move(*this);
        }

        /// This method makes it possible to pack multiple `fuzz2018` in a single component batch.
        ///
        /// This only makes sense when used in conjunction with `columns`. `with_fuzz2018` should
        /// be used when logging a single row's worth of data.
        AffixFuzzer3 with_many_fuzz2018(
            const Collection<rerun::components::AffixFuzzer18>& _fuzz2018
        ) && {
            fuzz2018 =
                ComponentBatch::from_loggable(_fuzz2018, Descriptor_fuzz2018).value_or_throw();
            return std::move(*this);
        }

        /// Partitions the component data into multiple sub-batches.
        ///
        /// Specifically, this transforms the existing `ComponentBatch` data into `ComponentColumn`s
        /// instead, via `ComponentBatch::partitioned`.
        ///
        /// This makes it possible to use `RecordingStream::send_columns` to send columnar data directly into Rerun.
        ///
        /// The specified `lengths` must sum to the total length of the component batch.
        Collection<ComponentColumn> columns(const Collection<uint32_t>& lengths_);

        /// Partitions the component data into unit-length sub-batches.
        ///
        /// This is semantically similar to calling `columns` with `std::vector<uint32_t>(n, 1)`,
        /// where `n` is automatically guessed.
        Collection<ComponentColumn> columns();
    };

} // namespace rerun::archetypes

namespace rerun {
    /// \private
    template <typename T>
    struct AsComponents;

    /// \private
    template <>
    struct AsComponents<archetypes::AffixFuzzer3> {
        /// Serialize all set component batches.
        static Result<Collection<ComponentBatch>> as_batches(
            const archetypes::AffixFuzzer3& archetype
        );
    };
} // namespace rerun
