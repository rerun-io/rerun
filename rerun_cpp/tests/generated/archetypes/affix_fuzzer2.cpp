// DO NOT EDIT! This file was auto-generated by crates/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/re_types/definitions/rerun/testing/archetypes/fuzzy.fbs".

#include "affix_fuzzer2.hpp"

#include <rerun/indicator_component.hpp>

namespace rerun {
    namespace archetypes {
        const char AffixFuzzer2::INDICATOR_COMPONENT_NAME[] =
            "rerun.testing.components.AffixFuzzer2Indicator";

        AnonymousComponentBatch AffixFuzzer2::indicator() {
            return ComponentBatch<
                components::IndicatorComponent<AffixFuzzer2::INDICATOR_COMPONENT_NAME>>(nullptr, 1);
        }

        std::vector<AnonymousComponentBatch> AffixFuzzer2::as_component_batches() const {
            std::vector<AnonymousComponentBatch> comp_batches;
            comp_batches.reserve(18);

            comp_batches.emplace_back(fuzz1101);
            comp_batches.emplace_back(fuzz1102);
            comp_batches.emplace_back(fuzz1103);
            comp_batches.emplace_back(fuzz1104);
            comp_batches.emplace_back(fuzz1105);
            comp_batches.emplace_back(fuzz1106);
            comp_batches.emplace_back(fuzz1107);
            comp_batches.emplace_back(fuzz1108);
            comp_batches.emplace_back(fuzz1109);
            comp_batches.emplace_back(fuzz1110);
            comp_batches.emplace_back(fuzz1111);
            comp_batches.emplace_back(fuzz1112);
            comp_batches.emplace_back(fuzz1113);
            comp_batches.emplace_back(fuzz1114);
            comp_batches.emplace_back(fuzz1115);
            comp_batches.emplace_back(fuzz1116);
            comp_batches.emplace_back(fuzz1117);
            comp_batches.emplace_back(fuzz1118);
            comp_batches.emplace_back(AffixFuzzer2::indicator());

            return comp_batches;
        }
    } // namespace archetypes
} // namespace rerun
