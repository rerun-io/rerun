// DO NOT EDIT! This file was auto-generated by crates/build/re_types_builder/src/codegen/cpp/mod.rs
// Based on "crates/store/re_types/definitions/rerun/testing/components/enum_test.fbs".

#pragma once

#include <cstdint>
#include <memory>
#include <rerun/result.hpp>

namespace arrow {
    /// \private
    template <typename T>
    class NumericBuilder;

    class Array;
    class DataType;
    class UInt8Type;
    using UInt8Builder = NumericBuilder<UInt8Type>;
} // namespace arrow

namespace rerun::datatypes {
    /// **Datatype**: A test of an enumate with specified values.
    enum class ValuedEnum : uint8_t {

        /// One.
        One = 1,

        /// Two.
        Two = 2,

        /// Three.
        Three = 3,

        /// The answer to life, the universe, and everything.
        TheAnswer = 42,
    };
} // namespace rerun::datatypes

namespace rerun {
    template <typename T>
    struct Loggable;

    /// \private
    template <>
    struct Loggable<datatypes::ValuedEnum> {
        static constexpr const char Name[] = "rerun.testing.datatypes.ValuedEnum";

        /// Returns the arrow data type this type corresponds to.
        static const std::shared_ptr<arrow::DataType>& arrow_datatype();

        /// Serializes an array of `rerun::datatypes::ValuedEnum` into an arrow array.
        static Result<std::shared_ptr<arrow::Array>> to_arrow(
            const datatypes::ValuedEnum* instances, size_t num_instances
        );

        /// Fills an arrow array builder with an array of this type.
        static rerun::Error fill_arrow_array_builder(
            arrow::UInt8Builder* builder, const datatypes::ValuedEnum* elements, size_t num_elements
        );
    };
} // namespace rerun
