# `landing` expects this file to have the following format:
# root {
#   prelude: string
#   children: [
#     {
#       # the path in the url, e.g. to get `rerun.io/examples/minimal` set `name: "minimal"`
#       name: string
#       # path to the python example
#       python: string?
#       # path to the rust example
#       rust: string?
#       # at least one of `python` or `rust` should be set
#     }
#     OR
#     {
#       # the path in the url, e.g. `rerun.io/examples/artificial-data`
#       name: string
#       # the title in the side nav + header, e.g. `Examples with Artificial Data`
#       title: string
#       # the content that's placed right after the header.
#       # used to include setup instructions and general info
#       prelude: string
#       children: [
#         { # same as above
#           name: string
#           python: string?
#           rust: string?
#         }
#       ]
#     }
#   ]
# }

root:
  prelude: |
    In the Rerun [GitHub](https://github.com/rerun-io/rerun) repository we maintain
    a list of examples that demonstrate using the Rerun logging APIs. Generally the
    examples are individually self-contained, and can be run directly from a Git
    clone of the repository. Many of the Python examples need additional dependencies
    set up in a `requirements.txt` next to the example. These are noted in the
    individual example sections below.
  children:
    - name: real-data
      title: Examples with Real Data
      prelude: |
        The following examples illustrate using the Rerun logging SDK with potential real-world (if toy) use cases.
        They all require additional data to be downloaded, so an internet connection is needed at least once.
        Each example downloads it's own data, so no additional steps are needed.
        For the simplest possible examples showing how to use each api,
        check out [Types](/docs/reference/types).
      children:
        # Keep this list lexicographically sorted:

        - name: arkit_scenes
          python: python/arkit_scenes

        - name: controlnet
          python: python/controlnet

        - name: depth-guided-stable-diffusion
          python: python/depth_guided_stable_diffusion

        - name: detect-and-track-objects
          python: python/detect_and_track_objects

        - name: dicom-mri
          python: python/dicom_mri

        - name: face-tracking
          python: python/face_tracking

        - name: human-pose-tracking
          python: python/human_pose_tracking

        - name: live-camera-edge-detection
          python: python/live_camera_edge_detection

        - name: live-depth-sensor
          python: python/live_depth_sensor

        - name: objectron
          python: python/objectron
          rust: rust/objectron

        - name: open-photogrammetry-format
          python: python/open_photogrammetry_format

        - name: raw-mesh
          python: python/raw_mesh
          rust: rust/raw_mesh

        - name: rgbd
          python: python/rgbd

        - name: ros-node
          python: python/ros_node

        - name: segment-anything-model
          python: python/segment_anything_model

        - name: signed-distance-fields
          python: python/signed_distance_fields

        - name: structure-from-motion
          python: python/structure_from_motion

        - name: vrs
          python: cpp/vrs

    - name: artificial-data
      title: Examples with Artificial Data
      prelude: |
        The following examples serve to illustrate various uses of the Rerun logging SDK.
        They should not require any additional data downloads, and should run offline.
        For the simplest possible examples showing how to use each api,
        check out [Types](/docs/reference/types).
      children:
        # Always show the simple "minimal" example first:
        - name: minimal
          python: python/minimal
          rust: rust/minimal

        # Keep the following examples lexicographically sorted:

        - name: car
          python: python/car

        - name: clock
          python: python/clock
          rust: rust/clock

        - name: eigen-opencv
          python: cpp/eigen_opencv

        - name: multithreading
          python: python/multithreading

        - name: multiprocessing
          python: python/multiprocessing

        - name: plots
          python: python/plots

    - name: paper-visualizations
      title: Paper Visualizations
      prelude: |
        The following examples use Rerun to create visual walkthroughs of papers. They are typically forks
        from the official open-source implementations adding Rerun as the visualizer.
        Check out the respective READMEs for installation instructions.
        For the simplest possible examples showing how to use each api,
        check out [Types](/docs/reference/types).
      children:
        # Keep this list lexicographically sorted:
        - name: differentiable_blocks_world
          python: python/differentiable_blocks_world
        - name: limap
          python: python/limap
        - name: mcc
          python: python/mcc
        - name: shape_pointe
          python: python/shape_pointe
        - name: simplerecon
          python: python/simplerecon
        - name: slahmr
          python: python/slahmr
        - name: tapir
          python: python/tapir
        - name: widebaseline
          python: python/widebaseline

    - name: setup
      title: Setup
      prelude: |
        ### Examples with Real / Artificial Data
        To run these examples, make sure you have the Rerun repository checked out
        and the latest SDK installed.

        ```bash
        pip install --upgrade rerun-sdk  # install the latest Rerun SDK
        git clone git@github.com:rerun-io/rerun.git  # Clone the repository
        cd rerun
        git checkout latest  # Check out the commit matching the latest SDK release
        ```
        > Note: Make sure your SDK version matches the examples.
        For example, if your SDK version is `0.3.1`, check out the matching tag
        in the Rerun repository by running `git checkout v0.3.1`.

        ### Paper Visualizations
        To reproduce the paper visualizations check out the README of the respective
        Rerun forks.
