{
    "editor.formatOnSave": true,
    "editor.semanticTokenColorCustomizations": {
        "rules": {
            "*.unsafe:rust": "#eb5046"
        }
    },
    "files.autoGuessEncoding": true,
    "files.insertFinalNewline": true,
    "files.trimTrailingWhitespace": true,
    "cSpell.ignorePaths": [
        ".vscode",
        "pixi.lock"
    ],
    "cSpell.words": [
        "andreas",
        "bbox",
        "bindgroup",
        "colormap",
        "emath",
        "flatbuffers",
        "framebuffer",
        "hoverable",
        "ilog",
        "jumpflooding",
        "Keypoint",
        "memoffset",
        "nyud",
        "objectron",
        "Readback",
        "readbacks",
        "Skybox",
        "smallvec",
        "swapchain",
        "texcoord",
        "texcoords",
        "Tonemapper",
        "tonemapping",
        "unsmoothed",
        "visualizable",
        "visualizability",
        "voronoi",
        "vram",
        "Wgsl"
    ],
    // don't share a cargo lock with rust-analyzer.
    // see https://github.com/rerun-io/rerun/pull/519 for rationale
    "rust-analyzer.check.overrideCommand": [
        "cargo",
        "cranky",
        "--target-dir=target_ra",
        "--workspace",
        "--message-format=json",
        "--all-targets",
        "--all-features" // --all-features will set the `__ci` feature flag, which stops crates/re_web_viewer_server/build.rs from building the web viewer
    ],
    "rust-analyzer.cargo.buildScripts.overrideCommand": [
        "cargo",
        "check",
        "--quiet",
        "--target-dir=target_ra",
        "--workspace",
        "--message-format=json",
        "--all-targets",
        "--all-features", // --all-features will set the `__ci` feature flag, which stops crates/re_web_viewer_server/build.rs from building the web viewer
    ],
    // Our build scripts are generating code.
    // Having Rust Analyzer do this while doing other builds can lead to catastrophic failures.
    // INCLUDING attempts to publish a new release!
    "rust-analyzer.cargo.buildScripts.enable": false,
    "rust-analyzer.cargo.extraEnv": {
        "IS_IN_RERUN_WORKSPACE": "yes"
    },
    "python.analysis.extraPaths": [
        "rerun_py/rerun_sdk"
    ],
    "C_Cpp.default.configurationProvider": "ms-vscode.cmake-tools", // Use cmake-tools to grab configs.
    "C_Cpp.autoAddFileAssociations": false,
    "cmake.buildDirectory": "${workspaceRoot}/build/debug",
    "cmake.generator": "Ninja", // Use Ninja, just like we do in our just/pixi command.
    "rust-analyzer.showUnlinkedFileNotification": false,
    "ruff.format.args": [
        "--config=rerun_py/pyproject.toml"
    ],
    "ruff.lint.args": [
        "--config=rerun_py/pyproject.toml"
    ],
    "prettier.requireConfig": true,
    "prettier.configPath": ".prettierrc.toml",
    "[python]": {
        "editor.defaultFormatter": "charliermarsh.ruff"
    },
    "[javascript]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[html]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[css]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    },
    "[yaml]": {
        "editor.defaultFormatter": "esbenp.prettier-vscode"
    }
}
