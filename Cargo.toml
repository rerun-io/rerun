[workspace]
resolver = "2"
members = [
  "crates/*",
  "examples/rust/*",
  "rerun_py",
  "run_wasm",
  "tests/rust/*",
]

[workspace.package]
authors = ["rerun.io <opensource@rerun.io>"]
edition = "2021"
homepage = "https://rerun.io"
include = ["../../LICENSE-APACHE", "../../LICENSE-MIT", "**/*.rs", "Cargo.toml"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/rerun-io/rerun"
rust-version = "1.69"
version = "0.7.0-alpha.0"

[workspace.dependencies]
# When using alpha-release, always use exact version, e.g. `version = "=0.x.y-alpha.z"
# This is because we treat alpha-releases as incompatible, but semver doesn't.
# In particular: if we compile rerun 0.3.0-alpha.0 we only want it to use
# re_log_types 0.3.0-alpha.0, NOT 0.3.0-alpha.4 even though it is newer and semver-compatible.
re_analytics = { path = "crates/re_analytics", version = "0.7.0-alpha.0", default-features = false }
re_arrow_store = { path = "crates/re_arrow_store", version = "0.7.0-alpha.0", default-features = false }
re_build_build_info = { path = "crates/re_build_build_info", version = "0.7.0-alpha.0", default-features = false }
re_build_info = { path = "crates/re_build_info", version = "0.7.0-alpha.0", default-features = false }
re_build_web_viewer = { path = "crates/re_build_web_viewer", version = "0.7.0-alpha.0", default-features = false }
re_crash_handler = { path = "crates/re_crash_handler", version = "0.7.0-alpha.0", default-features = false }
re_data_store = { path = "crates/re_data_store", version = "0.7.0-alpha.0", default-features = false }
re_data_ui = { path = "crates/re_data_ui", version = "0.7.0-alpha.0", default-features = false }
re_error = { path = "crates/re_error", version = "0.7.0-alpha.0", default-features = false }
re_format = { path = "crates/re_format", version = "0.7.0-alpha.0", default-features = false }
re_int_histogram = { path = "crates/re_int_histogram", version = "0.7.0-alpha.0", default-features = false }
re_log = { path = "crates/re_log", version = "0.7.0-alpha.0", default-features = false }
re_log_encoding = { path = "crates/re_log_encoding", version = "0.7.0-alpha.0", default-features = false }
re_log_types = { path = "crates/re_log_types", version = "0.7.0-alpha.0", default-features = false }
re_memory = { path = "crates/re_memory", version = "0.7.0-alpha.0", default-features = false }
re_query = { path = "crates/re_query", version = "0.7.0-alpha.0", default-features = false }
re_renderer = { path = "crates/re_renderer", version = "0.7.0-alpha.0", default-features = false }
re_sdk = { path = "crates/re_sdk", version = "0.7.0-alpha.0", default-features = false }
re_sdk_comms = { path = "crates/re_sdk_comms", version = "0.7.0-alpha.0", default-features = false }
re_smart_channel = { path = "crates/re_smart_channel", version = "0.7.0-alpha.0", default-features = false }
re_string_interner = { path = "crates/re_string_interner", version = "0.7.0-alpha.0", default-features = false }
re_tensor_ops = { path = "crates/re_tensor_ops", version = "0.7.0-alpha.0", default-features = false }
re_time_panel = { path = "crates/re_time_panel", version = "=0.7.0-alpha.0", default-features = false }
re_tuid = { path = "crates/re_tuid", version = "0.7.0-alpha.0", default-features = false }
re_ui = { path = "crates/re_ui", version = "0.7.0-alpha.0", default-features = false }
re_viewer = { path = "crates/re_viewer", version = "0.7.0-alpha.0", default-features = false }
re_viewer_context = { path = "crates/re_viewer_context", version = "0.7.0-alpha.0", default-features = false }
re_viewport = { path = "crates/re_viewport", version = "0.7.0-alpha.0", default-features = false }
re_web_viewer_server = { path = "crates/re_web_viewer_server", version = "0.7.0-alpha.0", default-features = false }
re_ws_comms = { path = "crates/re_ws_comms", version = "0.7.0-alpha.0", default-features = false }
rerun = { path = "crates/rerun", version = "0.7.0-alpha.0", default-features = false }

ahash = "0.8"
anyhow = "1.0"
arrow2 = "0.17"
arrow2_convert = "0.5.0"
bytemuck = { version = "1.11", features = ["extern_crate_alloc"] }
cfg-if = "1.0"
clap = "4.0"
comfy-table = { version = "6.1", default-features = false }
crossbeam = "0.8"
ecolor = "0.22.0"
eframe = { version = "0.22.0", default-features = false }
egui = { version = "0.22.0", features = ["extra_debug_asserts", "log"] }
egui_extras = { version = "0.22.0", features = ["log"] }
egui_tiles = { version = "0.1" }
egui-wgpu = "0.22.0"
emath = "0.22.0"
enumset = "1.0.12"
epaint = "0.22.0"
glam = "0.22"
gltf = "1.1"
half = "2.0"
image = { version = "0.24", default-features = false }
itertools = "0.10"
lazy_static = "1.4"
macaw = "0.18"
mimalloc = "0.1.29"
ndarray = "0.15"
nohash-hasher = "0.2"
parking_lot = "0.12"
polars-core = "0.29"
polars-lazy = "0.29"
polars-ops = "0.29"
puffin = "0.15"
rayon = "1.7"
rfd = { version = "0.11.3", default_features = false, features = [
  "xdg-portal",
] }
slotmap = { version = "1.0.6", features = ["serde"] }
smallvec = { version = "1.0", features = ["const_generics", "union"] }
thiserror = "1.0"
time = { version = "0.3", default-features = false, features = [
  "wasm-bindgen",
] }
tinyvec = { version = "1.6", features = ["alloc", "rustc_1_55"] }
tokio = { version = "1.24", default-features = false }
web-time = "0.2.0"
wgpu = { version = "0.16.1" }
wgpu-core = { version = "0.16.1" }


[profile.dev]
opt-level = 1   # Make debug builds run faster
panic = "abort" # This leads to better optimizations and smaller binaries (and is the default in Wasm anyways).

# Optimize all dependencies even in debug builds (does not affect workspace packages):
[profile.dev.package."*"]
opt-level = 2

[profile.release]
# debug = true # good for profilers
panic = "abort" # This leads to better optimizations and smaller binaries (and is the default in Wasm anyways).

[profile.bench]
debug = true


[patch.crates-io]
# Try to avoid patching crates! It prevents us from publishing the crates on crates.io.
# If you do patch always prefer to patch to a commit on the trunk of the upstream repo.
# If that is not possible, patch to a branch that has a PR open on the upstream repo.
# As a last resport, patch with a commit to our own repository.
# ALWAYS document what PR the commit hash is part of, or when it was merged into the upstream trunk.
