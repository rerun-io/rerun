[workspace]
resolver = "2"
members = [
  "crates/build/*",
  "crates/store/*",
  "crates/top/*",
  "crates/utils/*",
  "crates/viewer/*",
  "docs/snippets",
  "examples/rust/*",
  "rerun_py",
  "run_wasm",
  "tests/rust/log_benchmark",
  "tests/rust/plot_dashboard_stress",
  "tests/rust/roundtrips/*",
  "tests/rust/test_*",
]
exclude = ["examples/rust/revy", "examples/rust/chess_robby_fischer"]

[workspace.package]
authors = ["rerun.io <opensource@rerun.io>"]
edition = "2021"
homepage = "https://rerun.io"
include = ["../../LICENSE-APACHE", "../../LICENSE-MIT", "**/*.rs", "Cargo.toml"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/rerun-io/rerun"
rust-version = "1.79"
version = "0.20.0-alpha.1+dev"

[workspace.dependencies]
# When using alpha-release, always use exact version, e.g. `version = "=0.x.y-alpha.z"
# This is because we treat alpha-releases as incompatible, but semver doesn't.
# In particular: if we compile rerun 0.3.0-alpha.0 we only want it to use
# re_log_types 0.3.0-alpha.0, NOT 0.3.0-alpha.4 even though it is newer and semver-compatible.

# crates/build:
re_build_info = { path = "crates/build/re_build_info", version = "=0.20.0-alpha.1", default-features = false }
re_build_tools = { path = "crates/build/re_build_tools", version = "=0.20.0-alpha.1", default-features = false }
re_dev_tools = { path = "crates/build/re_dev_tools", version = "=0.20.0-alpha.1", default-features = false }
re_remote_store_types_builder = { path = "crates/build/re_remote_store_types_builder", version = "=0.20.0-alpha.1", default-features = false }
re_types_builder = { path = "crates/build/re_types_builder", version = "=0.20.0-alpha.1", default-features = false }

# crates/store:
re_chunk = { path = "crates/store/re_chunk", version = "=0.20.0-alpha.1", default-features = false }
re_chunk_store = { path = "crates/store/re_chunk_store", version = "=0.20.0-alpha.1", default-features = false }
re_data_loader = { path = "crates/store/re_data_loader", version = "=0.20.0-alpha.1", default-features = false }
re_data_source = { path = "crates/store/re_data_source", version = "=0.20.0-alpha.1", default-features = false }
re_dataframe = { path = "crates/store/re_dataframe", version = "=0.20.0-alpha.1", default-features = false }
re_entity_db = { path = "crates/store/re_entity_db", version = "=0.20.0-alpha.1", default-features = false }
re_format_arrow = { path = "crates/store/re_format_arrow", version = "=0.20.0-alpha.1", default-features = false }
re_log_encoding = { path = "crates/store/re_log_encoding", version = "=0.20.0-alpha.1", default-features = false }
re_log_types = { path = "crates/store/re_log_types", version = "=0.20.0-alpha.1", default-features = false }
re_query = { path = "crates/store/re_query", version = "=0.20.0-alpha.1", default-features = false }
re_remote_store_types = { path = "crates/build/re_remote_store_types", version = "=0.20.0-alpha.1", default-features = false }
re_sdk_comms = { path = "crates/store/re_sdk_comms", version = "=0.20.0-alpha.1", default-features = false }
re_types = { path = "crates/store/re_types", version = "=0.20.0-alpha.1", default-features = false }
re_types_blueprint = { path = "crates/store/re_types_blueprint", version = "=0.20.0-alpha.1", default-features = false }
re_types_core = { path = "crates/store/re_types_core", version = "=0.20.0-alpha.1", default-features = false }
re_video = { path = "crates/store/re_video", version = "=0.20.0-alpha.1", default-features = false }
re_ws_comms = { path = "crates/store/re_ws_comms", version = "=0.20.0-alpha.1", default-features = false }

# crates/top:
re_sdk = { path = "crates/top/re_sdk", version = "=0.20.0-alpha.1", default-features = false }
rerun = { path = "crates/top/rerun", version = "=0.20.0-alpha.1", default-features = false }
rerun_c = { path = "crates/top/rerun_c", version = "=0.20.0-alpha.1", default-features = false }
rerun-cli = { path = "crates/top/rerun-cli", version = "=0.20.0-alpha.1", default-features = false }

# crates/utils:
re_analytics = { path = "crates/utils/re_analytics", version = "=0.20.0-alpha.1", default-features = false }
re_case = { path = "crates/utils/re_case", version = "=0.20.0-alpha.1", default-features = false }
re_crash_handler = { path = "crates/utils/re_crash_handler", version = "=0.20.0-alpha.1", default-features = false }
re_error = { path = "crates/utils/re_error", version = "=0.20.0-alpha.1", default-features = false }
re_format = { path = "crates/utils/re_format", version = "=0.20.0-alpha.1", default-features = false }
re_int_histogram = { path = "crates/utils/re_int_histogram", version = "=0.20.0-alpha.1", default-features = false }
re_log = { path = "crates/utils/re_log", version = "=0.20.0-alpha.1", default-features = false }
re_memory = { path = "crates/utils/re_memory", version = "=0.20.0-alpha.1", default-features = false }
re_smart_channel = { path = "crates/utils/re_smart_channel", version = "=0.20.0-alpha.1", default-features = false }
re_string_interner = { path = "crates/utils/re_string_interner", version = "=0.20.0-alpha.1", default-features = false }
re_tracing = { path = "crates/utils/re_tracing", version = "=0.20.0-alpha.1", default-features = false }
re_tuid = { path = "crates/utils/re_tuid", version = "=0.20.0-alpha.1", default-features = false }

# crates/viewer:
re_blueprint_tree = { path = "crates/viewer/re_blueprint_tree", version = "=0.20.0-alpha.1", default-features = false }
re_component_ui = { path = "crates/viewer/re_component_ui", version = "=0.20.0-alpha.1", default-features = false }
re_context_menu = { path = "crates/viewer/re_context_menu", version = "=0.20.0-alpha.1", default-features = false }
re_data_ui = { path = "crates/viewer/re_data_ui", version = "=0.20.0-alpha.1", default-features = false }
re_chunk_store_ui = { path = "crates/viewer/re_chunk_store_ui", version = "=0.20.0-alpha.1", default-features = false }
re_renderer = { path = "crates/viewer/re_renderer", version = "=0.20.0-alpha.1", default-features = false }
re_renderer_examples = { path = "crates/viewer/re_renderer_examples", version = "=0.20.0-alpha.1", default-features = false }
re_selection_panel = { path = "crates/viewer/re_selection_panel", version = "=0.20.0-alpha.1", default-features = false }
re_space_view = { path = "crates/viewer/re_space_view", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_bar_chart = { path = "crates/viewer/re_space_view_bar_chart", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_dataframe = { path = "crates/viewer/re_space_view_dataframe", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_spatial = { path = "crates/viewer/re_space_view_spatial", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_tensor = { path = "crates/viewer/re_space_view_tensor", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_text_document = { path = "crates/viewer/re_space_view_text_document", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_text_log = { path = "crates/viewer/re_space_view_text_log", version = "=0.20.0-alpha.1", default-features = false }
re_space_view_time_series = { path = "crates/viewer/re_space_view_time_series", version = "=0.20.0-alpha.1", default-features = false }
re_time_panel = { path = "crates/viewer/re_time_panel", version = "=0.20.0-alpha.1", default-features = false }
re_ui = { path = "crates/viewer/re_ui", version = "=0.20.0-alpha.1", default-features = false }
re_viewer = { path = "crates/viewer/re_viewer", version = "=0.20.0-alpha.1", default-features = false }
re_viewer_context = { path = "crates/viewer/re_viewer_context", version = "=0.20.0-alpha.1", default-features = false }
re_viewport = { path = "crates/viewer/re_viewport", version = "=0.20.0-alpha.1", default-features = false }
re_viewport_blueprint = { path = "crates/viewer/re_viewport_blueprint", version = "=0.20.0-alpha.1", default-features = false }
re_web_viewer_server = { path = "crates/viewer/re_web_viewer_server", version = "=0.20.0-alpha.1", default-features = false }

# Rerun crates in other repos:
ewebsock = "0.7.0"
re_math = "0.20.0"

# If this package fails to build, install `nasm` locally, or build through `pixi`.
# NOTE: we use `dav1d` as an alias for our own re_rav1d crate
# See https://github.com/rerun-io/re_rav1d/pull/2
dav1d = { package = "re_rav1d", version = "0.1.3", default-features = false }
# dav1d = { version = "0.10.3" } # Requires separate install of `dav1d` library. Fast in debug builds. Useful for development.

# egui-crates:
ecolor = "0.29.1"
eframe = { version = "0.29.1", default-features = false, features = [
  "accesskit",
  "default_fonts",
  "puffin",
  "wayland",
  "x11",
] }
egui = { version = "0.29.1", features = [
  "callstack",
  "log",
  "puffin",
  "rayon",
] }
egui_commonmark = { version = "0.18", default-features = false }
egui_extras = { version = "0.29.1", features = [
  "http",
  "image",
  "puffin",
  "serde",
] }
egui_plot = "0.29.0" # https://github.com/emilk/egui_plot
egui_table = "0.1.0" # https://github.com/rerun-io/egui_table
egui_tiles = "0.10.1" # https://github.com/rerun-io/egui_tiles
egui-wgpu = "0.29.1"
emath = "0.29.1"

# All of our direct external dependencies should be found here:
ahash = "0.8"
anyhow = { version = "1.0", default-features = false }
arboard = { version = "3.2", default-features = false }
argh = "0.1.12"
array-init = "2.1"
arrow = { version = "53.1", default-features = false }
arrow2 = { package = "re_arrow2", version = "0.17" }
async-executor = "1.0"
backtrace = "0.3"
bincode = "1.3"
bit-vec = "0.7"
bitflags = { version = "2.4", features = ["bytemuck"] }
blackbox = "0.2.0"
bytemuck = { version = "1.18", features = ["extern_crate_alloc"] }
camino = "1.1"
cargo_metadata = "0.18"
cargo-run-wasm = "0.3.2"
cfg_aliases = "0.2"
cfg-if = "1.0"
clang-format = "0.3"
clap = "4.0"
clean-path = "0.2"
comfy-table = { version = "7.0", default-features = false }
console_error_panic_hook = "0.1.6"
convert_case = "0.6"
criterion = "0.5"
crossbeam = "0.8"
directories = "5"
document-features = "0.2.8"
econtext = "0.2" # Prints error contexts on crashes
ehttp = "0.5.0"
enumset = "1.0.12"
env_logger = { version = "0.10", default-features = false }
fixed = { version = "<1.28", default-features = false } # 1.28+ is MSRV 1.79+
flatbuffers = "23.0"
futures-channel = "0.3"
futures-util = { version = "0.3", default-features = false }
getrandom = "0.2"
glam = { version = "0.28", features = ["debug-glam-assert"] }
glob = "0.3"
gltf = "1.1"
half = "2.3.1"
hexasphere = "14.1.0"
image = { version = "0.25", default-features = false }
indent = "0.1"
indexmap = "2.1" # Version chosen to align with other dependencies
indicatif = "0.17.7" # Progress bar
infer = "0.15" # infer MIME type by checking the magic number signaturefer MIME type by checking the magic number signature
insta = "1.23"
itertools = "0.13"
js-sys = "0.3"
libc = "0.2"
linked-hash-map = { version = "0.5", default-features = false }
log = "0.4"
log-once = "0.4"
lz4_flex = "0.11"
memory-stats = "1.1"
mimalloc = "0.1.43"
mime_guess2 = "2.0" # infer MIME type by file extension, and map mime to file extension
mint = "0.5.9"
re_mp4 = "0.1.0"
natord = "1.0.9"
ndarray = "0.16"
ndarray-rand = "0.15"
never = "0.1"
nohash-hasher = "0.2"
notify = { version = "6.1.1", features = ["macos_kqueue"] }
num-derive = "0.4"
num-traits = "0.2"
numpy = "0.22"
once_cell = "1.17" # No lazy_static - use `std::sync::OnceLock` or `once_cell` instead
ordered-float = "4.2"
parking_lot = "0.12"
paste = "1.0"
pathdiff = "0.2"
pico-args = "0.5"
ply-rs = { version = "0.1", default-features = false }
poll-promise = "0.3"
polling = "2.2.0"
pollster = "0.3"
prettyplease = "0.2"
proc-macro2 = { version = "1.0", default-features = false }
profiling = { version = "1.0.12", default-features = false }
prost = "0.13.3"
puffin = "0.19.1"
puffin_http = "0.16"
pyo3 = "0.22.5"
pyo3-build-config = "0.22.5"
quote = "1.0"
rand = { version = "0.8", default-features = false }
rand_distr = { version = "0.4", default-features = false }
rayon = "1.7"
rfd = { version = "0.12", default-features = false, features = ["xdg-portal"] }
rmp-serde = "1"
ron = "0.8.0"
rust-format = "0.3"
seq-macro = "0.3"
serde = { version = "1", features = ["derive"] }
serde_bytes = "0.11"
serde_json = { version = "1", default-features = false, features = ["std"] }
serde_test = "1"
serde-wasm-bindgen = "0.6.5"
serde_yaml = { version = "0.9.21", default-features = false }
sha2 = "0.10"
similar-asserts = "1.4.2"
slotmap = { version = "1.0.6", features = ["serde"] }
smallvec = { version = "1.0", features = ["const_generics", "union"] }
static_assertions = "1.1"
strum = { version = "0.26", features = ["derive"] }
strum_macros = "0.26"
sublime_fuzzy = "0.7"
syn = "2.0"
sysinfo = { version = "0.30.1", default-features = false }
tempfile = "3.0"
thiserror = "1.0"
time = { version = "0.3.36", default-features = false, features = [
  "wasm-bindgen",
] }
tiny_http = { version = "0.12", default-features = false }
tinystl = { version = "0.0.3", default-features = false }
tinyvec = { version = "1.6", features = ["alloc", "rustc_1_55"] }
tobj = "4.0"
toml = { version = "0.8.10", default-features = false }
tonic = "0.12.3"
tonic-build = "0.12.3"
tracing = { version = "0.1", default-features = false }
tungstenite = { version = "0.23", default-features = false }
type-map = "0.5"
typenum = "1.15"
unindent = "0.2"
ureq = "2.9.2"
url = "2.3"
uuid = "1.1"
vec1 = "1.8"
walkdir = "2.0"
# NOTE: `rerun_js/web-viewer/build-wasm.mjs` is HIGHLY sensitive to changes in `wasm-bindgen`.
#       Whenever updating `wasm-bindgen`, update this and the narrower dependency specifications in
#       `crates/viewer/re_viewer/Cargo.toml`, and make sure that the build script still works.
#       Do not make this an `=` dependency, because that may break Rust users’ builds when a newer
#       version is released, even if they are not building the web viewer.
wasm-bindgen = "0.2.93"
wasm-bindgen-cli-support = "=0.2.93"
wasm-bindgen-futures = "0.4.33"
web-sys = "0.3"
web-time = "1.1.0"
webbrowser = "1.0"
winit = { version = "0.30.5", default-features = false }
# TODO(andreas): Try to get rid of `fragile-send-sync-non-atomic-wasm`. This requires re_renderer being aware of single-thread restriction on resources.
# See also https://gpuweb.github.io/gpuweb/explainer/#multithreading-transfer (unsolved part of the Spec as of writing!)
wgpu = { version = "22.1", default-features = false, features = [
  # Backends (see https://docs.rs/wgpu/latest/wgpu/#feature-flags)
  "webgl",
  "metal",
  "webgpu",
  #"vulkan", # Does not yet exist, wgpu enables this automatically on Linux & Windows.
  #"gl",     # Does not yet exist, wgpu enables this automatically on Linux & Windows.
  #"dx12",   # DX12 backend on wgpu isn't as stable. Also, we want to reduce the number of backends on native. Ideally we only have Vulkan & Metal, but we also keep GL as a manual fallback.
  #"angle",  # As above, we want to limit the numbers of backends we support. GL support via angle isn't great and we didn't need it so far.
  # Shader options:
  "wgsl",
  # Other:
  "fragile-send-sync-non-atomic-wasm",
] }
wgpu-core = "22.1"
wgpu-types = "22.0"
xshell = "0.2"
zip = { version = "0.6", default-features = false }


# ---------------------------------------------------------------------------------
[profile]

# Our dev profile has some optimizations turned on, as well as debug assertions.
[profile.dev]
opt-level = 1 # Make debug builds run faster
[profile.dev.package.re_video]
opt-level = 2 # Speed up CPU-side chroma-upsampling (TODO(#7298): move to GPU)

# panic = "abort" leads to better optimizations and smaller binaries (and is the default in Wasm anyways),
# but it also means backtraces don't work with the `backtrace` library (https://github.com/rust-lang/backtrace-rs/issues/397).
# egui has a feature where if you hold down all modifiers keys on your keyboard and hover any UI widget,
# you will see the backtrace to that widget, and we don't want to break that feature in dev builds.

[profile.dev.build-override]
debug = true # enable debug symbols for build scripts when building in dev (codegen backtraces!)

# Optimize all dependencies even in debug builds (does not affect workspace packages):
[profile.dev.package."*"]
opt-level = 2


[profile.release]
# debug = true # good for profilers
panic = "abort" # This leads to better optimizations and smaller binaries (and is the default in Wasm anyways).


[profile.bench]
debug = true


# Set up a `debugging` profile that turns of optimization of the workspace and select packages.
# Note that the profile name `debug` is reserved.
[profile.debugging]
inherits = "dev"
opt-level = 0
[profile.debugging.package.egui]
opt-level = 0 # we often debug egui via Rerun


# ---------------------------------------------------------------------------------


[workspace.lints.rust]
unsafe_code = "deny"

elided_lifetimes_in_paths = "warn"
future_incompatible = "warn"
nonstandard_style = "warn"
rust_2018_idioms = "warn"
rust_2021_prelude_collisions = "warn"
semicolon_in_expressions_from_macros = "warn"
trivial_numeric_casts = "warn"
unsafe_op_in_unsafe_fn = "warn"               # `unsafe_op_in_unsafe_fn` may become the default in future Rust versions: https://github.com/rust-lang/rust/issues/71668
unused_extern_crates = "warn"
unused_import_braces = "warn"
unused_lifetimes = "warn"

trivial_casts = "allow"
unused_qualifications = "allow"

[workspace.lints.rustdoc]
all = "warn"
missing_crate_level_docs = "warn"

# See also clippy.toml
[workspace.lints.clippy]
as_ptr_cast_mut = "warn"
await_holding_lock = "warn"
bool_to_int_with_if = "warn"
char_lit_as_u8 = "warn"
checked_conversions = "warn"
clear_with_drain = "warn"
cloned_instead_of_copied = "warn"
dbg_macro = "warn"
debug_assert_with_mut_call = "warn"
derive_partial_eq_without_eq = "warn"
disallowed_macros = "warn"                  # See clippy.toml
disallowed_methods = "warn"                 # See clippy.toml
disallowed_names = "warn"                   # See clippy.toml
disallowed_script_idents = "warn"           # See clippy.toml
disallowed_types = "warn"                   # See clippy.toml
doc_link_with_quotes = "warn"
doc_markdown = "warn"
empty_enum = "warn"
empty_enum_variants_with_brackets = "warn"
enum_glob_use = "warn"
equatable_if_let = "warn"
exit = "warn"
expl_impl_clone_on_copy = "warn"
explicit_deref_methods = "warn"
explicit_into_iter_loop = "warn"
explicit_iter_loop = "warn"
fallible_impl_from = "warn"
filter_map_next = "warn"
flat_map_option = "warn"
float_cmp_const = "warn"
fn_params_excessive_bools = "warn"
fn_to_numeric_cast_any = "warn"
from_iter_instead_of_collect = "warn"
get_unwrap = "warn"
if_let_mutex = "warn"
implicit_clone = "warn"
imprecise_flops = "warn"
index_refutable_slice = "warn"
inefficient_to_string = "warn"
infinite_loop = "warn"
into_iter_without_iter = "warn"
invalid_upcast_comparisons = "warn"
iter_filter_is_ok = "warn"
iter_filter_is_some = "warn"
iter_not_returning_iterator = "warn"
iter_on_empty_collections = "warn"
iter_on_single_items = "warn"
iter_without_into_iter = "warn"
large_digit_groups = "warn"
large_include_file = "warn"
large_stack_arrays = "warn"
large_stack_frames = "warn"
large_types_passed_by_value = "warn"
let_unit_value = "warn"
linkedlist = "warn"
lossy_float_literal = "warn"
macro_use_imports = "warn"
manual_assert = "warn"
manual_clamp = "warn"
manual_instant_elapsed = "warn"
manual_is_variant_and = "warn"
manual_let_else = "warn"
manual_ok_or = "warn"
manual_string_new = "warn"
map_err_ignore = "warn"
map_flatten = "warn"
match_on_vec_items = "warn"
match_same_arms = "warn"
match_wild_err_arm = "warn"
match_wildcard_for_single_variants = "warn"
mem_forget = "warn"
mismatched_target_os = "warn"
mismatching_type_param_order = "warn"
missing_enforced_import_renames = "warn"
missing_safety_doc = "warn"
mixed_attributes_style = "warn"
mut_mut = "warn"
mutex_integer = "warn"
needless_borrow = "warn"
needless_continue = "warn"
needless_for_each = "warn"
needless_pass_by_ref_mut = "warn"
needless_pass_by_value = "warn"
negative_feature_names = "warn"
nonstandard_macro_braces = "warn"
option_as_ref_cloned = "warn"
option_option = "warn"
path_buf_push_overwrite = "warn"
ptr_as_ptr = "warn"
ptr_cast_constness = "warn"
pub_underscore_fields = "warn"
pub_without_shorthand = "warn"
rc_mutex = "warn"
readonly_write_lock = "warn"
redundant_type_annotations = "warn"
ref_as_ptr = "warn"
ref_option_ref = "warn"
rest_pat_in_fully_bound_structs = "warn"
same_functions_in_if_condition = "warn"
semicolon_if_nothing_returned = "warn"
should_panic_without_expect = "warn"
significant_drop_tightening = "warn"
single_match_else = "warn"
str_split_at_newline = "warn"
str_to_string = "warn"
string_add = "warn"
string_add_assign = "warn"
string_lit_as_bytes = "warn"
string_lit_chars_any = "warn"
string_to_string = "warn"
suspicious_command_arg_space = "warn"
suspicious_xor_used_as_pow = "warn"
todo = "warn"
too_many_lines = "warn"
trailing_empty_array = "warn"
trait_duplication_in_bounds = "warn"
tuple_array_conversions = "warn"
unchecked_duration_subtraction = "warn"
undocumented_unsafe_blocks = "warn"
unimplemented = "warn"
uninhabited_references = "warn"
uninlined_format_args = "warn"
unnecessary_box_returns = "warn"
unnecessary_safety_doc = "warn"
unnecessary_struct_initialization = "warn"
unnecessary_wraps = "warn"
unnested_or_patterns = "warn"
unused_peekable = "warn"
unused_rounding = "warn"
unused_self = "warn"
unwrap_used = "warn"
use_self = "warn"
useless_transmute = "warn"
verbose_file_reads = "warn"
wildcard_dependencies = "warn"
wildcard_imports = "warn"
zero_sized_map_values = "warn"
# Disabled waiting on https://github.com/rust-lang/rust-clippy/issues/9602
#self_named_module_files = "warn"

assigning_clones = "allow"      # Too much for too little
manual_range_contains = "allow" # this one is just worse imho
map_unwrap_or = "allow"         # so is this one
ref_patterns = "allow"          # It's nice to avoid ref pattern, but there are some situations that are hard (impossible?) to express without.

# TODO(emilk): enable more of these lints:
iter_over_hash_type = "allow"
let_underscore_untyped = "allow"
missing_assert_message = "allow"
missing_errors_doc = "allow"

[patch.crates-io]
# Try to avoid patching crates! It prevents us from publishing the crates on crates.io.
# If you do patch always prefer to patch to a commit on the trunk of the upstream repo.
# If that is not possible, patch to a branch that has a PR open on the upstream repo.
# As a last resport, patch with a commit to our own repository.
# ALWAYS document what PR the commit hash is part of, or when it was merged into the upstream trunk.

# ecolor = { git = "https://github.com/emilk/egui.git", rev = "f97f85089df5e936999d5b7280e2e93e2958fac8" }      # egui master 2024-09-25
# eframe = { git = "https://github.com/emilk/egui.git", rev = "f97f85089df5e936999d5b7280e2e93e2958fac8" }      # egui master 2024-09-25
# egui = { git = "https://github.com/emilk/egui.git", rev = "f97f85089df5e936999d5b7280e2e93e2958fac8" }        # egui master 2024-09-25
# egui_extras = { git = "https://github.com/emilk/egui.git", rev = "f97f85089df5e936999d5b7280e2e93e2958fac8" } # egui master 2024-09-25
# egui-wgpu = { git = "https://github.com/emilk/egui.git", rev = "f97f85089df5e936999d5b7280e2e93e2958fac8" }   # egui master 2024-09-25
# emath = { git = "https://github.com/emilk/egui.git", rev = "f97f85089df5e936999d5b7280e2e93e2958fac8" }       # egui master 2024-09-25

# Useful while developing:
# ecolor = { path = "../../egui/crates/ecolor" }
# eframe = { path = "../../egui/crates/eframe" }
# egui = { path = "../../egui/crates/egui" }
# egui_extras = { path = "../../egui/crates/egui_extras" }
# egui-wgpu = { path = "../../egui/crates/egui-wgpu" }
# emath = { path = "../../egui/crates/emath" }

# egui_plot = { git = "https://github.com/emilk/egui_plot.git", rev = "1f6ae49a5f6bf43a869c215dea0d3028be8d742a" }
# egui_plot = { path = "../../egui_plot/egui_plot" }

# egui_tiles = { git = "https://github.com/rerun-io/egui_tiles", rev = "b2f5e232524deed983bcad01c05f27d0e8b89d98" } # https://github.com/rerun-io/egui_tiles/pull/78 2024-08-28
# egui_tiles = { path = "../egui_tiles" }

# egui_commonmark = { git = "https://github.com/rerun-io/egui_commonmark", rev = "7a9dc755bfa351a3796274cb8ca87129b051c084" } # https://github.com/lampsitter/egui_commonmark/pull/65

# commit on `rerun-io/re_arrow2` `main` branch
# https://github.com/rerun-io/re_arrow2/commit/e4717d6debc6d4474ec10db8f629f823f57bad07
re_arrow2 = { git = "https://github.com/rerun-io/re_arrow2", rev = "e4717d6debc6d4474ec10db8f629f823f57bad07" }

# dav1d = { path = "/home/cmc/dev/rerun-io/rav1d", package = "re_rav1d", version = "0.1.1" }
