[workspace]
resolver = "2"
members = ["crates/*", "examples/rust/*", "rerun_py", "run_wasm"]

[workspace.package]
authors = ["rerun.io <opensource@rerun.io>"]
edition = "2021"
homepage = "https://rerun.io"
include = ["../../LICENSE-APACHE", "../../LICENSE-MIT", "**/*.rs", "Cargo.toml"]
license = "MIT OR Apache-2.0"
repository = "https://github.com/rerun-io/rerun"
rust-version = "1.67"
version = "0.2.0-alpha.2"

[workspace.dependencies]
re_analytics = { path = "crates/re_analytics", version = "0.2.0-alpha.2" }
re_arrow_store = { path = "crates/re_arrow_store", version = "0.2.0-alpha.2" }
re_data_store = { path = "crates/re_data_store", version = "0.2.0-alpha.2" }
re_error = { path = "crates/re_error", version = "0.2.0-alpha.2" }
re_format = { path = "crates/re_format", version = "0.2.0-alpha.2" }
re_log = { path = "crates/re_log", version = "0.2.0-alpha.2" }
re_log_types = { path = "crates/re_log_types", version = "0.2.0-alpha.2" }
re_memory = { path = "crates/re_memory", version = "0.2.0-alpha.2" }
re_query = { path = "crates/re_query", version = "0.2.0-alpha.2" }
re_renderer = { path = "crates/re_renderer", version = "0.2.0-alpha.2" }
re_sdk = { path = "crates/re_sdk", version = "0.2.0-alpha.2" }
re_sdk_comms = { path = "crates/re_sdk_comms", version = "0.2.0-alpha.2" }
re_smart_channel = { path = "crates/re_smart_channel", version = "0.2.0-alpha.2" }
re_string_interner = { path = "crates/re_string_interner", version = "0.2.0-alpha.2" }
re_tensor_ops = { path = "crates/re_tensor_ops", version = "0.2.0-alpha.2" }
re_tuid = { path = "crates/re_tuid", version = "0.2.0-alpha.2" }
re_ui = { path = "crates/re_ui", version = "0.2.0-alpha.2" }
re_viewer = { path = "crates/re_viewer", version = "0.2.0-alpha.2" }
re_web_server = { path = "crates/re_web_server", version = "0.2.0-alpha.2" }
re_ws_comms = { path = "crates/re_ws_comms", version = "0.2.0-alpha.2" }
rerun = { path = "crates/rerun", version = "0.2.0-alpha.2" }

anyhow = "1.0"
arrow2 = "0.16"
arrow2_convert = "0.4.2"
comfy-table = { version = "6.1", default-features = false }
derive_more = "0.99"
ecolor = "0.21.0"
eframe = { version = "0.21.2", default-features = false }
egui = "0.21.0"
egui_dock = "0.4"
egui_extras = "0.21.0"
egui-wgpu = "0.21.0"
emath = "0.21.0"
epaint = "0.21.0"
glam = "0.22"
gltf = "1.1"
half = "2.0"
image = "0.24"
lazy_static = "1.4"
macaw = "0.18"
ndarray = "0.15"
polars-core = "0.27.1"
polars-lazy = "0.27.1"
polars-ops = "0.27.1"
puffin = "0.14"
reqwest = { version = "0.11", default-features = false }
thiserror = "1.0"
tokio = "1.24"
wgpu = { version = "0.15", default-features = false }
wgpu-core = { version = "0.15", default-features = false }


[profile.dev]
opt-level = 1 # Make debug builds run faster

# Optimize all dependencies even in debug builds (does not affect workspace packages):
[profile.dev.package."*"]
opt-level = 2

[profile.release]
# debug = true # good for profilers

[profile.bench]
debug = true


[patch.crates-io]
# Try to avoid patching crates! It prevents us from publishing the crates on crates.io.
# If you do patch always prefer to patch to a commit on the trunk of the upstream repo.
# If that is not possible, patch to a branch that has a PR open on the upstream repo.
# As a last resport, patch with a commit to our own repository.
# ALWAYS document what PR the commit hash is part of, or when it was merged into the upstream trunk.
